{"id":{"desc":"<p>pickion的 id，可以用于在其他元素中引用</p>\n"},"name":{"desc":"<p>pickion的 name，可以用于查询该 pickion</p>\n"},"dependency":{"desc":"<p>可传类型： (IGrammarBase[] | IGrammarBase | string[] | string)</p>\n<p>当前pickion依赖的其他元素，可以是元素的 id，也可以是元素本身</p>\n"},"type":{"desc":"<p>设置投影变换的类型；\n支持的类型有：</p>\n<ul>\n<li><code class=\"codespan\">&#39;albers&#39;</code></li>\n<li><code class=\"codespan\">&#39;albersusa&#39;</code></li>\n<li><code class=\"codespan\">&#39;azimuthalequalarea&#39;</code></li>\n<li><code class=\"codespan\">&#39;azimuthalequidistant&#39;</code></li>\n<li><code class=\"codespan\">&#39;conicconformal&#39;</code></li>\n<li><code class=\"codespan\">&#39;conicequalarea&#39;</code></li>\n<li><code class=\"codespan\">&#39;conicequidistant&#39;</code></li>\n<li><code class=\"codespan\">&#39;equalEarth&#39;</code></li>\n<li><code class=\"codespan\">&#39;equirectangular&#39;</code></li>\n<li><code class=\"codespan\">&#39;gnomonic&#39;</code></li>\n<li><code class=\"codespan\">&#39;identity&#39;</code></li>\n<li><code class=\"codespan\">&#39;mercator&#39;</code></li>\n<li><code class=\"codespan\">&#39;naturalEarth1&#39;</code></li>\n<li><code class=\"codespan\">&#39;orthographic&#39;</code></li>\n<li><code class=\"codespan\">&#39;stereographic&#39;</code></li>\n<li><code class=\"codespan\">&#39;transversemercator&#39;</code></li>\n</ul>\n"},"pointRadius":{"desc":"<p>如果指定了<code class=\"codespan\">pointRadius</code>，将<code class=\"codespan\">Point</code>和 <code class=\"codespan\">MultiPoint</code>之间的半径设置为指定的数值。\n如果没有指定<code class=\"codespan\">pointRadius</code>，则返回默认值 4.5。\n一般而言，<code class=\"codespan\">pontRadius</code>为数值类型的常数，但也可以指定为一个自定义函数。\n例如，如果您的 GeoJSON 数据具有其他属性，您可以在半径函数内访问这些属性以改变点的大小。</p>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">number</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; number;\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 <code class=\"codespan\">projection</code> 语法元素依赖的其他语法元素</p>\n"},"extent":{"desc":"<p>将投影的 viewPort 设置为指定的像素边界。\n<code class=\"codespan\">extent</code>的类型为：<code class=\"codespan\">[[x0，y0]，[x1，y1]]</code>，其中 x0 是视口的左侧，y0 是顶部，x1 是右侧，y1 是底部，单位都是<code class=\"codespan\">px</code>。\n如果范围为 null，则不执行视口剪裁。\n如果未指定范围，则返回当前视口剪裁范围，默认为 null。\n视口剪裁与通过 <code class=\"codespan\">projection.clipAngle</code> 进行的小圆剪裁是独立的。</p>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">[[number, number], [number, number]]</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; [[number, number], [number, number]];\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 <code class=\"codespan\">projection</code> 语法元素依赖的其他语法元素</p>\n"},"fit":{"desc":"<p>是否自适应调整策略，如果值为<code class=\"codespan\">true</code>，则自适应调整策略。支持两种类型的自适应策略:</p>\n<ul>\n<li><code class=\"codespan\">fitExtent</code></li>\n</ul>\n<p>读取<code class=\"codespan\">extent</code>配置，然后调用<code class=\"codespan\">d3</code>提供的<code class=\"codespan\">fitExtent</code>方法；将投影的比例尺（scale）和平移（translate）设置为适应给定范围内的指定 GeoJSON 对象的中心。</p>\n<p>例如，要将新泽西州平面投影（New Jersey State Plane projection）按比例缩放和平移以适应一个带有 20 像素填充的 960×500 边界框中的 GeoJSON 对象 nj 的中心：</p>\n<pre><code class=\"lang-js\">const projection = d3\n  .geoTransverseMercator()\n  .rotate([74 + 30 / 60, -38 - 50 / 60])\n  .fitExtent(\n    [\n      [20, 20],\n      [940, 480]\n    ],\n    nj\n  );\n</code></pre>\n<p>在确定新的比例尺和平移时，任何剪裁范围都会被忽略。用于计算给定对象的边界框的精度在有效比例尺为 150 时计算。</p>\n<ul>\n<li><code class=\"codespan\">fitSize</code></li>\n</ul>\n<p>读取<code class=\"codespan\">size</code>配置，然后调用<code class=\"codespan\">d3</code>提供的<code class=\"codespan\">fitSize</code>方法；\n设置<code class=\"codespan\">fitExtent</code>的快捷方式，等同于<code class=\"codespan\">fitExtent([[0, 0], [width, height]], ...)</code></p>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">boolean</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; boolean;\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 <code class=\"codespan\">projection</code> 语法元素依赖的其他语法元素</p>\n"},"size":{"desc":"<p>配合属性<code class=\"codespan\">fit</code> 共同设置<code class=\"codespan\">fitSize</code>；值的类型为二维数组，即<code class=\"codespan\">[width, height]</code>，单位为<code class=\"codespan\">px</code>;</p>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">[number, number]</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; [number, number];\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 <code class=\"codespan\">projection</code> 语法元素依赖的其他语法元素</p>\n"},"clipAngle":{"desc":"<p>投影的裁剪圆半径设置为指定的角度（以度为单位）。\n如果值为<code class=\"codespan\">null</code>，则切换到经线裁剪而不是小圆裁剪；小圆裁剪与通过 <code class=\"codespan\">projection.clipExtent</code> 进行的视口裁剪是相互独立的。</p>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">number</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; number;\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 <code class=\"codespan\">projection</code> 语法元素依赖的其他语法元素</p>\n"},"clipExtent":{"desc":"<p>将投影的 <strong>视口裁剪范围设置</strong> 设置为指定的像素边界；\n<code class=\"codespan\">clipExtent</code>的类型为：<code class=\"codespan\">[[x0，y0]，[x1，y1]]</code>，其中 x0 是视口的左侧，y0 是顶部，x1 是右侧，y1 是底部，单位都是<code class=\"codespan\">px</code>。\n如果范围为 null，则不执行视口剪裁。\n如果未指定范围，则返回当前视口剪裁范围，默认为 null。\n视口剪裁与通过 <code class=\"codespan\">projection.clipAngle</code> 进行的小圆剪裁是独立的。</p>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">[[number, number], [number, number]]</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; [[number, number], [number, number]];\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 <code class=\"codespan\">projection</code> 语法元素依赖的其他语法元素</p>\n"},"scale":{"desc":"<p>设置投影的比例尺，则将投影的比例因子设置为指定的值；不同投影类型，默认的比例尺对应的值不一样。\n比例尺与投影点之间的距离成线性关系；然而，不同投影之间的绝对比例因子并不等同</p>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">number</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; number;\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 <code class=\"codespan\">projection</code> 语法元素依赖的其他语法元素</p>\n"},"translate":{"desc":"<p>设置投影的平移量，单位为<code class=\"codespan\">px</code>，类型为<code class=\"codespan\">[number, number]</code>，默认值为<code class=\"codespan\">[480, 250]</code>；\n这个配置决定了投影的中心点，默认的投影中心点为是根据大小为 960*500 的一个区域，计算经纬度为(0, 0)的点得到的值</p>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">[number, number]</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; [number, number];\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 <code class=\"codespan\">projection</code> 语法元素依赖的其他语法元素</p>\n"},"center":{"desc":"<p>设置投影的中心点，单位为<code class=\"codespan\">deg</code>，类型为<code class=\"codespan\">[number, number]</code>，分别设置经纬度对应的值，默认值为<code class=\"codespan\">[0, 0]</code></p>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">[number, number]</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; [number, number];\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 <code class=\"codespan\">projection</code> 语法元素依赖的其他语法元素</p>\n"},"rotate":{"desc":"<p>设置投影的球面旋转角度，单位为<code class=\"codespan\">deg</code>，类型为<code class=\"codespan\">[number, number]</code> 或者<code class=\"codespan\">[number, number, number]</code>；\n如果值为二维数组，则表示<code class=\"codespan\">rotate[2]</code>的值为<code class=\"codespan\">0</code>，默认为[0, 0, 0]</p>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">[number, number] | [number, number, number]</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; [number, number] | [number, number, number];\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 <code class=\"codespan\">projection</code> 语法元素依赖的其他语法元素</p>\n"},"parallels":{"desc":"<p>锥形投影中定义地图布局的两个标准纬线，类型为<code class=\"codespan\">[number, number]</code></p>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">[number, number]</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; [number, number];\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 <code class=\"codespan\">projection</code> 语法元素依赖的其他语法元素</p>\n"},"precision":{"desc":"<p>将投影的自适应重采样的阈值设置为指定的像素值；该值对应于<strong>Douglas–Peucker</strong>距离；默认值为<code class=\"codespan\">Math.sqrt(0.5)</code></p>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">number</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; number;\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 <code class=\"codespan\">projection</code> 语法元素依赖的其他语法元素</p>\n"},"reflectX":{"desc":"<p>设置输出中是否反射（取反）x 维度；特殊场景下，需要从下方看到天空，或者某些天文数据场景，比较有用：当北方指向上方时，赤经（东方方向）将指向左侧。</p>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">boolean</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; boolean;\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 <code class=\"codespan\">projection</code> 语法元素依赖的其他语法元素</p>\n"},"reflectY":{"desc":"<p>设置输出中是否反射（取反）y 维度；</p>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">boolean</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; boolean;\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 <code class=\"codespan\">projection</code> 语法元素依赖的其他语法元素</p>\n"},"coefficient":{"desc":"<p>仅适用于<code class=\"codespan\">type=&quot;hammer&quot;</code>类型的<code class=\"codespan\">projection</code>;</p>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">number</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; number;\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 <code class=\"codespan\">projection</code> 语法元素依赖的其他语法元素</p>\n"},"distance":{"desc":"<p>仅适用于<code class=\"codespan\">type=&quot;satellite&quot;</code> 类型的<code class=\"codespan\">projection</code>；</p>\n<p>视角点到球体中心的距离 / 球体半径，默认为 2.0。对于给定的距离，建议的最大裁剪角度为<code class=\"codespan\">acos(1 / distance)</code>转换为度数。\n如果还应用了倾斜，则可能需要更保守的裁剪。要进行精确裁剪，需要使用正在开发中的地理投影流水线；</p>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">number</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; number;\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 <code class=\"codespan\">projection</code> 语法元素依赖的其他语法元素</p>\n"},"fraction":{"desc":"<p>仅适用于<code class=\"codespan\">type=&quot;bottomley&quot;</code> 类型的<code class=\"codespan\">projection</code>；</p>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">number</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; number;\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 <code class=\"codespan\">projection</code> 语法元素依赖的其他语法元素</p>\n"},"lobes":{"desc":"<p>仅在以下几个类型的投影中，支持配置</p>\n<ul>\n<li><code class=\"codespan\">&#39;berghaus&#39;</code> 设置投影结果中，星形图的叶数；默认值为 5</li>\n<li><code class=\"codespan\">&#39;gingery&#39;</code> 设置投影结果中，星形图的叶数；默认值为 6</li>\n<li><code class=\"codespan\">&#39;healpix&#39;</code> 设置投影结果的叶数，默认值为 4</li>\n<li><code class=\"codespan\">&#39;interrupted&#39;</code> 设置新的半叶数组</li>\n</ul>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">number</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; number;\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 <code class=\"codespan\">projection</code> 语法元素依赖的其他语法元素</p>\n"},"parallel":{"desc":"<p>设置纬线值；支持该配置的投影类型和默认值如下：</p>\n<ul>\n<li><code class=\"codespan\">&#39;armadillo&#39;</code> 默认值为 20</li>\n<li><code class=\"codespan\">&#39;bonne&#39;</code> 默认值为 45</li>\n<li><code class=\"codespan\">&#39;craig&#39;</code> 默认值为 0</li>\n<li><code class=\"codespan\">&#39;cylindricalEqualArea&#39;</code> 默认值为 38.58</li>\n<li><code class=\"codespan\">&#39;cylindricalStereographic&#39;</code> 默认值为 0</li>\n<li><code class=\"codespan\">&#39;hammerRetroazimuthal&#39;</code> 默认值为 45</li>\n<li><code class=\"codespan\">&#39;loximuthal&#39;</code> 默认值为 40</li>\n<li><code class=\"codespan\">&#39;rectangularPolyconic&#39;</code> 默认值为 0</li>\n</ul>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">number</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; number;\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 <code class=\"codespan\">projection</code> 语法元素依赖的其他语法元素</p>\n"},"radius":{"desc":"<p>设置半径；支持该配置的投影类型和默认值如下：</p>\n<ul>\n<li><code class=\"codespan\">&#39;gingery&#39;</code> 默认值为 30</li>\n<li><code class=\"codespan\">&#39;airy&#39;</code> 默认值为 90</li>\n</ul>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">number</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; number;\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 <code class=\"codespan\">projection</code> 语法元素依赖的其他语法元素</p>\n"},"ratio":{"desc":"<p>支持该配置的投影类型和默认值如下：</p>\n<ul>\n<li><code class=\"codespan\">&#39;hill&#39;</code> 默认值为 1</li>\n<li><code class=\"codespan\">&#39;wagner&#39;</code> 默认值为 200</li>\n<li><code class=\"codespan\">&#39;hufnagel&#39;</code></li>\n</ul>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">number</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; number;\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 <code class=\"codespan\">projection</code> 语法元素依赖的其他语法元素</p>\n"},"spacing":{"desc":"<p>支持该配置的投影类型和默认值如下：</p>\n<ul>\n<li><code class=\"codespan\">&#39;lagrange&#39;</code> 默认值为 0.5</li>\n</ul>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">number</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; number;\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 <code class=\"codespan\">projection</code> 语法元素依赖的其他语法元素</p>\n"},"tilt":{"desc":"<p>支持该配置的投影类型和默认值如下：</p>\n<ul>\n<li><code class=\"codespan\">&#39;satellite&#39;</code> 默认值为 0</li>\n</ul>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">number</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; number;\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 <code class=\"codespan\">projection</code> 语法元素依赖的其他语法元素</p>\n"}}