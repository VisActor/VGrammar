{"id":{"desc":"<p>mark的 id，可以用于在其他元素中引用</p>\n"},"name":{"desc":"<p>mark的 name，可以用于查询该 mark</p>\n"},"dependency":{"desc":"<p>可传类型： (IGrammarBase[] | IGrammarBase | string[] | string)</p>\n<p>当前mark依赖的其他元素，可以是元素的 id，也可以是元素本身</p>\n"},"rect":{"desc":"<p><strong> 矩形图元 </strong></p>\n"},"rect.type":{"desc":"<p>设置图元类型为 <code class=\"codespan\">rect</code></p>\n"},"rect.encode":{"desc":"<p>设置图元的视觉通道编码，默认支持三种数据变化状态：</p>\n<ul>\n<li><code class=\"codespan\">enter</code> 新增数据元素</li>\n<li><code class=\"codespan\">update</code> 数据元素更新</li>\n<li><code class=\"codespan\">exit</code> 数据元素被删除</li>\n</ul>\n<p>注意，这里的数据状态是根据<code class=\"codespan\">mark</code>的<code class=\"codespan\">key</code>自动生成的，我们会针对<code class=\"codespan\">mark</code>的绑定数据，根据<code class=\"codespan\">key</code>的配置，计算数据对应的唯一标志符，数据更新后，如果对应的唯一标志符不存在了，则状态为<code class=\"codespan\">exit</code>，如果存在，则为<code class=\"codespan\">update</code>；如果之前的数据不存在改唯一标志符，则数据元素对应的状态为<code class=\"codespan\">enter</code></p>\n<p>默认支持一种交互状态：</p>\n<ul>\n<li><code class=\"codespan\">hover</code> 鼠标 hover 到具体的图形上，给图形设置对应的视觉通道编码</li>\n</ul>\n"},"rect.encode.enter":{"desc":"<p>设置图元在数据初始化状态执行的视觉通道映射，注意数据更新的时候不再执行</p>\n"},"rect.encode.enter.width":{"desc":"<p>图元的宽度</p>\n"},"rect.encode.enter.height":{"desc":"<p>图元的高度</p>\n"},"rect.encode.enter.borderRadius":{"desc":"<p>设置圆角，默认为 0，支持两种格式的设置：</p>\n<ul>\n<li><code class=\"codespan\">number</code>: 给四个角度设置统一的圆角</li>\n<li><code class=\"codespan\">number[]</code>: 分别给四个角度设置不同的圆角<ul>\n<li>当数组的长度为<code class=\"codespan\">1</code>，给四个角设置相同的圆角</li>\n<li>当数组的长度为<code class=\"codespan\">2</code>或者<code class=\"codespan\">3</code>，给<strong>左上角</strong>和<strong>右下角</strong>设置圆角长度为<code class=\"codespan\">borderRadius[0]</code>,给<strong>右上角</strong>和<strong>左下角</strong>设置圆角长度为<code class=\"codespan\">borderRadius[1]</code></li>\n<li>当数组的长度为<code class=\"codespan\">4</code>及以上，四个角度设置不同的圆角</li>\n</ul>\n</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"rect.encode.enter.x":{"desc":"<p>图元的 x 坐标</p>\n"},"rect.encode.enter.y":{"desc":"<p>图元 y 坐标</p>\n"},"rect.encode.enter.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"rect.encode.enter.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"rect.encode.enter.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"rect.encode.enter.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"rect.encode.enter.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"rect.encode.enter.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"rect.encode.enter.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"rect.encode.enter.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"rect.encode.enter.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"rect.encode.enter.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"rect.encode.enter.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"rect.encode.enter.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"rect.encode.enter.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"rect.encode.enter.outerBorder":{"desc":"<p>外描边</p>\n"},"rect.encode.enter.innerBorder":{"desc":"<p>内描边</p>\n"},"rect.encode.enter.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"rect.encode.enter.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"rect.encode.enter.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"rect.encode.enter.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"rect.encode.enter.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"rect.encode.enter.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"rect.encode.enter.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"rect.encode.enter.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"rect.encode.enter.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"rect.encode.enter.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"rect.encode.enter.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"rect.encode.enter.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"rect.encode.enter.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"rect.encode.enter.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"rect.encode.enter.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"rect.encode.enter.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"rect.encode.enter.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"rect.encode.enter.texture":{"desc":"<p>图元纹理</p>\n"},"rect.encode.enter.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"rect.encode.enter.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"rect.encode.enter.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"rect.encode.enter.blur":{"desc":"<p>图元边缘模糊</p>\n"},"rect.encode.enter.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"rect.encode.update":{"desc":"<p>设置图元在数据更新状态执行的视觉通道映射</p>\n"},"rect.encode.update.width":{"desc":"<p>图元的宽度</p>\n"},"rect.encode.update.height":{"desc":"<p>图元的高度</p>\n"},"rect.encode.update.borderRadius":{"desc":"<p>设置圆角，默认为 0，支持两种格式的设置：</p>\n<ul>\n<li><code class=\"codespan\">number</code>: 给四个角度设置统一的圆角</li>\n<li><code class=\"codespan\">number[]</code>: 分别给四个角度设置不同的圆角<ul>\n<li>当数组的长度为<code class=\"codespan\">1</code>，给四个角设置相同的圆角</li>\n<li>当数组的长度为<code class=\"codespan\">2</code>或者<code class=\"codespan\">3</code>，给<strong>左上角</strong>和<strong>右下角</strong>设置圆角长度为<code class=\"codespan\">borderRadius[0]</code>,给<strong>右上角</strong>和<strong>左下角</strong>设置圆角长度为<code class=\"codespan\">borderRadius[1]</code></li>\n<li>当数组的长度为<code class=\"codespan\">4</code>及以上，四个角度设置不同的圆角</li>\n</ul>\n</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"rect.encode.update.x":{"desc":"<p>图元的 x 坐标</p>\n"},"rect.encode.update.y":{"desc":"<p>图元 y 坐标</p>\n"},"rect.encode.update.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"rect.encode.update.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"rect.encode.update.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"rect.encode.update.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"rect.encode.update.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"rect.encode.update.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"rect.encode.update.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"rect.encode.update.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"rect.encode.update.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"rect.encode.update.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"rect.encode.update.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"rect.encode.update.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"rect.encode.update.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"rect.encode.update.outerBorder":{"desc":"<p>外描边</p>\n"},"rect.encode.update.innerBorder":{"desc":"<p>内描边</p>\n"},"rect.encode.update.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"rect.encode.update.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"rect.encode.update.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"rect.encode.update.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"rect.encode.update.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"rect.encode.update.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"rect.encode.update.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"rect.encode.update.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"rect.encode.update.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"rect.encode.update.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"rect.encode.update.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"rect.encode.update.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"rect.encode.update.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"rect.encode.update.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"rect.encode.update.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"rect.encode.update.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"rect.encode.update.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"rect.encode.update.texture":{"desc":"<p>图元纹理</p>\n"},"rect.encode.update.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"rect.encode.update.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"rect.encode.update.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"rect.encode.update.blur":{"desc":"<p>图元边缘模糊</p>\n"},"rect.encode.update.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"rect.encode.exit":{"desc":"<p>设置图元在数据被删除的状态下执行的视觉通道映射</p>\n"},"rect.encode.exit.width":{"desc":"<p>图元的宽度</p>\n"},"rect.encode.exit.height":{"desc":"<p>图元的高度</p>\n"},"rect.encode.exit.borderRadius":{"desc":"<p>设置圆角，默认为 0，支持两种格式的设置：</p>\n<ul>\n<li><code class=\"codespan\">number</code>: 给四个角度设置统一的圆角</li>\n<li><code class=\"codespan\">number[]</code>: 分别给四个角度设置不同的圆角<ul>\n<li>当数组的长度为<code class=\"codespan\">1</code>，给四个角设置相同的圆角</li>\n<li>当数组的长度为<code class=\"codespan\">2</code>或者<code class=\"codespan\">3</code>，给<strong>左上角</strong>和<strong>右下角</strong>设置圆角长度为<code class=\"codespan\">borderRadius[0]</code>,给<strong>右上角</strong>和<strong>左下角</strong>设置圆角长度为<code class=\"codespan\">borderRadius[1]</code></li>\n<li>当数组的长度为<code class=\"codespan\">4</code>及以上，四个角度设置不同的圆角</li>\n</ul>\n</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"rect.encode.exit.x":{"desc":"<p>图元的 x 坐标</p>\n"},"rect.encode.exit.y":{"desc":"<p>图元 y 坐标</p>\n"},"rect.encode.exit.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"rect.encode.exit.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"rect.encode.exit.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"rect.encode.exit.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"rect.encode.exit.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"rect.encode.exit.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"rect.encode.exit.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"rect.encode.exit.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"rect.encode.exit.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"rect.encode.exit.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"rect.encode.exit.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"rect.encode.exit.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"rect.encode.exit.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"rect.encode.exit.outerBorder":{"desc":"<p>外描边</p>\n"},"rect.encode.exit.innerBorder":{"desc":"<p>内描边</p>\n"},"rect.encode.exit.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"rect.encode.exit.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"rect.encode.exit.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"rect.encode.exit.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"rect.encode.exit.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"rect.encode.exit.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"rect.encode.exit.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"rect.encode.exit.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"rect.encode.exit.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"rect.encode.exit.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"rect.encode.exit.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"rect.encode.exit.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"rect.encode.exit.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"rect.encode.exit.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"rect.encode.exit.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"rect.encode.exit.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"rect.encode.exit.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"rect.encode.exit.texture":{"desc":"<p>图元纹理</p>\n"},"rect.encode.exit.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"rect.encode.exit.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"rect.encode.exit.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"rect.encode.exit.blur":{"desc":"<p>图元边缘模糊</p>\n"},"rect.encode.exit.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"rect.encode.hover":{"desc":"<p>设置<code class=\"codespan\">hover</code>状态的时候，图元对应的视觉通道映射</p>\n"},"rect.encode.hover.width":{"desc":"<p>图元的宽度</p>\n"},"rect.encode.hover.height":{"desc":"<p>图元的高度</p>\n"},"rect.encode.hover.borderRadius":{"desc":"<p>设置圆角，默认为 0，支持两种格式的设置：</p>\n<ul>\n<li><code class=\"codespan\">number</code>: 给四个角度设置统一的圆角</li>\n<li><code class=\"codespan\">number[]</code>: 分别给四个角度设置不同的圆角<ul>\n<li>当数组的长度为<code class=\"codespan\">1</code>，给四个角设置相同的圆角</li>\n<li>当数组的长度为<code class=\"codespan\">2</code>或者<code class=\"codespan\">3</code>，给<strong>左上角</strong>和<strong>右下角</strong>设置圆角长度为<code class=\"codespan\">borderRadius[0]</code>,给<strong>右上角</strong>和<strong>左下角</strong>设置圆角长度为<code class=\"codespan\">borderRadius[1]</code></li>\n<li>当数组的长度为<code class=\"codespan\">4</code>及以上，四个角度设置不同的圆角</li>\n</ul>\n</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"rect.encode.hover.x":{"desc":"<p>图元的 x 坐标</p>\n"},"rect.encode.hover.y":{"desc":"<p>图元 y 坐标</p>\n"},"rect.encode.hover.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"rect.encode.hover.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"rect.encode.hover.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"rect.encode.hover.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"rect.encode.hover.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"rect.encode.hover.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"rect.encode.hover.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"rect.encode.hover.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"rect.encode.hover.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"rect.encode.hover.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"rect.encode.hover.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"rect.encode.hover.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"rect.encode.hover.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"rect.encode.hover.outerBorder":{"desc":"<p>外描边</p>\n"},"rect.encode.hover.innerBorder":{"desc":"<p>内描边</p>\n"},"rect.encode.hover.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"rect.encode.hover.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"rect.encode.hover.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"rect.encode.hover.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"rect.encode.hover.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"rect.encode.hover.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"rect.encode.hover.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"rect.encode.hover.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"rect.encode.hover.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"rect.encode.hover.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"rect.encode.hover.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"rect.encode.hover.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"rect.encode.hover.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"rect.encode.hover.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"rect.encode.hover.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"rect.encode.hover.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"rect.encode.hover.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"rect.encode.hover.texture":{"desc":"<p>图元纹理</p>\n"},"rect.encode.hover.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"rect.encode.hover.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"rect.encode.hover.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"rect.encode.hover.blur":{"desc":"<p>图元边缘模糊</p>\n"},"rect.encode.hover.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"rect.animationState":{"desc":"<p>类型：<code class=\"codespan\">MarkFunctionType</code>\n是否必传： 否\nanimation attributes</p>\n"},"rect.animation":{"desc":"<p>支持设置各种状态对应的动画，数据驱动的动画状态有三种：</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>交互触发的状态变更，通过统一的交互动画进行配置，配置的 key 为 <code class=\"codespan\">state</code></p>\n"},"rect.animation.type":{"desc":"<p>动画执行类型，指定特定的内置动画执行效果</p>\n<p>通用的内置动画类型包括：</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: 渐入渐出动画</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: 缩放动画</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: 移入移出动画</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: 旋转动画</li>\n<li><code class=\"codespan\">update</code>: 更新动画</li>\n</ul>\n<p>rect图元支持的额外动画类型包括：</p>\n<ul>\n<li><code class=\"codespan\">growHeightIn</code>/<code class=\"codespan\">growHeightOut</code>: 高度生长动画</li>\n<li><code class=\"codespan\">growWidthIn</code>/<code class=\"codespan\">growWidthOut</code>: 宽度生长动画</li>\n<li><code class=\"codespan\">growCenterIn</code>/<code class=\"codespan\">growCenterOut</code>: 中心生长动画</li>\n</ul>\n"},"rect.animation.channel":{"desc":"<p>动画执行前后的视觉通道，与 <code class=\"codespan\">type</code> 配置冲突</p>\n"},"rect.animation.custom":{"desc":"<p>自定义动画，如果设定了自定义动画配置则会替换默认的视觉通道插值逻辑</p>\n"},"rect.animation.customParameters":{"desc":"<p>自定义动画参数</p>\n"},"rect.animation.easing":{"desc":"<p>动画缓动，默认为 <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"rect.animation.delay":{"desc":"<p>动画执行的延迟时间，默认为 0</p>\n"},"rect.animation.duration":{"desc":"<p>动画执行时长，默认为 1000ms</p>\n"},"rect.animation.oneByOne":{"desc":"<p>动画依次执行的延迟时长，如果配置为 <code class=\"codespan\">true</code> 则会在上一个元素动画执行结束后执行下一个元素的动画，默认为 <code class=\"codespan\">false</code></p>\n"},"rect.animation.startTime":{"desc":"<p>动画执行的初始时间，这一初始时间不会在循环动画中被重复应用，默认为 0</p>\n"},"rect.animation.totalTime":{"desc":"<p>动画执行的最大时间，如果动画执行到达设定时间将会被终止</p>\n"},"rect.animation.loop":{"desc":"<p>动画循环次数，如果配置为 <code class=\"codespan\">true</code> 则会无限循环</p>\n"},"rect.animation.options":{"desc":"<p>特定动画类型执行时设定的额外参数</p>\n"},"rect.animation.controlOptions":{"desc":"<p>动画执行逻辑的控制参数：</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: 当动画状态变更时是否立即终止自身动画</li>\n<li><code class=\"codespan\">immediatelyApply</code>: 是否立即应用动画初始的视觉通道</li>\n</ul>\n"},"rect.zIndex":{"desc":"<p>设置<code class=\"codespan\">mark</code>图元对应的容器图形(group)的 zIndex</p>\n"},"rect.interactive":{"desc":"<p>类型：<code class=\"codespan\">boolean</code>\n是否必传： 否</p>\n"},"rect.context":{"desc":"<p>设置图元的上下文参数</p>\n"},"rect.setCustomizedShape":{"desc":"<p>设置自定义形状的回调函数，对应的 ts 类型定位如下：</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>其中<code class=\"codespan\">ICustomPath2D</code> 为 VRender 提供的绘制自定义的路径一个工具类</p>\n"},"rect.support3d":{"desc":"<p>当画布设置了 3d 视角的时候，是否支持 3d 模式</p>\n"},"rect.group":{"desc":"<p>设置父图元，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 父图元对应的 id</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> 父图元对应的语法元素，一般用于 API 调用场景</li>\n</ul>\n<p>如果不设置，会默认挂在到画布的根节点下面</p>\n"},"rect.from":{"desc":"<p>ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>通过<code class=\"codespan\">data</code> 属性值，申明图元依赖的数据</p>\n"},"rect.key":{"desc":"<p>设置图元数据元素的唯一标志符，用于计算图形元素的数据状态，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"rect.sort":{"desc":"<p>对图元中的所有图形元素进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"rect.groupBy":{"desc":"<p>设置分组的属性，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置分组<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析分组<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"rect.groupSort":{"desc":"<p>对图元中的分组进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"rect.coordinate":{"desc":"<p>设置该图元关联的坐标系对应的 id 或者坐标系对应的图形元素</p>\n"},"rect.state":{"desc":"<p>设置当前图元所有图形元素的状态值，支持三种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置图形的状态，比如说:<code class=\"codespan\">{ state: &#39;selected&#39;}</code> 就是给所有的图形设置状态为<code class=\"codespan\">&#39;selected&#39;</code>，通常这种情况，<code class=\"codespan\">encode</code> 中也会设置<code class=\"codespan\">&#39;selected&#39;</code>状态对应的图形通道映射</li>\n<li><code class=\"codespan\">string[]</code> 给图形设置多个状态，可以配置<code class=\"codespan\">stateSort</code>来影响对应状态执行图形通道映射的顺序</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析状态值的回调函数，返回参数为<code class=\"codespan\">string | string[]</code>，对应的 ts 类型定义为：</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"rect.stateSort":{"desc":"<p>设置当前图元所有图形元素的状态值的排序函数，会影响状态对应的图形通道映射的顺序，最先执行的状态可能被后续的状态覆盖图形通道映射结果，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"rect.transform":{"desc":"<p>设置图元对应的变换，所有的数据变换都可以配置在图元上，用于对图元的<code class=\"codespan\">join data</code> 执行变换；\n另外一种类型的变换就是对图形元素执行的变换，比如说<code class=\"codespan\">dodge</code>；\n通用的类型定义如下：</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>每中变换支持的参数不同</p>\n"},"rect.layout":{"desc":"<p>设置图元的布局参数，图元在参与布局的时候，存在两种角色：</p>\n<ul>\n<li>&#39;container&#39; 容器图元，一般是<code class=\"codespan\">group</code>图元</li>\n<li>&#39;item&#39; 布局子元素，作为容器图元的子节点</li>\n</ul>\n<p>注意，我们仅支持一层布局，如果是多层嵌套布局，建议使用自定义的布局方案进行实现；</p>\n<p>现在支持两种内容的布局：<code class=\"codespan\">grid</code> 布局 和 <code class=\"codespan\">relative</code>布局，相关类型定义如下</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>如果想要设置自定义的布局方案，<code class=\"codespan\">layout</code>也支持直接设置回调函数，回调函数的定义如下：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"rect.layout.display":{"desc":"<p>容器图元设置布局的类型，支持两种配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> 相对布局</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> 网格布局</li>\n</ul>\n"},"rect.layout.callback":{"desc":"<p>自定义该图元的回调函数，ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"rect.layout.skipBeforeLayouted":{"desc":"<p>在布局完成前，跳过执行阶段</p>\n"},"rect.layout.updateViewSignals":{"desc":"<p>是否更新默认的视图信号，也就是：<code class=\"codespan\">padding</code>、<code class=\"codespan\">viewWidth</code> 和 <code class=\"codespan\">viewHeight</code></p>\n<p>只能在设置了<code class=\"codespan\">{ layout: { display: &#39;relative&#39;} }</code>的容器图元上设置该属性</p>\n"},"rect.layout.maxChildWidth":{"desc":"<p>相对布局的父图元，设置子图元的最大宽度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的宽度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"rect.layout.maxChildHeight":{"desc":"<p>相对布局的父图元，设置子图元的最大高度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的高度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"rect.layout.position":{"desc":"<p>设置相对布局的子图元的位置，支持的配置有：</p>\n<ul>\n<li>&#39;top&#39; 相对于父图元的顶部</li>\n<li>&#39;bottom&#39; 相对于父图元的底部</li>\n<li>&#39;left&#39; 相对于父图元的左侧</li>\n<li>&#39;right&#39; 相对于父图元的右侧</li>\n<li>&#39;content&#39; 相对于父图元的中心，也就是内容区域</li>\n<li>&#39;auto&#39; 图元设置了坐标系的时候，根据关联的<code class=\"codespan\">scale</code>，自定计算相对于父图元的位置</li>\n</ul>\n"},"rect.layout.padding":{"desc":"<p>子图元内边距，单位 px，默认各方向内边距为 0，接受数值、数值数组以及对象设置。</p>\n<p>使用示例：</p>\n<pre><code class=\"lang-ts\">// 数值类型，设置内边距为 5\npadding: 5;\n// 数值数组，设置上下的内边距为 5，左右的内边距为 10，用法同 CSS 盒模型\npadding: [5, 10];\n// 数值数组，分别设置四个方向的内边距\npadding: [\n  5, // 上\n  10, // 右\n  5, // 下\n  10 // 左\n];\n// 对象类型\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"rect.layout.gridTemplateRows":{"desc":"<p>网格布局的父图元设置行的高度</p>\n"},"rect.layout.gridTemplateColumns":{"desc":"<p>网格布局的父图元设置列的宽度</p>\n"},"rect.layout.gridRowGap":{"desc":"<p>网格布局的父图元设置行行距</p>\n"},"rect.layout.gridColumnGap":{"desc":"<p>网格布局的父图元设置列间距</p>\n"},"rect.layout.gridRowStart":{"desc":"<p>网格布局的子图元设置行开始的位置</p>\n"},"rect.layout.gridRowEnd":{"desc":"<p>网格布局的子图元设置行结束的位置</p>\n"},"rect.layout.gridColumnStart":{"desc":"<p>网格布局的子图元设置列开始的位置</p>\n"},"rect.layout.gridColumnEnd":{"desc":"<p>网格布局的子图元设置列结束的位置</p>\n"},"rect.large":{"desc":"<p>是否开启大数据渲染模式</p>\n"},"rect.largeThreshold":{"desc":"<p>开启大数据渲染优化的阀值，对应的是 data 的长度</p>\n"},"rect.progressiveStep":{"desc":"<p>开启分片渲染的步长，对应的是分片的数据长度</p>\n"},"rect.progressiveThreshold":{"desc":"<p>开启分片渲染的阀值，对应的是单系列 data 的长度</p>\n"},"rect.morph":{"desc":"<p>是否对当前图元开启全局的过渡形变动画</p>\n"},"rect.morphKey":{"desc":"<p>用于匹配全局过渡形变动画的图元，具有相对的<code class=\"codespan\">morphKey</code>的图元，会进行形变动画</p>\n"},"rect.morphElementKey":{"desc":"<p>对于匹配上的前后图元，通过该配置，进行图形元素的匹配；如果不申明，我们默认会读取<code class=\"codespan\">key</code>配置，用于匹配图形元素，进行形变动画；\n默认支持一对一、一对多、多对一的图形形变动画</p>\n"},"arc":{"desc":"<p><strong> arc 图元 </strong></p>\n"},"arc.type":{"desc":"<p>设置图元类型为 <code class=\"codespan\">arc</code></p>\n"},"arc.encode":{"desc":"<p>设置图元的视觉通道编码，默认支持三种数据变化状态：</p>\n<ul>\n<li><code class=\"codespan\">enter</code> 新增数据元素</li>\n<li><code class=\"codespan\">update</code> 数据元素更新</li>\n<li><code class=\"codespan\">exit</code> 数据元素被删除</li>\n</ul>\n<p>注意，这里的数据状态是根据<code class=\"codespan\">mark</code>的<code class=\"codespan\">key</code>自动生成的，我们会针对<code class=\"codespan\">mark</code>的绑定数据，根据<code class=\"codespan\">key</code>的配置，计算数据对应的唯一标志符，数据更新后，如果对应的唯一标志符不存在了，则状态为<code class=\"codespan\">exit</code>，如果存在，则为<code class=\"codespan\">update</code>；如果之前的数据不存在改唯一标志符，则数据元素对应的状态为<code class=\"codespan\">enter</code></p>\n<p>默认支持一种交互状态：</p>\n<ul>\n<li><code class=\"codespan\">hover</code> 鼠标 hover 到具体的图形上，给图形设置对应的视觉通道编码</li>\n</ul>\n"},"arc.encode.enter":{"desc":"<p>设置图元在数据初始化状态执行的视觉通道映射，注意数据更新的时候不再执行</p>\n"},"arc.encode.enter.innerRadius":{"desc":"<p>内半径</p>\n"},"arc.encode.enter.outerRadius":{"desc":"<p>外半径</p>\n"},"arc.encode.enter.startAngle":{"desc":"<p>圆弧的起始角度；\n以弧度的形式指定，0 表示 12 点钟方向并且顺时针方向为正。\n如果 <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code> 则会绘制一个完整的扇形或圆环</p>\n"},"arc.encode.enter.endAngle":{"desc":"<p>圆弧的终止角度；\n以弧度的形式指定，0 表示 12 点钟方向并且顺时针方向为正。\n如果 <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code> 则会绘制一个完整的扇形或圆环</p>\n"},"arc.encode.enter.padAngle":{"desc":"<p>间隙角度；间隔角度会转换为一个在两个相邻的弧之间的确定的线性距离，定义为 <code class=\"codespan\">padRadius * | padAngle |</code></p>\n<p>这个距离在弧的开始和结束处都是相等的；\n间隔角度通常只应用于环形扇区（即当内半径大于 0）</p>\n"},"arc.encode.enter.padRadius":{"desc":"<p>配合<code class=\"codespan\">padAngle</code>一起使用</p>\n"},"arc.encode.enter.cap":{"desc":"<p>对应了线段的 lineCap 属性，lineCap 表示的是线段末端如何绘制，支持两种类型的设置</p>\n<ul>\n<li><p><code class=\"codespan\">boolean</code>: <code class=\"codespan\">cap: true</code> 表示在弧线的起始位置都增加一个角度，角度是 <code class=\"codespan\">| outerRadius - innerRadius | / outerRadius</code></p>\n</li>\n<li><p><code class=\"codespan\">[boolean, boolean]</code>: 针对首尾设置不同的末端绘制策略</p>\n</li>\n</ul>\n"},"arc.encode.enter.forceShowCap":{"desc":"<p>当 cap = true 并且 使用了渐变填充的时候，自动实现 conical 渐变，也就是环形的渐变</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"arc.encode.enter.x":{"desc":"<p>图元的 x 坐标</p>\n"},"arc.encode.enter.y":{"desc":"<p>图元 y 坐标</p>\n"},"arc.encode.enter.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"arc.encode.enter.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"arc.encode.enter.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"arc.encode.enter.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"arc.encode.enter.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"arc.encode.enter.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"arc.encode.enter.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"arc.encode.enter.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"arc.encode.enter.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"arc.encode.enter.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"arc.encode.enter.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"arc.encode.enter.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"arc.encode.enter.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"arc.encode.enter.outerBorder":{"desc":"<p>外描边</p>\n"},"arc.encode.enter.innerBorder":{"desc":"<p>内描边</p>\n"},"arc.encode.enter.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"arc.encode.enter.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"arc.encode.enter.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"arc.encode.enter.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"arc.encode.enter.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"arc.encode.enter.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"arc.encode.enter.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"arc.encode.enter.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"arc.encode.enter.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"arc.encode.enter.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"arc.encode.enter.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"arc.encode.enter.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"arc.encode.enter.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"arc.encode.enter.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"arc.encode.enter.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"arc.encode.enter.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"arc.encode.enter.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"arc.encode.enter.texture":{"desc":"<p>图元纹理</p>\n"},"arc.encode.enter.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"arc.encode.enter.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"arc.encode.enter.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"arc.encode.enter.blur":{"desc":"<p>图元边缘模糊</p>\n"},"arc.encode.enter.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"arc.encode.update":{"desc":"<p>设置图元在数据更新状态执行的视觉通道映射</p>\n"},"arc.encode.update.innerRadius":{"desc":"<p>内半径</p>\n"},"arc.encode.update.outerRadius":{"desc":"<p>外半径</p>\n"},"arc.encode.update.startAngle":{"desc":"<p>圆弧的起始角度；\n以弧度的形式指定，0 表示 12 点钟方向并且顺时针方向为正。\n如果 <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code> 则会绘制一个完整的扇形或圆环</p>\n"},"arc.encode.update.endAngle":{"desc":"<p>圆弧的终止角度；\n以弧度的形式指定，0 表示 12 点钟方向并且顺时针方向为正。\n如果 <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code> 则会绘制一个完整的扇形或圆环</p>\n"},"arc.encode.update.padAngle":{"desc":"<p>间隙角度；间隔角度会转换为一个在两个相邻的弧之间的确定的线性距离，定义为 <code class=\"codespan\">padRadius * | padAngle |</code></p>\n<p>这个距离在弧的开始和结束处都是相等的；\n间隔角度通常只应用于环形扇区（即当内半径大于 0）</p>\n"},"arc.encode.update.padRadius":{"desc":"<p>配合<code class=\"codespan\">padAngle</code>一起使用</p>\n"},"arc.encode.update.cap":{"desc":"<p>对应了线段的 lineCap 属性，lineCap 表示的是线段末端如何绘制，支持两种类型的设置</p>\n<ul>\n<li><p><code class=\"codespan\">boolean</code>: <code class=\"codespan\">cap: true</code> 表示在弧线的起始位置都增加一个角度，角度是 <code class=\"codespan\">| outerRadius - innerRadius | / outerRadius</code></p>\n</li>\n<li><p><code class=\"codespan\">[boolean, boolean]</code>: 针对首尾设置不同的末端绘制策略</p>\n</li>\n</ul>\n"},"arc.encode.update.forceShowCap":{"desc":"<p>当 cap = true 并且 使用了渐变填充的时候，自动实现 conical 渐变，也就是环形的渐变</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"arc.encode.update.x":{"desc":"<p>图元的 x 坐标</p>\n"},"arc.encode.update.y":{"desc":"<p>图元 y 坐标</p>\n"},"arc.encode.update.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"arc.encode.update.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"arc.encode.update.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"arc.encode.update.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"arc.encode.update.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"arc.encode.update.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"arc.encode.update.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"arc.encode.update.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"arc.encode.update.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"arc.encode.update.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"arc.encode.update.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"arc.encode.update.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"arc.encode.update.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"arc.encode.update.outerBorder":{"desc":"<p>外描边</p>\n"},"arc.encode.update.innerBorder":{"desc":"<p>内描边</p>\n"},"arc.encode.update.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"arc.encode.update.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"arc.encode.update.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"arc.encode.update.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"arc.encode.update.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"arc.encode.update.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"arc.encode.update.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"arc.encode.update.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"arc.encode.update.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"arc.encode.update.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"arc.encode.update.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"arc.encode.update.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"arc.encode.update.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"arc.encode.update.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"arc.encode.update.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"arc.encode.update.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"arc.encode.update.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"arc.encode.update.texture":{"desc":"<p>图元纹理</p>\n"},"arc.encode.update.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"arc.encode.update.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"arc.encode.update.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"arc.encode.update.blur":{"desc":"<p>图元边缘模糊</p>\n"},"arc.encode.update.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"arc.encode.exit":{"desc":"<p>设置图元在数据被删除的状态下执行的视觉通道映射</p>\n"},"arc.encode.exit.innerRadius":{"desc":"<p>内半径</p>\n"},"arc.encode.exit.outerRadius":{"desc":"<p>外半径</p>\n"},"arc.encode.exit.startAngle":{"desc":"<p>圆弧的起始角度；\n以弧度的形式指定，0 表示 12 点钟方向并且顺时针方向为正。\n如果 <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code> 则会绘制一个完整的扇形或圆环</p>\n"},"arc.encode.exit.endAngle":{"desc":"<p>圆弧的终止角度；\n以弧度的形式指定，0 表示 12 点钟方向并且顺时针方向为正。\n如果 <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code> 则会绘制一个完整的扇形或圆环</p>\n"},"arc.encode.exit.padAngle":{"desc":"<p>间隙角度；间隔角度会转换为一个在两个相邻的弧之间的确定的线性距离，定义为 <code class=\"codespan\">padRadius * | padAngle |</code></p>\n<p>这个距离在弧的开始和结束处都是相等的；\n间隔角度通常只应用于环形扇区（即当内半径大于 0）</p>\n"},"arc.encode.exit.padRadius":{"desc":"<p>配合<code class=\"codespan\">padAngle</code>一起使用</p>\n"},"arc.encode.exit.cap":{"desc":"<p>对应了线段的 lineCap 属性，lineCap 表示的是线段末端如何绘制，支持两种类型的设置</p>\n<ul>\n<li><p><code class=\"codespan\">boolean</code>: <code class=\"codespan\">cap: true</code> 表示在弧线的起始位置都增加一个角度，角度是 <code class=\"codespan\">| outerRadius - innerRadius | / outerRadius</code></p>\n</li>\n<li><p><code class=\"codespan\">[boolean, boolean]</code>: 针对首尾设置不同的末端绘制策略</p>\n</li>\n</ul>\n"},"arc.encode.exit.forceShowCap":{"desc":"<p>当 cap = true 并且 使用了渐变填充的时候，自动实现 conical 渐变，也就是环形的渐变</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"arc.encode.exit.x":{"desc":"<p>图元的 x 坐标</p>\n"},"arc.encode.exit.y":{"desc":"<p>图元 y 坐标</p>\n"},"arc.encode.exit.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"arc.encode.exit.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"arc.encode.exit.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"arc.encode.exit.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"arc.encode.exit.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"arc.encode.exit.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"arc.encode.exit.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"arc.encode.exit.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"arc.encode.exit.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"arc.encode.exit.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"arc.encode.exit.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"arc.encode.exit.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"arc.encode.exit.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"arc.encode.exit.outerBorder":{"desc":"<p>外描边</p>\n"},"arc.encode.exit.innerBorder":{"desc":"<p>内描边</p>\n"},"arc.encode.exit.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"arc.encode.exit.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"arc.encode.exit.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"arc.encode.exit.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"arc.encode.exit.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"arc.encode.exit.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"arc.encode.exit.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"arc.encode.exit.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"arc.encode.exit.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"arc.encode.exit.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"arc.encode.exit.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"arc.encode.exit.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"arc.encode.exit.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"arc.encode.exit.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"arc.encode.exit.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"arc.encode.exit.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"arc.encode.exit.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"arc.encode.exit.texture":{"desc":"<p>图元纹理</p>\n"},"arc.encode.exit.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"arc.encode.exit.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"arc.encode.exit.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"arc.encode.exit.blur":{"desc":"<p>图元边缘模糊</p>\n"},"arc.encode.exit.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"arc.encode.hover":{"desc":"<p>设置<code class=\"codespan\">hover</code>状态的时候，图元对应的视觉通道映射</p>\n"},"arc.encode.hover.innerRadius":{"desc":"<p>内半径</p>\n"},"arc.encode.hover.outerRadius":{"desc":"<p>外半径</p>\n"},"arc.encode.hover.startAngle":{"desc":"<p>圆弧的起始角度；\n以弧度的形式指定，0 表示 12 点钟方向并且顺时针方向为正。\n如果 <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code> 则会绘制一个完整的扇形或圆环</p>\n"},"arc.encode.hover.endAngle":{"desc":"<p>圆弧的终止角度；\n以弧度的形式指定，0 表示 12 点钟方向并且顺时针方向为正。\n如果 <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code> 则会绘制一个完整的扇形或圆环</p>\n"},"arc.encode.hover.padAngle":{"desc":"<p>间隙角度；间隔角度会转换为一个在两个相邻的弧之间的确定的线性距离，定义为 <code class=\"codespan\">padRadius * | padAngle |</code></p>\n<p>这个距离在弧的开始和结束处都是相等的；\n间隔角度通常只应用于环形扇区（即当内半径大于 0）</p>\n"},"arc.encode.hover.padRadius":{"desc":"<p>配合<code class=\"codespan\">padAngle</code>一起使用</p>\n"},"arc.encode.hover.cap":{"desc":"<p>对应了线段的 lineCap 属性，lineCap 表示的是线段末端如何绘制，支持两种类型的设置</p>\n<ul>\n<li><p><code class=\"codespan\">boolean</code>: <code class=\"codespan\">cap: true</code> 表示在弧线的起始位置都增加一个角度，角度是 <code class=\"codespan\">| outerRadius - innerRadius | / outerRadius</code></p>\n</li>\n<li><p><code class=\"codespan\">[boolean, boolean]</code>: 针对首尾设置不同的末端绘制策略</p>\n</li>\n</ul>\n"},"arc.encode.hover.forceShowCap":{"desc":"<p>当 cap = true 并且 使用了渐变填充的时候，自动实现 conical 渐变，也就是环形的渐变</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"arc.encode.hover.x":{"desc":"<p>图元的 x 坐标</p>\n"},"arc.encode.hover.y":{"desc":"<p>图元 y 坐标</p>\n"},"arc.encode.hover.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"arc.encode.hover.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"arc.encode.hover.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"arc.encode.hover.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"arc.encode.hover.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"arc.encode.hover.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"arc.encode.hover.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"arc.encode.hover.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"arc.encode.hover.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"arc.encode.hover.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"arc.encode.hover.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"arc.encode.hover.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"arc.encode.hover.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"arc.encode.hover.outerBorder":{"desc":"<p>外描边</p>\n"},"arc.encode.hover.innerBorder":{"desc":"<p>内描边</p>\n"},"arc.encode.hover.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"arc.encode.hover.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"arc.encode.hover.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"arc.encode.hover.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"arc.encode.hover.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"arc.encode.hover.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"arc.encode.hover.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"arc.encode.hover.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"arc.encode.hover.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"arc.encode.hover.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"arc.encode.hover.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"arc.encode.hover.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"arc.encode.hover.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"arc.encode.hover.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"arc.encode.hover.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"arc.encode.hover.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"arc.encode.hover.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"arc.encode.hover.texture":{"desc":"<p>图元纹理</p>\n"},"arc.encode.hover.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"arc.encode.hover.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"arc.encode.hover.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"arc.encode.hover.blur":{"desc":"<p>图元边缘模糊</p>\n"},"arc.encode.hover.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"arc.animationState":{"desc":"<p>类型：<code class=\"codespan\">MarkFunctionType</code>\n是否必传： 否\nanimation attributes</p>\n"},"arc.animation":{"desc":"<p>支持设置各种状态对应的动画，数据驱动的动画状态有三种：</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>交互触发的状态变更，通过统一的交互动画进行配置，配置的 key 为 <code class=\"codespan\">state</code></p>\n"},"arc.animation.type":{"desc":"<p>动画执行类型，指定特定的内置动画执行效果</p>\n<p>通用的内置动画类型包括：</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: 渐入渐出动画</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: 缩放动画</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: 移入移出动画</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: 旋转动画</li>\n<li><code class=\"codespan\">update</code>: 更新动画</li>\n</ul>\n<p>arc图元支持的额外动画类型包括：</p>\n<ul>\n<li><code class=\"codespan\">growRadiusIn</code>/<code class=\"codespan\">growRadiusOut</code>: 半径生长动画</li>\n<li><code class=\"codespan\">growAngleIn</code>/<code class=\"codespan\">growAngleOut</code>: 角度生长动画</li>\n</ul>\n"},"arc.animation.channel":{"desc":"<p>动画执行前后的视觉通道，与 <code class=\"codespan\">type</code> 配置冲突</p>\n"},"arc.animation.custom":{"desc":"<p>自定义动画，如果设定了自定义动画配置则会替换默认的视觉通道插值逻辑</p>\n"},"arc.animation.customParameters":{"desc":"<p>自定义动画参数</p>\n"},"arc.animation.easing":{"desc":"<p>动画缓动，默认为 <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"arc.animation.delay":{"desc":"<p>动画执行的延迟时间，默认为 0</p>\n"},"arc.animation.duration":{"desc":"<p>动画执行时长，默认为 1000ms</p>\n"},"arc.animation.oneByOne":{"desc":"<p>动画依次执行的延迟时长，如果配置为 <code class=\"codespan\">true</code> 则会在上一个元素动画执行结束后执行下一个元素的动画，默认为 <code class=\"codespan\">false</code></p>\n"},"arc.animation.startTime":{"desc":"<p>动画执行的初始时间，这一初始时间不会在循环动画中被重复应用，默认为 0</p>\n"},"arc.animation.totalTime":{"desc":"<p>动画执行的最大时间，如果动画执行到达设定时间将会被终止</p>\n"},"arc.animation.loop":{"desc":"<p>动画循环次数，如果配置为 <code class=\"codespan\">true</code> 则会无限循环</p>\n"},"arc.animation.options":{"desc":"<p>特定动画类型执行时设定的额外参数</p>\n"},"arc.animation.controlOptions":{"desc":"<p>动画执行逻辑的控制参数：</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: 当动画状态变更时是否立即终止自身动画</li>\n<li><code class=\"codespan\">immediatelyApply</code>: 是否立即应用动画初始的视觉通道</li>\n</ul>\n"},"arc.zIndex":{"desc":"<p>设置<code class=\"codespan\">mark</code>图元对应的容器图形(group)的 zIndex</p>\n"},"arc.interactive":{"desc":"<p>类型：<code class=\"codespan\">boolean</code>\n是否必传： 否</p>\n"},"arc.context":{"desc":"<p>设置图元的上下文参数</p>\n"},"arc.setCustomizedShape":{"desc":"<p>设置自定义形状的回调函数，对应的 ts 类型定位如下：</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>其中<code class=\"codespan\">ICustomPath2D</code> 为 VRender 提供的绘制自定义的路径一个工具类</p>\n"},"arc.support3d":{"desc":"<p>当画布设置了 3d 视角的时候，是否支持 3d 模式</p>\n"},"arc.group":{"desc":"<p>设置父图元，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 父图元对应的 id</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> 父图元对应的语法元素，一般用于 API 调用场景</li>\n</ul>\n<p>如果不设置，会默认挂在到画布的根节点下面</p>\n"},"arc.from":{"desc":"<p>ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>通过<code class=\"codespan\">data</code> 属性值，申明图元依赖的数据</p>\n"},"arc.key":{"desc":"<p>设置图元数据元素的唯一标志符，用于计算图形元素的数据状态，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"arc.sort":{"desc":"<p>对图元中的所有图形元素进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"arc.groupBy":{"desc":"<p>设置分组的属性，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置分组<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析分组<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"arc.groupSort":{"desc":"<p>对图元中的分组进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"arc.coordinate":{"desc":"<p>设置该图元关联的坐标系对应的 id 或者坐标系对应的图形元素</p>\n"},"arc.state":{"desc":"<p>设置当前图元所有图形元素的状态值，支持三种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置图形的状态，比如说:<code class=\"codespan\">{ state: &#39;selected&#39;}</code> 就是给所有的图形设置状态为<code class=\"codespan\">&#39;selected&#39;</code>，通常这种情况，<code class=\"codespan\">encode</code> 中也会设置<code class=\"codespan\">&#39;selected&#39;</code>状态对应的图形通道映射</li>\n<li><code class=\"codespan\">string[]</code> 给图形设置多个状态，可以配置<code class=\"codespan\">stateSort</code>来影响对应状态执行图形通道映射的顺序</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析状态值的回调函数，返回参数为<code class=\"codespan\">string | string[]</code>，对应的 ts 类型定义为：</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"arc.stateSort":{"desc":"<p>设置当前图元所有图形元素的状态值的排序函数，会影响状态对应的图形通道映射的顺序，最先执行的状态可能被后续的状态覆盖图形通道映射结果，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"arc.transform":{"desc":"<p>设置图元对应的变换，所有的数据变换都可以配置在图元上，用于对图元的<code class=\"codespan\">join data</code> 执行变换；\n另外一种类型的变换就是对图形元素执行的变换，比如说<code class=\"codespan\">dodge</code>；\n通用的类型定义如下：</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>每中变换支持的参数不同</p>\n"},"arc.layout":{"desc":"<p>设置图元的布局参数，图元在参与布局的时候，存在两种角色：</p>\n<ul>\n<li>&#39;container&#39; 容器图元，一般是<code class=\"codespan\">group</code>图元</li>\n<li>&#39;item&#39; 布局子元素，作为容器图元的子节点</li>\n</ul>\n<p>注意，我们仅支持一层布局，如果是多层嵌套布局，建议使用自定义的布局方案进行实现；</p>\n<p>现在支持两种内容的布局：<code class=\"codespan\">grid</code> 布局 和 <code class=\"codespan\">relative</code>布局，相关类型定义如下</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>如果想要设置自定义的布局方案，<code class=\"codespan\">layout</code>也支持直接设置回调函数，回调函数的定义如下：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"arc.layout.display":{"desc":"<p>容器图元设置布局的类型，支持两种配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> 相对布局</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> 网格布局</li>\n</ul>\n"},"arc.layout.callback":{"desc":"<p>自定义该图元的回调函数，ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"arc.layout.skipBeforeLayouted":{"desc":"<p>在布局完成前，跳过执行阶段</p>\n"},"arc.layout.updateViewSignals":{"desc":"<p>是否更新默认的视图信号，也就是：<code class=\"codespan\">padding</code>、<code class=\"codespan\">viewWidth</code> 和 <code class=\"codespan\">viewHeight</code></p>\n<p>只能在设置了<code class=\"codespan\">{ layout: { display: &#39;relative&#39;} }</code>的容器图元上设置该属性</p>\n"},"arc.layout.maxChildWidth":{"desc":"<p>相对布局的父图元，设置子图元的最大宽度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的宽度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"arc.layout.maxChildHeight":{"desc":"<p>相对布局的父图元，设置子图元的最大高度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的高度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"arc.layout.position":{"desc":"<p>设置相对布局的子图元的位置，支持的配置有：</p>\n<ul>\n<li>&#39;top&#39; 相对于父图元的顶部</li>\n<li>&#39;bottom&#39; 相对于父图元的底部</li>\n<li>&#39;left&#39; 相对于父图元的左侧</li>\n<li>&#39;right&#39; 相对于父图元的右侧</li>\n<li>&#39;content&#39; 相对于父图元的中心，也就是内容区域</li>\n<li>&#39;auto&#39; 图元设置了坐标系的时候，根据关联的<code class=\"codespan\">scale</code>，自定计算相对于父图元的位置</li>\n</ul>\n"},"arc.layout.padding":{"desc":"<p>子图元内边距，单位 px，默认各方向内边距为 0，接受数值、数值数组以及对象设置。</p>\n<p>使用示例：</p>\n<pre><code class=\"lang-ts\">// 数值类型，设置内边距为 5\npadding: 5;\n// 数值数组，设置上下的内边距为 5，左右的内边距为 10，用法同 CSS 盒模型\npadding: [5, 10];\n// 数值数组，分别设置四个方向的内边距\npadding: [\n  5, // 上\n  10, // 右\n  5, // 下\n  10 // 左\n];\n// 对象类型\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"arc.layout.gridTemplateRows":{"desc":"<p>网格布局的父图元设置行的高度</p>\n"},"arc.layout.gridTemplateColumns":{"desc":"<p>网格布局的父图元设置列的宽度</p>\n"},"arc.layout.gridRowGap":{"desc":"<p>网格布局的父图元设置行行距</p>\n"},"arc.layout.gridColumnGap":{"desc":"<p>网格布局的父图元设置列间距</p>\n"},"arc.layout.gridRowStart":{"desc":"<p>网格布局的子图元设置行开始的位置</p>\n"},"arc.layout.gridRowEnd":{"desc":"<p>网格布局的子图元设置行结束的位置</p>\n"},"arc.layout.gridColumnStart":{"desc":"<p>网格布局的子图元设置列开始的位置</p>\n"},"arc.layout.gridColumnEnd":{"desc":"<p>网格布局的子图元设置列结束的位置</p>\n"},"arc.large":{"desc":"<p>是否开启大数据渲染模式</p>\n"},"arc.largeThreshold":{"desc":"<p>开启大数据渲染优化的阀值，对应的是 data 的长度</p>\n"},"arc.progressiveStep":{"desc":"<p>开启分片渲染的步长，对应的是分片的数据长度</p>\n"},"arc.progressiveThreshold":{"desc":"<p>开启分片渲染的阀值，对应的是单系列 data 的长度</p>\n"},"arc.morph":{"desc":"<p>是否对当前图元开启全局的过渡形变动画</p>\n"},"arc.morphKey":{"desc":"<p>用于匹配全局过渡形变动画的图元，具有相对的<code class=\"codespan\">morphKey</code>的图元，会进行形变动画</p>\n"},"arc.morphElementKey":{"desc":"<p>对于匹配上的前后图元，通过该配置，进行图形元素的匹配；如果不申明，我们默认会读取<code class=\"codespan\">key</code>配置，用于匹配图形元素，进行形变动画；\n默认支持一对一、一对多、多对一的图形形变动画</p>\n"},"symbol":{"desc":"<p><strong> symbol 图元 </strong></p>\n"},"symbol.type":{"desc":"<p>设置图元类型为 <code class=\"codespan\">symbol</code></p>\n"},"symbol.encode":{"desc":"<p>设置图元的视觉通道编码，默认支持三种数据变化状态：</p>\n<ul>\n<li><code class=\"codespan\">enter</code> 新增数据元素</li>\n<li><code class=\"codespan\">update</code> 数据元素更新</li>\n<li><code class=\"codespan\">exit</code> 数据元素被删除</li>\n</ul>\n<p>注意，这里的数据状态是根据<code class=\"codespan\">mark</code>的<code class=\"codespan\">key</code>自动生成的，我们会针对<code class=\"codespan\">mark</code>的绑定数据，根据<code class=\"codespan\">key</code>的配置，计算数据对应的唯一标志符，数据更新后，如果对应的唯一标志符不存在了，则状态为<code class=\"codespan\">exit</code>，如果存在，则为<code class=\"codespan\">update</code>；如果之前的数据不存在改唯一标志符，则数据元素对应的状态为<code class=\"codespan\">enter</code></p>\n<p>默认支持一种交互状态：</p>\n<ul>\n<li><code class=\"codespan\">hover</code> 鼠标 hover 到具体的图形上，给图形设置对应的视觉通道编码</li>\n</ul>\n"},"symbol.encode.enter":{"desc":"<p>设置图元在数据初始化状态执行的视觉通道映射，注意数据更新的时候不再执行</p>\n"},"symbol.encode.enter.symbolType":{"desc":"<p>设置类型，支持传入内置的类型，也可以设置为自定义的路径，内置的类型有：</p>\n<ul>\n<li>&#39;circle&#39;</li>\n<li>&#39;cross&#39;</li>\n<li>&#39;diamond&#39;</li>\n<li>&#39;square&#39;</li>\n<li>&#39;arrow&#39;</li>\n<li>&#39;arrow2Left&#39;</li>\n<li>&#39;arrow2Right&#39;</li>\n<li>&#39;wedge&#39;</li>\n<li>&#39;thinTriangle&#39;</li>\n<li>&#39;triangle&#39;</li>\n<li>&#39;triangleUp&#39;</li>\n<li>&#39;triangleDown&#39;</li>\n<li>&#39;triangleRight&#39;</li>\n<li>&#39;triangleLeft&#39;</li>\n<li>&#39;stroke&#39;</li>\n<li>&#39;star&#39;</li>\n<li>&#39;wye&#39;</li>\n<li>&#39;rect&#39;</li>\n</ul>\n"},"symbol.encode.enter.size":{"desc":"<p>设置<code class=\"codespan\">symbol</code>的外接圆的直径，支持两种格式的设置</p>\n<ul>\n<li><code class=\"codespan\">number</code> 外接圆直径</li>\n<li><code class=\"codespan\">[number, number]</code> 当<code class=\"codespan\">symbolType: &#39;rect&#39;</code> 时，设置宽高</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"symbol.encode.enter.x":{"desc":"<p>图元的 x 坐标</p>\n"},"symbol.encode.enter.y":{"desc":"<p>图元 y 坐标</p>\n"},"symbol.encode.enter.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"symbol.encode.enter.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"symbol.encode.enter.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"symbol.encode.enter.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"symbol.encode.enter.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"symbol.encode.enter.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"symbol.encode.enter.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"symbol.encode.enter.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"symbol.encode.enter.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"symbol.encode.enter.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"symbol.encode.enter.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"symbol.encode.enter.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"symbol.encode.enter.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"symbol.encode.enter.outerBorder":{"desc":"<p>外描边</p>\n"},"symbol.encode.enter.innerBorder":{"desc":"<p>内描边</p>\n"},"symbol.encode.enter.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"symbol.encode.enter.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"symbol.encode.enter.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"symbol.encode.enter.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"symbol.encode.enter.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"symbol.encode.enter.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"symbol.encode.enter.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"symbol.encode.enter.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"symbol.encode.enter.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"symbol.encode.enter.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"symbol.encode.enter.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"symbol.encode.enter.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"symbol.encode.enter.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"symbol.encode.enter.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"symbol.encode.enter.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"symbol.encode.enter.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"symbol.encode.enter.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"symbol.encode.enter.texture":{"desc":"<p>图元纹理</p>\n"},"symbol.encode.enter.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"symbol.encode.enter.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"symbol.encode.enter.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"symbol.encode.enter.blur":{"desc":"<p>图元边缘模糊</p>\n"},"symbol.encode.enter.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"symbol.encode.update":{"desc":"<p>设置图元在数据更新状态执行的视觉通道映射</p>\n"},"symbol.encode.update.symbolType":{"desc":"<p>设置类型，支持传入内置的类型，也可以设置为自定义的路径，内置的类型有：</p>\n<ul>\n<li>&#39;circle&#39;</li>\n<li>&#39;cross&#39;</li>\n<li>&#39;diamond&#39;</li>\n<li>&#39;square&#39;</li>\n<li>&#39;arrow&#39;</li>\n<li>&#39;arrow2Left&#39;</li>\n<li>&#39;arrow2Right&#39;</li>\n<li>&#39;wedge&#39;</li>\n<li>&#39;thinTriangle&#39;</li>\n<li>&#39;triangle&#39;</li>\n<li>&#39;triangleUp&#39;</li>\n<li>&#39;triangleDown&#39;</li>\n<li>&#39;triangleRight&#39;</li>\n<li>&#39;triangleLeft&#39;</li>\n<li>&#39;stroke&#39;</li>\n<li>&#39;star&#39;</li>\n<li>&#39;wye&#39;</li>\n<li>&#39;rect&#39;</li>\n</ul>\n"},"symbol.encode.update.size":{"desc":"<p>设置<code class=\"codespan\">symbol</code>的外接圆的直径，支持两种格式的设置</p>\n<ul>\n<li><code class=\"codespan\">number</code> 外接圆直径</li>\n<li><code class=\"codespan\">[number, number]</code> 当<code class=\"codespan\">symbolType: &#39;rect&#39;</code> 时，设置宽高</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"symbol.encode.update.x":{"desc":"<p>图元的 x 坐标</p>\n"},"symbol.encode.update.y":{"desc":"<p>图元 y 坐标</p>\n"},"symbol.encode.update.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"symbol.encode.update.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"symbol.encode.update.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"symbol.encode.update.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"symbol.encode.update.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"symbol.encode.update.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"symbol.encode.update.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"symbol.encode.update.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"symbol.encode.update.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"symbol.encode.update.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"symbol.encode.update.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"symbol.encode.update.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"symbol.encode.update.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"symbol.encode.update.outerBorder":{"desc":"<p>外描边</p>\n"},"symbol.encode.update.innerBorder":{"desc":"<p>内描边</p>\n"},"symbol.encode.update.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"symbol.encode.update.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"symbol.encode.update.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"symbol.encode.update.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"symbol.encode.update.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"symbol.encode.update.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"symbol.encode.update.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"symbol.encode.update.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"symbol.encode.update.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"symbol.encode.update.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"symbol.encode.update.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"symbol.encode.update.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"symbol.encode.update.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"symbol.encode.update.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"symbol.encode.update.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"symbol.encode.update.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"symbol.encode.update.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"symbol.encode.update.texture":{"desc":"<p>图元纹理</p>\n"},"symbol.encode.update.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"symbol.encode.update.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"symbol.encode.update.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"symbol.encode.update.blur":{"desc":"<p>图元边缘模糊</p>\n"},"symbol.encode.update.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"symbol.encode.exit":{"desc":"<p>设置图元在数据被删除的状态下执行的视觉通道映射</p>\n"},"symbol.encode.exit.symbolType":{"desc":"<p>设置类型，支持传入内置的类型，也可以设置为自定义的路径，内置的类型有：</p>\n<ul>\n<li>&#39;circle&#39;</li>\n<li>&#39;cross&#39;</li>\n<li>&#39;diamond&#39;</li>\n<li>&#39;square&#39;</li>\n<li>&#39;arrow&#39;</li>\n<li>&#39;arrow2Left&#39;</li>\n<li>&#39;arrow2Right&#39;</li>\n<li>&#39;wedge&#39;</li>\n<li>&#39;thinTriangle&#39;</li>\n<li>&#39;triangle&#39;</li>\n<li>&#39;triangleUp&#39;</li>\n<li>&#39;triangleDown&#39;</li>\n<li>&#39;triangleRight&#39;</li>\n<li>&#39;triangleLeft&#39;</li>\n<li>&#39;stroke&#39;</li>\n<li>&#39;star&#39;</li>\n<li>&#39;wye&#39;</li>\n<li>&#39;rect&#39;</li>\n</ul>\n"},"symbol.encode.exit.size":{"desc":"<p>设置<code class=\"codespan\">symbol</code>的外接圆的直径，支持两种格式的设置</p>\n<ul>\n<li><code class=\"codespan\">number</code> 外接圆直径</li>\n<li><code class=\"codespan\">[number, number]</code> 当<code class=\"codespan\">symbolType: &#39;rect&#39;</code> 时，设置宽高</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"symbol.encode.exit.x":{"desc":"<p>图元的 x 坐标</p>\n"},"symbol.encode.exit.y":{"desc":"<p>图元 y 坐标</p>\n"},"symbol.encode.exit.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"symbol.encode.exit.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"symbol.encode.exit.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"symbol.encode.exit.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"symbol.encode.exit.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"symbol.encode.exit.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"symbol.encode.exit.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"symbol.encode.exit.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"symbol.encode.exit.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"symbol.encode.exit.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"symbol.encode.exit.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"symbol.encode.exit.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"symbol.encode.exit.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"symbol.encode.exit.outerBorder":{"desc":"<p>外描边</p>\n"},"symbol.encode.exit.innerBorder":{"desc":"<p>内描边</p>\n"},"symbol.encode.exit.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"symbol.encode.exit.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"symbol.encode.exit.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"symbol.encode.exit.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"symbol.encode.exit.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"symbol.encode.exit.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"symbol.encode.exit.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"symbol.encode.exit.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"symbol.encode.exit.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"symbol.encode.exit.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"symbol.encode.exit.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"symbol.encode.exit.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"symbol.encode.exit.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"symbol.encode.exit.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"symbol.encode.exit.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"symbol.encode.exit.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"symbol.encode.exit.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"symbol.encode.exit.texture":{"desc":"<p>图元纹理</p>\n"},"symbol.encode.exit.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"symbol.encode.exit.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"symbol.encode.exit.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"symbol.encode.exit.blur":{"desc":"<p>图元边缘模糊</p>\n"},"symbol.encode.exit.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"symbol.encode.hover":{"desc":"<p>设置<code class=\"codespan\">hover</code>状态的时候，图元对应的视觉通道映射</p>\n"},"symbol.encode.hover.symbolType":{"desc":"<p>设置类型，支持传入内置的类型，也可以设置为自定义的路径，内置的类型有：</p>\n<ul>\n<li>&#39;circle&#39;</li>\n<li>&#39;cross&#39;</li>\n<li>&#39;diamond&#39;</li>\n<li>&#39;square&#39;</li>\n<li>&#39;arrow&#39;</li>\n<li>&#39;arrow2Left&#39;</li>\n<li>&#39;arrow2Right&#39;</li>\n<li>&#39;wedge&#39;</li>\n<li>&#39;thinTriangle&#39;</li>\n<li>&#39;triangle&#39;</li>\n<li>&#39;triangleUp&#39;</li>\n<li>&#39;triangleDown&#39;</li>\n<li>&#39;triangleRight&#39;</li>\n<li>&#39;triangleLeft&#39;</li>\n<li>&#39;stroke&#39;</li>\n<li>&#39;star&#39;</li>\n<li>&#39;wye&#39;</li>\n<li>&#39;rect&#39;</li>\n</ul>\n"},"symbol.encode.hover.size":{"desc":"<p>设置<code class=\"codespan\">symbol</code>的外接圆的直径，支持两种格式的设置</p>\n<ul>\n<li><code class=\"codespan\">number</code> 外接圆直径</li>\n<li><code class=\"codespan\">[number, number]</code> 当<code class=\"codespan\">symbolType: &#39;rect&#39;</code> 时，设置宽高</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"symbol.encode.hover.x":{"desc":"<p>图元的 x 坐标</p>\n"},"symbol.encode.hover.y":{"desc":"<p>图元 y 坐标</p>\n"},"symbol.encode.hover.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"symbol.encode.hover.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"symbol.encode.hover.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"symbol.encode.hover.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"symbol.encode.hover.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"symbol.encode.hover.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"symbol.encode.hover.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"symbol.encode.hover.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"symbol.encode.hover.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"symbol.encode.hover.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"symbol.encode.hover.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"symbol.encode.hover.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"symbol.encode.hover.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"symbol.encode.hover.outerBorder":{"desc":"<p>外描边</p>\n"},"symbol.encode.hover.innerBorder":{"desc":"<p>内描边</p>\n"},"symbol.encode.hover.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"symbol.encode.hover.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"symbol.encode.hover.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"symbol.encode.hover.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"symbol.encode.hover.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"symbol.encode.hover.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"symbol.encode.hover.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"symbol.encode.hover.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"symbol.encode.hover.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"symbol.encode.hover.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"symbol.encode.hover.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"symbol.encode.hover.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"symbol.encode.hover.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"symbol.encode.hover.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"symbol.encode.hover.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"symbol.encode.hover.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"symbol.encode.hover.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"symbol.encode.hover.texture":{"desc":"<p>图元纹理</p>\n"},"symbol.encode.hover.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"symbol.encode.hover.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"symbol.encode.hover.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"symbol.encode.hover.blur":{"desc":"<p>图元边缘模糊</p>\n"},"symbol.encode.hover.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"symbol.animationState":{"desc":"<p>类型：<code class=\"codespan\">MarkFunctionType</code>\n是否必传： 否\nanimation attributes</p>\n"},"symbol.animation":{"desc":"<p>支持设置各种状态对应的动画，数据驱动的动画状态有三种：</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>交互触发的状态变更，通过统一的交互动画进行配置，配置的 key 为 <code class=\"codespan\">state</code></p>\n"},"symbol.animation.type":{"desc":"<p>动画执行类型，指定特定的内置动画执行效果</p>\n<p>通用的内置动画类型包括：</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: 渐入渐出动画</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: 缩放动画</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: 移入移出动画</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: 旋转动画</li>\n<li><code class=\"codespan\">update</code>: 更新动画</li>\n</ul>\n"},"symbol.animation.channel":{"desc":"<p>动画执行前后的视觉通道，与 <code class=\"codespan\">type</code> 配置冲突</p>\n"},"symbol.animation.custom":{"desc":"<p>自定义动画，如果设定了自定义动画配置则会替换默认的视觉通道插值逻辑</p>\n"},"symbol.animation.customParameters":{"desc":"<p>自定义动画参数</p>\n"},"symbol.animation.easing":{"desc":"<p>动画缓动，默认为 <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"symbol.animation.delay":{"desc":"<p>动画执行的延迟时间，默认为 0</p>\n"},"symbol.animation.duration":{"desc":"<p>动画执行时长，默认为 1000ms</p>\n"},"symbol.animation.oneByOne":{"desc":"<p>动画依次执行的延迟时长，如果配置为 <code class=\"codespan\">true</code> 则会在上一个元素动画执行结束后执行下一个元素的动画，默认为 <code class=\"codespan\">false</code></p>\n"},"symbol.animation.startTime":{"desc":"<p>动画执行的初始时间，这一初始时间不会在循环动画中被重复应用，默认为 0</p>\n"},"symbol.animation.totalTime":{"desc":"<p>动画执行的最大时间，如果动画执行到达设定时间将会被终止</p>\n"},"symbol.animation.loop":{"desc":"<p>动画循环次数，如果配置为 <code class=\"codespan\">true</code> 则会无限循环</p>\n"},"symbol.animation.options":{"desc":"<p>特定动画类型执行时设定的额外参数</p>\n"},"symbol.animation.controlOptions":{"desc":"<p>动画执行逻辑的控制参数：</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: 当动画状态变更时是否立即终止自身动画</li>\n<li><code class=\"codespan\">immediatelyApply</code>: 是否立即应用动画初始的视觉通道</li>\n</ul>\n"},"symbol.zIndex":{"desc":"<p>设置<code class=\"codespan\">mark</code>图元对应的容器图形(group)的 zIndex</p>\n"},"symbol.interactive":{"desc":"<p>类型：<code class=\"codespan\">boolean</code>\n是否必传： 否</p>\n"},"symbol.context":{"desc":"<p>设置图元的上下文参数</p>\n"},"symbol.setCustomizedShape":{"desc":"<p>设置自定义形状的回调函数，对应的 ts 类型定位如下：</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>其中<code class=\"codespan\">ICustomPath2D</code> 为 VRender 提供的绘制自定义的路径一个工具类</p>\n"},"symbol.support3d":{"desc":"<p>当画布设置了 3d 视角的时候，是否支持 3d 模式</p>\n"},"symbol.group":{"desc":"<p>设置父图元，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 父图元对应的 id</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> 父图元对应的语法元素，一般用于 API 调用场景</li>\n</ul>\n<p>如果不设置，会默认挂在到画布的根节点下面</p>\n"},"symbol.from":{"desc":"<p>ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>通过<code class=\"codespan\">data</code> 属性值，申明图元依赖的数据</p>\n"},"symbol.key":{"desc":"<p>设置图元数据元素的唯一标志符，用于计算图形元素的数据状态，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"symbol.sort":{"desc":"<p>对图元中的所有图形元素进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"symbol.groupBy":{"desc":"<p>设置分组的属性，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置分组<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析分组<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"symbol.groupSort":{"desc":"<p>对图元中的分组进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"symbol.coordinate":{"desc":"<p>设置该图元关联的坐标系对应的 id 或者坐标系对应的图形元素</p>\n"},"symbol.state":{"desc":"<p>设置当前图元所有图形元素的状态值，支持三种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置图形的状态，比如说:<code class=\"codespan\">{ state: &#39;selected&#39;}</code> 就是给所有的图形设置状态为<code class=\"codespan\">&#39;selected&#39;</code>，通常这种情况，<code class=\"codespan\">encode</code> 中也会设置<code class=\"codespan\">&#39;selected&#39;</code>状态对应的图形通道映射</li>\n<li><code class=\"codespan\">string[]</code> 给图形设置多个状态，可以配置<code class=\"codespan\">stateSort</code>来影响对应状态执行图形通道映射的顺序</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析状态值的回调函数，返回参数为<code class=\"codespan\">string | string[]</code>，对应的 ts 类型定义为：</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"symbol.stateSort":{"desc":"<p>设置当前图元所有图形元素的状态值的排序函数，会影响状态对应的图形通道映射的顺序，最先执行的状态可能被后续的状态覆盖图形通道映射结果，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"symbol.transform":{"desc":"<p>设置图元对应的变换，所有的数据变换都可以配置在图元上，用于对图元的<code class=\"codespan\">join data</code> 执行变换；\n另外一种类型的变换就是对图形元素执行的变换，比如说<code class=\"codespan\">dodge</code>；\n通用的类型定义如下：</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>每中变换支持的参数不同</p>\n"},"symbol.layout":{"desc":"<p>设置图元的布局参数，图元在参与布局的时候，存在两种角色：</p>\n<ul>\n<li>&#39;container&#39; 容器图元，一般是<code class=\"codespan\">group</code>图元</li>\n<li>&#39;item&#39; 布局子元素，作为容器图元的子节点</li>\n</ul>\n<p>注意，我们仅支持一层布局，如果是多层嵌套布局，建议使用自定义的布局方案进行实现；</p>\n<p>现在支持两种内容的布局：<code class=\"codespan\">grid</code> 布局 和 <code class=\"codespan\">relative</code>布局，相关类型定义如下</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>如果想要设置自定义的布局方案，<code class=\"codespan\">layout</code>也支持直接设置回调函数，回调函数的定义如下：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"symbol.layout.display":{"desc":"<p>容器图元设置布局的类型，支持两种配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> 相对布局</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> 网格布局</li>\n</ul>\n"},"symbol.layout.callback":{"desc":"<p>自定义该图元的回调函数，ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"symbol.layout.skipBeforeLayouted":{"desc":"<p>在布局完成前，跳过执行阶段</p>\n"},"symbol.layout.updateViewSignals":{"desc":"<p>是否更新默认的视图信号，也就是：<code class=\"codespan\">padding</code>、<code class=\"codespan\">viewWidth</code> 和 <code class=\"codespan\">viewHeight</code></p>\n<p>只能在设置了<code class=\"codespan\">{ layout: { display: &#39;relative&#39;} }</code>的容器图元上设置该属性</p>\n"},"symbol.layout.maxChildWidth":{"desc":"<p>相对布局的父图元，设置子图元的最大宽度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的宽度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"symbol.layout.maxChildHeight":{"desc":"<p>相对布局的父图元，设置子图元的最大高度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的高度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"symbol.layout.position":{"desc":"<p>设置相对布局的子图元的位置，支持的配置有：</p>\n<ul>\n<li>&#39;top&#39; 相对于父图元的顶部</li>\n<li>&#39;bottom&#39; 相对于父图元的底部</li>\n<li>&#39;left&#39; 相对于父图元的左侧</li>\n<li>&#39;right&#39; 相对于父图元的右侧</li>\n<li>&#39;content&#39; 相对于父图元的中心，也就是内容区域</li>\n<li>&#39;auto&#39; 图元设置了坐标系的时候，根据关联的<code class=\"codespan\">scale</code>，自定计算相对于父图元的位置</li>\n</ul>\n"},"symbol.layout.padding":{"desc":"<p>子图元内边距，单位 px，默认各方向内边距为 0，接受数值、数值数组以及对象设置。</p>\n<p>使用示例：</p>\n<pre><code class=\"lang-ts\">// 数值类型，设置内边距为 5\npadding: 5;\n// 数值数组，设置上下的内边距为 5，左右的内边距为 10，用法同 CSS 盒模型\npadding: [5, 10];\n// 数值数组，分别设置四个方向的内边距\npadding: [\n  5, // 上\n  10, // 右\n  5, // 下\n  10 // 左\n];\n// 对象类型\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"symbol.layout.gridTemplateRows":{"desc":"<p>网格布局的父图元设置行的高度</p>\n"},"symbol.layout.gridTemplateColumns":{"desc":"<p>网格布局的父图元设置列的宽度</p>\n"},"symbol.layout.gridRowGap":{"desc":"<p>网格布局的父图元设置行行距</p>\n"},"symbol.layout.gridColumnGap":{"desc":"<p>网格布局的父图元设置列间距</p>\n"},"symbol.layout.gridRowStart":{"desc":"<p>网格布局的子图元设置行开始的位置</p>\n"},"symbol.layout.gridRowEnd":{"desc":"<p>网格布局的子图元设置行结束的位置</p>\n"},"symbol.layout.gridColumnStart":{"desc":"<p>网格布局的子图元设置列开始的位置</p>\n"},"symbol.layout.gridColumnEnd":{"desc":"<p>网格布局的子图元设置列结束的位置</p>\n"},"symbol.large":{"desc":"<p>是否开启大数据渲染模式</p>\n"},"symbol.largeThreshold":{"desc":"<p>开启大数据渲染优化的阀值，对应的是 data 的长度</p>\n"},"symbol.progressiveStep":{"desc":"<p>开启分片渲染的步长，对应的是分片的数据长度</p>\n"},"symbol.progressiveThreshold":{"desc":"<p>开启分片渲染的阀值，对应的是单系列 data 的长度</p>\n"},"symbol.morph":{"desc":"<p>是否对当前图元开启全局的过渡形变动画</p>\n"},"symbol.morphKey":{"desc":"<p>用于匹配全局过渡形变动画的图元，具有相对的<code class=\"codespan\">morphKey</code>的图元，会进行形变动画</p>\n"},"symbol.morphElementKey":{"desc":"<p>对于匹配上的前后图元，通过该配置，进行图形元素的匹配；如果不申明，我们默认会读取<code class=\"codespan\">key</code>配置，用于匹配图形元素，进行形变动画；\n默认支持一对一、一对多、多对一的图形形变动画</p>\n"},"circle":{"desc":"<p><strong> circle 图元 </strong></p>\n"},"circle.type":{"desc":"<p>设置图元类型为 <code class=\"codespan\">circle</code></p>\n"},"circle.encode":{"desc":"<p>设置图元的视觉通道编码，默认支持三种数据变化状态：</p>\n<ul>\n<li><code class=\"codespan\">enter</code> 新增数据元素</li>\n<li><code class=\"codespan\">update</code> 数据元素更新</li>\n<li><code class=\"codespan\">exit</code> 数据元素被删除</li>\n</ul>\n<p>注意，这里的数据状态是根据<code class=\"codespan\">mark</code>的<code class=\"codespan\">key</code>自动生成的，我们会针对<code class=\"codespan\">mark</code>的绑定数据，根据<code class=\"codespan\">key</code>的配置，计算数据对应的唯一标志符，数据更新后，如果对应的唯一标志符不存在了，则状态为<code class=\"codespan\">exit</code>，如果存在，则为<code class=\"codespan\">update</code>；如果之前的数据不存在改唯一标志符，则数据元素对应的状态为<code class=\"codespan\">enter</code></p>\n<p>默认支持一种交互状态：</p>\n<ul>\n<li><code class=\"codespan\">hover</code> 鼠标 hover 到具体的图形上，给图形设置对应的视觉通道编码</li>\n</ul>\n"},"circle.encode.enter":{"desc":"<p>设置图元在数据初始化状态执行的视觉通道映射，注意数据更新的时候不再执行</p>\n"},"circle.encode.enter.radius":{"desc":"<p>圆的半径</p>\n"},"circle.encode.enter.startAngle":{"desc":"<p>圆的起始角度；\n以弧度的形式指定，0 表示 12 点钟方向并且顺时针方向为正。\n如果 <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code> 则会绘制一个完整的圆，默认是整圆</p>\n"},"circle.encode.enter.endAngle":{"desc":"<p>圆的终止角度；\n以弧度的形式指定，0 表示 12 点钟方向并且顺时针方向为正。\n如果 <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code> 则会绘制一个完整的圆，默认是整圆</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"circle.encode.enter.x":{"desc":"<p>图元的 x 坐标</p>\n"},"circle.encode.enter.y":{"desc":"<p>图元 y 坐标</p>\n"},"circle.encode.enter.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"circle.encode.enter.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"circle.encode.enter.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"circle.encode.enter.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"circle.encode.enter.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"circle.encode.enter.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"circle.encode.enter.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"circle.encode.enter.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"circle.encode.enter.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"circle.encode.enter.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"circle.encode.enter.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"circle.encode.enter.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"circle.encode.enter.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"circle.encode.enter.outerBorder":{"desc":"<p>外描边</p>\n"},"circle.encode.enter.innerBorder":{"desc":"<p>内描边</p>\n"},"circle.encode.enter.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"circle.encode.enter.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"circle.encode.enter.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"circle.encode.enter.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"circle.encode.enter.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"circle.encode.enter.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"circle.encode.enter.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"circle.encode.enter.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"circle.encode.enter.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"circle.encode.enter.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"circle.encode.enter.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"circle.encode.enter.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"circle.encode.enter.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"circle.encode.enter.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"circle.encode.enter.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"circle.encode.enter.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"circle.encode.enter.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"circle.encode.enter.texture":{"desc":"<p>图元纹理</p>\n"},"circle.encode.enter.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"circle.encode.enter.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"circle.encode.enter.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"circle.encode.enter.blur":{"desc":"<p>图元边缘模糊</p>\n"},"circle.encode.enter.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"circle.encode.update":{"desc":"<p>设置图元在数据更新状态执行的视觉通道映射</p>\n"},"circle.encode.update.radius":{"desc":"<p>圆的半径</p>\n"},"circle.encode.update.startAngle":{"desc":"<p>圆的起始角度；\n以弧度的形式指定，0 表示 12 点钟方向并且顺时针方向为正。\n如果 <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code> 则会绘制一个完整的圆，默认是整圆</p>\n"},"circle.encode.update.endAngle":{"desc":"<p>圆的终止角度；\n以弧度的形式指定，0 表示 12 点钟方向并且顺时针方向为正。\n如果 <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code> 则会绘制一个完整的圆，默认是整圆</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"circle.encode.update.x":{"desc":"<p>图元的 x 坐标</p>\n"},"circle.encode.update.y":{"desc":"<p>图元 y 坐标</p>\n"},"circle.encode.update.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"circle.encode.update.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"circle.encode.update.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"circle.encode.update.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"circle.encode.update.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"circle.encode.update.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"circle.encode.update.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"circle.encode.update.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"circle.encode.update.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"circle.encode.update.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"circle.encode.update.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"circle.encode.update.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"circle.encode.update.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"circle.encode.update.outerBorder":{"desc":"<p>外描边</p>\n"},"circle.encode.update.innerBorder":{"desc":"<p>内描边</p>\n"},"circle.encode.update.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"circle.encode.update.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"circle.encode.update.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"circle.encode.update.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"circle.encode.update.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"circle.encode.update.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"circle.encode.update.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"circle.encode.update.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"circle.encode.update.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"circle.encode.update.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"circle.encode.update.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"circle.encode.update.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"circle.encode.update.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"circle.encode.update.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"circle.encode.update.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"circle.encode.update.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"circle.encode.update.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"circle.encode.update.texture":{"desc":"<p>图元纹理</p>\n"},"circle.encode.update.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"circle.encode.update.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"circle.encode.update.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"circle.encode.update.blur":{"desc":"<p>图元边缘模糊</p>\n"},"circle.encode.update.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"circle.encode.exit":{"desc":"<p>设置图元在数据被删除的状态下执行的视觉通道映射</p>\n"},"circle.encode.exit.radius":{"desc":"<p>圆的半径</p>\n"},"circle.encode.exit.startAngle":{"desc":"<p>圆的起始角度；\n以弧度的形式指定，0 表示 12 点钟方向并且顺时针方向为正。\n如果 <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code> 则会绘制一个完整的圆，默认是整圆</p>\n"},"circle.encode.exit.endAngle":{"desc":"<p>圆的终止角度；\n以弧度的形式指定，0 表示 12 点钟方向并且顺时针方向为正。\n如果 <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code> 则会绘制一个完整的圆，默认是整圆</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"circle.encode.exit.x":{"desc":"<p>图元的 x 坐标</p>\n"},"circle.encode.exit.y":{"desc":"<p>图元 y 坐标</p>\n"},"circle.encode.exit.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"circle.encode.exit.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"circle.encode.exit.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"circle.encode.exit.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"circle.encode.exit.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"circle.encode.exit.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"circle.encode.exit.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"circle.encode.exit.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"circle.encode.exit.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"circle.encode.exit.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"circle.encode.exit.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"circle.encode.exit.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"circle.encode.exit.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"circle.encode.exit.outerBorder":{"desc":"<p>外描边</p>\n"},"circle.encode.exit.innerBorder":{"desc":"<p>内描边</p>\n"},"circle.encode.exit.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"circle.encode.exit.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"circle.encode.exit.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"circle.encode.exit.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"circle.encode.exit.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"circle.encode.exit.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"circle.encode.exit.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"circle.encode.exit.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"circle.encode.exit.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"circle.encode.exit.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"circle.encode.exit.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"circle.encode.exit.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"circle.encode.exit.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"circle.encode.exit.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"circle.encode.exit.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"circle.encode.exit.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"circle.encode.exit.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"circle.encode.exit.texture":{"desc":"<p>图元纹理</p>\n"},"circle.encode.exit.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"circle.encode.exit.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"circle.encode.exit.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"circle.encode.exit.blur":{"desc":"<p>图元边缘模糊</p>\n"},"circle.encode.exit.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"circle.encode.hover":{"desc":"<p>设置<code class=\"codespan\">hover</code>状态的时候，图元对应的视觉通道映射</p>\n"},"circle.encode.hover.radius":{"desc":"<p>圆的半径</p>\n"},"circle.encode.hover.startAngle":{"desc":"<p>圆的起始角度；\n以弧度的形式指定，0 表示 12 点钟方向并且顺时针方向为正。\n如果 <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code> 则会绘制一个完整的圆，默认是整圆</p>\n"},"circle.encode.hover.endAngle":{"desc":"<p>圆的终止角度；\n以弧度的形式指定，0 表示 12 点钟方向并且顺时针方向为正。\n如果 <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code> 则会绘制一个完整的圆，默认是整圆</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"circle.encode.hover.x":{"desc":"<p>图元的 x 坐标</p>\n"},"circle.encode.hover.y":{"desc":"<p>图元 y 坐标</p>\n"},"circle.encode.hover.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"circle.encode.hover.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"circle.encode.hover.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"circle.encode.hover.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"circle.encode.hover.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"circle.encode.hover.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"circle.encode.hover.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"circle.encode.hover.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"circle.encode.hover.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"circle.encode.hover.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"circle.encode.hover.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"circle.encode.hover.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"circle.encode.hover.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"circle.encode.hover.outerBorder":{"desc":"<p>外描边</p>\n"},"circle.encode.hover.innerBorder":{"desc":"<p>内描边</p>\n"},"circle.encode.hover.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"circle.encode.hover.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"circle.encode.hover.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"circle.encode.hover.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"circle.encode.hover.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"circle.encode.hover.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"circle.encode.hover.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"circle.encode.hover.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"circle.encode.hover.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"circle.encode.hover.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"circle.encode.hover.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"circle.encode.hover.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"circle.encode.hover.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"circle.encode.hover.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"circle.encode.hover.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"circle.encode.hover.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"circle.encode.hover.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"circle.encode.hover.texture":{"desc":"<p>图元纹理</p>\n"},"circle.encode.hover.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"circle.encode.hover.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"circle.encode.hover.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"circle.encode.hover.blur":{"desc":"<p>图元边缘模糊</p>\n"},"circle.encode.hover.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"circle.animationState":{"desc":"<p>类型：<code class=\"codespan\">MarkFunctionType</code>\n是否必传： 否\nanimation attributes</p>\n"},"circle.animation":{"desc":"<p>支持设置各种状态对应的动画，数据驱动的动画状态有三种：</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>交互触发的状态变更，通过统一的交互动画进行配置，配置的 key 为 <code class=\"codespan\">state</code></p>\n"},"circle.animation.type":{"desc":"<p>动画执行类型，指定特定的内置动画执行效果</p>\n<p>通用的内置动画类型包括：</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: 渐入渐出动画</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: 缩放动画</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: 移入移出动画</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: 旋转动画</li>\n<li><code class=\"codespan\">update</code>: 更新动画</li>\n</ul>\n"},"circle.animation.channel":{"desc":"<p>动画执行前后的视觉通道，与 <code class=\"codespan\">type</code> 配置冲突</p>\n"},"circle.animation.custom":{"desc":"<p>自定义动画，如果设定了自定义动画配置则会替换默认的视觉通道插值逻辑</p>\n"},"circle.animation.customParameters":{"desc":"<p>自定义动画参数</p>\n"},"circle.animation.easing":{"desc":"<p>动画缓动，默认为 <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"circle.animation.delay":{"desc":"<p>动画执行的延迟时间，默认为 0</p>\n"},"circle.animation.duration":{"desc":"<p>动画执行时长，默认为 1000ms</p>\n"},"circle.animation.oneByOne":{"desc":"<p>动画依次执行的延迟时长，如果配置为 <code class=\"codespan\">true</code> 则会在上一个元素动画执行结束后执行下一个元素的动画，默认为 <code class=\"codespan\">false</code></p>\n"},"circle.animation.startTime":{"desc":"<p>动画执行的初始时间，这一初始时间不会在循环动画中被重复应用，默认为 0</p>\n"},"circle.animation.totalTime":{"desc":"<p>动画执行的最大时间，如果动画执行到达设定时间将会被终止</p>\n"},"circle.animation.loop":{"desc":"<p>动画循环次数，如果配置为 <code class=\"codespan\">true</code> 则会无限循环</p>\n"},"circle.animation.options":{"desc":"<p>特定动画类型执行时设定的额外参数</p>\n"},"circle.animation.controlOptions":{"desc":"<p>动画执行逻辑的控制参数：</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: 当动画状态变更时是否立即终止自身动画</li>\n<li><code class=\"codespan\">immediatelyApply</code>: 是否立即应用动画初始的视觉通道</li>\n</ul>\n"},"circle.zIndex":{"desc":"<p>设置<code class=\"codespan\">mark</code>图元对应的容器图形(group)的 zIndex</p>\n"},"circle.interactive":{"desc":"<p>类型：<code class=\"codespan\">boolean</code>\n是否必传： 否</p>\n"},"circle.context":{"desc":"<p>设置图元的上下文参数</p>\n"},"circle.setCustomizedShape":{"desc":"<p>设置自定义形状的回调函数，对应的 ts 类型定位如下：</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>其中<code class=\"codespan\">ICustomPath2D</code> 为 VRender 提供的绘制自定义的路径一个工具类</p>\n"},"circle.support3d":{"desc":"<p>当画布设置了 3d 视角的时候，是否支持 3d 模式</p>\n"},"circle.group":{"desc":"<p>设置父图元，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 父图元对应的 id</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> 父图元对应的语法元素，一般用于 API 调用场景</li>\n</ul>\n<p>如果不设置，会默认挂在到画布的根节点下面</p>\n"},"circle.from":{"desc":"<p>ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>通过<code class=\"codespan\">data</code> 属性值，申明图元依赖的数据</p>\n"},"circle.key":{"desc":"<p>设置图元数据元素的唯一标志符，用于计算图形元素的数据状态，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"circle.sort":{"desc":"<p>对图元中的所有图形元素进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"circle.groupBy":{"desc":"<p>设置分组的属性，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置分组<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析分组<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"circle.groupSort":{"desc":"<p>对图元中的分组进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"circle.coordinate":{"desc":"<p>设置该图元关联的坐标系对应的 id 或者坐标系对应的图形元素</p>\n"},"circle.state":{"desc":"<p>设置当前图元所有图形元素的状态值，支持三种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置图形的状态，比如说:<code class=\"codespan\">{ state: &#39;selected&#39;}</code> 就是给所有的图形设置状态为<code class=\"codespan\">&#39;selected&#39;</code>，通常这种情况，<code class=\"codespan\">encode</code> 中也会设置<code class=\"codespan\">&#39;selected&#39;</code>状态对应的图形通道映射</li>\n<li><code class=\"codespan\">string[]</code> 给图形设置多个状态，可以配置<code class=\"codespan\">stateSort</code>来影响对应状态执行图形通道映射的顺序</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析状态值的回调函数，返回参数为<code class=\"codespan\">string | string[]</code>，对应的 ts 类型定义为：</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"circle.stateSort":{"desc":"<p>设置当前图元所有图形元素的状态值的排序函数，会影响状态对应的图形通道映射的顺序，最先执行的状态可能被后续的状态覆盖图形通道映射结果，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"circle.transform":{"desc":"<p>设置图元对应的变换，所有的数据变换都可以配置在图元上，用于对图元的<code class=\"codespan\">join data</code> 执行变换；\n另外一种类型的变换就是对图形元素执行的变换，比如说<code class=\"codespan\">dodge</code>；\n通用的类型定义如下：</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>每中变换支持的参数不同</p>\n"},"circle.layout":{"desc":"<p>设置图元的布局参数，图元在参与布局的时候，存在两种角色：</p>\n<ul>\n<li>&#39;container&#39; 容器图元，一般是<code class=\"codespan\">group</code>图元</li>\n<li>&#39;item&#39; 布局子元素，作为容器图元的子节点</li>\n</ul>\n<p>注意，我们仅支持一层布局，如果是多层嵌套布局，建议使用自定义的布局方案进行实现；</p>\n<p>现在支持两种内容的布局：<code class=\"codespan\">grid</code> 布局 和 <code class=\"codespan\">relative</code>布局，相关类型定义如下</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>如果想要设置自定义的布局方案，<code class=\"codespan\">layout</code>也支持直接设置回调函数，回调函数的定义如下：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"circle.layout.display":{"desc":"<p>容器图元设置布局的类型，支持两种配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> 相对布局</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> 网格布局</li>\n</ul>\n"},"circle.layout.callback":{"desc":"<p>自定义该图元的回调函数，ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"circle.layout.skipBeforeLayouted":{"desc":"<p>在布局完成前，跳过执行阶段</p>\n"},"circle.layout.updateViewSignals":{"desc":"<p>是否更新默认的视图信号，也就是：<code class=\"codespan\">padding</code>、<code class=\"codespan\">viewWidth</code> 和 <code class=\"codespan\">viewHeight</code></p>\n<p>只能在设置了<code class=\"codespan\">{ layout: { display: &#39;relative&#39;} }</code>的容器图元上设置该属性</p>\n"},"circle.layout.maxChildWidth":{"desc":"<p>相对布局的父图元，设置子图元的最大宽度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的宽度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"circle.layout.maxChildHeight":{"desc":"<p>相对布局的父图元，设置子图元的最大高度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的高度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"circle.layout.position":{"desc":"<p>设置相对布局的子图元的位置，支持的配置有：</p>\n<ul>\n<li>&#39;top&#39; 相对于父图元的顶部</li>\n<li>&#39;bottom&#39; 相对于父图元的底部</li>\n<li>&#39;left&#39; 相对于父图元的左侧</li>\n<li>&#39;right&#39; 相对于父图元的右侧</li>\n<li>&#39;content&#39; 相对于父图元的中心，也就是内容区域</li>\n<li>&#39;auto&#39; 图元设置了坐标系的时候，根据关联的<code class=\"codespan\">scale</code>，自定计算相对于父图元的位置</li>\n</ul>\n"},"circle.layout.padding":{"desc":"<p>子图元内边距，单位 px，默认各方向内边距为 0，接受数值、数值数组以及对象设置。</p>\n<p>使用示例：</p>\n<pre><code class=\"lang-ts\">// 数值类型，设置内边距为 5\npadding: 5;\n// 数值数组，设置上下的内边距为 5，左右的内边距为 10，用法同 CSS 盒模型\npadding: [5, 10];\n// 数值数组，分别设置四个方向的内边距\npadding: [\n  5, // 上\n  10, // 右\n  5, // 下\n  10 // 左\n];\n// 对象类型\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"circle.layout.gridTemplateRows":{"desc":"<p>网格布局的父图元设置行的高度</p>\n"},"circle.layout.gridTemplateColumns":{"desc":"<p>网格布局的父图元设置列的宽度</p>\n"},"circle.layout.gridRowGap":{"desc":"<p>网格布局的父图元设置行行距</p>\n"},"circle.layout.gridColumnGap":{"desc":"<p>网格布局的父图元设置列间距</p>\n"},"circle.layout.gridRowStart":{"desc":"<p>网格布局的子图元设置行开始的位置</p>\n"},"circle.layout.gridRowEnd":{"desc":"<p>网格布局的子图元设置行结束的位置</p>\n"},"circle.layout.gridColumnStart":{"desc":"<p>网格布局的子图元设置列开始的位置</p>\n"},"circle.layout.gridColumnEnd":{"desc":"<p>网格布局的子图元设置列结束的位置</p>\n"},"circle.large":{"desc":"<p>是否开启大数据渲染模式</p>\n"},"circle.largeThreshold":{"desc":"<p>开启大数据渲染优化的阀值，对应的是 data 的长度</p>\n"},"circle.progressiveStep":{"desc":"<p>开启分片渲染的步长，对应的是分片的数据长度</p>\n"},"circle.progressiveThreshold":{"desc":"<p>开启分片渲染的阀值，对应的是单系列 data 的长度</p>\n"},"circle.morph":{"desc":"<p>是否对当前图元开启全局的过渡形变动画</p>\n"},"circle.morphKey":{"desc":"<p>用于匹配全局过渡形变动画的图元，具有相对的<code class=\"codespan\">morphKey</code>的图元，会进行形变动画</p>\n"},"circle.morphElementKey":{"desc":"<p>对于匹配上的前后图元，通过该配置，进行图形元素的匹配；如果不申明，我们默认会读取<code class=\"codespan\">key</code>配置，用于匹配图形元素，进行形变动画；\n默认支持一对一、一对多、多对一的图形形变动画</p>\n"},"polygon":{"desc":"<p><strong> polygon 图元 </strong></p>\n"},"polygon.type":{"desc":"<p>设置图元类型为 <code class=\"codespan\">polygon</code></p>\n"},"polygon.encode":{"desc":"<p>设置图元的视觉通道编码，默认支持三种数据变化状态：</p>\n<ul>\n<li><code class=\"codespan\">enter</code> 新增数据元素</li>\n<li><code class=\"codespan\">update</code> 数据元素更新</li>\n<li><code class=\"codespan\">exit</code> 数据元素被删除</li>\n</ul>\n<p>注意，这里的数据状态是根据<code class=\"codespan\">mark</code>的<code class=\"codespan\">key</code>自动生成的，我们会针对<code class=\"codespan\">mark</code>的绑定数据，根据<code class=\"codespan\">key</code>的配置，计算数据对应的唯一标志符，数据更新后，如果对应的唯一标志符不存在了，则状态为<code class=\"codespan\">exit</code>，如果存在，则为<code class=\"codespan\">update</code>；如果之前的数据不存在改唯一标志符，则数据元素对应的状态为<code class=\"codespan\">enter</code></p>\n<p>默认支持一种交互状态：</p>\n<ul>\n<li><code class=\"codespan\">hover</code> 鼠标 hover 到具体的图形上，给图形设置对应的视觉通道编码</li>\n</ul>\n"},"polygon.encode.enter":{"desc":"<p>设置图元在数据初始化状态执行的视觉通道映射，注意数据更新的时候不再执行</p>\n"},"polygon.encode.enter.points":{"desc":"<p>多边形对应的点</p>\n"},"polygon.encode.enter.borderRadius":{"desc":"<p>设置圆角，默认为 0，支持两种格式的设置：</p>\n<ul>\n<li><code class=\"codespan\">number</code>: 给所有的角设置统一的圆角</li>\n<li><code class=\"codespan\">number[]</code>: 分别给每个角设置不同的圆角</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"polygon.encode.enter.x":{"desc":"<p>图元的 x 坐标</p>\n"},"polygon.encode.enter.y":{"desc":"<p>图元 y 坐标</p>\n"},"polygon.encode.enter.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"polygon.encode.enter.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"polygon.encode.enter.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"polygon.encode.enter.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"polygon.encode.enter.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"polygon.encode.enter.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"polygon.encode.enter.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"polygon.encode.enter.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"polygon.encode.enter.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"polygon.encode.enter.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"polygon.encode.enter.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"polygon.encode.enter.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"polygon.encode.enter.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"polygon.encode.enter.outerBorder":{"desc":"<p>外描边</p>\n"},"polygon.encode.enter.innerBorder":{"desc":"<p>内描边</p>\n"},"polygon.encode.enter.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"polygon.encode.enter.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"polygon.encode.enter.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"polygon.encode.enter.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"polygon.encode.enter.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"polygon.encode.enter.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"polygon.encode.enter.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"polygon.encode.enter.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"polygon.encode.enter.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"polygon.encode.enter.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"polygon.encode.enter.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"polygon.encode.enter.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"polygon.encode.enter.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"polygon.encode.enter.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"polygon.encode.enter.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"polygon.encode.enter.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"polygon.encode.enter.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"polygon.encode.enter.texture":{"desc":"<p>图元纹理</p>\n"},"polygon.encode.enter.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"polygon.encode.enter.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"polygon.encode.enter.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"polygon.encode.enter.blur":{"desc":"<p>图元边缘模糊</p>\n"},"polygon.encode.enter.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"polygon.encode.update":{"desc":"<p>设置图元在数据更新状态执行的视觉通道映射</p>\n"},"polygon.encode.update.points":{"desc":"<p>多边形对应的点</p>\n"},"polygon.encode.update.borderRadius":{"desc":"<p>设置圆角，默认为 0，支持两种格式的设置：</p>\n<ul>\n<li><code class=\"codespan\">number</code>: 给所有的角设置统一的圆角</li>\n<li><code class=\"codespan\">number[]</code>: 分别给每个角设置不同的圆角</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"polygon.encode.update.x":{"desc":"<p>图元的 x 坐标</p>\n"},"polygon.encode.update.y":{"desc":"<p>图元 y 坐标</p>\n"},"polygon.encode.update.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"polygon.encode.update.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"polygon.encode.update.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"polygon.encode.update.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"polygon.encode.update.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"polygon.encode.update.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"polygon.encode.update.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"polygon.encode.update.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"polygon.encode.update.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"polygon.encode.update.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"polygon.encode.update.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"polygon.encode.update.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"polygon.encode.update.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"polygon.encode.update.outerBorder":{"desc":"<p>外描边</p>\n"},"polygon.encode.update.innerBorder":{"desc":"<p>内描边</p>\n"},"polygon.encode.update.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"polygon.encode.update.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"polygon.encode.update.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"polygon.encode.update.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"polygon.encode.update.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"polygon.encode.update.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"polygon.encode.update.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"polygon.encode.update.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"polygon.encode.update.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"polygon.encode.update.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"polygon.encode.update.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"polygon.encode.update.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"polygon.encode.update.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"polygon.encode.update.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"polygon.encode.update.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"polygon.encode.update.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"polygon.encode.update.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"polygon.encode.update.texture":{"desc":"<p>图元纹理</p>\n"},"polygon.encode.update.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"polygon.encode.update.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"polygon.encode.update.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"polygon.encode.update.blur":{"desc":"<p>图元边缘模糊</p>\n"},"polygon.encode.update.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"polygon.encode.exit":{"desc":"<p>设置图元在数据被删除的状态下执行的视觉通道映射</p>\n"},"polygon.encode.exit.points":{"desc":"<p>多边形对应的点</p>\n"},"polygon.encode.exit.borderRadius":{"desc":"<p>设置圆角，默认为 0，支持两种格式的设置：</p>\n<ul>\n<li><code class=\"codespan\">number</code>: 给所有的角设置统一的圆角</li>\n<li><code class=\"codespan\">number[]</code>: 分别给每个角设置不同的圆角</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"polygon.encode.exit.x":{"desc":"<p>图元的 x 坐标</p>\n"},"polygon.encode.exit.y":{"desc":"<p>图元 y 坐标</p>\n"},"polygon.encode.exit.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"polygon.encode.exit.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"polygon.encode.exit.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"polygon.encode.exit.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"polygon.encode.exit.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"polygon.encode.exit.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"polygon.encode.exit.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"polygon.encode.exit.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"polygon.encode.exit.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"polygon.encode.exit.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"polygon.encode.exit.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"polygon.encode.exit.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"polygon.encode.exit.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"polygon.encode.exit.outerBorder":{"desc":"<p>外描边</p>\n"},"polygon.encode.exit.innerBorder":{"desc":"<p>内描边</p>\n"},"polygon.encode.exit.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"polygon.encode.exit.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"polygon.encode.exit.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"polygon.encode.exit.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"polygon.encode.exit.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"polygon.encode.exit.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"polygon.encode.exit.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"polygon.encode.exit.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"polygon.encode.exit.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"polygon.encode.exit.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"polygon.encode.exit.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"polygon.encode.exit.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"polygon.encode.exit.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"polygon.encode.exit.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"polygon.encode.exit.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"polygon.encode.exit.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"polygon.encode.exit.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"polygon.encode.exit.texture":{"desc":"<p>图元纹理</p>\n"},"polygon.encode.exit.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"polygon.encode.exit.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"polygon.encode.exit.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"polygon.encode.exit.blur":{"desc":"<p>图元边缘模糊</p>\n"},"polygon.encode.exit.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"polygon.encode.hover":{"desc":"<p>设置<code class=\"codespan\">hover</code>状态的时候，图元对应的视觉通道映射</p>\n"},"polygon.encode.hover.points":{"desc":"<p>多边形对应的点</p>\n"},"polygon.encode.hover.borderRadius":{"desc":"<p>设置圆角，默认为 0，支持两种格式的设置：</p>\n<ul>\n<li><code class=\"codespan\">number</code>: 给所有的角设置统一的圆角</li>\n<li><code class=\"codespan\">number[]</code>: 分别给每个角设置不同的圆角</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"polygon.encode.hover.x":{"desc":"<p>图元的 x 坐标</p>\n"},"polygon.encode.hover.y":{"desc":"<p>图元 y 坐标</p>\n"},"polygon.encode.hover.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"polygon.encode.hover.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"polygon.encode.hover.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"polygon.encode.hover.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"polygon.encode.hover.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"polygon.encode.hover.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"polygon.encode.hover.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"polygon.encode.hover.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"polygon.encode.hover.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"polygon.encode.hover.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"polygon.encode.hover.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"polygon.encode.hover.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"polygon.encode.hover.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"polygon.encode.hover.outerBorder":{"desc":"<p>外描边</p>\n"},"polygon.encode.hover.innerBorder":{"desc":"<p>内描边</p>\n"},"polygon.encode.hover.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"polygon.encode.hover.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"polygon.encode.hover.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"polygon.encode.hover.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"polygon.encode.hover.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"polygon.encode.hover.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"polygon.encode.hover.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"polygon.encode.hover.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"polygon.encode.hover.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"polygon.encode.hover.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"polygon.encode.hover.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"polygon.encode.hover.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"polygon.encode.hover.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"polygon.encode.hover.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"polygon.encode.hover.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"polygon.encode.hover.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"polygon.encode.hover.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"polygon.encode.hover.texture":{"desc":"<p>图元纹理</p>\n"},"polygon.encode.hover.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"polygon.encode.hover.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"polygon.encode.hover.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"polygon.encode.hover.blur":{"desc":"<p>图元边缘模糊</p>\n"},"polygon.encode.hover.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"polygon.animationState":{"desc":"<p>类型：<code class=\"codespan\">MarkFunctionType</code>\n是否必传： 否\nanimation attributes</p>\n"},"polygon.animation":{"desc":"<p>支持设置各种状态对应的动画，数据驱动的动画状态有三种：</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>交互触发的状态变更，通过统一的交互动画进行配置，配置的 key 为 <code class=\"codespan\">state</code></p>\n"},"polygon.animation.type":{"desc":"<p>动画执行类型，指定特定的内置动画执行效果</p>\n<p>通用的内置动画类型包括：</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: 渐入渐出动画</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: 缩放动画</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: 移入移出动画</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: 旋转动画</li>\n<li><code class=\"codespan\">update</code>: 更新动画</li>\n</ul>\n<p>polygon图元支持的额外动画类型包括：</p>\n<ul>\n<li><code class=\"codespan\">growPointsIn</code>/<code class=\"codespan\">growPointsOut</code>: 点生长动画</li>\n</ul>\n"},"polygon.animation.channel":{"desc":"<p>动画执行前后的视觉通道，与 <code class=\"codespan\">type</code> 配置冲突</p>\n"},"polygon.animation.custom":{"desc":"<p>自定义动画，如果设定了自定义动画配置则会替换默认的视觉通道插值逻辑</p>\n"},"polygon.animation.customParameters":{"desc":"<p>自定义动画参数</p>\n"},"polygon.animation.easing":{"desc":"<p>动画缓动，默认为 <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"polygon.animation.delay":{"desc":"<p>动画执行的延迟时间，默认为 0</p>\n"},"polygon.animation.duration":{"desc":"<p>动画执行时长，默认为 1000ms</p>\n"},"polygon.animation.oneByOne":{"desc":"<p>动画依次执行的延迟时长，如果配置为 <code class=\"codespan\">true</code> 则会在上一个元素动画执行结束后执行下一个元素的动画，默认为 <code class=\"codespan\">false</code></p>\n"},"polygon.animation.startTime":{"desc":"<p>动画执行的初始时间，这一初始时间不会在循环动画中被重复应用，默认为 0</p>\n"},"polygon.animation.totalTime":{"desc":"<p>动画执行的最大时间，如果动画执行到达设定时间将会被终止</p>\n"},"polygon.animation.loop":{"desc":"<p>动画循环次数，如果配置为 <code class=\"codespan\">true</code> 则会无限循环</p>\n"},"polygon.animation.options":{"desc":"<p>特定动画类型执行时设定的额外参数</p>\n"},"polygon.animation.controlOptions":{"desc":"<p>动画执行逻辑的控制参数：</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: 当动画状态变更时是否立即终止自身动画</li>\n<li><code class=\"codespan\">immediatelyApply</code>: 是否立即应用动画初始的视觉通道</li>\n</ul>\n"},"polygon.zIndex":{"desc":"<p>设置<code class=\"codespan\">mark</code>图元对应的容器图形(group)的 zIndex</p>\n"},"polygon.interactive":{"desc":"<p>类型：<code class=\"codespan\">boolean</code>\n是否必传： 否</p>\n"},"polygon.context":{"desc":"<p>设置图元的上下文参数</p>\n"},"polygon.setCustomizedShape":{"desc":"<p>设置自定义形状的回调函数，对应的 ts 类型定位如下：</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>其中<code class=\"codespan\">ICustomPath2D</code> 为 VRender 提供的绘制自定义的路径一个工具类</p>\n"},"polygon.support3d":{"desc":"<p>当画布设置了 3d 视角的时候，是否支持 3d 模式</p>\n"},"polygon.group":{"desc":"<p>设置父图元，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 父图元对应的 id</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> 父图元对应的语法元素，一般用于 API 调用场景</li>\n</ul>\n<p>如果不设置，会默认挂在到画布的根节点下面</p>\n"},"polygon.from":{"desc":"<p>ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>通过<code class=\"codespan\">data</code> 属性值，申明图元依赖的数据</p>\n"},"polygon.key":{"desc":"<p>设置图元数据元素的唯一标志符，用于计算图形元素的数据状态，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"polygon.sort":{"desc":"<p>对图元中的所有图形元素进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"polygon.groupBy":{"desc":"<p>设置分组的属性，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置分组<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析分组<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"polygon.groupSort":{"desc":"<p>对图元中的分组进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"polygon.coordinate":{"desc":"<p>设置该图元关联的坐标系对应的 id 或者坐标系对应的图形元素</p>\n"},"polygon.state":{"desc":"<p>设置当前图元所有图形元素的状态值，支持三种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置图形的状态，比如说:<code class=\"codespan\">{ state: &#39;selected&#39;}</code> 就是给所有的图形设置状态为<code class=\"codespan\">&#39;selected&#39;</code>，通常这种情况，<code class=\"codespan\">encode</code> 中也会设置<code class=\"codespan\">&#39;selected&#39;</code>状态对应的图形通道映射</li>\n<li><code class=\"codespan\">string[]</code> 给图形设置多个状态，可以配置<code class=\"codespan\">stateSort</code>来影响对应状态执行图形通道映射的顺序</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析状态值的回调函数，返回参数为<code class=\"codespan\">string | string[]</code>，对应的 ts 类型定义为：</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"polygon.stateSort":{"desc":"<p>设置当前图元所有图形元素的状态值的排序函数，会影响状态对应的图形通道映射的顺序，最先执行的状态可能被后续的状态覆盖图形通道映射结果，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"polygon.transform":{"desc":"<p>设置图元对应的变换，所有的数据变换都可以配置在图元上，用于对图元的<code class=\"codespan\">join data</code> 执行变换；\n另外一种类型的变换就是对图形元素执行的变换，比如说<code class=\"codespan\">dodge</code>；\n通用的类型定义如下：</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>每中变换支持的参数不同</p>\n"},"polygon.layout":{"desc":"<p>设置图元的布局参数，图元在参与布局的时候，存在两种角色：</p>\n<ul>\n<li>&#39;container&#39; 容器图元，一般是<code class=\"codespan\">group</code>图元</li>\n<li>&#39;item&#39; 布局子元素，作为容器图元的子节点</li>\n</ul>\n<p>注意，我们仅支持一层布局，如果是多层嵌套布局，建议使用自定义的布局方案进行实现；</p>\n<p>现在支持两种内容的布局：<code class=\"codespan\">grid</code> 布局 和 <code class=\"codespan\">relative</code>布局，相关类型定义如下</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>如果想要设置自定义的布局方案，<code class=\"codespan\">layout</code>也支持直接设置回调函数，回调函数的定义如下：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"polygon.layout.display":{"desc":"<p>容器图元设置布局的类型，支持两种配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> 相对布局</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> 网格布局</li>\n</ul>\n"},"polygon.layout.callback":{"desc":"<p>自定义该图元的回调函数，ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"polygon.layout.skipBeforeLayouted":{"desc":"<p>在布局完成前，跳过执行阶段</p>\n"},"polygon.layout.updateViewSignals":{"desc":"<p>是否更新默认的视图信号，也就是：<code class=\"codespan\">padding</code>、<code class=\"codespan\">viewWidth</code> 和 <code class=\"codespan\">viewHeight</code></p>\n<p>只能在设置了<code class=\"codespan\">{ layout: { display: &#39;relative&#39;} }</code>的容器图元上设置该属性</p>\n"},"polygon.layout.maxChildWidth":{"desc":"<p>相对布局的父图元，设置子图元的最大宽度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的宽度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"polygon.layout.maxChildHeight":{"desc":"<p>相对布局的父图元，设置子图元的最大高度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的高度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"polygon.layout.position":{"desc":"<p>设置相对布局的子图元的位置，支持的配置有：</p>\n<ul>\n<li>&#39;top&#39; 相对于父图元的顶部</li>\n<li>&#39;bottom&#39; 相对于父图元的底部</li>\n<li>&#39;left&#39; 相对于父图元的左侧</li>\n<li>&#39;right&#39; 相对于父图元的右侧</li>\n<li>&#39;content&#39; 相对于父图元的中心，也就是内容区域</li>\n<li>&#39;auto&#39; 图元设置了坐标系的时候，根据关联的<code class=\"codespan\">scale</code>，自定计算相对于父图元的位置</li>\n</ul>\n"},"polygon.layout.padding":{"desc":"<p>子图元内边距，单位 px，默认各方向内边距为 0，接受数值、数值数组以及对象设置。</p>\n<p>使用示例：</p>\n<pre><code class=\"lang-ts\">// 数值类型，设置内边距为 5\npadding: 5;\n// 数值数组，设置上下的内边距为 5，左右的内边距为 10，用法同 CSS 盒模型\npadding: [5, 10];\n// 数值数组，分别设置四个方向的内边距\npadding: [\n  5, // 上\n  10, // 右\n  5, // 下\n  10 // 左\n];\n// 对象类型\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"polygon.layout.gridTemplateRows":{"desc":"<p>网格布局的父图元设置行的高度</p>\n"},"polygon.layout.gridTemplateColumns":{"desc":"<p>网格布局的父图元设置列的宽度</p>\n"},"polygon.layout.gridRowGap":{"desc":"<p>网格布局的父图元设置行行距</p>\n"},"polygon.layout.gridColumnGap":{"desc":"<p>网格布局的父图元设置列间距</p>\n"},"polygon.layout.gridRowStart":{"desc":"<p>网格布局的子图元设置行开始的位置</p>\n"},"polygon.layout.gridRowEnd":{"desc":"<p>网格布局的子图元设置行结束的位置</p>\n"},"polygon.layout.gridColumnStart":{"desc":"<p>网格布局的子图元设置列开始的位置</p>\n"},"polygon.layout.gridColumnEnd":{"desc":"<p>网格布局的子图元设置列结束的位置</p>\n"},"polygon.large":{"desc":"<p>是否开启大数据渲染模式</p>\n"},"polygon.largeThreshold":{"desc":"<p>开启大数据渲染优化的阀值，对应的是 data 的长度</p>\n"},"polygon.progressiveStep":{"desc":"<p>开启分片渲染的步长，对应的是分片的数据长度</p>\n"},"polygon.progressiveThreshold":{"desc":"<p>开启分片渲染的阀值，对应的是单系列 data 的长度</p>\n"},"polygon.morph":{"desc":"<p>是否对当前图元开启全局的过渡形变动画</p>\n"},"polygon.morphKey":{"desc":"<p>用于匹配全局过渡形变动画的图元，具有相对的<code class=\"codespan\">morphKey</code>的图元，会进行形变动画</p>\n"},"polygon.morphElementKey":{"desc":"<p>对于匹配上的前后图元，通过该配置，进行图形元素的匹配；如果不申明，我们默认会读取<code class=\"codespan\">key</code>配置，用于匹配图形元素，进行形变动画；\n默认支持一对一、一对多、多对一的图形形变动画</p>\n"},"shape":{"desc":"<p><strong> shape 图元 </strong></p>\n"},"shape.type":{"desc":"<p>设置图元类型为 <code class=\"codespan\">shape</code></p>\n"},"shape.encode":{"desc":"<p>设置图元的视觉通道编码，默认支持三种数据变化状态：</p>\n<ul>\n<li><code class=\"codespan\">enter</code> 新增数据元素</li>\n<li><code class=\"codespan\">update</code> 数据元素更新</li>\n<li><code class=\"codespan\">exit</code> 数据元素被删除</li>\n</ul>\n<p>注意，这里的数据状态是根据<code class=\"codespan\">mark</code>的<code class=\"codespan\">key</code>自动生成的，我们会针对<code class=\"codespan\">mark</code>的绑定数据，根据<code class=\"codespan\">key</code>的配置，计算数据对应的唯一标志符，数据更新后，如果对应的唯一标志符不存在了，则状态为<code class=\"codespan\">exit</code>，如果存在，则为<code class=\"codespan\">update</code>；如果之前的数据不存在改唯一标志符，则数据元素对应的状态为<code class=\"codespan\">enter</code></p>\n<p>默认支持一种交互状态：</p>\n<ul>\n<li><code class=\"codespan\">hover</code> 鼠标 hover 到具体的图形上，给图形设置对应的视觉通道编码</li>\n</ul>\n"},"shape.encode.enter":{"desc":"<p>设置图元在数据初始化状态执行的视觉通道映射，注意数据更新的时候不再执行</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"shape.encode.enter.x":{"desc":"<p>图元的 x 坐标</p>\n"},"shape.encode.enter.y":{"desc":"<p>图元 y 坐标</p>\n"},"shape.encode.enter.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"shape.encode.enter.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"shape.encode.enter.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"shape.encode.enter.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"shape.encode.enter.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"shape.encode.enter.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"shape.encode.enter.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"shape.encode.enter.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"shape.encode.enter.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"shape.encode.enter.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"shape.encode.enter.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"shape.encode.enter.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"shape.encode.enter.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"shape.encode.enter.outerBorder":{"desc":"<p>外描边</p>\n"},"shape.encode.enter.innerBorder":{"desc":"<p>内描边</p>\n"},"shape.encode.enter.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"shape.encode.enter.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"shape.encode.enter.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"shape.encode.enter.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"shape.encode.enter.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"shape.encode.enter.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"shape.encode.enter.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"shape.encode.enter.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"shape.encode.enter.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"shape.encode.enter.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"shape.encode.enter.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"shape.encode.enter.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"shape.encode.enter.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"shape.encode.enter.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"shape.encode.enter.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"shape.encode.enter.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"shape.encode.enter.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"shape.encode.enter.texture":{"desc":"<p>图元纹理</p>\n"},"shape.encode.enter.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"shape.encode.enter.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"shape.encode.enter.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"shape.encode.enter.blur":{"desc":"<p>图元边缘模糊</p>\n"},"shape.encode.enter.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"shape.encode.update":{"desc":"<p>设置图元在数据更新状态执行的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"shape.encode.update.x":{"desc":"<p>图元的 x 坐标</p>\n"},"shape.encode.update.y":{"desc":"<p>图元 y 坐标</p>\n"},"shape.encode.update.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"shape.encode.update.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"shape.encode.update.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"shape.encode.update.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"shape.encode.update.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"shape.encode.update.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"shape.encode.update.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"shape.encode.update.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"shape.encode.update.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"shape.encode.update.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"shape.encode.update.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"shape.encode.update.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"shape.encode.update.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"shape.encode.update.outerBorder":{"desc":"<p>外描边</p>\n"},"shape.encode.update.innerBorder":{"desc":"<p>内描边</p>\n"},"shape.encode.update.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"shape.encode.update.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"shape.encode.update.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"shape.encode.update.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"shape.encode.update.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"shape.encode.update.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"shape.encode.update.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"shape.encode.update.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"shape.encode.update.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"shape.encode.update.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"shape.encode.update.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"shape.encode.update.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"shape.encode.update.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"shape.encode.update.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"shape.encode.update.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"shape.encode.update.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"shape.encode.update.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"shape.encode.update.texture":{"desc":"<p>图元纹理</p>\n"},"shape.encode.update.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"shape.encode.update.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"shape.encode.update.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"shape.encode.update.blur":{"desc":"<p>图元边缘模糊</p>\n"},"shape.encode.update.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"shape.encode.exit":{"desc":"<p>设置图元在数据被删除的状态下执行的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"shape.encode.exit.x":{"desc":"<p>图元的 x 坐标</p>\n"},"shape.encode.exit.y":{"desc":"<p>图元 y 坐标</p>\n"},"shape.encode.exit.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"shape.encode.exit.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"shape.encode.exit.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"shape.encode.exit.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"shape.encode.exit.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"shape.encode.exit.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"shape.encode.exit.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"shape.encode.exit.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"shape.encode.exit.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"shape.encode.exit.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"shape.encode.exit.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"shape.encode.exit.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"shape.encode.exit.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"shape.encode.exit.outerBorder":{"desc":"<p>外描边</p>\n"},"shape.encode.exit.innerBorder":{"desc":"<p>内描边</p>\n"},"shape.encode.exit.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"shape.encode.exit.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"shape.encode.exit.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"shape.encode.exit.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"shape.encode.exit.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"shape.encode.exit.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"shape.encode.exit.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"shape.encode.exit.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"shape.encode.exit.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"shape.encode.exit.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"shape.encode.exit.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"shape.encode.exit.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"shape.encode.exit.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"shape.encode.exit.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"shape.encode.exit.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"shape.encode.exit.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"shape.encode.exit.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"shape.encode.exit.texture":{"desc":"<p>图元纹理</p>\n"},"shape.encode.exit.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"shape.encode.exit.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"shape.encode.exit.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"shape.encode.exit.blur":{"desc":"<p>图元边缘模糊</p>\n"},"shape.encode.exit.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"shape.encode.hover":{"desc":"<p>设置<code class=\"codespan\">hover</code>状态的时候，图元对应的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"shape.encode.hover.x":{"desc":"<p>图元的 x 坐标</p>\n"},"shape.encode.hover.y":{"desc":"<p>图元 y 坐标</p>\n"},"shape.encode.hover.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"shape.encode.hover.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"shape.encode.hover.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"shape.encode.hover.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"shape.encode.hover.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"shape.encode.hover.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"shape.encode.hover.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"shape.encode.hover.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"shape.encode.hover.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"shape.encode.hover.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"shape.encode.hover.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"shape.encode.hover.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"shape.encode.hover.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"shape.encode.hover.outerBorder":{"desc":"<p>外描边</p>\n"},"shape.encode.hover.innerBorder":{"desc":"<p>内描边</p>\n"},"shape.encode.hover.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"shape.encode.hover.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"shape.encode.hover.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"shape.encode.hover.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"shape.encode.hover.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"shape.encode.hover.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"shape.encode.hover.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"shape.encode.hover.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"shape.encode.hover.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"shape.encode.hover.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"shape.encode.hover.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"shape.encode.hover.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"shape.encode.hover.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"shape.encode.hover.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"shape.encode.hover.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"shape.encode.hover.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"shape.encode.hover.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"shape.encode.hover.texture":{"desc":"<p>图元纹理</p>\n"},"shape.encode.hover.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"shape.encode.hover.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"shape.encode.hover.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"shape.encode.hover.blur":{"desc":"<p>图元边缘模糊</p>\n"},"shape.encode.hover.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"shape.animationState":{"desc":"<p>类型：<code class=\"codespan\">MarkFunctionType</code>\n是否必传： 否\nanimation attributes</p>\n"},"shape.animation":{"desc":"<p>支持设置各种状态对应的动画，数据驱动的动画状态有三种：</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>交互触发的状态变更，通过统一的交互动画进行配置，配置的 key 为 <code class=\"codespan\">state</code></p>\n"},"shape.animation.type":{"desc":"<p>动画执行类型，指定特定的内置动画执行效果</p>\n<p>通用的内置动画类型包括：</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: 渐入渐出动画</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: 缩放动画</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: 移入移出动画</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: 旋转动画</li>\n<li><code class=\"codespan\">update</code>: 更新动画</li>\n</ul>\n"},"shape.animation.channel":{"desc":"<p>动画执行前后的视觉通道，与 <code class=\"codespan\">type</code> 配置冲突</p>\n"},"shape.animation.custom":{"desc":"<p>自定义动画，如果设定了自定义动画配置则会替换默认的视觉通道插值逻辑</p>\n"},"shape.animation.customParameters":{"desc":"<p>自定义动画参数</p>\n"},"shape.animation.easing":{"desc":"<p>动画缓动，默认为 <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"shape.animation.delay":{"desc":"<p>动画执行的延迟时间，默认为 0</p>\n"},"shape.animation.duration":{"desc":"<p>动画执行时长，默认为 1000ms</p>\n"},"shape.animation.oneByOne":{"desc":"<p>动画依次执行的延迟时长，如果配置为 <code class=\"codespan\">true</code> 则会在上一个元素动画执行结束后执行下一个元素的动画，默认为 <code class=\"codespan\">false</code></p>\n"},"shape.animation.startTime":{"desc":"<p>动画执行的初始时间，这一初始时间不会在循环动画中被重复应用，默认为 0</p>\n"},"shape.animation.totalTime":{"desc":"<p>动画执行的最大时间，如果动画执行到达设定时间将会被终止</p>\n"},"shape.animation.loop":{"desc":"<p>动画循环次数，如果配置为 <code class=\"codespan\">true</code> 则会无限循环</p>\n"},"shape.animation.options":{"desc":"<p>特定动画类型执行时设定的额外参数</p>\n"},"shape.animation.controlOptions":{"desc":"<p>动画执行逻辑的控制参数：</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: 当动画状态变更时是否立即终止自身动画</li>\n<li><code class=\"codespan\">immediatelyApply</code>: 是否立即应用动画初始的视觉通道</li>\n</ul>\n"},"shape.zIndex":{"desc":"<p>设置<code class=\"codespan\">mark</code>图元对应的容器图形(group)的 zIndex</p>\n"},"shape.interactive":{"desc":"<p>类型：<code class=\"codespan\">boolean</code>\n是否必传： 否</p>\n"},"shape.context":{"desc":"<p>设置图元的上下文参数</p>\n"},"shape.setCustomizedShape":{"desc":"<p>设置自定义形状的回调函数，对应的 ts 类型定位如下：</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>其中<code class=\"codespan\">ICustomPath2D</code> 为 VRender 提供的绘制自定义的路径一个工具类</p>\n"},"shape.support3d":{"desc":"<p>当画布设置了 3d 视角的时候，是否支持 3d 模式</p>\n"},"shape.group":{"desc":"<p>设置父图元，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 父图元对应的 id</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> 父图元对应的语法元素，一般用于 API 调用场景</li>\n</ul>\n<p>如果不设置，会默认挂在到画布的根节点下面</p>\n"},"shape.from":{"desc":"<p>ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>通过<code class=\"codespan\">data</code> 属性值，申明图元依赖的数据</p>\n"},"shape.key":{"desc":"<p>设置图元数据元素的唯一标志符，用于计算图形元素的数据状态，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"shape.sort":{"desc":"<p>对图元中的所有图形元素进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"shape.groupBy":{"desc":"<p>设置分组的属性，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置分组<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析分组<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"shape.groupSort":{"desc":"<p>对图元中的分组进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"shape.coordinate":{"desc":"<p>设置该图元关联的坐标系对应的 id 或者坐标系对应的图形元素</p>\n"},"shape.state":{"desc":"<p>设置当前图元所有图形元素的状态值，支持三种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置图形的状态，比如说:<code class=\"codespan\">{ state: &#39;selected&#39;}</code> 就是给所有的图形设置状态为<code class=\"codespan\">&#39;selected&#39;</code>，通常这种情况，<code class=\"codespan\">encode</code> 中也会设置<code class=\"codespan\">&#39;selected&#39;</code>状态对应的图形通道映射</li>\n<li><code class=\"codespan\">string[]</code> 给图形设置多个状态，可以配置<code class=\"codespan\">stateSort</code>来影响对应状态执行图形通道映射的顺序</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析状态值的回调函数，返回参数为<code class=\"codespan\">string | string[]</code>，对应的 ts 类型定义为：</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"shape.stateSort":{"desc":"<p>设置当前图元所有图形元素的状态值的排序函数，会影响状态对应的图形通道映射的顺序，最先执行的状态可能被后续的状态覆盖图形通道映射结果，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"shape.transform":{"desc":"<p>设置图元对应的变换，所有的数据变换都可以配置在图元上，用于对图元的<code class=\"codespan\">join data</code> 执行变换；\n另外一种类型的变换就是对图形元素执行的变换，比如说<code class=\"codespan\">dodge</code>；\n通用的类型定义如下：</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>每中变换支持的参数不同</p>\n"},"shape.layout":{"desc":"<p>设置图元的布局参数，图元在参与布局的时候，存在两种角色：</p>\n<ul>\n<li>&#39;container&#39; 容器图元，一般是<code class=\"codespan\">group</code>图元</li>\n<li>&#39;item&#39; 布局子元素，作为容器图元的子节点</li>\n</ul>\n<p>注意，我们仅支持一层布局，如果是多层嵌套布局，建议使用自定义的布局方案进行实现；</p>\n<p>现在支持两种内容的布局：<code class=\"codespan\">grid</code> 布局 和 <code class=\"codespan\">relative</code>布局，相关类型定义如下</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>如果想要设置自定义的布局方案，<code class=\"codespan\">layout</code>也支持直接设置回调函数，回调函数的定义如下：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"shape.layout.display":{"desc":"<p>容器图元设置布局的类型，支持两种配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> 相对布局</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> 网格布局</li>\n</ul>\n"},"shape.layout.callback":{"desc":"<p>自定义该图元的回调函数，ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"shape.layout.skipBeforeLayouted":{"desc":"<p>在布局完成前，跳过执行阶段</p>\n"},"shape.layout.updateViewSignals":{"desc":"<p>是否更新默认的视图信号，也就是：<code class=\"codespan\">padding</code>、<code class=\"codespan\">viewWidth</code> 和 <code class=\"codespan\">viewHeight</code></p>\n<p>只能在设置了<code class=\"codespan\">{ layout: { display: &#39;relative&#39;} }</code>的容器图元上设置该属性</p>\n"},"shape.layout.maxChildWidth":{"desc":"<p>相对布局的父图元，设置子图元的最大宽度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的宽度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"shape.layout.maxChildHeight":{"desc":"<p>相对布局的父图元，设置子图元的最大高度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的高度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"shape.layout.position":{"desc":"<p>设置相对布局的子图元的位置，支持的配置有：</p>\n<ul>\n<li>&#39;top&#39; 相对于父图元的顶部</li>\n<li>&#39;bottom&#39; 相对于父图元的底部</li>\n<li>&#39;left&#39; 相对于父图元的左侧</li>\n<li>&#39;right&#39; 相对于父图元的右侧</li>\n<li>&#39;content&#39; 相对于父图元的中心，也就是内容区域</li>\n<li>&#39;auto&#39; 图元设置了坐标系的时候，根据关联的<code class=\"codespan\">scale</code>，自定计算相对于父图元的位置</li>\n</ul>\n"},"shape.layout.padding":{"desc":"<p>子图元内边距，单位 px，默认各方向内边距为 0，接受数值、数值数组以及对象设置。</p>\n<p>使用示例：</p>\n<pre><code class=\"lang-ts\">// 数值类型，设置内边距为 5\npadding: 5;\n// 数值数组，设置上下的内边距为 5，左右的内边距为 10，用法同 CSS 盒模型\npadding: [5, 10];\n// 数值数组，分别设置四个方向的内边距\npadding: [\n  5, // 上\n  10, // 右\n  5, // 下\n  10 // 左\n];\n// 对象类型\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"shape.layout.gridTemplateRows":{"desc":"<p>网格布局的父图元设置行的高度</p>\n"},"shape.layout.gridTemplateColumns":{"desc":"<p>网格布局的父图元设置列的宽度</p>\n"},"shape.layout.gridRowGap":{"desc":"<p>网格布局的父图元设置行行距</p>\n"},"shape.layout.gridColumnGap":{"desc":"<p>网格布局的父图元设置列间距</p>\n"},"shape.layout.gridRowStart":{"desc":"<p>网格布局的子图元设置行开始的位置</p>\n"},"shape.layout.gridRowEnd":{"desc":"<p>网格布局的子图元设置行结束的位置</p>\n"},"shape.layout.gridColumnStart":{"desc":"<p>网格布局的子图元设置列开始的位置</p>\n"},"shape.layout.gridColumnEnd":{"desc":"<p>网格布局的子图元设置列结束的位置</p>\n"},"shape.large":{"desc":"<p>是否开启大数据渲染模式</p>\n"},"shape.largeThreshold":{"desc":"<p>开启大数据渲染优化的阀值，对应的是 data 的长度</p>\n"},"shape.progressiveStep":{"desc":"<p>开启分片渲染的步长，对应的是分片的数据长度</p>\n"},"shape.progressiveThreshold":{"desc":"<p>开启分片渲染的阀值，对应的是单系列 data 的长度</p>\n"},"shape.morph":{"desc":"<p>是否对当前图元开启全局的过渡形变动画</p>\n"},"shape.morphKey":{"desc":"<p>用于匹配全局过渡形变动画的图元，具有相对的<code class=\"codespan\">morphKey</code>的图元，会进行形变动画</p>\n"},"shape.morphElementKey":{"desc":"<p>对于匹配上的前后图元，通过该配置，进行图形元素的匹配；如果不申明，我们默认会读取<code class=\"codespan\">key</code>配置，用于匹配图形元素，进行形变动画；\n默认支持一对一、一对多、多对一的图形形变动画</p>\n"},"path":{"desc":"<p><strong> path 图元 </strong></p>\n"},"path.type":{"desc":"<p>设置图元类型为 <code class=\"codespan\">path</code></p>\n"},"path.encode":{"desc":"<p>设置图元的视觉通道编码，默认支持三种数据变化状态：</p>\n<ul>\n<li><code class=\"codespan\">enter</code> 新增数据元素</li>\n<li><code class=\"codespan\">update</code> 数据元素更新</li>\n<li><code class=\"codespan\">exit</code> 数据元素被删除</li>\n</ul>\n<p>注意，这里的数据状态是根据<code class=\"codespan\">mark</code>的<code class=\"codespan\">key</code>自动生成的，我们会针对<code class=\"codespan\">mark</code>的绑定数据，根据<code class=\"codespan\">key</code>的配置，计算数据对应的唯一标志符，数据更新后，如果对应的唯一标志符不存在了，则状态为<code class=\"codespan\">exit</code>，如果存在，则为<code class=\"codespan\">update</code>；如果之前的数据不存在改唯一标志符，则数据元素对应的状态为<code class=\"codespan\">enter</code></p>\n<p>默认支持一种交互状态：</p>\n<ul>\n<li><code class=\"codespan\">hover</code> 鼠标 hover 到具体的图形上，给图形设置对应的视觉通道编码</li>\n</ul>\n"},"path.encode.enter":{"desc":"<p>设置图元在数据初始化状态执行的视觉通道映射，注意数据更新的时候不再执行</p>\n"},"path.encode.enter.path":{"desc":"<p>设置路径，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 路径字符串</li>\n<li><code class=\"codespan\">&#39;ICustomPath2D&#39;</code> VRrender 提供的设置自定义路径的一个工具类，返回对应的实例</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"path.encode.enter.x":{"desc":"<p>图元的 x 坐标</p>\n"},"path.encode.enter.y":{"desc":"<p>图元 y 坐标</p>\n"},"path.encode.enter.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"path.encode.enter.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"path.encode.enter.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"path.encode.enter.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"path.encode.enter.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"path.encode.enter.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"path.encode.enter.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"path.encode.enter.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"path.encode.enter.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"path.encode.enter.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"path.encode.enter.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"path.encode.enter.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"path.encode.enter.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"path.encode.enter.outerBorder":{"desc":"<p>外描边</p>\n"},"path.encode.enter.innerBorder":{"desc":"<p>内描边</p>\n"},"path.encode.enter.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"path.encode.enter.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"path.encode.enter.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"path.encode.enter.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"path.encode.enter.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"path.encode.enter.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"path.encode.enter.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"path.encode.enter.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"path.encode.enter.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"path.encode.enter.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"path.encode.enter.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"path.encode.enter.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"path.encode.enter.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"path.encode.enter.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"path.encode.enter.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"path.encode.enter.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"path.encode.enter.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"path.encode.enter.texture":{"desc":"<p>图元纹理</p>\n"},"path.encode.enter.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"path.encode.enter.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"path.encode.enter.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"path.encode.enter.blur":{"desc":"<p>图元边缘模糊</p>\n"},"path.encode.enter.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"path.encode.update":{"desc":"<p>设置图元在数据更新状态执行的视觉通道映射</p>\n"},"path.encode.update.path":{"desc":"<p>设置路径，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 路径字符串</li>\n<li><code class=\"codespan\">&#39;ICustomPath2D&#39;</code> VRrender 提供的设置自定义路径的一个工具类，返回对应的实例</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"path.encode.update.x":{"desc":"<p>图元的 x 坐标</p>\n"},"path.encode.update.y":{"desc":"<p>图元 y 坐标</p>\n"},"path.encode.update.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"path.encode.update.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"path.encode.update.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"path.encode.update.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"path.encode.update.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"path.encode.update.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"path.encode.update.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"path.encode.update.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"path.encode.update.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"path.encode.update.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"path.encode.update.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"path.encode.update.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"path.encode.update.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"path.encode.update.outerBorder":{"desc":"<p>外描边</p>\n"},"path.encode.update.innerBorder":{"desc":"<p>内描边</p>\n"},"path.encode.update.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"path.encode.update.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"path.encode.update.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"path.encode.update.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"path.encode.update.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"path.encode.update.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"path.encode.update.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"path.encode.update.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"path.encode.update.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"path.encode.update.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"path.encode.update.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"path.encode.update.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"path.encode.update.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"path.encode.update.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"path.encode.update.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"path.encode.update.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"path.encode.update.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"path.encode.update.texture":{"desc":"<p>图元纹理</p>\n"},"path.encode.update.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"path.encode.update.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"path.encode.update.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"path.encode.update.blur":{"desc":"<p>图元边缘模糊</p>\n"},"path.encode.update.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"path.encode.exit":{"desc":"<p>设置图元在数据被删除的状态下执行的视觉通道映射</p>\n"},"path.encode.exit.path":{"desc":"<p>设置路径，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 路径字符串</li>\n<li><code class=\"codespan\">&#39;ICustomPath2D&#39;</code> VRrender 提供的设置自定义路径的一个工具类，返回对应的实例</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"path.encode.exit.x":{"desc":"<p>图元的 x 坐标</p>\n"},"path.encode.exit.y":{"desc":"<p>图元 y 坐标</p>\n"},"path.encode.exit.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"path.encode.exit.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"path.encode.exit.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"path.encode.exit.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"path.encode.exit.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"path.encode.exit.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"path.encode.exit.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"path.encode.exit.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"path.encode.exit.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"path.encode.exit.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"path.encode.exit.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"path.encode.exit.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"path.encode.exit.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"path.encode.exit.outerBorder":{"desc":"<p>外描边</p>\n"},"path.encode.exit.innerBorder":{"desc":"<p>内描边</p>\n"},"path.encode.exit.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"path.encode.exit.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"path.encode.exit.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"path.encode.exit.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"path.encode.exit.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"path.encode.exit.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"path.encode.exit.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"path.encode.exit.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"path.encode.exit.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"path.encode.exit.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"path.encode.exit.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"path.encode.exit.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"path.encode.exit.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"path.encode.exit.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"path.encode.exit.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"path.encode.exit.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"path.encode.exit.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"path.encode.exit.texture":{"desc":"<p>图元纹理</p>\n"},"path.encode.exit.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"path.encode.exit.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"path.encode.exit.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"path.encode.exit.blur":{"desc":"<p>图元边缘模糊</p>\n"},"path.encode.exit.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"path.encode.hover":{"desc":"<p>设置<code class=\"codespan\">hover</code>状态的时候，图元对应的视觉通道映射</p>\n"},"path.encode.hover.path":{"desc":"<p>设置路径，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 路径字符串</li>\n<li><code class=\"codespan\">&#39;ICustomPath2D&#39;</code> VRrender 提供的设置自定义路径的一个工具类，返回对应的实例</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"path.encode.hover.x":{"desc":"<p>图元的 x 坐标</p>\n"},"path.encode.hover.y":{"desc":"<p>图元 y 坐标</p>\n"},"path.encode.hover.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"path.encode.hover.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"path.encode.hover.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"path.encode.hover.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"path.encode.hover.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"path.encode.hover.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"path.encode.hover.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"path.encode.hover.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"path.encode.hover.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"path.encode.hover.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"path.encode.hover.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"path.encode.hover.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"path.encode.hover.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"path.encode.hover.outerBorder":{"desc":"<p>外描边</p>\n"},"path.encode.hover.innerBorder":{"desc":"<p>内描边</p>\n"},"path.encode.hover.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"path.encode.hover.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"path.encode.hover.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"path.encode.hover.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"path.encode.hover.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"path.encode.hover.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"path.encode.hover.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"path.encode.hover.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"path.encode.hover.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"path.encode.hover.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"path.encode.hover.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"path.encode.hover.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"path.encode.hover.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"path.encode.hover.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"path.encode.hover.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"path.encode.hover.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"path.encode.hover.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"path.encode.hover.texture":{"desc":"<p>图元纹理</p>\n"},"path.encode.hover.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"path.encode.hover.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"path.encode.hover.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"path.encode.hover.blur":{"desc":"<p>图元边缘模糊</p>\n"},"path.encode.hover.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"path.animationState":{"desc":"<p>类型：<code class=\"codespan\">MarkFunctionType</code>\n是否必传： 否\nanimation attributes</p>\n"},"path.animation":{"desc":"<p>支持设置各种状态对应的动画，数据驱动的动画状态有三种：</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>交互触发的状态变更，通过统一的交互动画进行配置，配置的 key 为 <code class=\"codespan\">state</code></p>\n"},"path.animation.type":{"desc":"<p>动画执行类型，指定特定的内置动画执行效果</p>\n<p>通用的内置动画类型包括：</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: 渐入渐出动画</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: 缩放动画</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: 移入移出动画</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: 旋转动画</li>\n<li><code class=\"codespan\">update</code>: 更新动画</li>\n</ul>\n"},"path.animation.channel":{"desc":"<p>动画执行前后的视觉通道，与 <code class=\"codespan\">type</code> 配置冲突</p>\n"},"path.animation.custom":{"desc":"<p>自定义动画，如果设定了自定义动画配置则会替换默认的视觉通道插值逻辑</p>\n"},"path.animation.customParameters":{"desc":"<p>自定义动画参数</p>\n"},"path.animation.easing":{"desc":"<p>动画缓动，默认为 <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"path.animation.delay":{"desc":"<p>动画执行的延迟时间，默认为 0</p>\n"},"path.animation.duration":{"desc":"<p>动画执行时长，默认为 1000ms</p>\n"},"path.animation.oneByOne":{"desc":"<p>动画依次执行的延迟时长，如果配置为 <code class=\"codespan\">true</code> 则会在上一个元素动画执行结束后执行下一个元素的动画，默认为 <code class=\"codespan\">false</code></p>\n"},"path.animation.startTime":{"desc":"<p>动画执行的初始时间，这一初始时间不会在循环动画中被重复应用，默认为 0</p>\n"},"path.animation.totalTime":{"desc":"<p>动画执行的最大时间，如果动画执行到达设定时间将会被终止</p>\n"},"path.animation.loop":{"desc":"<p>动画循环次数，如果配置为 <code class=\"codespan\">true</code> 则会无限循环</p>\n"},"path.animation.options":{"desc":"<p>特定动画类型执行时设定的额外参数</p>\n"},"path.animation.controlOptions":{"desc":"<p>动画执行逻辑的控制参数：</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: 当动画状态变更时是否立即终止自身动画</li>\n<li><code class=\"codespan\">immediatelyApply</code>: 是否立即应用动画初始的视觉通道</li>\n</ul>\n"},"path.zIndex":{"desc":"<p>设置<code class=\"codespan\">mark</code>图元对应的容器图形(group)的 zIndex</p>\n"},"path.interactive":{"desc":"<p>类型：<code class=\"codespan\">boolean</code>\n是否必传： 否</p>\n"},"path.context":{"desc":"<p>设置图元的上下文参数</p>\n"},"path.setCustomizedShape":{"desc":"<p>设置自定义形状的回调函数，对应的 ts 类型定位如下：</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>其中<code class=\"codespan\">ICustomPath2D</code> 为 VRender 提供的绘制自定义的路径一个工具类</p>\n"},"path.support3d":{"desc":"<p>当画布设置了 3d 视角的时候，是否支持 3d 模式</p>\n"},"path.group":{"desc":"<p>设置父图元，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 父图元对应的 id</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> 父图元对应的语法元素，一般用于 API 调用场景</li>\n</ul>\n<p>如果不设置，会默认挂在到画布的根节点下面</p>\n"},"path.from":{"desc":"<p>ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>通过<code class=\"codespan\">data</code> 属性值，申明图元依赖的数据</p>\n"},"path.key":{"desc":"<p>设置图元数据元素的唯一标志符，用于计算图形元素的数据状态，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"path.sort":{"desc":"<p>对图元中的所有图形元素进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"path.groupBy":{"desc":"<p>设置分组的属性，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置分组<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析分组<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"path.groupSort":{"desc":"<p>对图元中的分组进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"path.coordinate":{"desc":"<p>设置该图元关联的坐标系对应的 id 或者坐标系对应的图形元素</p>\n"},"path.state":{"desc":"<p>设置当前图元所有图形元素的状态值，支持三种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置图形的状态，比如说:<code class=\"codespan\">{ state: &#39;selected&#39;}</code> 就是给所有的图形设置状态为<code class=\"codespan\">&#39;selected&#39;</code>，通常这种情况，<code class=\"codespan\">encode</code> 中也会设置<code class=\"codespan\">&#39;selected&#39;</code>状态对应的图形通道映射</li>\n<li><code class=\"codespan\">string[]</code> 给图形设置多个状态，可以配置<code class=\"codespan\">stateSort</code>来影响对应状态执行图形通道映射的顺序</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析状态值的回调函数，返回参数为<code class=\"codespan\">string | string[]</code>，对应的 ts 类型定义为：</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"path.stateSort":{"desc":"<p>设置当前图元所有图形元素的状态值的排序函数，会影响状态对应的图形通道映射的顺序，最先执行的状态可能被后续的状态覆盖图形通道映射结果，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"path.transform":{"desc":"<p>设置图元对应的变换，所有的数据变换都可以配置在图元上，用于对图元的<code class=\"codespan\">join data</code> 执行变换；\n另外一种类型的变换就是对图形元素执行的变换，比如说<code class=\"codespan\">dodge</code>；\n通用的类型定义如下：</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>每中变换支持的参数不同</p>\n"},"path.layout":{"desc":"<p>设置图元的布局参数，图元在参与布局的时候，存在两种角色：</p>\n<ul>\n<li>&#39;container&#39; 容器图元，一般是<code class=\"codespan\">group</code>图元</li>\n<li>&#39;item&#39; 布局子元素，作为容器图元的子节点</li>\n</ul>\n<p>注意，我们仅支持一层布局，如果是多层嵌套布局，建议使用自定义的布局方案进行实现；</p>\n<p>现在支持两种内容的布局：<code class=\"codespan\">grid</code> 布局 和 <code class=\"codespan\">relative</code>布局，相关类型定义如下</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>如果想要设置自定义的布局方案，<code class=\"codespan\">layout</code>也支持直接设置回调函数，回调函数的定义如下：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"path.layout.display":{"desc":"<p>容器图元设置布局的类型，支持两种配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> 相对布局</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> 网格布局</li>\n</ul>\n"},"path.layout.callback":{"desc":"<p>自定义该图元的回调函数，ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"path.layout.skipBeforeLayouted":{"desc":"<p>在布局完成前，跳过执行阶段</p>\n"},"path.layout.updateViewSignals":{"desc":"<p>是否更新默认的视图信号，也就是：<code class=\"codespan\">padding</code>、<code class=\"codespan\">viewWidth</code> 和 <code class=\"codespan\">viewHeight</code></p>\n<p>只能在设置了<code class=\"codespan\">{ layout: { display: &#39;relative&#39;} }</code>的容器图元上设置该属性</p>\n"},"path.layout.maxChildWidth":{"desc":"<p>相对布局的父图元，设置子图元的最大宽度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的宽度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"path.layout.maxChildHeight":{"desc":"<p>相对布局的父图元，设置子图元的最大高度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的高度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"path.layout.position":{"desc":"<p>设置相对布局的子图元的位置，支持的配置有：</p>\n<ul>\n<li>&#39;top&#39; 相对于父图元的顶部</li>\n<li>&#39;bottom&#39; 相对于父图元的底部</li>\n<li>&#39;left&#39; 相对于父图元的左侧</li>\n<li>&#39;right&#39; 相对于父图元的右侧</li>\n<li>&#39;content&#39; 相对于父图元的中心，也就是内容区域</li>\n<li>&#39;auto&#39; 图元设置了坐标系的时候，根据关联的<code class=\"codespan\">scale</code>，自定计算相对于父图元的位置</li>\n</ul>\n"},"path.layout.padding":{"desc":"<p>子图元内边距，单位 px，默认各方向内边距为 0，接受数值、数值数组以及对象设置。</p>\n<p>使用示例：</p>\n<pre><code class=\"lang-ts\">// 数值类型，设置内边距为 5\npadding: 5;\n// 数值数组，设置上下的内边距为 5，左右的内边距为 10，用法同 CSS 盒模型\npadding: [5, 10];\n// 数值数组，分别设置四个方向的内边距\npadding: [\n  5, // 上\n  10, // 右\n  5, // 下\n  10 // 左\n];\n// 对象类型\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"path.layout.gridTemplateRows":{"desc":"<p>网格布局的父图元设置行的高度</p>\n"},"path.layout.gridTemplateColumns":{"desc":"<p>网格布局的父图元设置列的宽度</p>\n"},"path.layout.gridRowGap":{"desc":"<p>网格布局的父图元设置行行距</p>\n"},"path.layout.gridColumnGap":{"desc":"<p>网格布局的父图元设置列间距</p>\n"},"path.layout.gridRowStart":{"desc":"<p>网格布局的子图元设置行开始的位置</p>\n"},"path.layout.gridRowEnd":{"desc":"<p>网格布局的子图元设置行结束的位置</p>\n"},"path.layout.gridColumnStart":{"desc":"<p>网格布局的子图元设置列开始的位置</p>\n"},"path.layout.gridColumnEnd":{"desc":"<p>网格布局的子图元设置列结束的位置</p>\n"},"path.large":{"desc":"<p>是否开启大数据渲染模式</p>\n"},"path.largeThreshold":{"desc":"<p>开启大数据渲染优化的阀值，对应的是 data 的长度</p>\n"},"path.progressiveStep":{"desc":"<p>开启分片渲染的步长，对应的是分片的数据长度</p>\n"},"path.progressiveThreshold":{"desc":"<p>开启分片渲染的阀值，对应的是单系列 data 的长度</p>\n"},"path.morph":{"desc":"<p>是否对当前图元开启全局的过渡形变动画</p>\n"},"path.morphKey":{"desc":"<p>用于匹配全局过渡形变动画的图元，具有相对的<code class=\"codespan\">morphKey</code>的图元，会进行形变动画</p>\n"},"path.morphElementKey":{"desc":"<p>对于匹配上的前后图元，通过该配置，进行图形元素的匹配；如果不申明，我们默认会读取<code class=\"codespan\">key</code>配置，用于匹配图形元素，进行形变动画；\n默认支持一对一、一对多、多对一的图形形变动画</p>\n"},"area":{"desc":"<p><strong> area 图元 </strong></p>\n"},"area.type":{"desc":"<p>设置图元类型为 <code class=\"codespan\">area</code></p>\n"},"area.encode":{"desc":"<p>设置图元的视觉通道编码，默认支持三种数据变化状态：</p>\n<ul>\n<li><code class=\"codespan\">enter</code> 新增数据元素</li>\n<li><code class=\"codespan\">update</code> 数据元素更新</li>\n<li><code class=\"codespan\">exit</code> 数据元素被删除</li>\n</ul>\n<p>注意，这里的数据状态是根据<code class=\"codespan\">mark</code>的<code class=\"codespan\">key</code>自动生成的，我们会针对<code class=\"codespan\">mark</code>的绑定数据，根据<code class=\"codespan\">key</code>的配置，计算数据对应的唯一标志符，数据更新后，如果对应的唯一标志符不存在了，则状态为<code class=\"codespan\">exit</code>，如果存在，则为<code class=\"codespan\">update</code>；如果之前的数据不存在改唯一标志符，则数据元素对应的状态为<code class=\"codespan\">enter</code></p>\n<p>默认支持一种交互状态：</p>\n<ul>\n<li><code class=\"codespan\">hover</code> 鼠标 hover 到具体的图形上，给图形设置对应的视觉通道编码</li>\n</ul>\n"},"area.encode.enter":{"desc":"<p>设置图元在数据初始化状态执行的视觉通道映射，注意数据更新的时候不再执行</p>\n"},"area.encode.enter.enableSegments":{"desc":"<p>是否开启分段样式；因为分段样式解析需要一定的性能消耗，所以仅在开了了该功能的时候，会检测所有的点对应的样式不一样的时候，自动开启分段样式</p>\n"},"area.encode.enter.curveType":{"desc":"<p>线的类型，支持如下选项：</p>\n<ul>\n<li>&#39;basis&#39;</li>\n<li>&#39;basisClosed&#39;</li>\n<li>&#39;basisOpen&#39;</li>\n<li>&#39;bundle&#39;</li>\n<li>&#39;cardinal&#39;</li>\n<li>&#39;cardinalClosed&#39;</li>\n<li>&#39;cardinalOpen&#39;</li>\n<li>&#39;stepBefore&#39;</li>\n<li>&#39;stepAfter&#39;</li>\n<li>&#39;catmullRom&#39;</li>\n<li>&#39;catmullRomClosed&#39;</li>\n<li>&#39;catmullRomOpen&#39;</li>\n<li>&#39;linear&#39;</li>\n<li>&#39;linearClosed&#39;</li>\n<li>&#39;monotoneX&#39;</li>\n<li>&#39;monotoneY&#39;</li>\n<li>&#39;natural&#39;</li>\n<li>&#39;radial&#39;</li>\n<li>&#39;step&#39;</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"area.encode.enter.x":{"desc":"<p>图元的 x 坐标</p>\n"},"area.encode.enter.y":{"desc":"<p>图元 y 坐标</p>\n"},"area.encode.enter.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"area.encode.enter.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"area.encode.enter.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"area.encode.enter.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"area.encode.enter.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"area.encode.enter.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"area.encode.enter.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"area.encode.enter.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"area.encode.enter.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"area.encode.enter.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"area.encode.enter.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"area.encode.enter.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"area.encode.enter.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"area.encode.enter.outerBorder":{"desc":"<p>外描边</p>\n"},"area.encode.enter.innerBorder":{"desc":"<p>内描边</p>\n"},"area.encode.enter.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"area.encode.enter.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"area.encode.enter.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"area.encode.enter.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"area.encode.enter.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"area.encode.enter.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"area.encode.enter.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"area.encode.enter.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"area.encode.enter.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"area.encode.enter.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"area.encode.enter.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"area.encode.enter.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"area.encode.enter.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"area.encode.enter.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"area.encode.enter.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"area.encode.enter.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"area.encode.enter.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"area.encode.enter.texture":{"desc":"<p>图元纹理</p>\n"},"area.encode.enter.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"area.encode.enter.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"area.encode.enter.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"area.encode.enter.blur":{"desc":"<p>图元边缘模糊</p>\n"},"area.encode.enter.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"area.encode.update":{"desc":"<p>设置图元在数据更新状态执行的视觉通道映射</p>\n"},"area.encode.update.enableSegments":{"desc":"<p>是否开启分段样式；因为分段样式解析需要一定的性能消耗，所以仅在开了了该功能的时候，会检测所有的点对应的样式不一样的时候，自动开启分段样式</p>\n"},"area.encode.update.curveType":{"desc":"<p>线的类型，支持如下选项：</p>\n<ul>\n<li>&#39;basis&#39;</li>\n<li>&#39;basisClosed&#39;</li>\n<li>&#39;basisOpen&#39;</li>\n<li>&#39;bundle&#39;</li>\n<li>&#39;cardinal&#39;</li>\n<li>&#39;cardinalClosed&#39;</li>\n<li>&#39;cardinalOpen&#39;</li>\n<li>&#39;stepBefore&#39;</li>\n<li>&#39;stepAfter&#39;</li>\n<li>&#39;catmullRom&#39;</li>\n<li>&#39;catmullRomClosed&#39;</li>\n<li>&#39;catmullRomOpen&#39;</li>\n<li>&#39;linear&#39;</li>\n<li>&#39;linearClosed&#39;</li>\n<li>&#39;monotoneX&#39;</li>\n<li>&#39;monotoneY&#39;</li>\n<li>&#39;natural&#39;</li>\n<li>&#39;radial&#39;</li>\n<li>&#39;step&#39;</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"area.encode.update.x":{"desc":"<p>图元的 x 坐标</p>\n"},"area.encode.update.y":{"desc":"<p>图元 y 坐标</p>\n"},"area.encode.update.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"area.encode.update.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"area.encode.update.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"area.encode.update.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"area.encode.update.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"area.encode.update.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"area.encode.update.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"area.encode.update.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"area.encode.update.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"area.encode.update.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"area.encode.update.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"area.encode.update.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"area.encode.update.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"area.encode.update.outerBorder":{"desc":"<p>外描边</p>\n"},"area.encode.update.innerBorder":{"desc":"<p>内描边</p>\n"},"area.encode.update.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"area.encode.update.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"area.encode.update.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"area.encode.update.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"area.encode.update.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"area.encode.update.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"area.encode.update.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"area.encode.update.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"area.encode.update.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"area.encode.update.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"area.encode.update.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"area.encode.update.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"area.encode.update.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"area.encode.update.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"area.encode.update.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"area.encode.update.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"area.encode.update.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"area.encode.update.texture":{"desc":"<p>图元纹理</p>\n"},"area.encode.update.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"area.encode.update.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"area.encode.update.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"area.encode.update.blur":{"desc":"<p>图元边缘模糊</p>\n"},"area.encode.update.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"area.encode.exit":{"desc":"<p>设置图元在数据被删除的状态下执行的视觉通道映射</p>\n"},"area.encode.exit.enableSegments":{"desc":"<p>是否开启分段样式；因为分段样式解析需要一定的性能消耗，所以仅在开了了该功能的时候，会检测所有的点对应的样式不一样的时候，自动开启分段样式</p>\n"},"area.encode.exit.curveType":{"desc":"<p>线的类型，支持如下选项：</p>\n<ul>\n<li>&#39;basis&#39;</li>\n<li>&#39;basisClosed&#39;</li>\n<li>&#39;basisOpen&#39;</li>\n<li>&#39;bundle&#39;</li>\n<li>&#39;cardinal&#39;</li>\n<li>&#39;cardinalClosed&#39;</li>\n<li>&#39;cardinalOpen&#39;</li>\n<li>&#39;stepBefore&#39;</li>\n<li>&#39;stepAfter&#39;</li>\n<li>&#39;catmullRom&#39;</li>\n<li>&#39;catmullRomClosed&#39;</li>\n<li>&#39;catmullRomOpen&#39;</li>\n<li>&#39;linear&#39;</li>\n<li>&#39;linearClosed&#39;</li>\n<li>&#39;monotoneX&#39;</li>\n<li>&#39;monotoneY&#39;</li>\n<li>&#39;natural&#39;</li>\n<li>&#39;radial&#39;</li>\n<li>&#39;step&#39;</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"area.encode.exit.x":{"desc":"<p>图元的 x 坐标</p>\n"},"area.encode.exit.y":{"desc":"<p>图元 y 坐标</p>\n"},"area.encode.exit.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"area.encode.exit.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"area.encode.exit.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"area.encode.exit.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"area.encode.exit.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"area.encode.exit.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"area.encode.exit.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"area.encode.exit.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"area.encode.exit.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"area.encode.exit.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"area.encode.exit.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"area.encode.exit.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"area.encode.exit.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"area.encode.exit.outerBorder":{"desc":"<p>外描边</p>\n"},"area.encode.exit.innerBorder":{"desc":"<p>内描边</p>\n"},"area.encode.exit.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"area.encode.exit.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"area.encode.exit.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"area.encode.exit.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"area.encode.exit.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"area.encode.exit.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"area.encode.exit.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"area.encode.exit.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"area.encode.exit.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"area.encode.exit.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"area.encode.exit.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"area.encode.exit.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"area.encode.exit.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"area.encode.exit.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"area.encode.exit.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"area.encode.exit.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"area.encode.exit.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"area.encode.exit.texture":{"desc":"<p>图元纹理</p>\n"},"area.encode.exit.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"area.encode.exit.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"area.encode.exit.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"area.encode.exit.blur":{"desc":"<p>图元边缘模糊</p>\n"},"area.encode.exit.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"area.encode.hover":{"desc":"<p>设置<code class=\"codespan\">hover</code>状态的时候，图元对应的视觉通道映射</p>\n"},"area.encode.hover.enableSegments":{"desc":"<p>是否开启分段样式；因为分段样式解析需要一定的性能消耗，所以仅在开了了该功能的时候，会检测所有的点对应的样式不一样的时候，自动开启分段样式</p>\n"},"area.encode.hover.curveType":{"desc":"<p>线的类型，支持如下选项：</p>\n<ul>\n<li>&#39;basis&#39;</li>\n<li>&#39;basisClosed&#39;</li>\n<li>&#39;basisOpen&#39;</li>\n<li>&#39;bundle&#39;</li>\n<li>&#39;cardinal&#39;</li>\n<li>&#39;cardinalClosed&#39;</li>\n<li>&#39;cardinalOpen&#39;</li>\n<li>&#39;stepBefore&#39;</li>\n<li>&#39;stepAfter&#39;</li>\n<li>&#39;catmullRom&#39;</li>\n<li>&#39;catmullRomClosed&#39;</li>\n<li>&#39;catmullRomOpen&#39;</li>\n<li>&#39;linear&#39;</li>\n<li>&#39;linearClosed&#39;</li>\n<li>&#39;monotoneX&#39;</li>\n<li>&#39;monotoneY&#39;</li>\n<li>&#39;natural&#39;</li>\n<li>&#39;radial&#39;</li>\n<li>&#39;step&#39;</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"area.encode.hover.x":{"desc":"<p>图元的 x 坐标</p>\n"},"area.encode.hover.y":{"desc":"<p>图元 y 坐标</p>\n"},"area.encode.hover.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"area.encode.hover.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"area.encode.hover.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"area.encode.hover.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"area.encode.hover.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"area.encode.hover.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"area.encode.hover.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"area.encode.hover.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"area.encode.hover.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"area.encode.hover.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"area.encode.hover.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"area.encode.hover.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"area.encode.hover.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"area.encode.hover.outerBorder":{"desc":"<p>外描边</p>\n"},"area.encode.hover.innerBorder":{"desc":"<p>内描边</p>\n"},"area.encode.hover.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"area.encode.hover.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"area.encode.hover.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"area.encode.hover.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"area.encode.hover.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"area.encode.hover.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"area.encode.hover.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"area.encode.hover.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"area.encode.hover.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"area.encode.hover.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"area.encode.hover.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"area.encode.hover.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"area.encode.hover.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"area.encode.hover.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"area.encode.hover.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"area.encode.hover.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"area.encode.hover.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"area.encode.hover.texture":{"desc":"<p>图元纹理</p>\n"},"area.encode.hover.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"area.encode.hover.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"area.encode.hover.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"area.encode.hover.blur":{"desc":"<p>图元边缘模糊</p>\n"},"area.encode.hover.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"area.animationState":{"desc":"<p>类型：<code class=\"codespan\">MarkFunctionType</code>\n是否必传： 否\nanimation attributes</p>\n"},"area.animation":{"desc":"<p>支持设置各种状态对应的动画，数据驱动的动画状态有三种：</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>交互触发的状态变更，通过统一的交互动画进行配置，配置的 key 为 <code class=\"codespan\">state</code></p>\n"},"area.animation.type":{"desc":"<p>动画执行类型，指定特定的内置动画执行效果</p>\n<p>通用的内置动画类型包括：</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: 渐入渐出动画</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: 缩放动画</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: 移入移出动画</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: 旋转动画</li>\n<li><code class=\"codespan\">update</code>: 更新动画</li>\n</ul>\n<p>area图元支持的额外动画类型包括：</p>\n<ul>\n<li><code class=\"codespan\">growPointsIn</code>/<code class=\"codespan\">growPointsOut</code>: 点生长动画</li>\n<li><code class=\"codespan\">growPointsXIn</code>/<code class=\"codespan\">growPointsXOut</code>: X 方向点生长动画</li>\n<li><code class=\"codespan\">growPointsYIn</code>/<code class=\"codespan\">growPointsYOut</code>: Y 方向点生长动画</li>\n<li><code class=\"codespan\">clipIn</code>/<code class=\"codespan\">clipOut</code>: 裁剪动画</li>\n</ul>\n"},"area.animation.channel":{"desc":"<p>动画执行前后的视觉通道，与 <code class=\"codespan\">type</code> 配置冲突</p>\n"},"area.animation.custom":{"desc":"<p>自定义动画，如果设定了自定义动画配置则会替换默认的视觉通道插值逻辑</p>\n"},"area.animation.customParameters":{"desc":"<p>自定义动画参数</p>\n"},"area.animation.easing":{"desc":"<p>动画缓动，默认为 <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"area.animation.delay":{"desc":"<p>动画执行的延迟时间，默认为 0</p>\n"},"area.animation.duration":{"desc":"<p>动画执行时长，默认为 1000ms</p>\n"},"area.animation.oneByOne":{"desc":"<p>动画依次执行的延迟时长，如果配置为 <code class=\"codespan\">true</code> 则会在上一个元素动画执行结束后执行下一个元素的动画，默认为 <code class=\"codespan\">false</code></p>\n"},"area.animation.startTime":{"desc":"<p>动画执行的初始时间，这一初始时间不会在循环动画中被重复应用，默认为 0</p>\n"},"area.animation.totalTime":{"desc":"<p>动画执行的最大时间，如果动画执行到达设定时间将会被终止</p>\n"},"area.animation.loop":{"desc":"<p>动画循环次数，如果配置为 <code class=\"codespan\">true</code> 则会无限循环</p>\n"},"area.animation.options":{"desc":"<p>特定动画类型执行时设定的额外参数</p>\n"},"area.animation.controlOptions":{"desc":"<p>动画执行逻辑的控制参数：</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: 当动画状态变更时是否立即终止自身动画</li>\n<li><code class=\"codespan\">immediatelyApply</code>: 是否立即应用动画初始的视觉通道</li>\n</ul>\n"},"area.zIndex":{"desc":"<p>设置<code class=\"codespan\">mark</code>图元对应的容器图形(group)的 zIndex</p>\n"},"area.interactive":{"desc":"<p>类型：<code class=\"codespan\">boolean</code>\n是否必传： 否</p>\n"},"area.context":{"desc":"<p>设置图元的上下文参数</p>\n"},"area.setCustomizedShape":{"desc":"<p>设置自定义形状的回调函数，对应的 ts 类型定位如下：</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>其中<code class=\"codespan\">ICustomPath2D</code> 为 VRender 提供的绘制自定义的路径一个工具类</p>\n"},"area.support3d":{"desc":"<p>当画布设置了 3d 视角的时候，是否支持 3d 模式</p>\n"},"area.group":{"desc":"<p>设置父图元，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 父图元对应的 id</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> 父图元对应的语法元素，一般用于 API 调用场景</li>\n</ul>\n<p>如果不设置，会默认挂在到画布的根节点下面</p>\n"},"area.from":{"desc":"<p>ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>通过<code class=\"codespan\">data</code> 属性值，申明图元依赖的数据</p>\n"},"area.key":{"desc":"<p>设置图元数据元素的唯一标志符，用于计算图形元素的数据状态，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"area.sort":{"desc":"<p>对图元中的所有图形元素进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"area.groupBy":{"desc":"<p>设置分组的属性，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置分组<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析分组<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"area.groupSort":{"desc":"<p>对图元中的分组进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"area.coordinate":{"desc":"<p>设置该图元关联的坐标系对应的 id 或者坐标系对应的图形元素</p>\n"},"area.state":{"desc":"<p>设置当前图元所有图形元素的状态值，支持三种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置图形的状态，比如说:<code class=\"codespan\">{ state: &#39;selected&#39;}</code> 就是给所有的图形设置状态为<code class=\"codespan\">&#39;selected&#39;</code>，通常这种情况，<code class=\"codespan\">encode</code> 中也会设置<code class=\"codespan\">&#39;selected&#39;</code>状态对应的图形通道映射</li>\n<li><code class=\"codespan\">string[]</code> 给图形设置多个状态，可以配置<code class=\"codespan\">stateSort</code>来影响对应状态执行图形通道映射的顺序</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析状态值的回调函数，返回参数为<code class=\"codespan\">string | string[]</code>，对应的 ts 类型定义为：</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"area.stateSort":{"desc":"<p>设置当前图元所有图形元素的状态值的排序函数，会影响状态对应的图形通道映射的顺序，最先执行的状态可能被后续的状态覆盖图形通道映射结果，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"area.transform":{"desc":"<p>设置图元对应的变换，所有的数据变换都可以配置在图元上，用于对图元的<code class=\"codespan\">join data</code> 执行变换；\n另外一种类型的变换就是对图形元素执行的变换，比如说<code class=\"codespan\">dodge</code>；\n通用的类型定义如下：</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>每中变换支持的参数不同</p>\n"},"area.layout":{"desc":"<p>设置图元的布局参数，图元在参与布局的时候，存在两种角色：</p>\n<ul>\n<li>&#39;container&#39; 容器图元，一般是<code class=\"codespan\">group</code>图元</li>\n<li>&#39;item&#39; 布局子元素，作为容器图元的子节点</li>\n</ul>\n<p>注意，我们仅支持一层布局，如果是多层嵌套布局，建议使用自定义的布局方案进行实现；</p>\n<p>现在支持两种内容的布局：<code class=\"codespan\">grid</code> 布局 和 <code class=\"codespan\">relative</code>布局，相关类型定义如下</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>如果想要设置自定义的布局方案，<code class=\"codespan\">layout</code>也支持直接设置回调函数，回调函数的定义如下：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"area.layout.display":{"desc":"<p>容器图元设置布局的类型，支持两种配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> 相对布局</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> 网格布局</li>\n</ul>\n"},"area.layout.callback":{"desc":"<p>自定义该图元的回调函数，ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"area.layout.skipBeforeLayouted":{"desc":"<p>在布局完成前，跳过执行阶段</p>\n"},"area.layout.updateViewSignals":{"desc":"<p>是否更新默认的视图信号，也就是：<code class=\"codespan\">padding</code>、<code class=\"codespan\">viewWidth</code> 和 <code class=\"codespan\">viewHeight</code></p>\n<p>只能在设置了<code class=\"codespan\">{ layout: { display: &#39;relative&#39;} }</code>的容器图元上设置该属性</p>\n"},"area.layout.maxChildWidth":{"desc":"<p>相对布局的父图元，设置子图元的最大宽度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的宽度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"area.layout.maxChildHeight":{"desc":"<p>相对布局的父图元，设置子图元的最大高度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的高度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"area.layout.position":{"desc":"<p>设置相对布局的子图元的位置，支持的配置有：</p>\n<ul>\n<li>&#39;top&#39; 相对于父图元的顶部</li>\n<li>&#39;bottom&#39; 相对于父图元的底部</li>\n<li>&#39;left&#39; 相对于父图元的左侧</li>\n<li>&#39;right&#39; 相对于父图元的右侧</li>\n<li>&#39;content&#39; 相对于父图元的中心，也就是内容区域</li>\n<li>&#39;auto&#39; 图元设置了坐标系的时候，根据关联的<code class=\"codespan\">scale</code>，自定计算相对于父图元的位置</li>\n</ul>\n"},"area.layout.padding":{"desc":"<p>子图元内边距，单位 px，默认各方向内边距为 0，接受数值、数值数组以及对象设置。</p>\n<p>使用示例：</p>\n<pre><code class=\"lang-ts\">// 数值类型，设置内边距为 5\npadding: 5;\n// 数值数组，设置上下的内边距为 5，左右的内边距为 10，用法同 CSS 盒模型\npadding: [5, 10];\n// 数值数组，分别设置四个方向的内边距\npadding: [\n  5, // 上\n  10, // 右\n  5, // 下\n  10 // 左\n];\n// 对象类型\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"area.layout.gridTemplateRows":{"desc":"<p>网格布局的父图元设置行的高度</p>\n"},"area.layout.gridTemplateColumns":{"desc":"<p>网格布局的父图元设置列的宽度</p>\n"},"area.layout.gridRowGap":{"desc":"<p>网格布局的父图元设置行行距</p>\n"},"area.layout.gridColumnGap":{"desc":"<p>网格布局的父图元设置列间距</p>\n"},"area.layout.gridRowStart":{"desc":"<p>网格布局的子图元设置行开始的位置</p>\n"},"area.layout.gridRowEnd":{"desc":"<p>网格布局的子图元设置行结束的位置</p>\n"},"area.layout.gridColumnStart":{"desc":"<p>网格布局的子图元设置列开始的位置</p>\n"},"area.layout.gridColumnEnd":{"desc":"<p>网格布局的子图元设置列结束的位置</p>\n"},"area.large":{"desc":"<p>是否开启大数据渲染模式</p>\n"},"area.largeThreshold":{"desc":"<p>开启大数据渲染优化的阀值，对应的是 data 的长度</p>\n"},"area.progressiveStep":{"desc":"<p>开启分片渲染的步长，对应的是分片的数据长度</p>\n"},"area.progressiveThreshold":{"desc":"<p>开启分片渲染的阀值，对应的是单系列 data 的长度</p>\n"},"area.morph":{"desc":"<p>是否对当前图元开启全局的过渡形变动画</p>\n"},"area.morphKey":{"desc":"<p>用于匹配全局过渡形变动画的图元，具有相对的<code class=\"codespan\">morphKey</code>的图元，会进行形变动画</p>\n"},"area.morphElementKey":{"desc":"<p>对于匹配上的前后图元，通过该配置，进行图形元素的匹配；如果不申明，我们默认会读取<code class=\"codespan\">key</code>配置，用于匹配图形元素，进行形变动画；\n默认支持一对一、一对多、多对一的图形形变动画</p>\n<!-- 图元 line -->\n<p>线图元</p>\n"},"line":{"desc":"<p><strong> 线图元 </strong> 测试一下</p>\n"},"line.type":{"desc":"<p>设置为线图元类型</p>\n"},"line.encode":{"desc":"<p>设置图元的视觉通道编码，默认支持三种数据变化状态：</p>\n<ul>\n<li><code class=\"codespan\">enter</code> 新增数据元素</li>\n<li><code class=\"codespan\">update</code> 数据元素更新</li>\n<li><code class=\"codespan\">exit</code> 数据元素被删除</li>\n</ul>\n<p>注意，这里的数据状态是根据<code class=\"codespan\">mark</code>的<code class=\"codespan\">key</code>自动生成的，我们会针对<code class=\"codespan\">mark</code>的绑定数据，根据<code class=\"codespan\">key</code>的配置，计算数据对应的唯一标志符，数据更新后，如果对应的唯一标志符不存在了，则状态为<code class=\"codespan\">exit</code>，如果存在，则为<code class=\"codespan\">update</code>；如果之前的数据不存在改唯一标志符，则数据元素对应的状态为<code class=\"codespan\">enter</code></p>\n<p>默认支持一种交互状态：</p>\n<ul>\n<li><code class=\"codespan\">hover</code> 鼠标 hover 到具体的图形上，给图形设置对应的视觉通道编码</li>\n</ul>\n"},"line.encode.enter":{"desc":"<p>设置图元在数据初始化状态执行的视觉通道映射，注意数据更新的时候不再执行</p>\n"},"line.encode.enter.enableSegments":{"desc":"<p>是否开启分段样式；因为分段样式解析需要一定的性能消耗，所以仅在开了了该功能的时候，会检测所有的点对应的样式不一样的时候，自动开启分段样式</p>\n"},"line.encode.enter.curveType":{"desc":"<p>线的类型，支持如下选项：</p>\n<ul>\n<li>&#39;basis&#39;</li>\n<li>&#39;basisClosed&#39;</li>\n<li>&#39;basisOpen&#39;</li>\n<li>&#39;bundle&#39;</li>\n<li>&#39;cardinal&#39;</li>\n<li>&#39;cardinalClosed&#39;</li>\n<li>&#39;cardinalOpen&#39;</li>\n<li>&#39;stepBefore&#39;</li>\n<li>&#39;stepAfter&#39;</li>\n<li>&#39;catmullRom&#39;</li>\n<li>&#39;catmullRomClosed&#39;</li>\n<li>&#39;catmullRomOpen&#39;</li>\n<li>&#39;linear&#39;</li>\n<li>&#39;linearClosed&#39;</li>\n<li>&#39;monotoneX&#39;</li>\n<li>&#39;monotoneY&#39;</li>\n<li>&#39;natural&#39;</li>\n<li>&#39;radial&#39;</li>\n<li>&#39;step&#39;</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"line.encode.enter.x":{"desc":"<p>图元的 x 坐标</p>\n"},"line.encode.enter.y":{"desc":"<p>图元 y 坐标</p>\n"},"line.encode.enter.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"line.encode.enter.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"line.encode.enter.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"line.encode.enter.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"line.encode.enter.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"line.encode.enter.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"line.encode.enter.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"line.encode.enter.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"line.encode.enter.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"line.encode.enter.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"line.encode.enter.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"line.encode.enter.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"line.encode.enter.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"line.encode.enter.outerBorder":{"desc":"<p>外描边</p>\n"},"line.encode.enter.innerBorder":{"desc":"<p>内描边</p>\n"},"line.encode.enter.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"line.encode.enter.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"line.encode.enter.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"line.encode.enter.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"line.encode.enter.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"line.encode.enter.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"line.encode.enter.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"line.encode.enter.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"line.encode.enter.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"line.encode.enter.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"line.encode.enter.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"line.encode.enter.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"line.encode.enter.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"line.encode.enter.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"line.encode.enter.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"line.encode.enter.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"line.encode.enter.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"line.encode.enter.texture":{"desc":"<p>图元纹理</p>\n"},"line.encode.enter.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"line.encode.enter.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"line.encode.enter.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"line.encode.enter.blur":{"desc":"<p>图元边缘模糊</p>\n"},"line.encode.enter.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"line.encode.update":{"desc":"<p>设置图元在数据更新状态执行的视觉通道映射</p>\n"},"line.encode.update.enableSegments":{"desc":"<p>是否开启分段样式；因为分段样式解析需要一定的性能消耗，所以仅在开了了该功能的时候，会检测所有的点对应的样式不一样的时候，自动开启分段样式</p>\n"},"line.encode.update.curveType":{"desc":"<p>线的类型，支持如下选项：</p>\n<ul>\n<li>&#39;basis&#39;</li>\n<li>&#39;basisClosed&#39;</li>\n<li>&#39;basisOpen&#39;</li>\n<li>&#39;bundle&#39;</li>\n<li>&#39;cardinal&#39;</li>\n<li>&#39;cardinalClosed&#39;</li>\n<li>&#39;cardinalOpen&#39;</li>\n<li>&#39;stepBefore&#39;</li>\n<li>&#39;stepAfter&#39;</li>\n<li>&#39;catmullRom&#39;</li>\n<li>&#39;catmullRomClosed&#39;</li>\n<li>&#39;catmullRomOpen&#39;</li>\n<li>&#39;linear&#39;</li>\n<li>&#39;linearClosed&#39;</li>\n<li>&#39;monotoneX&#39;</li>\n<li>&#39;monotoneY&#39;</li>\n<li>&#39;natural&#39;</li>\n<li>&#39;radial&#39;</li>\n<li>&#39;step&#39;</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"line.encode.update.x":{"desc":"<p>图元的 x 坐标</p>\n"},"line.encode.update.y":{"desc":"<p>图元 y 坐标</p>\n"},"line.encode.update.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"line.encode.update.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"line.encode.update.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"line.encode.update.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"line.encode.update.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"line.encode.update.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"line.encode.update.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"line.encode.update.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"line.encode.update.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"line.encode.update.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"line.encode.update.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"line.encode.update.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"line.encode.update.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"line.encode.update.outerBorder":{"desc":"<p>外描边</p>\n"},"line.encode.update.innerBorder":{"desc":"<p>内描边</p>\n"},"line.encode.update.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"line.encode.update.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"line.encode.update.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"line.encode.update.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"line.encode.update.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"line.encode.update.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"line.encode.update.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"line.encode.update.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"line.encode.update.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"line.encode.update.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"line.encode.update.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"line.encode.update.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"line.encode.update.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"line.encode.update.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"line.encode.update.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"line.encode.update.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"line.encode.update.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"line.encode.update.texture":{"desc":"<p>图元纹理</p>\n"},"line.encode.update.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"line.encode.update.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"line.encode.update.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"line.encode.update.blur":{"desc":"<p>图元边缘模糊</p>\n"},"line.encode.update.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"line.encode.exit":{"desc":"<p>设置图元在数据被删除的状态下执行的视觉通道映射</p>\n"},"line.encode.exit.enableSegments":{"desc":"<p>是否开启分段样式；因为分段样式解析需要一定的性能消耗，所以仅在开了了该功能的时候，会检测所有的点对应的样式不一样的时候，自动开启分段样式</p>\n"},"line.encode.exit.curveType":{"desc":"<p>线的类型，支持如下选项：</p>\n<ul>\n<li>&#39;basis&#39;</li>\n<li>&#39;basisClosed&#39;</li>\n<li>&#39;basisOpen&#39;</li>\n<li>&#39;bundle&#39;</li>\n<li>&#39;cardinal&#39;</li>\n<li>&#39;cardinalClosed&#39;</li>\n<li>&#39;cardinalOpen&#39;</li>\n<li>&#39;stepBefore&#39;</li>\n<li>&#39;stepAfter&#39;</li>\n<li>&#39;catmullRom&#39;</li>\n<li>&#39;catmullRomClosed&#39;</li>\n<li>&#39;catmullRomOpen&#39;</li>\n<li>&#39;linear&#39;</li>\n<li>&#39;linearClosed&#39;</li>\n<li>&#39;monotoneX&#39;</li>\n<li>&#39;monotoneY&#39;</li>\n<li>&#39;natural&#39;</li>\n<li>&#39;radial&#39;</li>\n<li>&#39;step&#39;</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"line.encode.exit.x":{"desc":"<p>图元的 x 坐标</p>\n"},"line.encode.exit.y":{"desc":"<p>图元 y 坐标</p>\n"},"line.encode.exit.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"line.encode.exit.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"line.encode.exit.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"line.encode.exit.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"line.encode.exit.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"line.encode.exit.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"line.encode.exit.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"line.encode.exit.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"line.encode.exit.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"line.encode.exit.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"line.encode.exit.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"line.encode.exit.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"line.encode.exit.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"line.encode.exit.outerBorder":{"desc":"<p>外描边</p>\n"},"line.encode.exit.innerBorder":{"desc":"<p>内描边</p>\n"},"line.encode.exit.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"line.encode.exit.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"line.encode.exit.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"line.encode.exit.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"line.encode.exit.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"line.encode.exit.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"line.encode.exit.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"line.encode.exit.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"line.encode.exit.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"line.encode.exit.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"line.encode.exit.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"line.encode.exit.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"line.encode.exit.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"line.encode.exit.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"line.encode.exit.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"line.encode.exit.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"line.encode.exit.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"line.encode.exit.texture":{"desc":"<p>图元纹理</p>\n"},"line.encode.exit.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"line.encode.exit.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"line.encode.exit.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"line.encode.exit.blur":{"desc":"<p>图元边缘模糊</p>\n"},"line.encode.exit.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"line.encode.hover":{"desc":"<p>设置<code class=\"codespan\">hover</code>状态的时候，图元对应的视觉通道映射</p>\n"},"line.encode.hover.enableSegments":{"desc":"<p>是否开启分段样式；因为分段样式解析需要一定的性能消耗，所以仅在开了了该功能的时候，会检测所有的点对应的样式不一样的时候，自动开启分段样式</p>\n"},"line.encode.hover.curveType":{"desc":"<p>线的类型，支持如下选项：</p>\n<ul>\n<li>&#39;basis&#39;</li>\n<li>&#39;basisClosed&#39;</li>\n<li>&#39;basisOpen&#39;</li>\n<li>&#39;bundle&#39;</li>\n<li>&#39;cardinal&#39;</li>\n<li>&#39;cardinalClosed&#39;</li>\n<li>&#39;cardinalOpen&#39;</li>\n<li>&#39;stepBefore&#39;</li>\n<li>&#39;stepAfter&#39;</li>\n<li>&#39;catmullRom&#39;</li>\n<li>&#39;catmullRomClosed&#39;</li>\n<li>&#39;catmullRomOpen&#39;</li>\n<li>&#39;linear&#39;</li>\n<li>&#39;linearClosed&#39;</li>\n<li>&#39;monotoneX&#39;</li>\n<li>&#39;monotoneY&#39;</li>\n<li>&#39;natural&#39;</li>\n<li>&#39;radial&#39;</li>\n<li>&#39;step&#39;</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"line.encode.hover.x":{"desc":"<p>图元的 x 坐标</p>\n"},"line.encode.hover.y":{"desc":"<p>图元 y 坐标</p>\n"},"line.encode.hover.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"line.encode.hover.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"line.encode.hover.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"line.encode.hover.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"line.encode.hover.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"line.encode.hover.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"line.encode.hover.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"line.encode.hover.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"line.encode.hover.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"line.encode.hover.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"line.encode.hover.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"line.encode.hover.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"line.encode.hover.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"line.encode.hover.outerBorder":{"desc":"<p>外描边</p>\n"},"line.encode.hover.innerBorder":{"desc":"<p>内描边</p>\n"},"line.encode.hover.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"line.encode.hover.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"line.encode.hover.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"line.encode.hover.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"line.encode.hover.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"line.encode.hover.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"line.encode.hover.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"line.encode.hover.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"line.encode.hover.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"line.encode.hover.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"line.encode.hover.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"line.encode.hover.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"line.encode.hover.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"line.encode.hover.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"line.encode.hover.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"line.encode.hover.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"line.encode.hover.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"line.encode.hover.texture":{"desc":"<p>图元纹理</p>\n"},"line.encode.hover.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"line.encode.hover.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"line.encode.hover.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"line.encode.hover.blur":{"desc":"<p>图元边缘模糊</p>\n"},"line.encode.hover.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"line.animationState":{"desc":"<p>类型：<code class=\"codespan\">MarkFunctionType</code>\n是否必传： 否\nanimation attributes</p>\n"},"line.animation":{"desc":"<p>支持设置各种状态对应的动画，数据驱动的动画状态有三种：</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>交互触发的状态变更，通过统一的交互动画进行配置，配置的 key 为 <code class=\"codespan\">state</code></p>\n"},"line.animation.type":{"desc":"<p>动画执行类型，指定特定的内置动画执行效果</p>\n<p>通用的内置动画类型包括：</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: 渐入渐出动画</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: 缩放动画</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: 移入移出动画</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: 旋转动画</li>\n<li><code class=\"codespan\">update</code>: 更新动画</li>\n</ul>\n<p>line图元支持的额外动画类型包括：</p>\n<ul>\n<li><code class=\"codespan\">growPointsIn</code>/<code class=\"codespan\">growPointsOut</code>: 点生长动画</li>\n<li><code class=\"codespan\">growPointsXIn</code>/<code class=\"codespan\">growPointsXOut</code>: X 方向点生长动画</li>\n<li><code class=\"codespan\">growPointsYIn</code>/<code class=\"codespan\">growPointsYOut</code>: Y 方向点生长动画</li>\n<li><code class=\"codespan\">clipIn</code>/<code class=\"codespan\">clipOut</code>: 裁剪动画</li>\n</ul>\n"},"line.animation.channel":{"desc":"<p>动画执行前后的视觉通道，与 <code class=\"codespan\">type</code> 配置冲突</p>\n"},"line.animation.custom":{"desc":"<p>自定义动画，如果设定了自定义动画配置则会替换默认的视觉通道插值逻辑</p>\n"},"line.animation.customParameters":{"desc":"<p>自定义动画参数</p>\n"},"line.animation.easing":{"desc":"<p>动画缓动，默认为 <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"line.animation.delay":{"desc":"<p>动画执行的延迟时间，默认为 0</p>\n"},"line.animation.duration":{"desc":"<p>动画执行时长，默认为 1000ms</p>\n"},"line.animation.oneByOne":{"desc":"<p>动画依次执行的延迟时长，如果配置为 <code class=\"codespan\">true</code> 则会在上一个元素动画执行结束后执行下一个元素的动画，默认为 <code class=\"codespan\">false</code></p>\n"},"line.animation.startTime":{"desc":"<p>动画执行的初始时间，这一初始时间不会在循环动画中被重复应用，默认为 0</p>\n"},"line.animation.totalTime":{"desc":"<p>动画执行的最大时间，如果动画执行到达设定时间将会被终止</p>\n"},"line.animation.loop":{"desc":"<p>动画循环次数，如果配置为 <code class=\"codespan\">true</code> 则会无限循环</p>\n"},"line.animation.options":{"desc":"<p>特定动画类型执行时设定的额外参数</p>\n"},"line.animation.controlOptions":{"desc":"<p>动画执行逻辑的控制参数：</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: 当动画状态变更时是否立即终止自身动画</li>\n<li><code class=\"codespan\">immediatelyApply</code>: 是否立即应用动画初始的视觉通道</li>\n</ul>\n"},"line.zIndex":{"desc":"<p>设置<code class=\"codespan\">mark</code>图元对应的容器图形(group)的 zIndex</p>\n"},"line.interactive":{"desc":"<p>类型：<code class=\"codespan\">boolean</code>\n是否必传： 否</p>\n"},"line.context":{"desc":"<p>设置图元的上下文参数</p>\n"},"line.setCustomizedShape":{"desc":"<p>设置自定义形状的回调函数，对应的 ts 类型定位如下：</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>其中<code class=\"codespan\">ICustomPath2D</code> 为 VRender 提供的绘制自定义的路径一个工具类</p>\n"},"line.support3d":{"desc":"<p>当画布设置了 3d 视角的时候，是否支持 3d 模式</p>\n"},"line.group":{"desc":"<p>设置父图元，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 父图元对应的 id</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> 父图元对应的语法元素，一般用于 API 调用场景</li>\n</ul>\n<p>如果不设置，会默认挂在到画布的根节点下面</p>\n"},"line.from":{"desc":"<p>ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>通过<code class=\"codespan\">data</code> 属性值，申明图元依赖的数据</p>\n"},"line.key":{"desc":"<p>设置图元数据元素的唯一标志符，用于计算图形元素的数据状态，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"line.sort":{"desc":"<p>对图元中的所有图形元素进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"line.groupBy":{"desc":"<p>设置分组的属性，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置分组<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析分组<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"line.groupSort":{"desc":"<p>对图元中的分组进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"line.coordinate":{"desc":"<p>设置该图元关联的坐标系对应的 id 或者坐标系对应的图形元素</p>\n"},"line.state":{"desc":"<p>设置当前图元所有图形元素的状态值，支持三种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置图形的状态，比如说:<code class=\"codespan\">{ state: &#39;selected&#39;}</code> 就是给所有的图形设置状态为<code class=\"codespan\">&#39;selected&#39;</code>，通常这种情况，<code class=\"codespan\">encode</code> 中也会设置<code class=\"codespan\">&#39;selected&#39;</code>状态对应的图形通道映射</li>\n<li><code class=\"codespan\">string[]</code> 给图形设置多个状态，可以配置<code class=\"codespan\">stateSort</code>来影响对应状态执行图形通道映射的顺序</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析状态值的回调函数，返回参数为<code class=\"codespan\">string | string[]</code>，对应的 ts 类型定义为：</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"line.stateSort":{"desc":"<p>设置当前图元所有图形元素的状态值的排序函数，会影响状态对应的图形通道映射的顺序，最先执行的状态可能被后续的状态覆盖图形通道映射结果，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"line.transform":{"desc":"<p>设置图元对应的变换，所有的数据变换都可以配置在图元上，用于对图元的<code class=\"codespan\">join data</code> 执行变换；\n另外一种类型的变换就是对图形元素执行的变换，比如说<code class=\"codespan\">dodge</code>；\n通用的类型定义如下：</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>每中变换支持的参数不同</p>\n"},"line.layout":{"desc":"<p>设置图元的布局参数，图元在参与布局的时候，存在两种角色：</p>\n<ul>\n<li>&#39;container&#39; 容器图元，一般是<code class=\"codespan\">group</code>图元</li>\n<li>&#39;item&#39; 布局子元素，作为容器图元的子节点</li>\n</ul>\n<p>注意，我们仅支持一层布局，如果是多层嵌套布局，建议使用自定义的布局方案进行实现；</p>\n<p>现在支持两种内容的布局：<code class=\"codespan\">grid</code> 布局 和 <code class=\"codespan\">relative</code>布局，相关类型定义如下</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>如果想要设置自定义的布局方案，<code class=\"codespan\">layout</code>也支持直接设置回调函数，回调函数的定义如下：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"line.layout.display":{"desc":"<p>容器图元设置布局的类型，支持两种配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> 相对布局</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> 网格布局</li>\n</ul>\n"},"line.layout.callback":{"desc":"<p>自定义该图元的回调函数，ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"line.layout.skipBeforeLayouted":{"desc":"<p>在布局完成前，跳过执行阶段</p>\n"},"line.layout.updateViewSignals":{"desc":"<p>是否更新默认的视图信号，也就是：<code class=\"codespan\">padding</code>、<code class=\"codespan\">viewWidth</code> 和 <code class=\"codespan\">viewHeight</code></p>\n<p>只能在设置了<code class=\"codespan\">{ layout: { display: &#39;relative&#39;} }</code>的容器图元上设置该属性</p>\n"},"line.layout.maxChildWidth":{"desc":"<p>相对布局的父图元，设置子图元的最大宽度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的宽度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"line.layout.maxChildHeight":{"desc":"<p>相对布局的父图元，设置子图元的最大高度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的高度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"line.layout.position":{"desc":"<p>设置相对布局的子图元的位置，支持的配置有：</p>\n<ul>\n<li>&#39;top&#39; 相对于父图元的顶部</li>\n<li>&#39;bottom&#39; 相对于父图元的底部</li>\n<li>&#39;left&#39; 相对于父图元的左侧</li>\n<li>&#39;right&#39; 相对于父图元的右侧</li>\n<li>&#39;content&#39; 相对于父图元的中心，也就是内容区域</li>\n<li>&#39;auto&#39; 图元设置了坐标系的时候，根据关联的<code class=\"codespan\">scale</code>，自定计算相对于父图元的位置</li>\n</ul>\n"},"line.layout.padding":{"desc":"<p>子图元内边距，单位 px，默认各方向内边距为 0，接受数值、数值数组以及对象设置。</p>\n<p>使用示例：</p>\n<pre><code class=\"lang-ts\">// 数值类型，设置内边距为 5\npadding: 5;\n// 数值数组，设置上下的内边距为 5，左右的内边距为 10，用法同 CSS 盒模型\npadding: [5, 10];\n// 数值数组，分别设置四个方向的内边距\npadding: [\n  5, // 上\n  10, // 右\n  5, // 下\n  10 // 左\n];\n// 对象类型\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"line.layout.gridTemplateRows":{"desc":"<p>网格布局的父图元设置行的高度</p>\n"},"line.layout.gridTemplateColumns":{"desc":"<p>网格布局的父图元设置列的宽度</p>\n"},"line.layout.gridRowGap":{"desc":"<p>网格布局的父图元设置行行距</p>\n"},"line.layout.gridColumnGap":{"desc":"<p>网格布局的父图元设置列间距</p>\n"},"line.layout.gridRowStart":{"desc":"<p>网格布局的子图元设置行开始的位置</p>\n"},"line.layout.gridRowEnd":{"desc":"<p>网格布局的子图元设置行结束的位置</p>\n"},"line.layout.gridColumnStart":{"desc":"<p>网格布局的子图元设置列开始的位置</p>\n"},"line.layout.gridColumnEnd":{"desc":"<p>网格布局的子图元设置列结束的位置</p>\n"},"line.large":{"desc":"<p>是否开启大数据渲染模式</p>\n"},"line.largeThreshold":{"desc":"<p>开启大数据渲染优化的阀值，对应的是 data 的长度</p>\n"},"line.progressiveStep":{"desc":"<p>开启分片渲染的步长，对应的是分片的数据长度</p>\n"},"line.progressiveThreshold":{"desc":"<p>开启分片渲染的阀值，对应的是单系列 data 的长度</p>\n"},"line.morph":{"desc":"<p>是否对当前图元开启全局的过渡形变动画</p>\n"},"line.morphKey":{"desc":"<p>用于匹配全局过渡形变动画的图元，具有相对的<code class=\"codespan\">morphKey</code>的图元，会进行形变动画</p>\n"},"line.morphElementKey":{"desc":"<p>对于匹配上的前后图元，通过该配置，进行图形元素的匹配；如果不申明，我们默认会读取<code class=\"codespan\">key</code>配置，用于匹配图形元素，进行形变动画；\n默认支持一对一、一对多、多对一的图形形变动画</p>\n"},"rule":{"desc":"<p><strong> rule 图元 </strong></p>\n"},"rule.type":{"desc":"<p>设置图元类型为 <code class=\"codespan\">rule</code></p>\n"},"rule.encode":{"desc":"<p>设置图元的视觉通道编码，默认支持三种数据变化状态：</p>\n<ul>\n<li><code class=\"codespan\">enter</code> 新增数据元素</li>\n<li><code class=\"codespan\">update</code> 数据元素更新</li>\n<li><code class=\"codespan\">exit</code> 数据元素被删除</li>\n</ul>\n<p>注意，这里的数据状态是根据<code class=\"codespan\">mark</code>的<code class=\"codespan\">key</code>自动生成的，我们会针对<code class=\"codespan\">mark</code>的绑定数据，根据<code class=\"codespan\">key</code>的配置，计算数据对应的唯一标志符，数据更新后，如果对应的唯一标志符不存在了，则状态为<code class=\"codespan\">exit</code>，如果存在，则为<code class=\"codespan\">update</code>；如果之前的数据不存在改唯一标志符，则数据元素对应的状态为<code class=\"codespan\">enter</code></p>\n<p>默认支持一种交互状态：</p>\n<ul>\n<li><code class=\"codespan\">hover</code> 鼠标 hover 到具体的图形上，给图形设置对应的视觉通道编码</li>\n</ul>\n"},"rule.encode.enter":{"desc":"<p>设置图元在数据初始化状态执行的视觉通道映射，注意数据更新的时候不再执行</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"rule.encode.enter.x":{"desc":"<p>图元的 x 坐标</p>\n"},"rule.encode.enter.y":{"desc":"<p>图元 y 坐标</p>\n"},"rule.encode.enter.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"rule.encode.enter.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"rule.encode.enter.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"rule.encode.enter.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"rule.encode.enter.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"rule.encode.enter.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"rule.encode.enter.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"rule.encode.enter.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"rule.encode.enter.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"rule.encode.enter.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"rule.encode.enter.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"rule.encode.enter.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"rule.encode.enter.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"rule.encode.enter.outerBorder":{"desc":"<p>外描边</p>\n"},"rule.encode.enter.innerBorder":{"desc":"<p>内描边</p>\n"},"rule.encode.enter.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"rule.encode.enter.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"rule.encode.enter.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"rule.encode.enter.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"rule.encode.enter.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"rule.encode.enter.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"rule.encode.enter.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"rule.encode.enter.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"rule.encode.enter.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"rule.encode.enter.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"rule.encode.enter.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"rule.encode.enter.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"rule.encode.enter.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"rule.encode.enter.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"rule.encode.enter.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"rule.encode.enter.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"rule.encode.enter.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"rule.encode.enter.texture":{"desc":"<p>图元纹理</p>\n"},"rule.encode.enter.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"rule.encode.enter.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"rule.encode.enter.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"rule.encode.enter.blur":{"desc":"<p>图元边缘模糊</p>\n"},"rule.encode.enter.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"rule.encode.update":{"desc":"<p>设置图元在数据更新状态执行的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"rule.encode.update.x":{"desc":"<p>图元的 x 坐标</p>\n"},"rule.encode.update.y":{"desc":"<p>图元 y 坐标</p>\n"},"rule.encode.update.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"rule.encode.update.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"rule.encode.update.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"rule.encode.update.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"rule.encode.update.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"rule.encode.update.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"rule.encode.update.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"rule.encode.update.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"rule.encode.update.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"rule.encode.update.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"rule.encode.update.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"rule.encode.update.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"rule.encode.update.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"rule.encode.update.outerBorder":{"desc":"<p>外描边</p>\n"},"rule.encode.update.innerBorder":{"desc":"<p>内描边</p>\n"},"rule.encode.update.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"rule.encode.update.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"rule.encode.update.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"rule.encode.update.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"rule.encode.update.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"rule.encode.update.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"rule.encode.update.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"rule.encode.update.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"rule.encode.update.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"rule.encode.update.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"rule.encode.update.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"rule.encode.update.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"rule.encode.update.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"rule.encode.update.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"rule.encode.update.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"rule.encode.update.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"rule.encode.update.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"rule.encode.update.texture":{"desc":"<p>图元纹理</p>\n"},"rule.encode.update.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"rule.encode.update.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"rule.encode.update.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"rule.encode.update.blur":{"desc":"<p>图元边缘模糊</p>\n"},"rule.encode.update.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"rule.encode.exit":{"desc":"<p>设置图元在数据被删除的状态下执行的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"rule.encode.exit.x":{"desc":"<p>图元的 x 坐标</p>\n"},"rule.encode.exit.y":{"desc":"<p>图元 y 坐标</p>\n"},"rule.encode.exit.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"rule.encode.exit.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"rule.encode.exit.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"rule.encode.exit.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"rule.encode.exit.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"rule.encode.exit.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"rule.encode.exit.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"rule.encode.exit.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"rule.encode.exit.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"rule.encode.exit.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"rule.encode.exit.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"rule.encode.exit.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"rule.encode.exit.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"rule.encode.exit.outerBorder":{"desc":"<p>外描边</p>\n"},"rule.encode.exit.innerBorder":{"desc":"<p>内描边</p>\n"},"rule.encode.exit.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"rule.encode.exit.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"rule.encode.exit.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"rule.encode.exit.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"rule.encode.exit.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"rule.encode.exit.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"rule.encode.exit.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"rule.encode.exit.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"rule.encode.exit.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"rule.encode.exit.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"rule.encode.exit.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"rule.encode.exit.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"rule.encode.exit.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"rule.encode.exit.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"rule.encode.exit.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"rule.encode.exit.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"rule.encode.exit.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"rule.encode.exit.texture":{"desc":"<p>图元纹理</p>\n"},"rule.encode.exit.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"rule.encode.exit.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"rule.encode.exit.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"rule.encode.exit.blur":{"desc":"<p>图元边缘模糊</p>\n"},"rule.encode.exit.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"rule.encode.hover":{"desc":"<p>设置<code class=\"codespan\">hover</code>状态的时候，图元对应的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"rule.encode.hover.x":{"desc":"<p>图元的 x 坐标</p>\n"},"rule.encode.hover.y":{"desc":"<p>图元 y 坐标</p>\n"},"rule.encode.hover.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"rule.encode.hover.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"rule.encode.hover.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"rule.encode.hover.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"rule.encode.hover.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"rule.encode.hover.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"rule.encode.hover.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"rule.encode.hover.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"rule.encode.hover.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"rule.encode.hover.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"rule.encode.hover.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"rule.encode.hover.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"rule.encode.hover.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"rule.encode.hover.outerBorder":{"desc":"<p>外描边</p>\n"},"rule.encode.hover.innerBorder":{"desc":"<p>内描边</p>\n"},"rule.encode.hover.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"rule.encode.hover.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"rule.encode.hover.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"rule.encode.hover.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"rule.encode.hover.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"rule.encode.hover.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"rule.encode.hover.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"rule.encode.hover.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"rule.encode.hover.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"rule.encode.hover.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"rule.encode.hover.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"rule.encode.hover.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"rule.encode.hover.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"rule.encode.hover.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"rule.encode.hover.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"rule.encode.hover.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"rule.encode.hover.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"rule.encode.hover.texture":{"desc":"<p>图元纹理</p>\n"},"rule.encode.hover.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"rule.encode.hover.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"rule.encode.hover.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"rule.encode.hover.blur":{"desc":"<p>图元边缘模糊</p>\n"},"rule.encode.hover.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"rule.animationState":{"desc":"<p>类型：<code class=\"codespan\">MarkFunctionType</code>\n是否必传： 否\nanimation attributes</p>\n"},"rule.animation":{"desc":"<p>支持设置各种状态对应的动画，数据驱动的动画状态有三种：</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>交互触发的状态变更，通过统一的交互动画进行配置，配置的 key 为 <code class=\"codespan\">state</code></p>\n"},"rule.animation.type":{"desc":"<p>动画执行类型，指定特定的内置动画执行效果</p>\n<p>通用的内置动画类型包括：</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: 渐入渐出动画</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: 缩放动画</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: 移入移出动画</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: 旋转动画</li>\n<li><code class=\"codespan\">update</code>: 更新动画</li>\n</ul>\n"},"rule.animation.channel":{"desc":"<p>动画执行前后的视觉通道，与 <code class=\"codespan\">type</code> 配置冲突</p>\n"},"rule.animation.custom":{"desc":"<p>自定义动画，如果设定了自定义动画配置则会替换默认的视觉通道插值逻辑</p>\n"},"rule.animation.customParameters":{"desc":"<p>自定义动画参数</p>\n"},"rule.animation.easing":{"desc":"<p>动画缓动，默认为 <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"rule.animation.delay":{"desc":"<p>动画执行的延迟时间，默认为 0</p>\n"},"rule.animation.duration":{"desc":"<p>动画执行时长，默认为 1000ms</p>\n"},"rule.animation.oneByOne":{"desc":"<p>动画依次执行的延迟时长，如果配置为 <code class=\"codespan\">true</code> 则会在上一个元素动画执行结束后执行下一个元素的动画，默认为 <code class=\"codespan\">false</code></p>\n"},"rule.animation.startTime":{"desc":"<p>动画执行的初始时间，这一初始时间不会在循环动画中被重复应用，默认为 0</p>\n"},"rule.animation.totalTime":{"desc":"<p>动画执行的最大时间，如果动画执行到达设定时间将会被终止</p>\n"},"rule.animation.loop":{"desc":"<p>动画循环次数，如果配置为 <code class=\"codespan\">true</code> 则会无限循环</p>\n"},"rule.animation.options":{"desc":"<p>特定动画类型执行时设定的额外参数</p>\n"},"rule.animation.controlOptions":{"desc":"<p>动画执行逻辑的控制参数：</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: 当动画状态变更时是否立即终止自身动画</li>\n<li><code class=\"codespan\">immediatelyApply</code>: 是否立即应用动画初始的视觉通道</li>\n</ul>\n"},"rule.zIndex":{"desc":"<p>设置<code class=\"codespan\">mark</code>图元对应的容器图形(group)的 zIndex</p>\n"},"rule.interactive":{"desc":"<p>类型：<code class=\"codespan\">boolean</code>\n是否必传： 否</p>\n"},"rule.context":{"desc":"<p>设置图元的上下文参数</p>\n"},"rule.setCustomizedShape":{"desc":"<p>设置自定义形状的回调函数，对应的 ts 类型定位如下：</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>其中<code class=\"codespan\">ICustomPath2D</code> 为 VRender 提供的绘制自定义的路径一个工具类</p>\n"},"rule.support3d":{"desc":"<p>当画布设置了 3d 视角的时候，是否支持 3d 模式</p>\n"},"rule.group":{"desc":"<p>设置父图元，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 父图元对应的 id</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> 父图元对应的语法元素，一般用于 API 调用场景</li>\n</ul>\n<p>如果不设置，会默认挂在到画布的根节点下面</p>\n"},"rule.from":{"desc":"<p>ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>通过<code class=\"codespan\">data</code> 属性值，申明图元依赖的数据</p>\n"},"rule.key":{"desc":"<p>设置图元数据元素的唯一标志符，用于计算图形元素的数据状态，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"rule.sort":{"desc":"<p>对图元中的所有图形元素进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"rule.groupBy":{"desc":"<p>设置分组的属性，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置分组<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析分组<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"rule.groupSort":{"desc":"<p>对图元中的分组进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"rule.coordinate":{"desc":"<p>设置该图元关联的坐标系对应的 id 或者坐标系对应的图形元素</p>\n"},"rule.state":{"desc":"<p>设置当前图元所有图形元素的状态值，支持三种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置图形的状态，比如说:<code class=\"codespan\">{ state: &#39;selected&#39;}</code> 就是给所有的图形设置状态为<code class=\"codespan\">&#39;selected&#39;</code>，通常这种情况，<code class=\"codespan\">encode</code> 中也会设置<code class=\"codespan\">&#39;selected&#39;</code>状态对应的图形通道映射</li>\n<li><code class=\"codespan\">string[]</code> 给图形设置多个状态，可以配置<code class=\"codespan\">stateSort</code>来影响对应状态执行图形通道映射的顺序</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析状态值的回调函数，返回参数为<code class=\"codespan\">string | string[]</code>，对应的 ts 类型定义为：</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"rule.stateSort":{"desc":"<p>设置当前图元所有图形元素的状态值的排序函数，会影响状态对应的图形通道映射的顺序，最先执行的状态可能被后续的状态覆盖图形通道映射结果，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"rule.transform":{"desc":"<p>设置图元对应的变换，所有的数据变换都可以配置在图元上，用于对图元的<code class=\"codespan\">join data</code> 执行变换；\n另外一种类型的变换就是对图形元素执行的变换，比如说<code class=\"codespan\">dodge</code>；\n通用的类型定义如下：</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>每中变换支持的参数不同</p>\n"},"rule.layout":{"desc":"<p>设置图元的布局参数，图元在参与布局的时候，存在两种角色：</p>\n<ul>\n<li>&#39;container&#39; 容器图元，一般是<code class=\"codespan\">group</code>图元</li>\n<li>&#39;item&#39; 布局子元素，作为容器图元的子节点</li>\n</ul>\n<p>注意，我们仅支持一层布局，如果是多层嵌套布局，建议使用自定义的布局方案进行实现；</p>\n<p>现在支持两种内容的布局：<code class=\"codespan\">grid</code> 布局 和 <code class=\"codespan\">relative</code>布局，相关类型定义如下</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>如果想要设置自定义的布局方案，<code class=\"codespan\">layout</code>也支持直接设置回调函数，回调函数的定义如下：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"rule.layout.display":{"desc":"<p>容器图元设置布局的类型，支持两种配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> 相对布局</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> 网格布局</li>\n</ul>\n"},"rule.layout.callback":{"desc":"<p>自定义该图元的回调函数，ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"rule.layout.skipBeforeLayouted":{"desc":"<p>在布局完成前，跳过执行阶段</p>\n"},"rule.layout.updateViewSignals":{"desc":"<p>是否更新默认的视图信号，也就是：<code class=\"codespan\">padding</code>、<code class=\"codespan\">viewWidth</code> 和 <code class=\"codespan\">viewHeight</code></p>\n<p>只能在设置了<code class=\"codespan\">{ layout: { display: &#39;relative&#39;} }</code>的容器图元上设置该属性</p>\n"},"rule.layout.maxChildWidth":{"desc":"<p>相对布局的父图元，设置子图元的最大宽度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的宽度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"rule.layout.maxChildHeight":{"desc":"<p>相对布局的父图元，设置子图元的最大高度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的高度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"rule.layout.position":{"desc":"<p>设置相对布局的子图元的位置，支持的配置有：</p>\n<ul>\n<li>&#39;top&#39; 相对于父图元的顶部</li>\n<li>&#39;bottom&#39; 相对于父图元的底部</li>\n<li>&#39;left&#39; 相对于父图元的左侧</li>\n<li>&#39;right&#39; 相对于父图元的右侧</li>\n<li>&#39;content&#39; 相对于父图元的中心，也就是内容区域</li>\n<li>&#39;auto&#39; 图元设置了坐标系的时候，根据关联的<code class=\"codespan\">scale</code>，自定计算相对于父图元的位置</li>\n</ul>\n"},"rule.layout.padding":{"desc":"<p>子图元内边距，单位 px，默认各方向内边距为 0，接受数值、数值数组以及对象设置。</p>\n<p>使用示例：</p>\n<pre><code class=\"lang-ts\">// 数值类型，设置内边距为 5\npadding: 5;\n// 数值数组，设置上下的内边距为 5，左右的内边距为 10，用法同 CSS 盒模型\npadding: [5, 10];\n// 数值数组，分别设置四个方向的内边距\npadding: [\n  5, // 上\n  10, // 右\n  5, // 下\n  10 // 左\n];\n// 对象类型\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"rule.layout.gridTemplateRows":{"desc":"<p>网格布局的父图元设置行的高度</p>\n"},"rule.layout.gridTemplateColumns":{"desc":"<p>网格布局的父图元设置列的宽度</p>\n"},"rule.layout.gridRowGap":{"desc":"<p>网格布局的父图元设置行行距</p>\n"},"rule.layout.gridColumnGap":{"desc":"<p>网格布局的父图元设置列间距</p>\n"},"rule.layout.gridRowStart":{"desc":"<p>网格布局的子图元设置行开始的位置</p>\n"},"rule.layout.gridRowEnd":{"desc":"<p>网格布局的子图元设置行结束的位置</p>\n"},"rule.layout.gridColumnStart":{"desc":"<p>网格布局的子图元设置列开始的位置</p>\n"},"rule.layout.gridColumnEnd":{"desc":"<p>网格布局的子图元设置列结束的位置</p>\n"},"rule.large":{"desc":"<p>是否开启大数据渲染模式</p>\n"},"rule.largeThreshold":{"desc":"<p>开启大数据渲染优化的阀值，对应的是 data 的长度</p>\n"},"rule.progressiveStep":{"desc":"<p>开启分片渲染的步长，对应的是分片的数据长度</p>\n"},"rule.progressiveThreshold":{"desc":"<p>开启分片渲染的阀值，对应的是单系列 data 的长度</p>\n"},"rule.morph":{"desc":"<p>是否对当前图元开启全局的过渡形变动画</p>\n"},"rule.morphKey":{"desc":"<p>用于匹配全局过渡形变动画的图元，具有相对的<code class=\"codespan\">morphKey</code>的图元，会进行形变动画</p>\n"},"rule.morphElementKey":{"desc":"<p>对于匹配上的前后图元，通过该配置，进行图形元素的匹配；如果不申明，我们默认会读取<code class=\"codespan\">key</code>配置，用于匹配图形元素，进行形变动画；\n默认支持一对一、一对多、多对一的图形形变动画</p>\n"},"image":{"desc":"<p><strong> image 图元 </strong></p>\n"},"image.type":{"desc":"<p>设置图元类型为 <code class=\"codespan\">image</code></p>\n"},"image.encode":{"desc":"<p>设置图元的视觉通道编码，默认支持三种数据变化状态：</p>\n<ul>\n<li><code class=\"codespan\">enter</code> 新增数据元素</li>\n<li><code class=\"codespan\">update</code> 数据元素更新</li>\n<li><code class=\"codespan\">exit</code> 数据元素被删除</li>\n</ul>\n<p>注意，这里的数据状态是根据<code class=\"codespan\">mark</code>的<code class=\"codespan\">key</code>自动生成的，我们会针对<code class=\"codespan\">mark</code>的绑定数据，根据<code class=\"codespan\">key</code>的配置，计算数据对应的唯一标志符，数据更新后，如果对应的唯一标志符不存在了，则状态为<code class=\"codespan\">exit</code>，如果存在，则为<code class=\"codespan\">update</code>；如果之前的数据不存在改唯一标志符，则数据元素对应的状态为<code class=\"codespan\">enter</code></p>\n<p>默认支持一种交互状态：</p>\n<ul>\n<li><code class=\"codespan\">hover</code> 鼠标 hover 到具体的图形上，给图形设置对应的视觉通道编码</li>\n</ul>\n"},"image.encode.enter":{"desc":"<p>设置图元在数据初始化状态执行的视觉通道映射，注意数据更新的时候不再执行</p>\n"},"image.encode.enter.width":{"desc":"<p>图元的宽度</p>\n"},"image.encode.enter.height":{"desc":"<p>图元的高度</p>\n"},"image.encode.enter.repeatX":{"desc":"<p>x 方向重复的类型，可选值为：</p>\n<ul>\n<li><code class=\"codespan\">&#39;no-repeat&#39;</code> 不重复</li>\n<li><code class=\"codespan\">&#39;repeat&#39;</code> 重复</li>\n<li><code class=\"codespan\">&#39;stretch&#39;</code> 拉伸</li>\n</ul>\n"},"image.encode.enter.repeatY":{"desc":"<p>y 方向重复的类型，可选值为：</p>\n<ul>\n<li><code class=\"codespan\">&#39;no-repeat&#39;</code> 不重复</li>\n<li><code class=\"codespan\">&#39;repeat&#39;</code> 重复</li>\n<li><code class=\"codespan\">&#39;stretch&#39;</code> 拉伸</li>\n</ul>\n"},"image.encode.enter.image":{"desc":"<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"image.encode.enter.x":{"desc":"<p>图元的 x 坐标</p>\n"},"image.encode.enter.y":{"desc":"<p>图元 y 坐标</p>\n"},"image.encode.enter.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"image.encode.enter.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"image.encode.enter.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"image.encode.enter.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"image.encode.enter.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"image.encode.enter.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"image.encode.enter.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"image.encode.enter.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"image.encode.enter.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"image.encode.enter.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"image.encode.enter.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"image.encode.enter.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"image.encode.enter.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"image.encode.enter.outerBorder":{"desc":"<p>外描边</p>\n"},"image.encode.enter.innerBorder":{"desc":"<p>内描边</p>\n"},"image.encode.enter.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"image.encode.enter.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"image.encode.enter.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"image.encode.enter.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"image.encode.enter.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"image.encode.enter.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"image.encode.enter.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"image.encode.enter.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"image.encode.enter.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"image.encode.enter.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"image.encode.enter.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"image.encode.enter.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"image.encode.enter.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"image.encode.enter.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"image.encode.enter.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"image.encode.enter.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"image.encode.enter.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"image.encode.enter.texture":{"desc":"<p>图元纹理</p>\n"},"image.encode.enter.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"image.encode.enter.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"image.encode.enter.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"image.encode.enter.blur":{"desc":"<p>图元边缘模糊</p>\n"},"image.encode.enter.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"image.encode.update":{"desc":"<p>设置图元在数据更新状态执行的视觉通道映射</p>\n"},"image.encode.update.width":{"desc":"<p>图元的宽度</p>\n"},"image.encode.update.height":{"desc":"<p>图元的高度</p>\n"},"image.encode.update.repeatX":{"desc":"<p>x 方向重复的类型，可选值为：</p>\n<ul>\n<li><code class=\"codespan\">&#39;no-repeat&#39;</code> 不重复</li>\n<li><code class=\"codespan\">&#39;repeat&#39;</code> 重复</li>\n<li><code class=\"codespan\">&#39;stretch&#39;</code> 拉伸</li>\n</ul>\n"},"image.encode.update.repeatY":{"desc":"<p>y 方向重复的类型，可选值为：</p>\n<ul>\n<li><code class=\"codespan\">&#39;no-repeat&#39;</code> 不重复</li>\n<li><code class=\"codespan\">&#39;repeat&#39;</code> 重复</li>\n<li><code class=\"codespan\">&#39;stretch&#39;</code> 拉伸</li>\n</ul>\n"},"image.encode.update.image":{"desc":"<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"image.encode.update.x":{"desc":"<p>图元的 x 坐标</p>\n"},"image.encode.update.y":{"desc":"<p>图元 y 坐标</p>\n"},"image.encode.update.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"image.encode.update.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"image.encode.update.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"image.encode.update.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"image.encode.update.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"image.encode.update.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"image.encode.update.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"image.encode.update.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"image.encode.update.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"image.encode.update.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"image.encode.update.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"image.encode.update.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"image.encode.update.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"image.encode.update.outerBorder":{"desc":"<p>外描边</p>\n"},"image.encode.update.innerBorder":{"desc":"<p>内描边</p>\n"},"image.encode.update.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"image.encode.update.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"image.encode.update.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"image.encode.update.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"image.encode.update.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"image.encode.update.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"image.encode.update.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"image.encode.update.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"image.encode.update.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"image.encode.update.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"image.encode.update.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"image.encode.update.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"image.encode.update.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"image.encode.update.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"image.encode.update.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"image.encode.update.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"image.encode.update.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"image.encode.update.texture":{"desc":"<p>图元纹理</p>\n"},"image.encode.update.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"image.encode.update.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"image.encode.update.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"image.encode.update.blur":{"desc":"<p>图元边缘模糊</p>\n"},"image.encode.update.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"image.encode.exit":{"desc":"<p>设置图元在数据被删除的状态下执行的视觉通道映射</p>\n"},"image.encode.exit.width":{"desc":"<p>图元的宽度</p>\n"},"image.encode.exit.height":{"desc":"<p>图元的高度</p>\n"},"image.encode.exit.repeatX":{"desc":"<p>x 方向重复的类型，可选值为：</p>\n<ul>\n<li><code class=\"codespan\">&#39;no-repeat&#39;</code> 不重复</li>\n<li><code class=\"codespan\">&#39;repeat&#39;</code> 重复</li>\n<li><code class=\"codespan\">&#39;stretch&#39;</code> 拉伸</li>\n</ul>\n"},"image.encode.exit.repeatY":{"desc":"<p>y 方向重复的类型，可选值为：</p>\n<ul>\n<li><code class=\"codespan\">&#39;no-repeat&#39;</code> 不重复</li>\n<li><code class=\"codespan\">&#39;repeat&#39;</code> 重复</li>\n<li><code class=\"codespan\">&#39;stretch&#39;</code> 拉伸</li>\n</ul>\n"},"image.encode.exit.image":{"desc":"<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"image.encode.exit.x":{"desc":"<p>图元的 x 坐标</p>\n"},"image.encode.exit.y":{"desc":"<p>图元 y 坐标</p>\n"},"image.encode.exit.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"image.encode.exit.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"image.encode.exit.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"image.encode.exit.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"image.encode.exit.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"image.encode.exit.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"image.encode.exit.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"image.encode.exit.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"image.encode.exit.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"image.encode.exit.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"image.encode.exit.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"image.encode.exit.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"image.encode.exit.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"image.encode.exit.outerBorder":{"desc":"<p>外描边</p>\n"},"image.encode.exit.innerBorder":{"desc":"<p>内描边</p>\n"},"image.encode.exit.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"image.encode.exit.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"image.encode.exit.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"image.encode.exit.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"image.encode.exit.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"image.encode.exit.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"image.encode.exit.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"image.encode.exit.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"image.encode.exit.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"image.encode.exit.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"image.encode.exit.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"image.encode.exit.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"image.encode.exit.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"image.encode.exit.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"image.encode.exit.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"image.encode.exit.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"image.encode.exit.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"image.encode.exit.texture":{"desc":"<p>图元纹理</p>\n"},"image.encode.exit.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"image.encode.exit.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"image.encode.exit.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"image.encode.exit.blur":{"desc":"<p>图元边缘模糊</p>\n"},"image.encode.exit.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"image.encode.hover":{"desc":"<p>设置<code class=\"codespan\">hover</code>状态的时候，图元对应的视觉通道映射</p>\n"},"image.encode.hover.width":{"desc":"<p>图元的宽度</p>\n"},"image.encode.hover.height":{"desc":"<p>图元的高度</p>\n"},"image.encode.hover.repeatX":{"desc":"<p>x 方向重复的类型，可选值为：</p>\n<ul>\n<li><code class=\"codespan\">&#39;no-repeat&#39;</code> 不重复</li>\n<li><code class=\"codespan\">&#39;repeat&#39;</code> 重复</li>\n<li><code class=\"codespan\">&#39;stretch&#39;</code> 拉伸</li>\n</ul>\n"},"image.encode.hover.repeatY":{"desc":"<p>y 方向重复的类型，可选值为：</p>\n<ul>\n<li><code class=\"codespan\">&#39;no-repeat&#39;</code> 不重复</li>\n<li><code class=\"codespan\">&#39;repeat&#39;</code> 重复</li>\n<li><code class=\"codespan\">&#39;stretch&#39;</code> 拉伸</li>\n</ul>\n"},"image.encode.hover.image":{"desc":"<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"image.encode.hover.x":{"desc":"<p>图元的 x 坐标</p>\n"},"image.encode.hover.y":{"desc":"<p>图元 y 坐标</p>\n"},"image.encode.hover.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"image.encode.hover.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"image.encode.hover.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"image.encode.hover.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"image.encode.hover.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"image.encode.hover.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"image.encode.hover.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"image.encode.hover.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"image.encode.hover.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"image.encode.hover.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"image.encode.hover.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"image.encode.hover.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"image.encode.hover.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"image.encode.hover.outerBorder":{"desc":"<p>外描边</p>\n"},"image.encode.hover.innerBorder":{"desc":"<p>内描边</p>\n"},"image.encode.hover.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"image.encode.hover.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"image.encode.hover.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"image.encode.hover.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"image.encode.hover.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"image.encode.hover.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"image.encode.hover.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"image.encode.hover.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"image.encode.hover.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"image.encode.hover.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"image.encode.hover.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"image.encode.hover.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"image.encode.hover.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"image.encode.hover.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"image.encode.hover.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"image.encode.hover.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"image.encode.hover.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"image.encode.hover.texture":{"desc":"<p>图元纹理</p>\n"},"image.encode.hover.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"image.encode.hover.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"image.encode.hover.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"image.encode.hover.blur":{"desc":"<p>图元边缘模糊</p>\n"},"image.encode.hover.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"image.animationState":{"desc":"<p>类型：<code class=\"codespan\">MarkFunctionType</code>\n是否必传： 否\nanimation attributes</p>\n"},"image.animation":{"desc":"<p>支持设置各种状态对应的动画，数据驱动的动画状态有三种：</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>交互触发的状态变更，通过统一的交互动画进行配置，配置的 key 为 <code class=\"codespan\">state</code></p>\n"},"image.animation.type":{"desc":"<p>动画执行类型，指定特定的内置动画执行效果</p>\n<p>通用的内置动画类型包括：</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: 渐入渐出动画</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: 缩放动画</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: 移入移出动画</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: 旋转动画</li>\n<li><code class=\"codespan\">update</code>: 更新动画</li>\n</ul>\n"},"image.animation.channel":{"desc":"<p>动画执行前后的视觉通道，与 <code class=\"codespan\">type</code> 配置冲突</p>\n"},"image.animation.custom":{"desc":"<p>自定义动画，如果设定了自定义动画配置则会替换默认的视觉通道插值逻辑</p>\n"},"image.animation.customParameters":{"desc":"<p>自定义动画参数</p>\n"},"image.animation.easing":{"desc":"<p>动画缓动，默认为 <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"image.animation.delay":{"desc":"<p>动画执行的延迟时间，默认为 0</p>\n"},"image.animation.duration":{"desc":"<p>动画执行时长，默认为 1000ms</p>\n"},"image.animation.oneByOne":{"desc":"<p>动画依次执行的延迟时长，如果配置为 <code class=\"codespan\">true</code> 则会在上一个元素动画执行结束后执行下一个元素的动画，默认为 <code class=\"codespan\">false</code></p>\n"},"image.animation.startTime":{"desc":"<p>动画执行的初始时间，这一初始时间不会在循环动画中被重复应用，默认为 0</p>\n"},"image.animation.totalTime":{"desc":"<p>动画执行的最大时间，如果动画执行到达设定时间将会被终止</p>\n"},"image.animation.loop":{"desc":"<p>动画循环次数，如果配置为 <code class=\"codespan\">true</code> 则会无限循环</p>\n"},"image.animation.options":{"desc":"<p>特定动画类型执行时设定的额外参数</p>\n"},"image.animation.controlOptions":{"desc":"<p>动画执行逻辑的控制参数：</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: 当动画状态变更时是否立即终止自身动画</li>\n<li><code class=\"codespan\">immediatelyApply</code>: 是否立即应用动画初始的视觉通道</li>\n</ul>\n"},"image.zIndex":{"desc":"<p>设置<code class=\"codespan\">mark</code>图元对应的容器图形(group)的 zIndex</p>\n"},"image.interactive":{"desc":"<p>类型：<code class=\"codespan\">boolean</code>\n是否必传： 否</p>\n"},"image.context":{"desc":"<p>设置图元的上下文参数</p>\n"},"image.setCustomizedShape":{"desc":"<p>设置自定义形状的回调函数，对应的 ts 类型定位如下：</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>其中<code class=\"codespan\">ICustomPath2D</code> 为 VRender 提供的绘制自定义的路径一个工具类</p>\n"},"image.support3d":{"desc":"<p>当画布设置了 3d 视角的时候，是否支持 3d 模式</p>\n"},"image.group":{"desc":"<p>设置父图元，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 父图元对应的 id</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> 父图元对应的语法元素，一般用于 API 调用场景</li>\n</ul>\n<p>如果不设置，会默认挂在到画布的根节点下面</p>\n"},"image.from":{"desc":"<p>ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>通过<code class=\"codespan\">data</code> 属性值，申明图元依赖的数据</p>\n"},"image.key":{"desc":"<p>设置图元数据元素的唯一标志符，用于计算图形元素的数据状态，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"image.sort":{"desc":"<p>对图元中的所有图形元素进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"image.groupBy":{"desc":"<p>设置分组的属性，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置分组<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析分组<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"image.groupSort":{"desc":"<p>对图元中的分组进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"image.coordinate":{"desc":"<p>设置该图元关联的坐标系对应的 id 或者坐标系对应的图形元素</p>\n"},"image.state":{"desc":"<p>设置当前图元所有图形元素的状态值，支持三种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置图形的状态，比如说:<code class=\"codespan\">{ state: &#39;selected&#39;}</code> 就是给所有的图形设置状态为<code class=\"codespan\">&#39;selected&#39;</code>，通常这种情况，<code class=\"codespan\">encode</code> 中也会设置<code class=\"codespan\">&#39;selected&#39;</code>状态对应的图形通道映射</li>\n<li><code class=\"codespan\">string[]</code> 给图形设置多个状态，可以配置<code class=\"codespan\">stateSort</code>来影响对应状态执行图形通道映射的顺序</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析状态值的回调函数，返回参数为<code class=\"codespan\">string | string[]</code>，对应的 ts 类型定义为：</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"image.stateSort":{"desc":"<p>设置当前图元所有图形元素的状态值的排序函数，会影响状态对应的图形通道映射的顺序，最先执行的状态可能被后续的状态覆盖图形通道映射结果，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"image.transform":{"desc":"<p>设置图元对应的变换，所有的数据变换都可以配置在图元上，用于对图元的<code class=\"codespan\">join data</code> 执行变换；\n另外一种类型的变换就是对图形元素执行的变换，比如说<code class=\"codespan\">dodge</code>；\n通用的类型定义如下：</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>每中变换支持的参数不同</p>\n"},"image.layout":{"desc":"<p>设置图元的布局参数，图元在参与布局的时候，存在两种角色：</p>\n<ul>\n<li>&#39;container&#39; 容器图元，一般是<code class=\"codespan\">group</code>图元</li>\n<li>&#39;item&#39; 布局子元素，作为容器图元的子节点</li>\n</ul>\n<p>注意，我们仅支持一层布局，如果是多层嵌套布局，建议使用自定义的布局方案进行实现；</p>\n<p>现在支持两种内容的布局：<code class=\"codespan\">grid</code> 布局 和 <code class=\"codespan\">relative</code>布局，相关类型定义如下</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>如果想要设置自定义的布局方案，<code class=\"codespan\">layout</code>也支持直接设置回调函数，回调函数的定义如下：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"image.layout.display":{"desc":"<p>容器图元设置布局的类型，支持两种配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> 相对布局</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> 网格布局</li>\n</ul>\n"},"image.layout.callback":{"desc":"<p>自定义该图元的回调函数，ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"image.layout.skipBeforeLayouted":{"desc":"<p>在布局完成前，跳过执行阶段</p>\n"},"image.layout.updateViewSignals":{"desc":"<p>是否更新默认的视图信号，也就是：<code class=\"codespan\">padding</code>、<code class=\"codespan\">viewWidth</code> 和 <code class=\"codespan\">viewHeight</code></p>\n<p>只能在设置了<code class=\"codespan\">{ layout: { display: &#39;relative&#39;} }</code>的容器图元上设置该属性</p>\n"},"image.layout.maxChildWidth":{"desc":"<p>相对布局的父图元，设置子图元的最大宽度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的宽度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"image.layout.maxChildHeight":{"desc":"<p>相对布局的父图元，设置子图元的最大高度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的高度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"image.layout.position":{"desc":"<p>设置相对布局的子图元的位置，支持的配置有：</p>\n<ul>\n<li>&#39;top&#39; 相对于父图元的顶部</li>\n<li>&#39;bottom&#39; 相对于父图元的底部</li>\n<li>&#39;left&#39; 相对于父图元的左侧</li>\n<li>&#39;right&#39; 相对于父图元的右侧</li>\n<li>&#39;content&#39; 相对于父图元的中心，也就是内容区域</li>\n<li>&#39;auto&#39; 图元设置了坐标系的时候，根据关联的<code class=\"codespan\">scale</code>，自定计算相对于父图元的位置</li>\n</ul>\n"},"image.layout.padding":{"desc":"<p>子图元内边距，单位 px，默认各方向内边距为 0，接受数值、数值数组以及对象设置。</p>\n<p>使用示例：</p>\n<pre><code class=\"lang-ts\">// 数值类型，设置内边距为 5\npadding: 5;\n// 数值数组，设置上下的内边距为 5，左右的内边距为 10，用法同 CSS 盒模型\npadding: [5, 10];\n// 数值数组，分别设置四个方向的内边距\npadding: [\n  5, // 上\n  10, // 右\n  5, // 下\n  10 // 左\n];\n// 对象类型\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"image.layout.gridTemplateRows":{"desc":"<p>网格布局的父图元设置行的高度</p>\n"},"image.layout.gridTemplateColumns":{"desc":"<p>网格布局的父图元设置列的宽度</p>\n"},"image.layout.gridRowGap":{"desc":"<p>网格布局的父图元设置行行距</p>\n"},"image.layout.gridColumnGap":{"desc":"<p>网格布局的父图元设置列间距</p>\n"},"image.layout.gridRowStart":{"desc":"<p>网格布局的子图元设置行开始的位置</p>\n"},"image.layout.gridRowEnd":{"desc":"<p>网格布局的子图元设置行结束的位置</p>\n"},"image.layout.gridColumnStart":{"desc":"<p>网格布局的子图元设置列开始的位置</p>\n"},"image.layout.gridColumnEnd":{"desc":"<p>网格布局的子图元设置列结束的位置</p>\n"},"image.large":{"desc":"<p>是否开启大数据渲染模式</p>\n"},"image.largeThreshold":{"desc":"<p>开启大数据渲染优化的阀值，对应的是 data 的长度</p>\n"},"image.progressiveStep":{"desc":"<p>开启分片渲染的步长，对应的是分片的数据长度</p>\n"},"image.progressiveThreshold":{"desc":"<p>开启分片渲染的阀值，对应的是单系列 data 的长度</p>\n"},"image.morph":{"desc":"<p>是否对当前图元开启全局的过渡形变动画</p>\n"},"image.morphKey":{"desc":"<p>用于匹配全局过渡形变动画的图元，具有相对的<code class=\"codespan\">morphKey</code>的图元，会进行形变动画</p>\n"},"image.morphElementKey":{"desc":"<p>对于匹配上的前后图元，通过该配置，进行图形元素的匹配；如果不申明，我们默认会读取<code class=\"codespan\">key</code>配置，用于匹配图形元素，进行形变动画；\n默认支持一对一、一对多、多对一的图形形变动画</p>\n"},"richtext":{"desc":"<p><strong> richtext 图元 </strong></p>\n"},"richtext.type":{"desc":"<p>设置图元类型为 <code class=\"codespan\">richtext</code></p>\n"},"richtext.encode":{"desc":"<p>设置图元的视觉通道编码，默认支持三种数据变化状态：</p>\n<ul>\n<li><code class=\"codespan\">enter</code> 新增数据元素</li>\n<li><code class=\"codespan\">update</code> 数据元素更新</li>\n<li><code class=\"codespan\">exit</code> 数据元素被删除</li>\n</ul>\n<p>注意，这里的数据状态是根据<code class=\"codespan\">mark</code>的<code class=\"codespan\">key</code>自动生成的，我们会针对<code class=\"codespan\">mark</code>的绑定数据，根据<code class=\"codespan\">key</code>的配置，计算数据对应的唯一标志符，数据更新后，如果对应的唯一标志符不存在了，则状态为<code class=\"codespan\">exit</code>，如果存在，则为<code class=\"codespan\">update</code>；如果之前的数据不存在改唯一标志符，则数据元素对应的状态为<code class=\"codespan\">enter</code></p>\n<p>默认支持一种交互状态：</p>\n<ul>\n<li><code class=\"codespan\">hover</code> 鼠标 hover 到具体的图形上，给图形设置对应的视觉通道编码</li>\n</ul>\n"},"richtext.encode.enter":{"desc":"<p>设置图元在数据初始化状态执行的视觉通道映射，注意数据更新的时候不再执行</p>\n"},"richtext.encode.enter.width":{"desc":"<p>图元的宽度</p>\n"},"richtext.encode.enter.height":{"desc":"<p>图元的高度</p>\n"},"richtext.encode.enter.textConfig":{"desc":"<p>设置子文本的样式，类型为<code class=\"codespan\">IRichTextCharacter[]</code>，具体的定义如下：</p>\n<pre><code class=\"lang-ts\">type IRichTextBasicCharacter = {\n  lineHeight?: number;\n  textAlign?: CanvasTextAlign; // left, right, center\n  textBaseline?: CanvasTextBaseline;\n  direction?: RichTextLayoutDirectionType;\n};\n\ntype IRichTextParagraphCharacter = IRichTextBasicCharacter &amp; {\n  text: string;\n  fontSize?: number;\n  fontFamily?: string;\n  fill?: boolean;\n  stroke?: boolean;\n  fillColor?: IColor;\n  strokeColor?: IColor;\n  fontWeight?: string;\n  // lineHeight?: number;\n  fontStyle?: RichTextFontStyle; // normal, italic, oblique\n  textDecoration?: RichTextTextDecoration; // none, underline, line-through\n  // textAlign?: RichTextTextAlign; // left, right, center\n  script?: RichTextScript; // normal, sub, super\n  underline?: boolean;\n  lineThrough?: boolean;\n  // direction?: RichTextLayoutDirectionType;\n};\n\ntype IRichTextImageCharacter = IRichTextBasicCharacter &amp; {\n  // 图片基础属性\n  image: string | HTMLImageElement | HTMLCanvasElement;\n  width: number;\n  height: number;\n\n  // hover相关属性\n  // backgroundShow?: boolean; // 是否显示background\n  backgroundShowMode?: &#39;always&#39; | &#39;hover&#39;;\n  backgroundFill?: boolean;\n  backgroundFillColor?: IColor; // 背景矩形填充颜色\n  backgroundFillOpacity?: number; // 背景矩形填充透明度\n  backgroundStroke?: boolean;\n  backgroundStrokeColor?: IColor; // 背景矩形边框颜色\n  backgroundStrokeOpacity?: number; // 背景矩形边框透明度\n  backgroundRadius?: number; // 背景矩形圆角\n  // background size 同时控制了该icon的响应范围\n  backgroundWidth?: number;\n  backgroundHeight?: number;\n\n  // 唯一标识符\n  id?: string;\n\n  // lineHeight?: number;\n  // textAlign?: RichTextTextAlign; // left, right, center\n  // direction?: RichTextLayoutDirectionType;\n  margin?: number | number[];\n\n  funcType?: string;\n  hoverImage?: string | HTMLImageElement | HTMLCanvasElement;\n};\n\ntype IRichTextCharacter = IRichTextParagraphCharacter | IRichTextImageCharacter;\n</code></pre>\n"},"richtext.encode.enter.ellipsis":{"desc":"<p>文本超长的时候，缩略符相关配置，支持两种类型的配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 开启自动省略，并设置省略符号</li>\n<li><code class=\"codespan\">&#39;boolean&#39;</code> 是否开启自动省略，默认的省略符号为<code class=\"codespan\">&#39;...&#39;</code></li>\n</ul>\n"},"richtext.encode.enter.wordBreak":{"desc":"<p>文字断开设置，支持两个配置值：</p>\n<ul>\n<li><code class=\"codespan\">&#39;break-word&#39;</code></li>\n<li><code class=\"codespan\">&#39;break-all&#39;</code></li>\n</ul>\n"},"richtext.encode.enter.verticalDirection":{"desc":"<p>数值方向对齐方式，支持配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;top&#39;</code></li>\n<li><code class=\"codespan\">&#39;middle&#39;</code></li>\n<li><code class=\"codespan\">&#39;bottom&#39;</code></li>\n</ul>\n"},"richtext.encode.enter.layoutDirection":{"desc":"<p>布局方向，支持配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;horizontal&#39;</code></li>\n<li><code class=\"codespan\">&#39;vertical&#39;</code></li>\n</ul>\n"},"richtext.encode.enter.singleLine":{"desc":"<p>是否单行展示</p>\n"},"richtext.encode.enter.maxHeight":{"desc":"<p>最大高度</p>\n"},"richtext.encode.enter.maxWidth":{"desc":"<p>最大宽度</p>\n"},"richtext.encode.enter.textAlign":{"desc":"<p>文字的对齐方式，支持配置：</p>\n<ul>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;center&#39;</li>\n</ul>\n"},"richtext.encode.enter.textBaseline":{"desc":"<p>文字的竖直对齐线，支持配置：</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;middle&#39;</li>\n<li>&#39;bottom&#39;</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"richtext.encode.enter.x":{"desc":"<p>图元的 x 坐标</p>\n"},"richtext.encode.enter.y":{"desc":"<p>图元 y 坐标</p>\n"},"richtext.encode.enter.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"richtext.encode.enter.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"richtext.encode.enter.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"richtext.encode.enter.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"richtext.encode.enter.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"richtext.encode.enter.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"richtext.encode.enter.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"richtext.encode.enter.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"richtext.encode.enter.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"richtext.encode.enter.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"richtext.encode.enter.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"richtext.encode.enter.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"richtext.encode.enter.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"richtext.encode.enter.outerBorder":{"desc":"<p>外描边</p>\n"},"richtext.encode.enter.innerBorder":{"desc":"<p>内描边</p>\n"},"richtext.encode.enter.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"richtext.encode.enter.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"richtext.encode.enter.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"richtext.encode.enter.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"richtext.encode.enter.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"richtext.encode.enter.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"richtext.encode.enter.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"richtext.encode.enter.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"richtext.encode.enter.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"richtext.encode.enter.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"richtext.encode.enter.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"richtext.encode.enter.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"richtext.encode.enter.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"richtext.encode.enter.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"richtext.encode.enter.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"richtext.encode.enter.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"richtext.encode.enter.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"richtext.encode.enter.texture":{"desc":"<p>图元纹理</p>\n"},"richtext.encode.enter.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"richtext.encode.enter.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"richtext.encode.enter.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"richtext.encode.enter.blur":{"desc":"<p>图元边缘模糊</p>\n"},"richtext.encode.enter.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"richtext.encode.update":{"desc":"<p>设置图元在数据更新状态执行的视觉通道映射</p>\n"},"richtext.encode.update.width":{"desc":"<p>图元的宽度</p>\n"},"richtext.encode.update.height":{"desc":"<p>图元的高度</p>\n"},"richtext.encode.update.textConfig":{"desc":"<p>设置子文本的样式，类型为<code class=\"codespan\">IRichTextCharacter[]</code>，具体的定义如下：</p>\n<pre><code class=\"lang-ts\">type IRichTextBasicCharacter = {\n  lineHeight?: number;\n  textAlign?: CanvasTextAlign; // left, right, center\n  textBaseline?: CanvasTextBaseline;\n  direction?: RichTextLayoutDirectionType;\n};\n\ntype IRichTextParagraphCharacter = IRichTextBasicCharacter &amp; {\n  text: string;\n  fontSize?: number;\n  fontFamily?: string;\n  fill?: boolean;\n  stroke?: boolean;\n  fillColor?: IColor;\n  strokeColor?: IColor;\n  fontWeight?: string;\n  // lineHeight?: number;\n  fontStyle?: RichTextFontStyle; // normal, italic, oblique\n  textDecoration?: RichTextTextDecoration; // none, underline, line-through\n  // textAlign?: RichTextTextAlign; // left, right, center\n  script?: RichTextScript; // normal, sub, super\n  underline?: boolean;\n  lineThrough?: boolean;\n  // direction?: RichTextLayoutDirectionType;\n};\n\ntype IRichTextImageCharacter = IRichTextBasicCharacter &amp; {\n  // 图片基础属性\n  image: string | HTMLImageElement | HTMLCanvasElement;\n  width: number;\n  height: number;\n\n  // hover相关属性\n  // backgroundShow?: boolean; // 是否显示background\n  backgroundShowMode?: &#39;always&#39; | &#39;hover&#39;;\n  backgroundFill?: boolean;\n  backgroundFillColor?: IColor; // 背景矩形填充颜色\n  backgroundFillOpacity?: number; // 背景矩形填充透明度\n  backgroundStroke?: boolean;\n  backgroundStrokeColor?: IColor; // 背景矩形边框颜色\n  backgroundStrokeOpacity?: number; // 背景矩形边框透明度\n  backgroundRadius?: number; // 背景矩形圆角\n  // background size 同时控制了该icon的响应范围\n  backgroundWidth?: number;\n  backgroundHeight?: number;\n\n  // 唯一标识符\n  id?: string;\n\n  // lineHeight?: number;\n  // textAlign?: RichTextTextAlign; // left, right, center\n  // direction?: RichTextLayoutDirectionType;\n  margin?: number | number[];\n\n  funcType?: string;\n  hoverImage?: string | HTMLImageElement | HTMLCanvasElement;\n};\n\ntype IRichTextCharacter = IRichTextParagraphCharacter | IRichTextImageCharacter;\n</code></pre>\n"},"richtext.encode.update.ellipsis":{"desc":"<p>文本超长的时候，缩略符相关配置，支持两种类型的配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 开启自动省略，并设置省略符号</li>\n<li><code class=\"codespan\">&#39;boolean&#39;</code> 是否开启自动省略，默认的省略符号为<code class=\"codespan\">&#39;...&#39;</code></li>\n</ul>\n"},"richtext.encode.update.wordBreak":{"desc":"<p>文字断开设置，支持两个配置值：</p>\n<ul>\n<li><code class=\"codespan\">&#39;break-word&#39;</code></li>\n<li><code class=\"codespan\">&#39;break-all&#39;</code></li>\n</ul>\n"},"richtext.encode.update.verticalDirection":{"desc":"<p>数值方向对齐方式，支持配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;top&#39;</code></li>\n<li><code class=\"codespan\">&#39;middle&#39;</code></li>\n<li><code class=\"codespan\">&#39;bottom&#39;</code></li>\n</ul>\n"},"richtext.encode.update.layoutDirection":{"desc":"<p>布局方向，支持配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;horizontal&#39;</code></li>\n<li><code class=\"codespan\">&#39;vertical&#39;</code></li>\n</ul>\n"},"richtext.encode.update.singleLine":{"desc":"<p>是否单行展示</p>\n"},"richtext.encode.update.maxHeight":{"desc":"<p>最大高度</p>\n"},"richtext.encode.update.maxWidth":{"desc":"<p>最大宽度</p>\n"},"richtext.encode.update.textAlign":{"desc":"<p>文字的对齐方式，支持配置：</p>\n<ul>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;center&#39;</li>\n</ul>\n"},"richtext.encode.update.textBaseline":{"desc":"<p>文字的竖直对齐线，支持配置：</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;middle&#39;</li>\n<li>&#39;bottom&#39;</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"richtext.encode.update.x":{"desc":"<p>图元的 x 坐标</p>\n"},"richtext.encode.update.y":{"desc":"<p>图元 y 坐标</p>\n"},"richtext.encode.update.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"richtext.encode.update.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"richtext.encode.update.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"richtext.encode.update.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"richtext.encode.update.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"richtext.encode.update.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"richtext.encode.update.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"richtext.encode.update.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"richtext.encode.update.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"richtext.encode.update.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"richtext.encode.update.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"richtext.encode.update.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"richtext.encode.update.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"richtext.encode.update.outerBorder":{"desc":"<p>外描边</p>\n"},"richtext.encode.update.innerBorder":{"desc":"<p>内描边</p>\n"},"richtext.encode.update.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"richtext.encode.update.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"richtext.encode.update.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"richtext.encode.update.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"richtext.encode.update.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"richtext.encode.update.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"richtext.encode.update.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"richtext.encode.update.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"richtext.encode.update.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"richtext.encode.update.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"richtext.encode.update.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"richtext.encode.update.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"richtext.encode.update.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"richtext.encode.update.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"richtext.encode.update.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"richtext.encode.update.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"richtext.encode.update.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"richtext.encode.update.texture":{"desc":"<p>图元纹理</p>\n"},"richtext.encode.update.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"richtext.encode.update.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"richtext.encode.update.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"richtext.encode.update.blur":{"desc":"<p>图元边缘模糊</p>\n"},"richtext.encode.update.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"richtext.encode.exit":{"desc":"<p>设置图元在数据被删除的状态下执行的视觉通道映射</p>\n"},"richtext.encode.exit.width":{"desc":"<p>图元的宽度</p>\n"},"richtext.encode.exit.height":{"desc":"<p>图元的高度</p>\n"},"richtext.encode.exit.textConfig":{"desc":"<p>设置子文本的样式，类型为<code class=\"codespan\">IRichTextCharacter[]</code>，具体的定义如下：</p>\n<pre><code class=\"lang-ts\">type IRichTextBasicCharacter = {\n  lineHeight?: number;\n  textAlign?: CanvasTextAlign; // left, right, center\n  textBaseline?: CanvasTextBaseline;\n  direction?: RichTextLayoutDirectionType;\n};\n\ntype IRichTextParagraphCharacter = IRichTextBasicCharacter &amp; {\n  text: string;\n  fontSize?: number;\n  fontFamily?: string;\n  fill?: boolean;\n  stroke?: boolean;\n  fillColor?: IColor;\n  strokeColor?: IColor;\n  fontWeight?: string;\n  // lineHeight?: number;\n  fontStyle?: RichTextFontStyle; // normal, italic, oblique\n  textDecoration?: RichTextTextDecoration; // none, underline, line-through\n  // textAlign?: RichTextTextAlign; // left, right, center\n  script?: RichTextScript; // normal, sub, super\n  underline?: boolean;\n  lineThrough?: boolean;\n  // direction?: RichTextLayoutDirectionType;\n};\n\ntype IRichTextImageCharacter = IRichTextBasicCharacter &amp; {\n  // 图片基础属性\n  image: string | HTMLImageElement | HTMLCanvasElement;\n  width: number;\n  height: number;\n\n  // hover相关属性\n  // backgroundShow?: boolean; // 是否显示background\n  backgroundShowMode?: &#39;always&#39; | &#39;hover&#39;;\n  backgroundFill?: boolean;\n  backgroundFillColor?: IColor; // 背景矩形填充颜色\n  backgroundFillOpacity?: number; // 背景矩形填充透明度\n  backgroundStroke?: boolean;\n  backgroundStrokeColor?: IColor; // 背景矩形边框颜色\n  backgroundStrokeOpacity?: number; // 背景矩形边框透明度\n  backgroundRadius?: number; // 背景矩形圆角\n  // background size 同时控制了该icon的响应范围\n  backgroundWidth?: number;\n  backgroundHeight?: number;\n\n  // 唯一标识符\n  id?: string;\n\n  // lineHeight?: number;\n  // textAlign?: RichTextTextAlign; // left, right, center\n  // direction?: RichTextLayoutDirectionType;\n  margin?: number | number[];\n\n  funcType?: string;\n  hoverImage?: string | HTMLImageElement | HTMLCanvasElement;\n};\n\ntype IRichTextCharacter = IRichTextParagraphCharacter | IRichTextImageCharacter;\n</code></pre>\n"},"richtext.encode.exit.ellipsis":{"desc":"<p>文本超长的时候，缩略符相关配置，支持两种类型的配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 开启自动省略，并设置省略符号</li>\n<li><code class=\"codespan\">&#39;boolean&#39;</code> 是否开启自动省略，默认的省略符号为<code class=\"codespan\">&#39;...&#39;</code></li>\n</ul>\n"},"richtext.encode.exit.wordBreak":{"desc":"<p>文字断开设置，支持两个配置值：</p>\n<ul>\n<li><code class=\"codespan\">&#39;break-word&#39;</code></li>\n<li><code class=\"codespan\">&#39;break-all&#39;</code></li>\n</ul>\n"},"richtext.encode.exit.verticalDirection":{"desc":"<p>数值方向对齐方式，支持配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;top&#39;</code></li>\n<li><code class=\"codespan\">&#39;middle&#39;</code></li>\n<li><code class=\"codespan\">&#39;bottom&#39;</code></li>\n</ul>\n"},"richtext.encode.exit.layoutDirection":{"desc":"<p>布局方向，支持配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;horizontal&#39;</code></li>\n<li><code class=\"codespan\">&#39;vertical&#39;</code></li>\n</ul>\n"},"richtext.encode.exit.singleLine":{"desc":"<p>是否单行展示</p>\n"},"richtext.encode.exit.maxHeight":{"desc":"<p>最大高度</p>\n"},"richtext.encode.exit.maxWidth":{"desc":"<p>最大宽度</p>\n"},"richtext.encode.exit.textAlign":{"desc":"<p>文字的对齐方式，支持配置：</p>\n<ul>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;center&#39;</li>\n</ul>\n"},"richtext.encode.exit.textBaseline":{"desc":"<p>文字的竖直对齐线，支持配置：</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;middle&#39;</li>\n<li>&#39;bottom&#39;</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"richtext.encode.exit.x":{"desc":"<p>图元的 x 坐标</p>\n"},"richtext.encode.exit.y":{"desc":"<p>图元 y 坐标</p>\n"},"richtext.encode.exit.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"richtext.encode.exit.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"richtext.encode.exit.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"richtext.encode.exit.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"richtext.encode.exit.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"richtext.encode.exit.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"richtext.encode.exit.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"richtext.encode.exit.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"richtext.encode.exit.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"richtext.encode.exit.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"richtext.encode.exit.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"richtext.encode.exit.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"richtext.encode.exit.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"richtext.encode.exit.outerBorder":{"desc":"<p>外描边</p>\n"},"richtext.encode.exit.innerBorder":{"desc":"<p>内描边</p>\n"},"richtext.encode.exit.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"richtext.encode.exit.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"richtext.encode.exit.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"richtext.encode.exit.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"richtext.encode.exit.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"richtext.encode.exit.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"richtext.encode.exit.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"richtext.encode.exit.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"richtext.encode.exit.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"richtext.encode.exit.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"richtext.encode.exit.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"richtext.encode.exit.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"richtext.encode.exit.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"richtext.encode.exit.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"richtext.encode.exit.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"richtext.encode.exit.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"richtext.encode.exit.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"richtext.encode.exit.texture":{"desc":"<p>图元纹理</p>\n"},"richtext.encode.exit.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"richtext.encode.exit.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"richtext.encode.exit.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"richtext.encode.exit.blur":{"desc":"<p>图元边缘模糊</p>\n"},"richtext.encode.exit.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"richtext.encode.hover":{"desc":"<p>设置<code class=\"codespan\">hover</code>状态的时候，图元对应的视觉通道映射</p>\n"},"richtext.encode.hover.width":{"desc":"<p>图元的宽度</p>\n"},"richtext.encode.hover.height":{"desc":"<p>图元的高度</p>\n"},"richtext.encode.hover.textConfig":{"desc":"<p>设置子文本的样式，类型为<code class=\"codespan\">IRichTextCharacter[]</code>，具体的定义如下：</p>\n<pre><code class=\"lang-ts\">type IRichTextBasicCharacter = {\n  lineHeight?: number;\n  textAlign?: CanvasTextAlign; // left, right, center\n  textBaseline?: CanvasTextBaseline;\n  direction?: RichTextLayoutDirectionType;\n};\n\ntype IRichTextParagraphCharacter = IRichTextBasicCharacter &amp; {\n  text: string;\n  fontSize?: number;\n  fontFamily?: string;\n  fill?: boolean;\n  stroke?: boolean;\n  fillColor?: IColor;\n  strokeColor?: IColor;\n  fontWeight?: string;\n  // lineHeight?: number;\n  fontStyle?: RichTextFontStyle; // normal, italic, oblique\n  textDecoration?: RichTextTextDecoration; // none, underline, line-through\n  // textAlign?: RichTextTextAlign; // left, right, center\n  script?: RichTextScript; // normal, sub, super\n  underline?: boolean;\n  lineThrough?: boolean;\n  // direction?: RichTextLayoutDirectionType;\n};\n\ntype IRichTextImageCharacter = IRichTextBasicCharacter &amp; {\n  // 图片基础属性\n  image: string | HTMLImageElement | HTMLCanvasElement;\n  width: number;\n  height: number;\n\n  // hover相关属性\n  // backgroundShow?: boolean; // 是否显示background\n  backgroundShowMode?: &#39;always&#39; | &#39;hover&#39;;\n  backgroundFill?: boolean;\n  backgroundFillColor?: IColor; // 背景矩形填充颜色\n  backgroundFillOpacity?: number; // 背景矩形填充透明度\n  backgroundStroke?: boolean;\n  backgroundStrokeColor?: IColor; // 背景矩形边框颜色\n  backgroundStrokeOpacity?: number; // 背景矩形边框透明度\n  backgroundRadius?: number; // 背景矩形圆角\n  // background size 同时控制了该icon的响应范围\n  backgroundWidth?: number;\n  backgroundHeight?: number;\n\n  // 唯一标识符\n  id?: string;\n\n  // lineHeight?: number;\n  // textAlign?: RichTextTextAlign; // left, right, center\n  // direction?: RichTextLayoutDirectionType;\n  margin?: number | number[];\n\n  funcType?: string;\n  hoverImage?: string | HTMLImageElement | HTMLCanvasElement;\n};\n\ntype IRichTextCharacter = IRichTextParagraphCharacter | IRichTextImageCharacter;\n</code></pre>\n"},"richtext.encode.hover.ellipsis":{"desc":"<p>文本超长的时候，缩略符相关配置，支持两种类型的配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 开启自动省略，并设置省略符号</li>\n<li><code class=\"codespan\">&#39;boolean&#39;</code> 是否开启自动省略，默认的省略符号为<code class=\"codespan\">&#39;...&#39;</code></li>\n</ul>\n"},"richtext.encode.hover.wordBreak":{"desc":"<p>文字断开设置，支持两个配置值：</p>\n<ul>\n<li><code class=\"codespan\">&#39;break-word&#39;</code></li>\n<li><code class=\"codespan\">&#39;break-all&#39;</code></li>\n</ul>\n"},"richtext.encode.hover.verticalDirection":{"desc":"<p>数值方向对齐方式，支持配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;top&#39;</code></li>\n<li><code class=\"codespan\">&#39;middle&#39;</code></li>\n<li><code class=\"codespan\">&#39;bottom&#39;</code></li>\n</ul>\n"},"richtext.encode.hover.layoutDirection":{"desc":"<p>布局方向，支持配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;horizontal&#39;</code></li>\n<li><code class=\"codespan\">&#39;vertical&#39;</code></li>\n</ul>\n"},"richtext.encode.hover.singleLine":{"desc":"<p>是否单行展示</p>\n"},"richtext.encode.hover.maxHeight":{"desc":"<p>最大高度</p>\n"},"richtext.encode.hover.maxWidth":{"desc":"<p>最大宽度</p>\n"},"richtext.encode.hover.textAlign":{"desc":"<p>文字的对齐方式，支持配置：</p>\n<ul>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;center&#39;</li>\n</ul>\n"},"richtext.encode.hover.textBaseline":{"desc":"<p>文字的竖直对齐线，支持配置：</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;middle&#39;</li>\n<li>&#39;bottom&#39;</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"richtext.encode.hover.x":{"desc":"<p>图元的 x 坐标</p>\n"},"richtext.encode.hover.y":{"desc":"<p>图元 y 坐标</p>\n"},"richtext.encode.hover.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"richtext.encode.hover.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"richtext.encode.hover.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"richtext.encode.hover.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"richtext.encode.hover.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"richtext.encode.hover.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"richtext.encode.hover.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"richtext.encode.hover.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"richtext.encode.hover.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"richtext.encode.hover.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"richtext.encode.hover.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"richtext.encode.hover.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"richtext.encode.hover.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"richtext.encode.hover.outerBorder":{"desc":"<p>外描边</p>\n"},"richtext.encode.hover.innerBorder":{"desc":"<p>内描边</p>\n"},"richtext.encode.hover.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"richtext.encode.hover.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"richtext.encode.hover.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"richtext.encode.hover.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"richtext.encode.hover.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"richtext.encode.hover.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"richtext.encode.hover.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"richtext.encode.hover.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"richtext.encode.hover.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"richtext.encode.hover.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"richtext.encode.hover.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"richtext.encode.hover.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"richtext.encode.hover.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"richtext.encode.hover.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"richtext.encode.hover.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"richtext.encode.hover.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"richtext.encode.hover.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"richtext.encode.hover.texture":{"desc":"<p>图元纹理</p>\n"},"richtext.encode.hover.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"richtext.encode.hover.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"richtext.encode.hover.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"richtext.encode.hover.blur":{"desc":"<p>图元边缘模糊</p>\n"},"richtext.encode.hover.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"richtext.animationState":{"desc":"<p>类型：<code class=\"codespan\">MarkFunctionType</code>\n是否必传： 否\nanimation attributes</p>\n"},"richtext.animation":{"desc":"<p>支持设置各种状态对应的动画，数据驱动的动画状态有三种：</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>交互触发的状态变更，通过统一的交互动画进行配置，配置的 key 为 <code class=\"codespan\">state</code></p>\n"},"richtext.animation.type":{"desc":"<p>动画执行类型，指定特定的内置动画执行效果</p>\n<p>通用的内置动画类型包括：</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: 渐入渐出动画</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: 缩放动画</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: 移入移出动画</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: 旋转动画</li>\n<li><code class=\"codespan\">update</code>: 更新动画</li>\n</ul>\n"},"richtext.animation.channel":{"desc":"<p>动画执行前后的视觉通道，与 <code class=\"codespan\">type</code> 配置冲突</p>\n"},"richtext.animation.custom":{"desc":"<p>自定义动画，如果设定了自定义动画配置则会替换默认的视觉通道插值逻辑</p>\n"},"richtext.animation.customParameters":{"desc":"<p>自定义动画参数</p>\n"},"richtext.animation.easing":{"desc":"<p>动画缓动，默认为 <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"richtext.animation.delay":{"desc":"<p>动画执行的延迟时间，默认为 0</p>\n"},"richtext.animation.duration":{"desc":"<p>动画执行时长，默认为 1000ms</p>\n"},"richtext.animation.oneByOne":{"desc":"<p>动画依次执行的延迟时长，如果配置为 <code class=\"codespan\">true</code> 则会在上一个元素动画执行结束后执行下一个元素的动画，默认为 <code class=\"codespan\">false</code></p>\n"},"richtext.animation.startTime":{"desc":"<p>动画执行的初始时间，这一初始时间不会在循环动画中被重复应用，默认为 0</p>\n"},"richtext.animation.totalTime":{"desc":"<p>动画执行的最大时间，如果动画执行到达设定时间将会被终止</p>\n"},"richtext.animation.loop":{"desc":"<p>动画循环次数，如果配置为 <code class=\"codespan\">true</code> 则会无限循环</p>\n"},"richtext.animation.options":{"desc":"<p>特定动画类型执行时设定的额外参数</p>\n"},"richtext.animation.controlOptions":{"desc":"<p>动画执行逻辑的控制参数：</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: 当动画状态变更时是否立即终止自身动画</li>\n<li><code class=\"codespan\">immediatelyApply</code>: 是否立即应用动画初始的视觉通道</li>\n</ul>\n"},"richtext.zIndex":{"desc":"<p>设置<code class=\"codespan\">mark</code>图元对应的容器图形(group)的 zIndex</p>\n"},"richtext.interactive":{"desc":"<p>类型：<code class=\"codespan\">boolean</code>\n是否必传： 否</p>\n"},"richtext.context":{"desc":"<p>设置图元的上下文参数</p>\n"},"richtext.setCustomizedShape":{"desc":"<p>设置自定义形状的回调函数，对应的 ts 类型定位如下：</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>其中<code class=\"codespan\">ICustomPath2D</code> 为 VRender 提供的绘制自定义的路径一个工具类</p>\n"},"richtext.support3d":{"desc":"<p>当画布设置了 3d 视角的时候，是否支持 3d 模式</p>\n"},"richtext.group":{"desc":"<p>设置父图元，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 父图元对应的 id</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> 父图元对应的语法元素，一般用于 API 调用场景</li>\n</ul>\n<p>如果不设置，会默认挂在到画布的根节点下面</p>\n"},"richtext.from":{"desc":"<p>ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>通过<code class=\"codespan\">data</code> 属性值，申明图元依赖的数据</p>\n"},"richtext.key":{"desc":"<p>设置图元数据元素的唯一标志符，用于计算图形元素的数据状态，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"richtext.sort":{"desc":"<p>对图元中的所有图形元素进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"richtext.groupBy":{"desc":"<p>设置分组的属性，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置分组<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析分组<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"richtext.groupSort":{"desc":"<p>对图元中的分组进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"richtext.coordinate":{"desc":"<p>设置该图元关联的坐标系对应的 id 或者坐标系对应的图形元素</p>\n"},"richtext.state":{"desc":"<p>设置当前图元所有图形元素的状态值，支持三种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置图形的状态，比如说:<code class=\"codespan\">{ state: &#39;selected&#39;}</code> 就是给所有的图形设置状态为<code class=\"codespan\">&#39;selected&#39;</code>，通常这种情况，<code class=\"codespan\">encode</code> 中也会设置<code class=\"codespan\">&#39;selected&#39;</code>状态对应的图形通道映射</li>\n<li><code class=\"codespan\">string[]</code> 给图形设置多个状态，可以配置<code class=\"codespan\">stateSort</code>来影响对应状态执行图形通道映射的顺序</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析状态值的回调函数，返回参数为<code class=\"codespan\">string | string[]</code>，对应的 ts 类型定义为：</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"richtext.stateSort":{"desc":"<p>设置当前图元所有图形元素的状态值的排序函数，会影响状态对应的图形通道映射的顺序，最先执行的状态可能被后续的状态覆盖图形通道映射结果，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"richtext.transform":{"desc":"<p>设置图元对应的变换，所有的数据变换都可以配置在图元上，用于对图元的<code class=\"codespan\">join data</code> 执行变换；\n另外一种类型的变换就是对图形元素执行的变换，比如说<code class=\"codespan\">dodge</code>；\n通用的类型定义如下：</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>每中变换支持的参数不同</p>\n"},"richtext.layout":{"desc":"<p>设置图元的布局参数，图元在参与布局的时候，存在两种角色：</p>\n<ul>\n<li>&#39;container&#39; 容器图元，一般是<code class=\"codespan\">group</code>图元</li>\n<li>&#39;item&#39; 布局子元素，作为容器图元的子节点</li>\n</ul>\n<p>注意，我们仅支持一层布局，如果是多层嵌套布局，建议使用自定义的布局方案进行实现；</p>\n<p>现在支持两种内容的布局：<code class=\"codespan\">grid</code> 布局 和 <code class=\"codespan\">relative</code>布局，相关类型定义如下</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>如果想要设置自定义的布局方案，<code class=\"codespan\">layout</code>也支持直接设置回调函数，回调函数的定义如下：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"richtext.layout.display":{"desc":"<p>容器图元设置布局的类型，支持两种配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> 相对布局</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> 网格布局</li>\n</ul>\n"},"richtext.layout.callback":{"desc":"<p>自定义该图元的回调函数，ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"richtext.layout.skipBeforeLayouted":{"desc":"<p>在布局完成前，跳过执行阶段</p>\n"},"richtext.layout.updateViewSignals":{"desc":"<p>是否更新默认的视图信号，也就是：<code class=\"codespan\">padding</code>、<code class=\"codespan\">viewWidth</code> 和 <code class=\"codespan\">viewHeight</code></p>\n<p>只能在设置了<code class=\"codespan\">{ layout: { display: &#39;relative&#39;} }</code>的容器图元上设置该属性</p>\n"},"richtext.layout.maxChildWidth":{"desc":"<p>相对布局的父图元，设置子图元的最大宽度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的宽度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"richtext.layout.maxChildHeight":{"desc":"<p>相对布局的父图元，设置子图元的最大高度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的高度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"richtext.layout.position":{"desc":"<p>设置相对布局的子图元的位置，支持的配置有：</p>\n<ul>\n<li>&#39;top&#39; 相对于父图元的顶部</li>\n<li>&#39;bottom&#39; 相对于父图元的底部</li>\n<li>&#39;left&#39; 相对于父图元的左侧</li>\n<li>&#39;right&#39; 相对于父图元的右侧</li>\n<li>&#39;content&#39; 相对于父图元的中心，也就是内容区域</li>\n<li>&#39;auto&#39; 图元设置了坐标系的时候，根据关联的<code class=\"codespan\">scale</code>，自定计算相对于父图元的位置</li>\n</ul>\n"},"richtext.layout.padding":{"desc":"<p>子图元内边距，单位 px，默认各方向内边距为 0，接受数值、数值数组以及对象设置。</p>\n<p>使用示例：</p>\n<pre><code class=\"lang-ts\">// 数值类型，设置内边距为 5\npadding: 5;\n// 数值数组，设置上下的内边距为 5，左右的内边距为 10，用法同 CSS 盒模型\npadding: [5, 10];\n// 数值数组，分别设置四个方向的内边距\npadding: [\n  5, // 上\n  10, // 右\n  5, // 下\n  10 // 左\n];\n// 对象类型\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"richtext.layout.gridTemplateRows":{"desc":"<p>网格布局的父图元设置行的高度</p>\n"},"richtext.layout.gridTemplateColumns":{"desc":"<p>网格布局的父图元设置列的宽度</p>\n"},"richtext.layout.gridRowGap":{"desc":"<p>网格布局的父图元设置行行距</p>\n"},"richtext.layout.gridColumnGap":{"desc":"<p>网格布局的父图元设置列间距</p>\n"},"richtext.layout.gridRowStart":{"desc":"<p>网格布局的子图元设置行开始的位置</p>\n"},"richtext.layout.gridRowEnd":{"desc":"<p>网格布局的子图元设置行结束的位置</p>\n"},"richtext.layout.gridColumnStart":{"desc":"<p>网格布局的子图元设置列开始的位置</p>\n"},"richtext.layout.gridColumnEnd":{"desc":"<p>网格布局的子图元设置列结束的位置</p>\n"},"richtext.large":{"desc":"<p>是否开启大数据渲染模式</p>\n"},"richtext.largeThreshold":{"desc":"<p>开启大数据渲染优化的阀值，对应的是 data 的长度</p>\n"},"richtext.progressiveStep":{"desc":"<p>开启分片渲染的步长，对应的是分片的数据长度</p>\n"},"richtext.progressiveThreshold":{"desc":"<p>开启分片渲染的阀值，对应的是单系列 data 的长度</p>\n"},"richtext.morph":{"desc":"<p>是否对当前图元开启全局的过渡形变动画</p>\n"},"richtext.morphKey":{"desc":"<p>用于匹配全局过渡形变动画的图元，具有相对的<code class=\"codespan\">morphKey</code>的图元，会进行形变动画</p>\n"},"richtext.morphElementKey":{"desc":"<p>对于匹配上的前后图元，通过该配置，进行图形元素的匹配；如果不申明，我们默认会读取<code class=\"codespan\">key</code>配置，用于匹配图形元素，进行形变动画；\n默认支持一对一、一对多、多对一的图形形变动画</p>\n"},"text":{"desc":"<p><strong> text 图元 </strong></p>\n"},"text.type":{"desc":"<p>设置图元类型为 <code class=\"codespan\">text</code></p>\n"},"text.encode":{"desc":"<p>设置图元的视觉通道编码，默认支持三种数据变化状态：</p>\n<ul>\n<li><code class=\"codespan\">enter</code> 新增数据元素</li>\n<li><code class=\"codespan\">update</code> 数据元素更新</li>\n<li><code class=\"codespan\">exit</code> 数据元素被删除</li>\n</ul>\n<p>注意，这里的数据状态是根据<code class=\"codespan\">mark</code>的<code class=\"codespan\">key</code>自动生成的，我们会针对<code class=\"codespan\">mark</code>的绑定数据，根据<code class=\"codespan\">key</code>的配置，计算数据对应的唯一标志符，数据更新后，如果对应的唯一标志符不存在了，则状态为<code class=\"codespan\">exit</code>，如果存在，则为<code class=\"codespan\">update</code>；如果之前的数据不存在改唯一标志符，则数据元素对应的状态为<code class=\"codespan\">enter</code></p>\n<p>默认支持一种交互状态：</p>\n<ul>\n<li><code class=\"codespan\">hover</code> 鼠标 hover 到具体的图形上，给图形设置对应的视觉通道编码</li>\n</ul>\n"},"text.encode.enter":{"desc":"<p>设置图元在数据初始化状态执行的视觉通道映射，注意数据更新的时候不再执行</p>\n"},"text.encode.enter.text":{"desc":"<p>文本，支持传入数组</p>\n"},"text.encode.enter.maxLineWidth":{"desc":"<p>最大宽度，当设置该值，并开启了自动省略策略，会自动添加省略符</p>\n"},"text.encode.enter.ellipsis":{"desc":"<p>文本超长的时候，缩略符相关配置，支持两种类型的配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 开启自动省略，并设置省略符号</li>\n<li><code class=\"codespan\">&#39;boolean&#39;</code> 是否开启自动省略，默认的省略符号为<code class=\"codespan\">&#39;...&#39;</code></li>\n</ul>\n"},"text.encode.enter.textAlign":{"desc":"<p>文字的对齐方式，支持配置：</p>\n<ul>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;center&#39;</li>\n</ul>\n"},"text.encode.enter.textBaseline":{"desc":"<p>文字的竖直对齐线，支持配置：</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;middle&#39;</li>\n<li>&#39;bottom&#39;</li>\n</ul>\n"},"text.encode.enter.fontSize":{"desc":"<p>字号，同<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-size\" target=\"_blank\">CSS font-size</a></p>\n"},"text.encode.enter.fontFamily":{"desc":"<p>字体，同<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-family\" target=\"_blank\">CSS font-family</a></p>\n"},"text.encode.enter.fontVariant":{"desc":"<p>同<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-variant\" target=\"_blank\">CSS font-variant</a></p>\n"},"text.encode.enter.fontStyle":{"desc":"<p>字体样式，同<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-style\" target=\"_blank\">CSS font-style</a></p>\n"},"text.encode.enter.fontWeight":{"desc":"<p>字重，同<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-weight\" target=\"_blank\">CSS font-weight</a></p>\n"},"text.encode.enter.lineHeight":{"desc":"<p>行高</p>\n"},"text.encode.enter.underline":{"desc":"<p>是否展示下划线</p>\n"},"text.encode.enter.lineThrough":{"desc":"<p>是否展示中划线</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"text.encode.enter.x":{"desc":"<p>图元的 x 坐标</p>\n"},"text.encode.enter.y":{"desc":"<p>图元 y 坐标</p>\n"},"text.encode.enter.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"text.encode.enter.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"text.encode.enter.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"text.encode.enter.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"text.encode.enter.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"text.encode.enter.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"text.encode.enter.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"text.encode.enter.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"text.encode.enter.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"text.encode.enter.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"text.encode.enter.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"text.encode.enter.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"text.encode.enter.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"text.encode.enter.outerBorder":{"desc":"<p>外描边</p>\n"},"text.encode.enter.innerBorder":{"desc":"<p>内描边</p>\n"},"text.encode.enter.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"text.encode.enter.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"text.encode.enter.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"text.encode.enter.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"text.encode.enter.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"text.encode.enter.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"text.encode.enter.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"text.encode.enter.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"text.encode.enter.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"text.encode.enter.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"text.encode.enter.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"text.encode.enter.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"text.encode.enter.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"text.encode.enter.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"text.encode.enter.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"text.encode.enter.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"text.encode.enter.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"text.encode.enter.texture":{"desc":"<p>图元纹理</p>\n"},"text.encode.enter.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"text.encode.enter.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"text.encode.enter.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"text.encode.enter.blur":{"desc":"<p>图元边缘模糊</p>\n"},"text.encode.enter.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"text.encode.update":{"desc":"<p>设置图元在数据更新状态执行的视觉通道映射</p>\n"},"text.encode.update.text":{"desc":"<p>文本，支持传入数组</p>\n"},"text.encode.update.maxLineWidth":{"desc":"<p>最大宽度，当设置该值，并开启了自动省略策略，会自动添加省略符</p>\n"},"text.encode.update.ellipsis":{"desc":"<p>文本超长的时候，缩略符相关配置，支持两种类型的配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 开启自动省略，并设置省略符号</li>\n<li><code class=\"codespan\">&#39;boolean&#39;</code> 是否开启自动省略，默认的省略符号为<code class=\"codespan\">&#39;...&#39;</code></li>\n</ul>\n"},"text.encode.update.textAlign":{"desc":"<p>文字的对齐方式，支持配置：</p>\n<ul>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;center&#39;</li>\n</ul>\n"},"text.encode.update.textBaseline":{"desc":"<p>文字的竖直对齐线，支持配置：</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;middle&#39;</li>\n<li>&#39;bottom&#39;</li>\n</ul>\n"},"text.encode.update.fontSize":{"desc":"<p>字号，同<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-size\" target=\"_blank\">CSS font-size</a></p>\n"},"text.encode.update.fontFamily":{"desc":"<p>字体，同<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-family\" target=\"_blank\">CSS font-family</a></p>\n"},"text.encode.update.fontVariant":{"desc":"<p>同<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-variant\" target=\"_blank\">CSS font-variant</a></p>\n"},"text.encode.update.fontStyle":{"desc":"<p>字体样式，同<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-style\" target=\"_blank\">CSS font-style</a></p>\n"},"text.encode.update.fontWeight":{"desc":"<p>字重，同<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-weight\" target=\"_blank\">CSS font-weight</a></p>\n"},"text.encode.update.lineHeight":{"desc":"<p>行高</p>\n"},"text.encode.update.underline":{"desc":"<p>是否展示下划线</p>\n"},"text.encode.update.lineThrough":{"desc":"<p>是否展示中划线</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"text.encode.update.x":{"desc":"<p>图元的 x 坐标</p>\n"},"text.encode.update.y":{"desc":"<p>图元 y 坐标</p>\n"},"text.encode.update.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"text.encode.update.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"text.encode.update.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"text.encode.update.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"text.encode.update.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"text.encode.update.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"text.encode.update.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"text.encode.update.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"text.encode.update.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"text.encode.update.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"text.encode.update.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"text.encode.update.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"text.encode.update.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"text.encode.update.outerBorder":{"desc":"<p>外描边</p>\n"},"text.encode.update.innerBorder":{"desc":"<p>内描边</p>\n"},"text.encode.update.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"text.encode.update.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"text.encode.update.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"text.encode.update.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"text.encode.update.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"text.encode.update.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"text.encode.update.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"text.encode.update.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"text.encode.update.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"text.encode.update.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"text.encode.update.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"text.encode.update.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"text.encode.update.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"text.encode.update.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"text.encode.update.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"text.encode.update.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"text.encode.update.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"text.encode.update.texture":{"desc":"<p>图元纹理</p>\n"},"text.encode.update.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"text.encode.update.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"text.encode.update.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"text.encode.update.blur":{"desc":"<p>图元边缘模糊</p>\n"},"text.encode.update.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"text.encode.exit":{"desc":"<p>设置图元在数据被删除的状态下执行的视觉通道映射</p>\n"},"text.encode.exit.text":{"desc":"<p>文本，支持传入数组</p>\n"},"text.encode.exit.maxLineWidth":{"desc":"<p>最大宽度，当设置该值，并开启了自动省略策略，会自动添加省略符</p>\n"},"text.encode.exit.ellipsis":{"desc":"<p>文本超长的时候，缩略符相关配置，支持两种类型的配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 开启自动省略，并设置省略符号</li>\n<li><code class=\"codespan\">&#39;boolean&#39;</code> 是否开启自动省略，默认的省略符号为<code class=\"codespan\">&#39;...&#39;</code></li>\n</ul>\n"},"text.encode.exit.textAlign":{"desc":"<p>文字的对齐方式，支持配置：</p>\n<ul>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;center&#39;</li>\n</ul>\n"},"text.encode.exit.textBaseline":{"desc":"<p>文字的竖直对齐线，支持配置：</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;middle&#39;</li>\n<li>&#39;bottom&#39;</li>\n</ul>\n"},"text.encode.exit.fontSize":{"desc":"<p>字号，同<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-size\" target=\"_blank\">CSS font-size</a></p>\n"},"text.encode.exit.fontFamily":{"desc":"<p>字体，同<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-family\" target=\"_blank\">CSS font-family</a></p>\n"},"text.encode.exit.fontVariant":{"desc":"<p>同<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-variant\" target=\"_blank\">CSS font-variant</a></p>\n"},"text.encode.exit.fontStyle":{"desc":"<p>字体样式，同<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-style\" target=\"_blank\">CSS font-style</a></p>\n"},"text.encode.exit.fontWeight":{"desc":"<p>字重，同<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-weight\" target=\"_blank\">CSS font-weight</a></p>\n"},"text.encode.exit.lineHeight":{"desc":"<p>行高</p>\n"},"text.encode.exit.underline":{"desc":"<p>是否展示下划线</p>\n"},"text.encode.exit.lineThrough":{"desc":"<p>是否展示中划线</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"text.encode.exit.x":{"desc":"<p>图元的 x 坐标</p>\n"},"text.encode.exit.y":{"desc":"<p>图元 y 坐标</p>\n"},"text.encode.exit.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"text.encode.exit.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"text.encode.exit.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"text.encode.exit.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"text.encode.exit.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"text.encode.exit.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"text.encode.exit.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"text.encode.exit.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"text.encode.exit.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"text.encode.exit.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"text.encode.exit.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"text.encode.exit.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"text.encode.exit.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"text.encode.exit.outerBorder":{"desc":"<p>外描边</p>\n"},"text.encode.exit.innerBorder":{"desc":"<p>内描边</p>\n"},"text.encode.exit.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"text.encode.exit.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"text.encode.exit.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"text.encode.exit.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"text.encode.exit.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"text.encode.exit.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"text.encode.exit.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"text.encode.exit.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"text.encode.exit.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"text.encode.exit.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"text.encode.exit.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"text.encode.exit.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"text.encode.exit.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"text.encode.exit.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"text.encode.exit.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"text.encode.exit.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"text.encode.exit.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"text.encode.exit.texture":{"desc":"<p>图元纹理</p>\n"},"text.encode.exit.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"text.encode.exit.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"text.encode.exit.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"text.encode.exit.blur":{"desc":"<p>图元边缘模糊</p>\n"},"text.encode.exit.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"text.encode.hover":{"desc":"<p>设置<code class=\"codespan\">hover</code>状态的时候，图元对应的视觉通道映射</p>\n"},"text.encode.hover.text":{"desc":"<p>文本，支持传入数组</p>\n"},"text.encode.hover.maxLineWidth":{"desc":"<p>最大宽度，当设置该值，并开启了自动省略策略，会自动添加省略符</p>\n"},"text.encode.hover.ellipsis":{"desc":"<p>文本超长的时候，缩略符相关配置，支持两种类型的配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 开启自动省略，并设置省略符号</li>\n<li><code class=\"codespan\">&#39;boolean&#39;</code> 是否开启自动省略，默认的省略符号为<code class=\"codespan\">&#39;...&#39;</code></li>\n</ul>\n"},"text.encode.hover.textAlign":{"desc":"<p>文字的对齐方式，支持配置：</p>\n<ul>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;center&#39;</li>\n</ul>\n"},"text.encode.hover.textBaseline":{"desc":"<p>文字的竖直对齐线，支持配置：</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;middle&#39;</li>\n<li>&#39;bottom&#39;</li>\n</ul>\n"},"text.encode.hover.fontSize":{"desc":"<p>字号，同<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-size\" target=\"_blank\">CSS font-size</a></p>\n"},"text.encode.hover.fontFamily":{"desc":"<p>字体，同<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-family\" target=\"_blank\">CSS font-family</a></p>\n"},"text.encode.hover.fontVariant":{"desc":"<p>同<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-variant\" target=\"_blank\">CSS font-variant</a></p>\n"},"text.encode.hover.fontStyle":{"desc":"<p>字体样式，同<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-style\" target=\"_blank\">CSS font-style</a></p>\n"},"text.encode.hover.fontWeight":{"desc":"<p>字重，同<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-weight\" target=\"_blank\">CSS font-weight</a></p>\n"},"text.encode.hover.lineHeight":{"desc":"<p>行高</p>\n"},"text.encode.hover.underline":{"desc":"<p>是否展示下划线</p>\n"},"text.encode.hover.lineThrough":{"desc":"<p>是否展示中划线</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"text.encode.hover.x":{"desc":"<p>图元的 x 坐标</p>\n"},"text.encode.hover.y":{"desc":"<p>图元 y 坐标</p>\n"},"text.encode.hover.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"text.encode.hover.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"text.encode.hover.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"text.encode.hover.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"text.encode.hover.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"text.encode.hover.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"text.encode.hover.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"text.encode.hover.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"text.encode.hover.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"text.encode.hover.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"text.encode.hover.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"text.encode.hover.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"text.encode.hover.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"text.encode.hover.outerBorder":{"desc":"<p>外描边</p>\n"},"text.encode.hover.innerBorder":{"desc":"<p>内描边</p>\n"},"text.encode.hover.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"text.encode.hover.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"text.encode.hover.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"text.encode.hover.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"text.encode.hover.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"text.encode.hover.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"text.encode.hover.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"text.encode.hover.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"text.encode.hover.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"text.encode.hover.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"text.encode.hover.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"text.encode.hover.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"text.encode.hover.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"text.encode.hover.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"text.encode.hover.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"text.encode.hover.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"text.encode.hover.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"text.encode.hover.texture":{"desc":"<p>图元纹理</p>\n"},"text.encode.hover.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"text.encode.hover.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"text.encode.hover.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"text.encode.hover.blur":{"desc":"<p>图元边缘模糊</p>\n"},"text.encode.hover.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"text.animationState":{"desc":"<p>类型：<code class=\"codespan\">MarkFunctionType</code>\n是否必传： 否\nanimation attributes</p>\n"},"text.animation":{"desc":"<p>支持设置各种状态对应的动画，数据驱动的动画状态有三种：</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>交互触发的状态变更，通过统一的交互动画进行配置，配置的 key 为 <code class=\"codespan\">state</code></p>\n"},"text.animation.type":{"desc":"<p>动画执行类型，指定特定的内置动画执行效果</p>\n<p>通用的内置动画类型包括：</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: 渐入渐出动画</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: 缩放动画</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: 移入移出动画</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: 旋转动画</li>\n<li><code class=\"codespan\">update</code>: 更新动画</li>\n</ul>\n"},"text.animation.channel":{"desc":"<p>动画执行前后的视觉通道，与 <code class=\"codespan\">type</code> 配置冲突</p>\n"},"text.animation.custom":{"desc":"<p>自定义动画，如果设定了自定义动画配置则会替换默认的视觉通道插值逻辑</p>\n"},"text.animation.customParameters":{"desc":"<p>自定义动画参数</p>\n"},"text.animation.easing":{"desc":"<p>动画缓动，默认为 <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"text.animation.delay":{"desc":"<p>动画执行的延迟时间，默认为 0</p>\n"},"text.animation.duration":{"desc":"<p>动画执行时长，默认为 1000ms</p>\n"},"text.animation.oneByOne":{"desc":"<p>动画依次执行的延迟时长，如果配置为 <code class=\"codespan\">true</code> 则会在上一个元素动画执行结束后执行下一个元素的动画，默认为 <code class=\"codespan\">false</code></p>\n"},"text.animation.startTime":{"desc":"<p>动画执行的初始时间，这一初始时间不会在循环动画中被重复应用，默认为 0</p>\n"},"text.animation.totalTime":{"desc":"<p>动画执行的最大时间，如果动画执行到达设定时间将会被终止</p>\n"},"text.animation.loop":{"desc":"<p>动画循环次数，如果配置为 <code class=\"codespan\">true</code> 则会无限循环</p>\n"},"text.animation.options":{"desc":"<p>特定动画类型执行时设定的额外参数</p>\n"},"text.animation.controlOptions":{"desc":"<p>动画执行逻辑的控制参数：</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: 当动画状态变更时是否立即终止自身动画</li>\n<li><code class=\"codespan\">immediatelyApply</code>: 是否立即应用动画初始的视觉通道</li>\n</ul>\n"},"text.zIndex":{"desc":"<p>设置<code class=\"codespan\">mark</code>图元对应的容器图形(group)的 zIndex</p>\n"},"text.interactive":{"desc":"<p>类型：<code class=\"codespan\">boolean</code>\n是否必传： 否</p>\n"},"text.context":{"desc":"<p>设置图元的上下文参数</p>\n"},"text.setCustomizedShape":{"desc":"<p>设置自定义形状的回调函数，对应的 ts 类型定位如下：</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>其中<code class=\"codespan\">ICustomPath2D</code> 为 VRender 提供的绘制自定义的路径一个工具类</p>\n"},"text.support3d":{"desc":"<p>当画布设置了 3d 视角的时候，是否支持 3d 模式</p>\n"},"text.group":{"desc":"<p>设置父图元，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 父图元对应的 id</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> 父图元对应的语法元素，一般用于 API 调用场景</li>\n</ul>\n<p>如果不设置，会默认挂在到画布的根节点下面</p>\n"},"text.from":{"desc":"<p>ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>通过<code class=\"codespan\">data</code> 属性值，申明图元依赖的数据</p>\n"},"text.key":{"desc":"<p>设置图元数据元素的唯一标志符，用于计算图形元素的数据状态，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"text.sort":{"desc":"<p>对图元中的所有图形元素进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"text.groupBy":{"desc":"<p>设置分组的属性，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置分组<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析分组<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"text.groupSort":{"desc":"<p>对图元中的分组进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"text.coordinate":{"desc":"<p>设置该图元关联的坐标系对应的 id 或者坐标系对应的图形元素</p>\n"},"text.state":{"desc":"<p>设置当前图元所有图形元素的状态值，支持三种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置图形的状态，比如说:<code class=\"codespan\">{ state: &#39;selected&#39;}</code> 就是给所有的图形设置状态为<code class=\"codespan\">&#39;selected&#39;</code>，通常这种情况，<code class=\"codespan\">encode</code> 中也会设置<code class=\"codespan\">&#39;selected&#39;</code>状态对应的图形通道映射</li>\n<li><code class=\"codespan\">string[]</code> 给图形设置多个状态，可以配置<code class=\"codespan\">stateSort</code>来影响对应状态执行图形通道映射的顺序</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析状态值的回调函数，返回参数为<code class=\"codespan\">string | string[]</code>，对应的 ts 类型定义为：</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"text.stateSort":{"desc":"<p>设置当前图元所有图形元素的状态值的排序函数，会影响状态对应的图形通道映射的顺序，最先执行的状态可能被后续的状态覆盖图形通道映射结果，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"text.transform":{"desc":"<p>设置图元对应的变换，所有的数据变换都可以配置在图元上，用于对图元的<code class=\"codespan\">join data</code> 执行变换；\n另外一种类型的变换就是对图形元素执行的变换，比如说<code class=\"codespan\">dodge</code>；\n通用的类型定义如下：</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>每中变换支持的参数不同</p>\n"},"text.layout":{"desc":"<p>设置图元的布局参数，图元在参与布局的时候，存在两种角色：</p>\n<ul>\n<li>&#39;container&#39; 容器图元，一般是<code class=\"codespan\">group</code>图元</li>\n<li>&#39;item&#39; 布局子元素，作为容器图元的子节点</li>\n</ul>\n<p>注意，我们仅支持一层布局，如果是多层嵌套布局，建议使用自定义的布局方案进行实现；</p>\n<p>现在支持两种内容的布局：<code class=\"codespan\">grid</code> 布局 和 <code class=\"codespan\">relative</code>布局，相关类型定义如下</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>如果想要设置自定义的布局方案，<code class=\"codespan\">layout</code>也支持直接设置回调函数，回调函数的定义如下：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"text.layout.display":{"desc":"<p>容器图元设置布局的类型，支持两种配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> 相对布局</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> 网格布局</li>\n</ul>\n"},"text.layout.callback":{"desc":"<p>自定义该图元的回调函数，ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"text.layout.skipBeforeLayouted":{"desc":"<p>在布局完成前，跳过执行阶段</p>\n"},"text.layout.updateViewSignals":{"desc":"<p>是否更新默认的视图信号，也就是：<code class=\"codespan\">padding</code>、<code class=\"codespan\">viewWidth</code> 和 <code class=\"codespan\">viewHeight</code></p>\n<p>只能在设置了<code class=\"codespan\">{ layout: { display: &#39;relative&#39;} }</code>的容器图元上设置该属性</p>\n"},"text.layout.maxChildWidth":{"desc":"<p>相对布局的父图元，设置子图元的最大宽度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的宽度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"text.layout.maxChildHeight":{"desc":"<p>相对布局的父图元，设置子图元的最大高度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的高度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"text.layout.position":{"desc":"<p>设置相对布局的子图元的位置，支持的配置有：</p>\n<ul>\n<li>&#39;top&#39; 相对于父图元的顶部</li>\n<li>&#39;bottom&#39; 相对于父图元的底部</li>\n<li>&#39;left&#39; 相对于父图元的左侧</li>\n<li>&#39;right&#39; 相对于父图元的右侧</li>\n<li>&#39;content&#39; 相对于父图元的中心，也就是内容区域</li>\n<li>&#39;auto&#39; 图元设置了坐标系的时候，根据关联的<code class=\"codespan\">scale</code>，自定计算相对于父图元的位置</li>\n</ul>\n"},"text.layout.padding":{"desc":"<p>子图元内边距，单位 px，默认各方向内边距为 0，接受数值、数值数组以及对象设置。</p>\n<p>使用示例：</p>\n<pre><code class=\"lang-ts\">// 数值类型，设置内边距为 5\npadding: 5;\n// 数值数组，设置上下的内边距为 5，左右的内边距为 10，用法同 CSS 盒模型\npadding: [5, 10];\n// 数值数组，分别设置四个方向的内边距\npadding: [\n  5, // 上\n  10, // 右\n  5, // 下\n  10 // 左\n];\n// 对象类型\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"text.layout.gridTemplateRows":{"desc":"<p>网格布局的父图元设置行的高度</p>\n"},"text.layout.gridTemplateColumns":{"desc":"<p>网格布局的父图元设置列的宽度</p>\n"},"text.layout.gridRowGap":{"desc":"<p>网格布局的父图元设置行行距</p>\n"},"text.layout.gridColumnGap":{"desc":"<p>网格布局的父图元设置列间距</p>\n"},"text.layout.gridRowStart":{"desc":"<p>网格布局的子图元设置行开始的位置</p>\n"},"text.layout.gridRowEnd":{"desc":"<p>网格布局的子图元设置行结束的位置</p>\n"},"text.layout.gridColumnStart":{"desc":"<p>网格布局的子图元设置列开始的位置</p>\n"},"text.layout.gridColumnEnd":{"desc":"<p>网格布局的子图元设置列结束的位置</p>\n"},"text.large":{"desc":"<p>是否开启大数据渲染模式</p>\n"},"text.largeThreshold":{"desc":"<p>开启大数据渲染优化的阀值，对应的是 data 的长度</p>\n"},"text.progressiveStep":{"desc":"<p>开启分片渲染的步长，对应的是分片的数据长度</p>\n"},"text.progressiveThreshold":{"desc":"<p>开启分片渲染的阀值，对应的是单系列 data 的长度</p>\n"},"text.morph":{"desc":"<p>是否对当前图元开启全局的过渡形变动画</p>\n"},"text.morphKey":{"desc":"<p>用于匹配全局过渡形变动画的图元，具有相对的<code class=\"codespan\">morphKey</code>的图元，会进行形变动画</p>\n"},"text.morphElementKey":{"desc":"<p>对于匹配上的前后图元，通过该配置，进行图形元素的匹配；如果不申明，我们默认会读取<code class=\"codespan\">key</code>配置，用于匹配图形元素，进行形变动画；\n默认支持一对一、一对多、多对一的图形形变动画</p>\n"},"interval":{"desc":"<p><strong> interval 图元 </strong></p>\n"},"interval.type":{"desc":"<p>设置图元类型为 <code class=\"codespan\">interval</code></p>\n"},"interval.encode":{"desc":"<p>设置图元的视觉通道编码，默认支持三种数据变化状态：</p>\n<ul>\n<li><code class=\"codespan\">enter</code> 新增数据元素</li>\n<li><code class=\"codespan\">update</code> 数据元素更新</li>\n<li><code class=\"codespan\">exit</code> 数据元素被删除</li>\n</ul>\n<p>注意，这里的数据状态是根据<code class=\"codespan\">mark</code>的<code class=\"codespan\">key</code>自动生成的，我们会针对<code class=\"codespan\">mark</code>的绑定数据，根据<code class=\"codespan\">key</code>的配置，计算数据对应的唯一标志符，数据更新后，如果对应的唯一标志符不存在了，则状态为<code class=\"codespan\">exit</code>，如果存在，则为<code class=\"codespan\">update</code>；如果之前的数据不存在改唯一标志符，则数据元素对应的状态为<code class=\"codespan\">enter</code></p>\n<p>默认支持一种交互状态：</p>\n<ul>\n<li><code class=\"codespan\">hover</code> 鼠标 hover 到具体的图形上，给图形设置对应的视觉通道编码</li>\n</ul>\n"},"interval.encode.enter":{"desc":"<p>设置图元在数据初始化状态执行的视觉通道映射，注意数据更新的时候不再执行</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"interval.encode.enter.x":{"desc":"<p>图元的 x 坐标</p>\n"},"interval.encode.enter.y":{"desc":"<p>图元 y 坐标</p>\n"},"interval.encode.enter.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"interval.encode.enter.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"interval.encode.enter.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"interval.encode.enter.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"interval.encode.enter.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"interval.encode.enter.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"interval.encode.enter.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"interval.encode.enter.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"interval.encode.enter.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"interval.encode.enter.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"interval.encode.enter.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"interval.encode.enter.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"interval.encode.enter.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"interval.encode.enter.outerBorder":{"desc":"<p>外描边</p>\n"},"interval.encode.enter.innerBorder":{"desc":"<p>内描边</p>\n"},"interval.encode.enter.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"interval.encode.enter.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"interval.encode.enter.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"interval.encode.enter.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"interval.encode.enter.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"interval.encode.enter.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"interval.encode.enter.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"interval.encode.enter.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"interval.encode.enter.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"interval.encode.enter.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"interval.encode.enter.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"interval.encode.enter.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"interval.encode.enter.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"interval.encode.enter.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"interval.encode.enter.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"interval.encode.enter.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"interval.encode.enter.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"interval.encode.enter.texture":{"desc":"<p>图元纹理</p>\n"},"interval.encode.enter.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"interval.encode.enter.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"interval.encode.enter.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"interval.encode.enter.blur":{"desc":"<p>图元边缘模糊</p>\n"},"interval.encode.enter.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"interval.encode.update":{"desc":"<p>设置图元在数据更新状态执行的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"interval.encode.update.x":{"desc":"<p>图元的 x 坐标</p>\n"},"interval.encode.update.y":{"desc":"<p>图元 y 坐标</p>\n"},"interval.encode.update.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"interval.encode.update.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"interval.encode.update.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"interval.encode.update.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"interval.encode.update.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"interval.encode.update.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"interval.encode.update.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"interval.encode.update.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"interval.encode.update.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"interval.encode.update.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"interval.encode.update.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"interval.encode.update.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"interval.encode.update.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"interval.encode.update.outerBorder":{"desc":"<p>外描边</p>\n"},"interval.encode.update.innerBorder":{"desc":"<p>内描边</p>\n"},"interval.encode.update.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"interval.encode.update.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"interval.encode.update.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"interval.encode.update.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"interval.encode.update.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"interval.encode.update.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"interval.encode.update.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"interval.encode.update.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"interval.encode.update.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"interval.encode.update.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"interval.encode.update.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"interval.encode.update.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"interval.encode.update.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"interval.encode.update.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"interval.encode.update.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"interval.encode.update.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"interval.encode.update.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"interval.encode.update.texture":{"desc":"<p>图元纹理</p>\n"},"interval.encode.update.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"interval.encode.update.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"interval.encode.update.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"interval.encode.update.blur":{"desc":"<p>图元边缘模糊</p>\n"},"interval.encode.update.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"interval.encode.exit":{"desc":"<p>设置图元在数据被删除的状态下执行的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"interval.encode.exit.x":{"desc":"<p>图元的 x 坐标</p>\n"},"interval.encode.exit.y":{"desc":"<p>图元 y 坐标</p>\n"},"interval.encode.exit.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"interval.encode.exit.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"interval.encode.exit.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"interval.encode.exit.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"interval.encode.exit.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"interval.encode.exit.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"interval.encode.exit.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"interval.encode.exit.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"interval.encode.exit.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"interval.encode.exit.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"interval.encode.exit.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"interval.encode.exit.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"interval.encode.exit.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"interval.encode.exit.outerBorder":{"desc":"<p>外描边</p>\n"},"interval.encode.exit.innerBorder":{"desc":"<p>内描边</p>\n"},"interval.encode.exit.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"interval.encode.exit.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"interval.encode.exit.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"interval.encode.exit.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"interval.encode.exit.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"interval.encode.exit.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"interval.encode.exit.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"interval.encode.exit.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"interval.encode.exit.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"interval.encode.exit.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"interval.encode.exit.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"interval.encode.exit.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"interval.encode.exit.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"interval.encode.exit.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"interval.encode.exit.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"interval.encode.exit.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"interval.encode.exit.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"interval.encode.exit.texture":{"desc":"<p>图元纹理</p>\n"},"interval.encode.exit.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"interval.encode.exit.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"interval.encode.exit.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"interval.encode.exit.blur":{"desc":"<p>图元边缘模糊</p>\n"},"interval.encode.exit.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"interval.encode.hover":{"desc":"<p>设置<code class=\"codespan\">hover</code>状态的时候，图元对应的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"interval.encode.hover.x":{"desc":"<p>图元的 x 坐标</p>\n"},"interval.encode.hover.y":{"desc":"<p>图元 y 坐标</p>\n"},"interval.encode.hover.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"interval.encode.hover.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"interval.encode.hover.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"interval.encode.hover.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"interval.encode.hover.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"interval.encode.hover.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"interval.encode.hover.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"interval.encode.hover.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"interval.encode.hover.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"interval.encode.hover.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"interval.encode.hover.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"interval.encode.hover.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"interval.encode.hover.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"interval.encode.hover.outerBorder":{"desc":"<p>外描边</p>\n"},"interval.encode.hover.innerBorder":{"desc":"<p>内描边</p>\n"},"interval.encode.hover.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"interval.encode.hover.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"interval.encode.hover.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"interval.encode.hover.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"interval.encode.hover.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"interval.encode.hover.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"interval.encode.hover.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"interval.encode.hover.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"interval.encode.hover.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"interval.encode.hover.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"interval.encode.hover.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"interval.encode.hover.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"interval.encode.hover.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"interval.encode.hover.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"interval.encode.hover.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"interval.encode.hover.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"interval.encode.hover.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"interval.encode.hover.texture":{"desc":"<p>图元纹理</p>\n"},"interval.encode.hover.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"interval.encode.hover.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"interval.encode.hover.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"interval.encode.hover.blur":{"desc":"<p>图元边缘模糊</p>\n"},"interval.encode.hover.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"interval.animationState":{"desc":"<p>类型：<code class=\"codespan\">MarkFunctionType</code>\n是否必传： 否\nanimation attributes</p>\n"},"interval.animation":{"desc":"<p>支持设置各种状态对应的动画，数据驱动的动画状态有三种：</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>交互触发的状态变更，通过统一的交互动画进行配置，配置的 key 为 <code class=\"codespan\">state</code></p>\n"},"interval.animation.type":{"desc":"<p>动画执行类型，指定特定的内置动画执行效果</p>\n<p>通用的内置动画类型包括：</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: 渐入渐出动画</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: 缩放动画</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: 移入移出动画</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: 旋转动画</li>\n<li><code class=\"codespan\">update</code>: 更新动画</li>\n</ul>\n<p>interval图元支持的额外动画类型包括：</p>\n<ul>\n<li><code class=\"codespan\">growIntervalIn</code>/<code class=\"codespan\">growIntervalOut</code>: 生长动画</li>\n</ul>\n"},"interval.animation.channel":{"desc":"<p>动画执行前后的视觉通道，与 <code class=\"codespan\">type</code> 配置冲突</p>\n"},"interval.animation.custom":{"desc":"<p>自定义动画，如果设定了自定义动画配置则会替换默认的视觉通道插值逻辑</p>\n"},"interval.animation.customParameters":{"desc":"<p>自定义动画参数</p>\n"},"interval.animation.easing":{"desc":"<p>动画缓动，默认为 <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"interval.animation.delay":{"desc":"<p>动画执行的延迟时间，默认为 0</p>\n"},"interval.animation.duration":{"desc":"<p>动画执行时长，默认为 1000ms</p>\n"},"interval.animation.oneByOne":{"desc":"<p>动画依次执行的延迟时长，如果配置为 <code class=\"codespan\">true</code> 则会在上一个元素动画执行结束后执行下一个元素的动画，默认为 <code class=\"codespan\">false</code></p>\n"},"interval.animation.startTime":{"desc":"<p>动画执行的初始时间，这一初始时间不会在循环动画中被重复应用，默认为 0</p>\n"},"interval.animation.totalTime":{"desc":"<p>动画执行的最大时间，如果动画执行到达设定时间将会被终止</p>\n"},"interval.animation.loop":{"desc":"<p>动画循环次数，如果配置为 <code class=\"codespan\">true</code> 则会无限循环</p>\n"},"interval.animation.options":{"desc":"<p>特定动画类型执行时设定的额外参数</p>\n"},"interval.animation.controlOptions":{"desc":"<p>动画执行逻辑的控制参数：</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: 当动画状态变更时是否立即终止自身动画</li>\n<li><code class=\"codespan\">immediatelyApply</code>: 是否立即应用动画初始的视觉通道</li>\n</ul>\n"},"interval.zIndex":{"desc":"<p>设置<code class=\"codespan\">mark</code>图元对应的容器图形(group)的 zIndex</p>\n"},"interval.interactive":{"desc":"<p>类型：<code class=\"codespan\">boolean</code>\n是否必传： 否</p>\n"},"interval.context":{"desc":"<p>设置图元的上下文参数</p>\n"},"interval.setCustomizedShape":{"desc":"<p>设置自定义形状的回调函数，对应的 ts 类型定位如下：</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>其中<code class=\"codespan\">ICustomPath2D</code> 为 VRender 提供的绘制自定义的路径一个工具类</p>\n"},"interval.support3d":{"desc":"<p>当画布设置了 3d 视角的时候，是否支持 3d 模式</p>\n"},"interval.group":{"desc":"<p>设置父图元，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 父图元对应的 id</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> 父图元对应的语法元素，一般用于 API 调用场景</li>\n</ul>\n<p>如果不设置，会默认挂在到画布的根节点下面</p>\n"},"interval.from":{"desc":"<p>ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>通过<code class=\"codespan\">data</code> 属性值，申明图元依赖的数据</p>\n"},"interval.key":{"desc":"<p>设置图元数据元素的唯一标志符，用于计算图形元素的数据状态，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"interval.sort":{"desc":"<p>对图元中的所有图形元素进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"interval.groupBy":{"desc":"<p>设置分组的属性，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置分组<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析分组<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"interval.groupSort":{"desc":"<p>对图元中的分组进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"interval.coordinate":{"desc":"<p>设置该图元关联的坐标系对应的 id 或者坐标系对应的图形元素</p>\n"},"interval.state":{"desc":"<p>设置当前图元所有图形元素的状态值，支持三种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置图形的状态，比如说:<code class=\"codespan\">{ state: &#39;selected&#39;}</code> 就是给所有的图形设置状态为<code class=\"codespan\">&#39;selected&#39;</code>，通常这种情况，<code class=\"codespan\">encode</code> 中也会设置<code class=\"codespan\">&#39;selected&#39;</code>状态对应的图形通道映射</li>\n<li><code class=\"codespan\">string[]</code> 给图形设置多个状态，可以配置<code class=\"codespan\">stateSort</code>来影响对应状态执行图形通道映射的顺序</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析状态值的回调函数，返回参数为<code class=\"codespan\">string | string[]</code>，对应的 ts 类型定义为：</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"interval.stateSort":{"desc":"<p>设置当前图元所有图形元素的状态值的排序函数，会影响状态对应的图形通道映射的顺序，最先执行的状态可能被后续的状态覆盖图形通道映射结果，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"interval.transform":{"desc":"<p>设置图元对应的变换，所有的数据变换都可以配置在图元上，用于对图元的<code class=\"codespan\">join data</code> 执行变换；\n另外一种类型的变换就是对图形元素执行的变换，比如说<code class=\"codespan\">dodge</code>；\n通用的类型定义如下：</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>每中变换支持的参数不同</p>\n"},"interval.layout":{"desc":"<p>设置图元的布局参数，图元在参与布局的时候，存在两种角色：</p>\n<ul>\n<li>&#39;container&#39; 容器图元，一般是<code class=\"codespan\">group</code>图元</li>\n<li>&#39;item&#39; 布局子元素，作为容器图元的子节点</li>\n</ul>\n<p>注意，我们仅支持一层布局，如果是多层嵌套布局，建议使用自定义的布局方案进行实现；</p>\n<p>现在支持两种内容的布局：<code class=\"codespan\">grid</code> 布局 和 <code class=\"codespan\">relative</code>布局，相关类型定义如下</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>如果想要设置自定义的布局方案，<code class=\"codespan\">layout</code>也支持直接设置回调函数，回调函数的定义如下：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"interval.layout.display":{"desc":"<p>容器图元设置布局的类型，支持两种配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> 相对布局</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> 网格布局</li>\n</ul>\n"},"interval.layout.callback":{"desc":"<p>自定义该图元的回调函数，ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"interval.layout.skipBeforeLayouted":{"desc":"<p>在布局完成前，跳过执行阶段</p>\n"},"interval.layout.updateViewSignals":{"desc":"<p>是否更新默认的视图信号，也就是：<code class=\"codespan\">padding</code>、<code class=\"codespan\">viewWidth</code> 和 <code class=\"codespan\">viewHeight</code></p>\n<p>只能在设置了<code class=\"codespan\">{ layout: { display: &#39;relative&#39;} }</code>的容器图元上设置该属性</p>\n"},"interval.layout.maxChildWidth":{"desc":"<p>相对布局的父图元，设置子图元的最大宽度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的宽度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"interval.layout.maxChildHeight":{"desc":"<p>相对布局的父图元，设置子图元的最大高度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的高度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"interval.layout.position":{"desc":"<p>设置相对布局的子图元的位置，支持的配置有：</p>\n<ul>\n<li>&#39;top&#39; 相对于父图元的顶部</li>\n<li>&#39;bottom&#39; 相对于父图元的底部</li>\n<li>&#39;left&#39; 相对于父图元的左侧</li>\n<li>&#39;right&#39; 相对于父图元的右侧</li>\n<li>&#39;content&#39; 相对于父图元的中心，也就是内容区域</li>\n<li>&#39;auto&#39; 图元设置了坐标系的时候，根据关联的<code class=\"codespan\">scale</code>，自定计算相对于父图元的位置</li>\n</ul>\n"},"interval.layout.padding":{"desc":"<p>子图元内边距，单位 px，默认各方向内边距为 0，接受数值、数值数组以及对象设置。</p>\n<p>使用示例：</p>\n<pre><code class=\"lang-ts\">// 数值类型，设置内边距为 5\npadding: 5;\n// 数值数组，设置上下的内边距为 5，左右的内边距为 10，用法同 CSS 盒模型\npadding: [5, 10];\n// 数值数组，分别设置四个方向的内边距\npadding: [\n  5, // 上\n  10, // 右\n  5, // 下\n  10 // 左\n];\n// 对象类型\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"interval.layout.gridTemplateRows":{"desc":"<p>网格布局的父图元设置行的高度</p>\n"},"interval.layout.gridTemplateColumns":{"desc":"<p>网格布局的父图元设置列的宽度</p>\n"},"interval.layout.gridRowGap":{"desc":"<p>网格布局的父图元设置行行距</p>\n"},"interval.layout.gridColumnGap":{"desc":"<p>网格布局的父图元设置列间距</p>\n"},"interval.layout.gridRowStart":{"desc":"<p>网格布局的子图元设置行开始的位置</p>\n"},"interval.layout.gridRowEnd":{"desc":"<p>网格布局的子图元设置行结束的位置</p>\n"},"interval.layout.gridColumnStart":{"desc":"<p>网格布局的子图元设置列开始的位置</p>\n"},"interval.layout.gridColumnEnd":{"desc":"<p>网格布局的子图元设置列结束的位置</p>\n"},"interval.large":{"desc":"<p>是否开启大数据渲染模式</p>\n"},"interval.largeThreshold":{"desc":"<p>开启大数据渲染优化的阀值，对应的是 data 的长度</p>\n"},"interval.progressiveStep":{"desc":"<p>开启分片渲染的步长，对应的是分片的数据长度</p>\n"},"interval.progressiveThreshold":{"desc":"<p>开启分片渲染的阀值，对应的是单系列 data 的长度</p>\n"},"interval.morph":{"desc":"<p>是否对当前图元开启全局的过渡形变动画</p>\n"},"interval.morphKey":{"desc":"<p>用于匹配全局过渡形变动画的图元，具有相对的<code class=\"codespan\">morphKey</code>的图元，会进行形变动画</p>\n"},"interval.morphElementKey":{"desc":"<p>对于匹配上的前后图元，通过该配置，进行图形元素的匹配；如果不申明，我们默认会读取<code class=\"codespan\">key</code>配置，用于匹配图形元素，进行形变动画；\n默认支持一对一、一对多、多对一的图形形变动画</p>\n"},"cell":{"desc":"<p><strong> Cell 图元 </strong></p>\n"},"cell.type":{"desc":"<p>设置图元类型为 <code class=\"codespan\">cell</code></p>\n"},"cell.encode":{"desc":"<p>设置图元的视觉通道编码，默认支持三种数据变化状态：</p>\n<ul>\n<li><code class=\"codespan\">enter</code> 新增数据元素</li>\n<li><code class=\"codespan\">update</code> 数据元素更新</li>\n<li><code class=\"codespan\">exit</code> 数据元素被删除</li>\n</ul>\n<p>注意，这里的数据状态是根据<code class=\"codespan\">mark</code>的<code class=\"codespan\">key</code>自动生成的，我们会针对<code class=\"codespan\">mark</code>的绑定数据，根据<code class=\"codespan\">key</code>的配置，计算数据对应的唯一标志符，数据更新后，如果对应的唯一标志符不存在了，则状态为<code class=\"codespan\">exit</code>，如果存在，则为<code class=\"codespan\">update</code>；如果之前的数据不存在改唯一标志符，则数据元素对应的状态为<code class=\"codespan\">enter</code></p>\n<p>默认支持一种交互状态：</p>\n<ul>\n<li><code class=\"codespan\">hover</code> 鼠标 hover 到具体的图形上，给图形设置对应的视觉通道编码</li>\n</ul>\n"},"cell.encode.enter":{"desc":"<p>设置图元在数据初始化状态执行的视觉通道映射，注意数据更新的时候不再执行</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"cell.encode.enter.x":{"desc":"<p>图元的 x 坐标</p>\n"},"cell.encode.enter.y":{"desc":"<p>图元 y 坐标</p>\n"},"cell.encode.enter.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"cell.encode.enter.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"cell.encode.enter.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"cell.encode.enter.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"cell.encode.enter.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"cell.encode.enter.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"cell.encode.enter.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"cell.encode.enter.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"cell.encode.enter.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"cell.encode.enter.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"cell.encode.enter.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"cell.encode.enter.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"cell.encode.enter.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"cell.encode.enter.outerBorder":{"desc":"<p>外描边</p>\n"},"cell.encode.enter.innerBorder":{"desc":"<p>内描边</p>\n"},"cell.encode.enter.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"cell.encode.enter.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"cell.encode.enter.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"cell.encode.enter.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"cell.encode.enter.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"cell.encode.enter.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"cell.encode.enter.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"cell.encode.enter.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"cell.encode.enter.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"cell.encode.enter.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"cell.encode.enter.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"cell.encode.enter.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"cell.encode.enter.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"cell.encode.enter.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"cell.encode.enter.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"cell.encode.enter.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"cell.encode.enter.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"cell.encode.enter.texture":{"desc":"<p>图元纹理</p>\n"},"cell.encode.enter.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"cell.encode.enter.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"cell.encode.enter.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"cell.encode.enter.blur":{"desc":"<p>图元边缘模糊</p>\n"},"cell.encode.enter.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"cell.encode.update":{"desc":"<p>设置图元在数据更新状态执行的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"cell.encode.update.x":{"desc":"<p>图元的 x 坐标</p>\n"},"cell.encode.update.y":{"desc":"<p>图元 y 坐标</p>\n"},"cell.encode.update.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"cell.encode.update.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"cell.encode.update.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"cell.encode.update.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"cell.encode.update.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"cell.encode.update.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"cell.encode.update.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"cell.encode.update.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"cell.encode.update.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"cell.encode.update.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"cell.encode.update.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"cell.encode.update.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"cell.encode.update.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"cell.encode.update.outerBorder":{"desc":"<p>外描边</p>\n"},"cell.encode.update.innerBorder":{"desc":"<p>内描边</p>\n"},"cell.encode.update.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"cell.encode.update.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"cell.encode.update.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"cell.encode.update.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"cell.encode.update.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"cell.encode.update.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"cell.encode.update.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"cell.encode.update.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"cell.encode.update.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"cell.encode.update.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"cell.encode.update.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"cell.encode.update.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"cell.encode.update.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"cell.encode.update.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"cell.encode.update.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"cell.encode.update.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"cell.encode.update.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"cell.encode.update.texture":{"desc":"<p>图元纹理</p>\n"},"cell.encode.update.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"cell.encode.update.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"cell.encode.update.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"cell.encode.update.blur":{"desc":"<p>图元边缘模糊</p>\n"},"cell.encode.update.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"cell.encode.exit":{"desc":"<p>设置图元在数据被删除的状态下执行的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"cell.encode.exit.x":{"desc":"<p>图元的 x 坐标</p>\n"},"cell.encode.exit.y":{"desc":"<p>图元 y 坐标</p>\n"},"cell.encode.exit.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"cell.encode.exit.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"cell.encode.exit.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"cell.encode.exit.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"cell.encode.exit.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"cell.encode.exit.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"cell.encode.exit.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"cell.encode.exit.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"cell.encode.exit.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"cell.encode.exit.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"cell.encode.exit.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"cell.encode.exit.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"cell.encode.exit.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"cell.encode.exit.outerBorder":{"desc":"<p>外描边</p>\n"},"cell.encode.exit.innerBorder":{"desc":"<p>内描边</p>\n"},"cell.encode.exit.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"cell.encode.exit.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"cell.encode.exit.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"cell.encode.exit.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"cell.encode.exit.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"cell.encode.exit.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"cell.encode.exit.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"cell.encode.exit.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"cell.encode.exit.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"cell.encode.exit.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"cell.encode.exit.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"cell.encode.exit.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"cell.encode.exit.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"cell.encode.exit.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"cell.encode.exit.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"cell.encode.exit.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"cell.encode.exit.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"cell.encode.exit.texture":{"desc":"<p>图元纹理</p>\n"},"cell.encode.exit.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"cell.encode.exit.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"cell.encode.exit.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"cell.encode.exit.blur":{"desc":"<p>图元边缘模糊</p>\n"},"cell.encode.exit.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"cell.encode.hover":{"desc":"<p>设置<code class=\"codespan\">hover</code>状态的时候，图元对应的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"cell.encode.hover.x":{"desc":"<p>图元的 x 坐标</p>\n"},"cell.encode.hover.y":{"desc":"<p>图元 y 坐标</p>\n"},"cell.encode.hover.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"cell.encode.hover.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"cell.encode.hover.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"cell.encode.hover.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"cell.encode.hover.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"cell.encode.hover.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"cell.encode.hover.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"cell.encode.hover.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"cell.encode.hover.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"cell.encode.hover.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"cell.encode.hover.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"cell.encode.hover.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"cell.encode.hover.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"cell.encode.hover.outerBorder":{"desc":"<p>外描边</p>\n"},"cell.encode.hover.innerBorder":{"desc":"<p>内描边</p>\n"},"cell.encode.hover.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"cell.encode.hover.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"cell.encode.hover.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"cell.encode.hover.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"cell.encode.hover.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"cell.encode.hover.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"cell.encode.hover.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"cell.encode.hover.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"cell.encode.hover.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"cell.encode.hover.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"cell.encode.hover.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"cell.encode.hover.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"cell.encode.hover.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"cell.encode.hover.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"cell.encode.hover.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"cell.encode.hover.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"cell.encode.hover.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"cell.encode.hover.texture":{"desc":"<p>图元纹理</p>\n"},"cell.encode.hover.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"cell.encode.hover.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"cell.encode.hover.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"cell.encode.hover.blur":{"desc":"<p>图元边缘模糊</p>\n"},"cell.encode.hover.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"cell.animationState":{"desc":"<p>类型：<code class=\"codespan\">MarkFunctionType</code>\n是否必传： 否\nanimation attributes</p>\n"},"cell.animation":{"desc":"<p>支持设置各种状态对应的动画，数据驱动的动画状态有三种：</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>交互触发的状态变更，通过统一的交互动画进行配置，配置的 key 为 <code class=\"codespan\">state</code></p>\n"},"cell.animation.type":{"desc":"<p>动画执行类型，指定特定的内置动画执行效果</p>\n<p>通用的内置动画类型包括：</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: 渐入渐出动画</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: 缩放动画</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: 移入移出动画</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: 旋转动画</li>\n<li><code class=\"codespan\">update</code>: 更新动画</li>\n</ul>\n"},"cell.animation.channel":{"desc":"<p>动画执行前后的视觉通道，与 <code class=\"codespan\">type</code> 配置冲突</p>\n"},"cell.animation.custom":{"desc":"<p>自定义动画，如果设定了自定义动画配置则会替换默认的视觉通道插值逻辑</p>\n"},"cell.animation.customParameters":{"desc":"<p>自定义动画参数</p>\n"},"cell.animation.easing":{"desc":"<p>动画缓动，默认为 <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"cell.animation.delay":{"desc":"<p>动画执行的延迟时间，默认为 0</p>\n"},"cell.animation.duration":{"desc":"<p>动画执行时长，默认为 1000ms</p>\n"},"cell.animation.oneByOne":{"desc":"<p>动画依次执行的延迟时长，如果配置为 <code class=\"codespan\">true</code> 则会在上一个元素动画执行结束后执行下一个元素的动画，默认为 <code class=\"codespan\">false</code></p>\n"},"cell.animation.startTime":{"desc":"<p>动画执行的初始时间，这一初始时间不会在循环动画中被重复应用，默认为 0</p>\n"},"cell.animation.totalTime":{"desc":"<p>动画执行的最大时间，如果动画执行到达设定时间将会被终止</p>\n"},"cell.animation.loop":{"desc":"<p>动画循环次数，如果配置为 <code class=\"codespan\">true</code> 则会无限循环</p>\n"},"cell.animation.options":{"desc":"<p>特定动画类型执行时设定的额外参数</p>\n"},"cell.animation.controlOptions":{"desc":"<p>动画执行逻辑的控制参数：</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: 当动画状态变更时是否立即终止自身动画</li>\n<li><code class=\"codespan\">immediatelyApply</code>: 是否立即应用动画初始的视觉通道</li>\n</ul>\n"},"cell.zIndex":{"desc":"<p>设置<code class=\"codespan\">mark</code>图元对应的容器图形(group)的 zIndex</p>\n"},"cell.interactive":{"desc":"<p>类型：<code class=\"codespan\">boolean</code>\n是否必传： 否</p>\n"},"cell.context":{"desc":"<p>设置图元的上下文参数</p>\n"},"cell.setCustomizedShape":{"desc":"<p>设置自定义形状的回调函数，对应的 ts 类型定位如下：</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>其中<code class=\"codespan\">ICustomPath2D</code> 为 VRender 提供的绘制自定义的路径一个工具类</p>\n"},"cell.support3d":{"desc":"<p>当画布设置了 3d 视角的时候，是否支持 3d 模式</p>\n"},"cell.group":{"desc":"<p>设置父图元，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 父图元对应的 id</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> 父图元对应的语法元素，一般用于 API 调用场景</li>\n</ul>\n<p>如果不设置，会默认挂在到画布的根节点下面</p>\n"},"cell.from":{"desc":"<p>ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>通过<code class=\"codespan\">data</code> 属性值，申明图元依赖的数据</p>\n"},"cell.key":{"desc":"<p>设置图元数据元素的唯一标志符，用于计算图形元素的数据状态，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"cell.sort":{"desc":"<p>对图元中的所有图形元素进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"cell.groupBy":{"desc":"<p>设置分组的属性，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置分组<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析分组<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"cell.groupSort":{"desc":"<p>对图元中的分组进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"cell.coordinate":{"desc":"<p>设置该图元关联的坐标系对应的 id 或者坐标系对应的图形元素</p>\n"},"cell.state":{"desc":"<p>设置当前图元所有图形元素的状态值，支持三种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置图形的状态，比如说:<code class=\"codespan\">{ state: &#39;selected&#39;}</code> 就是给所有的图形设置状态为<code class=\"codespan\">&#39;selected&#39;</code>，通常这种情况，<code class=\"codespan\">encode</code> 中也会设置<code class=\"codespan\">&#39;selected&#39;</code>状态对应的图形通道映射</li>\n<li><code class=\"codespan\">string[]</code> 给图形设置多个状态，可以配置<code class=\"codespan\">stateSort</code>来影响对应状态执行图形通道映射的顺序</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析状态值的回调函数，返回参数为<code class=\"codespan\">string | string[]</code>，对应的 ts 类型定义为：</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"cell.stateSort":{"desc":"<p>设置当前图元所有图形元素的状态值的排序函数，会影响状态对应的图形通道映射的顺序，最先执行的状态可能被后续的状态覆盖图形通道映射结果，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"cell.transform":{"desc":"<p>设置图元对应的变换，所有的数据变换都可以配置在图元上，用于对图元的<code class=\"codespan\">join data</code> 执行变换；\n另外一种类型的变换就是对图形元素执行的变换，比如说<code class=\"codespan\">dodge</code>；\n通用的类型定义如下：</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>每中变换支持的参数不同</p>\n"},"cell.layout":{"desc":"<p>设置图元的布局参数，图元在参与布局的时候，存在两种角色：</p>\n<ul>\n<li>&#39;container&#39; 容器图元，一般是<code class=\"codespan\">group</code>图元</li>\n<li>&#39;item&#39; 布局子元素，作为容器图元的子节点</li>\n</ul>\n<p>注意，我们仅支持一层布局，如果是多层嵌套布局，建议使用自定义的布局方案进行实现；</p>\n<p>现在支持两种内容的布局：<code class=\"codespan\">grid</code> 布局 和 <code class=\"codespan\">relative</code>布局，相关类型定义如下</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>如果想要设置自定义的布局方案，<code class=\"codespan\">layout</code>也支持直接设置回调函数，回调函数的定义如下：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"cell.layout.display":{"desc":"<p>容器图元设置布局的类型，支持两种配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> 相对布局</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> 网格布局</li>\n</ul>\n"},"cell.layout.callback":{"desc":"<p>自定义该图元的回调函数，ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"cell.layout.skipBeforeLayouted":{"desc":"<p>在布局完成前，跳过执行阶段</p>\n"},"cell.layout.updateViewSignals":{"desc":"<p>是否更新默认的视图信号，也就是：<code class=\"codespan\">padding</code>、<code class=\"codespan\">viewWidth</code> 和 <code class=\"codespan\">viewHeight</code></p>\n<p>只能在设置了<code class=\"codespan\">{ layout: { display: &#39;relative&#39;} }</code>的容器图元上设置该属性</p>\n"},"cell.layout.maxChildWidth":{"desc":"<p>相对布局的父图元，设置子图元的最大宽度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的宽度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"cell.layout.maxChildHeight":{"desc":"<p>相对布局的父图元，设置子图元的最大高度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的高度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"cell.layout.position":{"desc":"<p>设置相对布局的子图元的位置，支持的配置有：</p>\n<ul>\n<li>&#39;top&#39; 相对于父图元的顶部</li>\n<li>&#39;bottom&#39; 相对于父图元的底部</li>\n<li>&#39;left&#39; 相对于父图元的左侧</li>\n<li>&#39;right&#39; 相对于父图元的右侧</li>\n<li>&#39;content&#39; 相对于父图元的中心，也就是内容区域</li>\n<li>&#39;auto&#39; 图元设置了坐标系的时候，根据关联的<code class=\"codespan\">scale</code>，自定计算相对于父图元的位置</li>\n</ul>\n"},"cell.layout.padding":{"desc":"<p>子图元内边距，单位 px，默认各方向内边距为 0，接受数值、数值数组以及对象设置。</p>\n<p>使用示例：</p>\n<pre><code class=\"lang-ts\">// 数值类型，设置内边距为 5\npadding: 5;\n// 数值数组，设置上下的内边距为 5，左右的内边距为 10，用法同 CSS 盒模型\npadding: [5, 10];\n// 数值数组，分别设置四个方向的内边距\npadding: [\n  5, // 上\n  10, // 右\n  5, // 下\n  10 // 左\n];\n// 对象类型\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"cell.layout.gridTemplateRows":{"desc":"<p>网格布局的父图元设置行的高度</p>\n"},"cell.layout.gridTemplateColumns":{"desc":"<p>网格布局的父图元设置列的宽度</p>\n"},"cell.layout.gridRowGap":{"desc":"<p>网格布局的父图元设置行行距</p>\n"},"cell.layout.gridColumnGap":{"desc":"<p>网格布局的父图元设置列间距</p>\n"},"cell.layout.gridRowStart":{"desc":"<p>网格布局的子图元设置行开始的位置</p>\n"},"cell.layout.gridRowEnd":{"desc":"<p>网格布局的子图元设置行结束的位置</p>\n"},"cell.layout.gridColumnStart":{"desc":"<p>网格布局的子图元设置列开始的位置</p>\n"},"cell.layout.gridColumnEnd":{"desc":"<p>网格布局的子图元设置列结束的位置</p>\n"},"cell.large":{"desc":"<p>是否开启大数据渲染模式</p>\n"},"cell.largeThreshold":{"desc":"<p>开启大数据渲染优化的阀值，对应的是 data 的长度</p>\n"},"cell.progressiveStep":{"desc":"<p>开启分片渲染的步长，对应的是分片的数据长度</p>\n"},"cell.progressiveThreshold":{"desc":"<p>开启分片渲染的阀值，对应的是单系列 data 的长度</p>\n"},"cell.morph":{"desc":"<p>是否对当前图元开启全局的过渡形变动画</p>\n"},"cell.morphKey":{"desc":"<p>用于匹配全局过渡形变动画的图元，具有相对的<code class=\"codespan\">morphKey</code>的图元，会进行形变动画</p>\n"},"cell.morphElementKey":{"desc":"<p>对于匹配上的前后图元，通过该配置，进行图形元素的匹配；如果不申明，我们默认会读取<code class=\"codespan\">key</code>配置，用于匹配图形元素，进行形变动画；\n默认支持一对一、一对多、多对一的图形形变动画</p>\n"},"group":{"desc":"<p><strong> group 图元 </strong></p>\n"},"group.type":{"desc":"<p>设置图元类型为 <code class=\"codespan\">group</code></p>\n"},"group.clip":{"desc":"<p><code class=\"codespan\">group</code>图元是否对子图元进行剪切操作</p>\n"},"group.encode":{"desc":"<p>设置图元的视觉通道编码，默认支持三种数据变化状态：</p>\n<ul>\n<li><code class=\"codespan\">enter</code> 新增数据元素</li>\n<li><code class=\"codespan\">update</code> 数据元素更新</li>\n<li><code class=\"codespan\">exit</code> 数据元素被删除</li>\n</ul>\n<p>注意，这里的数据状态是根据<code class=\"codespan\">mark</code>的<code class=\"codespan\">key</code>自动生成的，我们会针对<code class=\"codespan\">mark</code>的绑定数据，根据<code class=\"codespan\">key</code>的配置，计算数据对应的唯一标志符，数据更新后，如果对应的唯一标志符不存在了，则状态为<code class=\"codespan\">exit</code>，如果存在，则为<code class=\"codespan\">update</code>；如果之前的数据不存在改唯一标志符，则数据元素对应的状态为<code class=\"codespan\">enter</code></p>\n<p>默认支持一种交互状态：</p>\n<ul>\n<li><code class=\"codespan\">hover</code> 鼠标 hover 到具体的图形上，给图形设置对应的视觉通道编码</li>\n</ul>\n"},"group.encode.enter":{"desc":"<p>设置图元在数据初始化状态执行的视觉通道映射，注意数据更新的时候不再执行</p>\n"},"group.encode.enter.width":{"desc":"<p>图元的宽度</p>\n"},"group.encode.enter.height":{"desc":"<p>图元的高度</p>\n"},"group.encode.enter.borderRadius":{"desc":"<p>设置圆角，默认为 0，支持两种格式的设置：</p>\n<ul>\n<li><code class=\"codespan\">number</code>: 给四个角度设置统一的圆角</li>\n<li><code class=\"codespan\">number[]</code>: 分别给四个角度设置不同的圆角<ul>\n<li>当数组的长度为<code class=\"codespan\">1</code>，给四个角设置相同的圆角</li>\n<li>当数组的长度为<code class=\"codespan\">2</code>或者<code class=\"codespan\">3</code>，给<strong>左上角</strong>和<strong>右下角</strong>设置圆角长度为<code class=\"codespan\">borderRadius[0]</code>,给<strong>右上角</strong>和<strong>左下角</strong>设置圆角长度为<code class=\"codespan\">borderRadius[1]</code></li>\n<li>当数组的长度为<code class=\"codespan\">4</code>及以上，四个角度设置不同的圆角</li>\n</ul>\n</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"group.encode.enter.x":{"desc":"<p>图元的 x 坐标</p>\n"},"group.encode.enter.y":{"desc":"<p>图元 y 坐标</p>\n"},"group.encode.enter.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"group.encode.enter.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"group.encode.enter.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"group.encode.enter.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"group.encode.enter.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"group.encode.enter.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"group.encode.enter.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"group.encode.enter.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"group.encode.enter.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"group.encode.enter.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"group.encode.enter.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"group.encode.enter.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"group.encode.enter.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"group.encode.enter.outerBorder":{"desc":"<p>外描边</p>\n"},"group.encode.enter.innerBorder":{"desc":"<p>内描边</p>\n"},"group.encode.enter.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"group.encode.enter.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"group.encode.enter.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"group.encode.enter.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"group.encode.enter.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"group.encode.enter.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"group.encode.enter.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"group.encode.enter.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"group.encode.enter.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"group.encode.enter.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"group.encode.enter.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"group.encode.enter.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"group.encode.enter.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"group.encode.enter.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"group.encode.enter.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"group.encode.enter.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"group.encode.enter.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"group.encode.enter.texture":{"desc":"<p>图元纹理</p>\n"},"group.encode.enter.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"group.encode.enter.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"group.encode.enter.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"group.encode.enter.blur":{"desc":"<p>图元边缘模糊</p>\n"},"group.encode.enter.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"group.encode.update":{"desc":"<p>设置图元在数据更新状态执行的视觉通道映射</p>\n"},"group.encode.update.width":{"desc":"<p>图元的宽度</p>\n"},"group.encode.update.height":{"desc":"<p>图元的高度</p>\n"},"group.encode.update.borderRadius":{"desc":"<p>设置圆角，默认为 0，支持两种格式的设置：</p>\n<ul>\n<li><code class=\"codespan\">number</code>: 给四个角度设置统一的圆角</li>\n<li><code class=\"codespan\">number[]</code>: 分别给四个角度设置不同的圆角<ul>\n<li>当数组的长度为<code class=\"codespan\">1</code>，给四个角设置相同的圆角</li>\n<li>当数组的长度为<code class=\"codespan\">2</code>或者<code class=\"codespan\">3</code>，给<strong>左上角</strong>和<strong>右下角</strong>设置圆角长度为<code class=\"codespan\">borderRadius[0]</code>,给<strong>右上角</strong>和<strong>左下角</strong>设置圆角长度为<code class=\"codespan\">borderRadius[1]</code></li>\n<li>当数组的长度为<code class=\"codespan\">4</code>及以上，四个角度设置不同的圆角</li>\n</ul>\n</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"group.encode.update.x":{"desc":"<p>图元的 x 坐标</p>\n"},"group.encode.update.y":{"desc":"<p>图元 y 坐标</p>\n"},"group.encode.update.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"group.encode.update.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"group.encode.update.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"group.encode.update.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"group.encode.update.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"group.encode.update.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"group.encode.update.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"group.encode.update.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"group.encode.update.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"group.encode.update.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"group.encode.update.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"group.encode.update.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"group.encode.update.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"group.encode.update.outerBorder":{"desc":"<p>外描边</p>\n"},"group.encode.update.innerBorder":{"desc":"<p>内描边</p>\n"},"group.encode.update.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"group.encode.update.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"group.encode.update.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"group.encode.update.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"group.encode.update.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"group.encode.update.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"group.encode.update.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"group.encode.update.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"group.encode.update.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"group.encode.update.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"group.encode.update.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"group.encode.update.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"group.encode.update.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"group.encode.update.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"group.encode.update.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"group.encode.update.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"group.encode.update.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"group.encode.update.texture":{"desc":"<p>图元纹理</p>\n"},"group.encode.update.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"group.encode.update.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"group.encode.update.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"group.encode.update.blur":{"desc":"<p>图元边缘模糊</p>\n"},"group.encode.update.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"group.encode.exit":{"desc":"<p>设置图元在数据被删除的状态下执行的视觉通道映射</p>\n"},"group.encode.exit.width":{"desc":"<p>图元的宽度</p>\n"},"group.encode.exit.height":{"desc":"<p>图元的高度</p>\n"},"group.encode.exit.borderRadius":{"desc":"<p>设置圆角，默认为 0，支持两种格式的设置：</p>\n<ul>\n<li><code class=\"codespan\">number</code>: 给四个角度设置统一的圆角</li>\n<li><code class=\"codespan\">number[]</code>: 分别给四个角度设置不同的圆角<ul>\n<li>当数组的长度为<code class=\"codespan\">1</code>，给四个角设置相同的圆角</li>\n<li>当数组的长度为<code class=\"codespan\">2</code>或者<code class=\"codespan\">3</code>，给<strong>左上角</strong>和<strong>右下角</strong>设置圆角长度为<code class=\"codespan\">borderRadius[0]</code>,给<strong>右上角</strong>和<strong>左下角</strong>设置圆角长度为<code class=\"codespan\">borderRadius[1]</code></li>\n<li>当数组的长度为<code class=\"codespan\">4</code>及以上，四个角度设置不同的圆角</li>\n</ul>\n</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"group.encode.exit.x":{"desc":"<p>图元的 x 坐标</p>\n"},"group.encode.exit.y":{"desc":"<p>图元 y 坐标</p>\n"},"group.encode.exit.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"group.encode.exit.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"group.encode.exit.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"group.encode.exit.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"group.encode.exit.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"group.encode.exit.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"group.encode.exit.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"group.encode.exit.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"group.encode.exit.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"group.encode.exit.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"group.encode.exit.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"group.encode.exit.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"group.encode.exit.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"group.encode.exit.outerBorder":{"desc":"<p>外描边</p>\n"},"group.encode.exit.innerBorder":{"desc":"<p>内描边</p>\n"},"group.encode.exit.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"group.encode.exit.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"group.encode.exit.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"group.encode.exit.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"group.encode.exit.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"group.encode.exit.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"group.encode.exit.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"group.encode.exit.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"group.encode.exit.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"group.encode.exit.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"group.encode.exit.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"group.encode.exit.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"group.encode.exit.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"group.encode.exit.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"group.encode.exit.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"group.encode.exit.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"group.encode.exit.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"group.encode.exit.texture":{"desc":"<p>图元纹理</p>\n"},"group.encode.exit.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"group.encode.exit.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"group.encode.exit.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"group.encode.exit.blur":{"desc":"<p>图元边缘模糊</p>\n"},"group.encode.exit.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"group.encode.hover":{"desc":"<p>设置<code class=\"codespan\">hover</code>状态的时候，图元对应的视觉通道映射</p>\n"},"group.encode.hover.width":{"desc":"<p>图元的宽度</p>\n"},"group.encode.hover.height":{"desc":"<p>图元的高度</p>\n"},"group.encode.hover.borderRadius":{"desc":"<p>设置圆角，默认为 0，支持两种格式的设置：</p>\n<ul>\n<li><code class=\"codespan\">number</code>: 给四个角度设置统一的圆角</li>\n<li><code class=\"codespan\">number[]</code>: 分别给四个角度设置不同的圆角<ul>\n<li>当数组的长度为<code class=\"codespan\">1</code>，给四个角设置相同的圆角</li>\n<li>当数组的长度为<code class=\"codespan\">2</code>或者<code class=\"codespan\">3</code>，给<strong>左上角</strong>和<strong>右下角</strong>设置圆角长度为<code class=\"codespan\">borderRadius[0]</code>,给<strong>右上角</strong>和<strong>左下角</strong>设置圆角长度为<code class=\"codespan\">borderRadius[1]</code></li>\n<li>当数组的长度为<code class=\"codespan\">4</code>及以上，四个角度设置不同的圆角</li>\n</ul>\n</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"group.encode.hover.x":{"desc":"<p>图元的 x 坐标</p>\n"},"group.encode.hover.y":{"desc":"<p>图元 y 坐标</p>\n"},"group.encode.hover.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"group.encode.hover.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"group.encode.hover.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"group.encode.hover.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"group.encode.hover.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"group.encode.hover.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"group.encode.hover.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"group.encode.hover.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"group.encode.hover.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"group.encode.hover.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"group.encode.hover.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"group.encode.hover.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"group.encode.hover.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"group.encode.hover.outerBorder":{"desc":"<p>外描边</p>\n"},"group.encode.hover.innerBorder":{"desc":"<p>内描边</p>\n"},"group.encode.hover.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"group.encode.hover.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"group.encode.hover.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"group.encode.hover.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"group.encode.hover.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"group.encode.hover.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"group.encode.hover.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"group.encode.hover.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"group.encode.hover.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"group.encode.hover.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"group.encode.hover.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"group.encode.hover.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"group.encode.hover.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"group.encode.hover.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"group.encode.hover.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"group.encode.hover.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"group.encode.hover.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"group.encode.hover.texture":{"desc":"<p>图元纹理</p>\n"},"group.encode.hover.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"group.encode.hover.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"group.encode.hover.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"group.encode.hover.blur":{"desc":"<p>图元边缘模糊</p>\n"},"group.encode.hover.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"group.animationState":{"desc":"<p>类型：<code class=\"codespan\">MarkFunctionType</code>\n是否必传： 否\nanimation attributes</p>\n"},"group.animation":{"desc":"<p>支持设置各种状态对应的动画，数据驱动的动画状态有三种：</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>交互触发的状态变更，通过统一的交互动画进行配置，配置的 key 为 <code class=\"codespan\">state</code></p>\n"},"group.animation.type":{"desc":"<p>动画执行类型，指定特定的内置动画执行效果</p>\n<p>通用的内置动画类型包括：</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: 渐入渐出动画</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: 缩放动画</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: 移入移出动画</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: 旋转动画</li>\n<li><code class=\"codespan\">update</code>: 更新动画</li>\n</ul>\n"},"group.animation.channel":{"desc":"<p>动画执行前后的视觉通道，与 <code class=\"codespan\">type</code> 配置冲突</p>\n"},"group.animation.custom":{"desc":"<p>自定义动画，如果设定了自定义动画配置则会替换默认的视觉通道插值逻辑</p>\n"},"group.animation.customParameters":{"desc":"<p>自定义动画参数</p>\n"},"group.animation.easing":{"desc":"<p>动画缓动，默认为 <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"group.animation.delay":{"desc":"<p>动画执行的延迟时间，默认为 0</p>\n"},"group.animation.duration":{"desc":"<p>动画执行时长，默认为 1000ms</p>\n"},"group.animation.oneByOne":{"desc":"<p>动画依次执行的延迟时长，如果配置为 <code class=\"codespan\">true</code> 则会在上一个元素动画执行结束后执行下一个元素的动画，默认为 <code class=\"codespan\">false</code></p>\n"},"group.animation.startTime":{"desc":"<p>动画执行的初始时间，这一初始时间不会在循环动画中被重复应用，默认为 0</p>\n"},"group.animation.totalTime":{"desc":"<p>动画执行的最大时间，如果动画执行到达设定时间将会被终止</p>\n"},"group.animation.loop":{"desc":"<p>动画循环次数，如果配置为 <code class=\"codespan\">true</code> 则会无限循环</p>\n"},"group.animation.options":{"desc":"<p>特定动画类型执行时设定的额外参数</p>\n"},"group.animation.controlOptions":{"desc":"<p>动画执行逻辑的控制参数：</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: 当动画状态变更时是否立即终止自身动画</li>\n<li><code class=\"codespan\">immediatelyApply</code>: 是否立即应用动画初始的视觉通道</li>\n</ul>\n"},"group.zIndex":{"desc":"<p>设置<code class=\"codespan\">mark</code>图元对应的容器图形(group)的 zIndex</p>\n"},"group.interactive":{"desc":"<p>类型：<code class=\"codespan\">boolean</code>\n是否必传： 否</p>\n"},"group.context":{"desc":"<p>设置图元的上下文参数</p>\n"},"group.setCustomizedShape":{"desc":"<p>设置自定义形状的回调函数，对应的 ts 类型定位如下：</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>其中<code class=\"codespan\">ICustomPath2D</code> 为 VRender 提供的绘制自定义的路径一个工具类</p>\n"},"group.support3d":{"desc":"<p>当画布设置了 3d 视角的时候，是否支持 3d 模式</p>\n"},"group.group":{"desc":"<p>设置父图元，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 父图元对应的 id</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> 父图元对应的语法元素，一般用于 API 调用场景</li>\n</ul>\n<p>如果不设置，会默认挂在到画布的根节点下面</p>\n"},"group.from":{"desc":"<p>ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>通过<code class=\"codespan\">data</code> 属性值，申明图元依赖的数据</p>\n"},"group.key":{"desc":"<p>设置图元数据元素的唯一标志符，用于计算图形元素的数据状态，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"group.sort":{"desc":"<p>对图元中的所有图形元素进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"group.groupBy":{"desc":"<p>设置分组的属性，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置分组<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析分组<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"group.groupSort":{"desc":"<p>对图元中的分组进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"group.coordinate":{"desc":"<p>设置该图元关联的坐标系对应的 id 或者坐标系对应的图形元素</p>\n"},"group.state":{"desc":"<p>设置当前图元所有图形元素的状态值，支持三种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置图形的状态，比如说:<code class=\"codespan\">{ state: &#39;selected&#39;}</code> 就是给所有的图形设置状态为<code class=\"codespan\">&#39;selected&#39;</code>，通常这种情况，<code class=\"codespan\">encode</code> 中也会设置<code class=\"codespan\">&#39;selected&#39;</code>状态对应的图形通道映射</li>\n<li><code class=\"codespan\">string[]</code> 给图形设置多个状态，可以配置<code class=\"codespan\">stateSort</code>来影响对应状态执行图形通道映射的顺序</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析状态值的回调函数，返回参数为<code class=\"codespan\">string | string[]</code>，对应的 ts 类型定义为：</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"group.stateSort":{"desc":"<p>设置当前图元所有图形元素的状态值的排序函数，会影响状态对应的图形通道映射的顺序，最先执行的状态可能被后续的状态覆盖图形通道映射结果，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"group.transform":{"desc":"<p>设置图元对应的变换，所有的数据变换都可以配置在图元上，用于对图元的<code class=\"codespan\">join data</code> 执行变换；\n另外一种类型的变换就是对图形元素执行的变换，比如说<code class=\"codespan\">dodge</code>；\n通用的类型定义如下：</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>每中变换支持的参数不同</p>\n"},"group.layout":{"desc":"<p>设置图元的布局参数，图元在参与布局的时候，存在两种角色：</p>\n<ul>\n<li>&#39;container&#39; 容器图元，一般是<code class=\"codespan\">group</code>图元</li>\n<li>&#39;item&#39; 布局子元素，作为容器图元的子节点</li>\n</ul>\n<p>注意，我们仅支持一层布局，如果是多层嵌套布局，建议使用自定义的布局方案进行实现；</p>\n<p>现在支持两种内容的布局：<code class=\"codespan\">grid</code> 布局 和 <code class=\"codespan\">relative</code>布局，相关类型定义如下</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>如果想要设置自定义的布局方案，<code class=\"codespan\">layout</code>也支持直接设置回调函数，回调函数的定义如下：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"group.layout.display":{"desc":"<p>容器图元设置布局的类型，支持两种配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> 相对布局</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> 网格布局</li>\n</ul>\n"},"group.layout.callback":{"desc":"<p>自定义该图元的回调函数，ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"group.layout.skipBeforeLayouted":{"desc":"<p>在布局完成前，跳过执行阶段</p>\n"},"group.layout.updateViewSignals":{"desc":"<p>是否更新默认的视图信号，也就是：<code class=\"codespan\">padding</code>、<code class=\"codespan\">viewWidth</code> 和 <code class=\"codespan\">viewHeight</code></p>\n<p>只能在设置了<code class=\"codespan\">{ layout: { display: &#39;relative&#39;} }</code>的容器图元上设置该属性</p>\n"},"group.layout.maxChildWidth":{"desc":"<p>相对布局的父图元，设置子图元的最大宽度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的宽度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"group.layout.maxChildHeight":{"desc":"<p>相对布局的父图元，设置子图元的最大高度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的高度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"group.layout.position":{"desc":"<p>设置相对布局的子图元的位置，支持的配置有：</p>\n<ul>\n<li>&#39;top&#39; 相对于父图元的顶部</li>\n<li>&#39;bottom&#39; 相对于父图元的底部</li>\n<li>&#39;left&#39; 相对于父图元的左侧</li>\n<li>&#39;right&#39; 相对于父图元的右侧</li>\n<li>&#39;content&#39; 相对于父图元的中心，也就是内容区域</li>\n<li>&#39;auto&#39; 图元设置了坐标系的时候，根据关联的<code class=\"codespan\">scale</code>，自定计算相对于父图元的位置</li>\n</ul>\n"},"group.layout.padding":{"desc":"<p>子图元内边距，单位 px，默认各方向内边距为 0，接受数值、数值数组以及对象设置。</p>\n<p>使用示例：</p>\n<pre><code class=\"lang-ts\">// 数值类型，设置内边距为 5\npadding: 5;\n// 数值数组，设置上下的内边距为 5，左右的内边距为 10，用法同 CSS 盒模型\npadding: [5, 10];\n// 数值数组，分别设置四个方向的内边距\npadding: [\n  5, // 上\n  10, // 右\n  5, // 下\n  10 // 左\n];\n// 对象类型\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"group.layout.gridTemplateRows":{"desc":"<p>网格布局的父图元设置行的高度</p>\n"},"group.layout.gridTemplateColumns":{"desc":"<p>网格布局的父图元设置列的宽度</p>\n"},"group.layout.gridRowGap":{"desc":"<p>网格布局的父图元设置行行距</p>\n"},"group.layout.gridColumnGap":{"desc":"<p>网格布局的父图元设置列间距</p>\n"},"group.layout.gridRowStart":{"desc":"<p>网格布局的子图元设置行开始的位置</p>\n"},"group.layout.gridRowEnd":{"desc":"<p>网格布局的子图元设置行结束的位置</p>\n"},"group.layout.gridColumnStart":{"desc":"<p>网格布局的子图元设置列开始的位置</p>\n"},"group.layout.gridColumnEnd":{"desc":"<p>网格布局的子图元设置列结束的位置</p>\n"},"group.large":{"desc":"<p>是否开启大数据渲染模式</p>\n"},"group.largeThreshold":{"desc":"<p>开启大数据渲染优化的阀值，对应的是 data 的长度</p>\n"},"group.progressiveStep":{"desc":"<p>开启分片渲染的步长，对应的是分片的数据长度</p>\n"},"group.progressiveThreshold":{"desc":"<p>开启分片渲染的阀值，对应的是单系列 data 的长度</p>\n"},"group.morph":{"desc":"<p>是否对当前图元开启全局的过渡形变动画</p>\n"},"group.morphKey":{"desc":"<p>用于匹配全局过渡形变动画的图元，具有相对的<code class=\"codespan\">morphKey</code>的图元，会进行形变动画</p>\n"},"group.morphElementKey":{"desc":"<p>对于匹配上的前后图元，通过该配置，进行图形元素的匹配；如果不申明，我们默认会读取<code class=\"codespan\">key</code>配置，用于匹配图形元素，进行形变动画；\n默认支持一对一、一对多、多对一的图形形变动画</p>\n"},"glyph":{"desc":"<p><strong> glyph 图元 </strong></p>\n"},"glyph.type":{"desc":"<p>设置图元类型为 <code class=\"codespan\">glyph</code></p>\n"},"glyph.glyphType":{"desc":"<p>设置 glyph 的类型，支持内置的 glyph 类型，以及自定义注册的 glyph 类型</p>\n"},"glyph.glyphType.barBoxplot":{"desc":"<p>使用 boxplot 图元前需要执行 <code class=\"codespan\">registerBarBoxplotGlyph()</code> 对 barBoxplot 图元进行注册</p>\n"},"glyph.glyphType.barBoxplot.glyphType":{"desc":"<p>将 glyph 类型设置为 <code class=\"codespan\">barBoxplot</code></p>\n"},"glyph.glyphType.barBoxplot.glyphConfig":{"desc":"<p>支持的 glyph 配置包含：</p>\n<ul>\n<li><code class=\"codespan\">direction</code>(&#39;vertical&#39;|&#39;horizontal&#39;): barBoxplot 图元的方向，默认为 <code class=\"codespan\">&#39;vertical&#39;</code></li>\n</ul>\n"},"glyph.glyphType.barBoxplot.animation":{"desc":"<p>支持的内置动画类型包含：</p>\n<ul>\n<li><code class=\"codespan\">barBoxplotScaleIn</code>/<code class=\"codespan\">barBoxplotScaleOut</code>: barBoxplot 图元沿着中值线生长的动画</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.encode":{"desc":"<p>设置图元的视觉通道编码，默认支持三种数据变化状态：</p>\n<ul>\n<li><code class=\"codespan\">enter</code> 新增数据元素</li>\n<li><code class=\"codespan\">update</code> 数据元素更新</li>\n<li><code class=\"codespan\">exit</code> 数据元素被删除</li>\n</ul>\n<p>注意，这里的数据状态是根据<code class=\"codespan\">mark</code>的<code class=\"codespan\">key</code>自动生成的，我们会针对<code class=\"codespan\">mark</code>的绑定数据，根据<code class=\"codespan\">key</code>的配置，计算数据对应的唯一标志符，数据更新后，如果对应的唯一标志符不存在了，则状态为<code class=\"codespan\">exit</code>，如果存在，则为<code class=\"codespan\">update</code>；如果之前的数据不存在改唯一标志符，则数据元素对应的状态为<code class=\"codespan\">enter</code></p>\n<p>默认支持一种交互状态：</p>\n<ul>\n<li><code class=\"codespan\">hover</code> 鼠标 hover 到具体的图形上，给图形设置对应的视觉通道编码</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.encode.enter":{"desc":"<p>设置图元在数据初始化状态执行的视觉通道映射，注意数据更新的时候不再执行</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.barBoxplot.encode.enter.max":{"desc":"<p>图元最大值坐标</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.min":{"desc":"<p>图元最小值坐标</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.q1":{"desc":"<p>图元 1/4 值坐标</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.q3":{"desc":"<p>图元 3/4 值坐标</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.median":{"desc":"<p>图元中值坐标</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.minMaxFillOpacity":{"desc":"<p>最大最小值柱子的填充不透明度</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.minMaxWidth":{"desc":"<p>最大最小值柱子的宽度</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.minMaxHeight":{"desc":"<p>最大最小值柱子的高度</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.q1q3Width":{"desc":"<p>q1q3 值柱子的宽度</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.q1q3Height":{"desc":"<p>q1q3 值柱子的高度</p>\n<!-- base channels -->\n"},"glyph.glyphType.barBoxplot.encode.enter.x":{"desc":"<p>图元的 x 坐标</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.y":{"desc":"<p>图元 y 坐标</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.barBoxplot.encode.enter.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.barBoxplot.encode.enter.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.encode.enter.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.encode.enter.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.outerBorder":{"desc":"<p>外描边</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.innerBorder":{"desc":"<p>内描边</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.barBoxplot.encode.enter.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.encode.enter.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.texture":{"desc":"<p>图元纹理</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.blur":{"desc":"<p>图元边缘模糊</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.encode.update":{"desc":"<p>设置图元在数据更新状态执行的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.barBoxplot.encode.update.max":{"desc":"<p>图元最大值坐标</p>\n"},"glyph.glyphType.barBoxplot.encode.update.min":{"desc":"<p>图元最小值坐标</p>\n"},"glyph.glyphType.barBoxplot.encode.update.q1":{"desc":"<p>图元 1/4 值坐标</p>\n"},"glyph.glyphType.barBoxplot.encode.update.q3":{"desc":"<p>图元 3/4 值坐标</p>\n"},"glyph.glyphType.barBoxplot.encode.update.median":{"desc":"<p>图元中值坐标</p>\n"},"glyph.glyphType.barBoxplot.encode.update.minMaxFillOpacity":{"desc":"<p>最大最小值柱子的填充不透明度</p>\n"},"glyph.glyphType.barBoxplot.encode.update.minMaxWidth":{"desc":"<p>最大最小值柱子的宽度</p>\n"},"glyph.glyphType.barBoxplot.encode.update.minMaxHeight":{"desc":"<p>最大最小值柱子的高度</p>\n"},"glyph.glyphType.barBoxplot.encode.update.q1q3Width":{"desc":"<p>q1q3 值柱子的宽度</p>\n"},"glyph.glyphType.barBoxplot.encode.update.q1q3Height":{"desc":"<p>q1q3 值柱子的高度</p>\n<!-- base channels -->\n"},"glyph.glyphType.barBoxplot.encode.update.x":{"desc":"<p>图元的 x 坐标</p>\n"},"glyph.glyphType.barBoxplot.encode.update.y":{"desc":"<p>图元 y 坐标</p>\n"},"glyph.glyphType.barBoxplot.encode.update.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"glyph.glyphType.barBoxplot.encode.update.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"glyph.glyphType.barBoxplot.encode.update.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.barBoxplot.encode.update.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"glyph.glyphType.barBoxplot.encode.update.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.barBoxplot.encode.update.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"glyph.glyphType.barBoxplot.encode.update.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"glyph.glyphType.barBoxplot.encode.update.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"glyph.glyphType.barBoxplot.encode.update.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"glyph.glyphType.barBoxplot.encode.update.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.encode.update.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.encode.update.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"glyph.glyphType.barBoxplot.encode.update.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"glyph.glyphType.barBoxplot.encode.update.outerBorder":{"desc":"<p>外描边</p>\n"},"glyph.glyphType.barBoxplot.encode.update.innerBorder":{"desc":"<p>内描边</p>\n"},"glyph.glyphType.barBoxplot.encode.update.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"glyph.glyphType.barBoxplot.encode.update.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.barBoxplot.encode.update.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"glyph.glyphType.barBoxplot.encode.update.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"glyph.glyphType.barBoxplot.encode.update.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"glyph.glyphType.barBoxplot.encode.update.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"glyph.glyphType.barBoxplot.encode.update.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"glyph.glyphType.barBoxplot.encode.update.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"glyph.glyphType.barBoxplot.encode.update.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"glyph.glyphType.barBoxplot.encode.update.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.barBoxplot.encode.update.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.barBoxplot.encode.update.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.barBoxplot.encode.update.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"glyph.glyphType.barBoxplot.encode.update.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"glyph.glyphType.barBoxplot.encode.update.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"glyph.glyphType.barBoxplot.encode.update.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.encode.update.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"glyph.glyphType.barBoxplot.encode.update.texture":{"desc":"<p>图元纹理</p>\n"},"glyph.glyphType.barBoxplot.encode.update.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"glyph.glyphType.barBoxplot.encode.update.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"glyph.glyphType.barBoxplot.encode.update.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"glyph.glyphType.barBoxplot.encode.update.blur":{"desc":"<p>图元边缘模糊</p>\n"},"glyph.glyphType.barBoxplot.encode.update.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.encode.exit":{"desc":"<p>设置图元在数据被删除的状态下执行的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.barBoxplot.encode.exit.max":{"desc":"<p>图元最大值坐标</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.min":{"desc":"<p>图元最小值坐标</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.q1":{"desc":"<p>图元 1/4 值坐标</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.q3":{"desc":"<p>图元 3/4 值坐标</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.median":{"desc":"<p>图元中值坐标</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.minMaxFillOpacity":{"desc":"<p>最大最小值柱子的填充不透明度</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.minMaxWidth":{"desc":"<p>最大最小值柱子的宽度</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.minMaxHeight":{"desc":"<p>最大最小值柱子的高度</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.q1q3Width":{"desc":"<p>q1q3 值柱子的宽度</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.q1q3Height":{"desc":"<p>q1q3 值柱子的高度</p>\n<!-- base channels -->\n"},"glyph.glyphType.barBoxplot.encode.exit.x":{"desc":"<p>图元的 x 坐标</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.y":{"desc":"<p>图元 y 坐标</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.barBoxplot.encode.exit.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.barBoxplot.encode.exit.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.encode.exit.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.encode.exit.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.outerBorder":{"desc":"<p>外描边</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.innerBorder":{"desc":"<p>内描边</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.barBoxplot.encode.exit.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.encode.exit.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.texture":{"desc":"<p>图元纹理</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.blur":{"desc":"<p>图元边缘模糊</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.encode.hover":{"desc":"<p>设置<code class=\"codespan\">hover</code>状态的时候，图元对应的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.barBoxplot.encode.hover.max":{"desc":"<p>图元最大值坐标</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.min":{"desc":"<p>图元最小值坐标</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.q1":{"desc":"<p>图元 1/4 值坐标</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.q3":{"desc":"<p>图元 3/4 值坐标</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.median":{"desc":"<p>图元中值坐标</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.minMaxFillOpacity":{"desc":"<p>最大最小值柱子的填充不透明度</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.minMaxWidth":{"desc":"<p>最大最小值柱子的宽度</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.minMaxHeight":{"desc":"<p>最大最小值柱子的高度</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.q1q3Width":{"desc":"<p>q1q3 值柱子的宽度</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.q1q3Height":{"desc":"<p>q1q3 值柱子的高度</p>\n<!-- base channels -->\n"},"glyph.glyphType.barBoxplot.encode.hover.x":{"desc":"<p>图元的 x 坐标</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.y":{"desc":"<p>图元 y 坐标</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.barBoxplot.encode.hover.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.barBoxplot.encode.hover.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.encode.hover.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.encode.hover.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.outerBorder":{"desc":"<p>外描边</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.innerBorder":{"desc":"<p>内描边</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.barBoxplot.encode.hover.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.encode.hover.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.texture":{"desc":"<p>图元纹理</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.blur":{"desc":"<p>图元边缘模糊</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.zIndex":{"desc":"<p>设置<code class=\"codespan\">mark</code>图元对应的容器图形(group)的 zIndex</p>\n"},"glyph.glyphType.barBoxplot.interactive":{"desc":"<p>类型：<code class=\"codespan\">boolean</code>\n是否必传： 否</p>\n"},"glyph.glyphType.barBoxplot.context":{"desc":"<p>设置图元的上下文参数</p>\n"},"glyph.glyphType.barBoxplot.setCustomizedShape":{"desc":"<p>设置自定义形状的回调函数，对应的 ts 类型定位如下：</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>其中<code class=\"codespan\">ICustomPath2D</code> 为 VRender 提供的绘制自定义的路径一个工具类</p>\n"},"glyph.glyphType.barBoxplot.support3d":{"desc":"<p>当画布设置了 3d 视角的时候，是否支持 3d 模式</p>\n"},"glyph.glyphType.barBoxplot.group":{"desc":"<p>设置父图元，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 父图元对应的 id</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> 父图元对应的语法元素，一般用于 API 调用场景</li>\n</ul>\n<p>如果不设置，会默认挂在到画布的根节点下面</p>\n"},"glyph.glyphType.barBoxplot.from":{"desc":"<p>ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>通过<code class=\"codespan\">data</code> 属性值，申明图元依赖的数据</p>\n"},"glyph.glyphType.barBoxplot.key":{"desc":"<p>设置图元数据元素的唯一标志符，用于计算图形元素的数据状态，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.sort":{"desc":"<p>对图元中的所有图形元素进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"glyph.glyphType.barBoxplot.groupBy":{"desc":"<p>设置分组的属性，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置分组<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析分组<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.groupSort":{"desc":"<p>对图元中的分组进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"glyph.glyphType.barBoxplot.coordinate":{"desc":"<p>设置该图元关联的坐标系对应的 id 或者坐标系对应的图形元素</p>\n"},"glyph.glyphType.barBoxplot.state":{"desc":"<p>设置当前图元所有图形元素的状态值，支持三种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置图形的状态，比如说:<code class=\"codespan\">{ state: &#39;selected&#39;}</code> 就是给所有的图形设置状态为<code class=\"codespan\">&#39;selected&#39;</code>，通常这种情况，<code class=\"codespan\">encode</code> 中也会设置<code class=\"codespan\">&#39;selected&#39;</code>状态对应的图形通道映射</li>\n<li><code class=\"codespan\">string[]</code> 给图形设置多个状态，可以配置<code class=\"codespan\">stateSort</code>来影响对应状态执行图形通道映射的顺序</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析状态值的回调函数，返回参数为<code class=\"codespan\">string | string[]</code>，对应的 ts 类型定义为：</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"glyph.glyphType.barBoxplot.stateSort":{"desc":"<p>设置当前图元所有图形元素的状态值的排序函数，会影响状态对应的图形通道映射的顺序，最先执行的状态可能被后续的状态覆盖图形通道映射结果，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"glyph.glyphType.barBoxplot.transform":{"desc":"<p>设置图元对应的变换，所有的数据变换都可以配置在图元上，用于对图元的<code class=\"codespan\">join data</code> 执行变换；\n另外一种类型的变换就是对图形元素执行的变换，比如说<code class=\"codespan\">dodge</code>；\n通用的类型定义如下：</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>每中变换支持的参数不同</p>\n"},"glyph.glyphType.barBoxplot.layout":{"desc":"<p>设置图元的布局参数，图元在参与布局的时候，存在两种角色：</p>\n<ul>\n<li>&#39;container&#39; 容器图元，一般是<code class=\"codespan\">group</code>图元</li>\n<li>&#39;item&#39; 布局子元素，作为容器图元的子节点</li>\n</ul>\n<p>注意，我们仅支持一层布局，如果是多层嵌套布局，建议使用自定义的布局方案进行实现；</p>\n<p>现在支持两种内容的布局：<code class=\"codespan\">grid</code> 布局 和 <code class=\"codespan\">relative</code>布局，相关类型定义如下</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>如果想要设置自定义的布局方案，<code class=\"codespan\">layout</code>也支持直接设置回调函数，回调函数的定义如下：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"glyph.glyphType.barBoxplot.layout.display":{"desc":"<p>容器图元设置布局的类型，支持两种配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> 相对布局</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> 网格布局</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.layout.callback":{"desc":"<p>自定义该图元的回调函数，ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"glyph.glyphType.barBoxplot.layout.skipBeforeLayouted":{"desc":"<p>在布局完成前，跳过执行阶段</p>\n"},"glyph.glyphType.barBoxplot.layout.updateViewSignals":{"desc":"<p>是否更新默认的视图信号，也就是：<code class=\"codespan\">padding</code>、<code class=\"codespan\">viewWidth</code> 和 <code class=\"codespan\">viewHeight</code></p>\n<p>只能在设置了<code class=\"codespan\">{ layout: { display: &#39;relative&#39;} }</code>的容器图元上设置该属性</p>\n"},"glyph.glyphType.barBoxplot.layout.maxChildWidth":{"desc":"<p>相对布局的父图元，设置子图元的最大宽度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的宽度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.layout.maxChildHeight":{"desc":"<p>相对布局的父图元，设置子图元的最大高度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的高度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.layout.position":{"desc":"<p>设置相对布局的子图元的位置，支持的配置有：</p>\n<ul>\n<li>&#39;top&#39; 相对于父图元的顶部</li>\n<li>&#39;bottom&#39; 相对于父图元的底部</li>\n<li>&#39;left&#39; 相对于父图元的左侧</li>\n<li>&#39;right&#39; 相对于父图元的右侧</li>\n<li>&#39;content&#39; 相对于父图元的中心，也就是内容区域</li>\n<li>&#39;auto&#39; 图元设置了坐标系的时候，根据关联的<code class=\"codespan\">scale</code>，自定计算相对于父图元的位置</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.layout.padding":{"desc":"<p>子图元内边距，单位 px，默认各方向内边距为 0，接受数值、数值数组以及对象设置。</p>\n<p>使用示例：</p>\n<pre><code class=\"lang-ts\">// 数值类型，设置内边距为 5\npadding: 5;\n// 数值数组，设置上下的内边距为 5，左右的内边距为 10，用法同 CSS 盒模型\npadding: [5, 10];\n// 数值数组，分别设置四个方向的内边距\npadding: [\n  5, // 上\n  10, // 右\n  5, // 下\n  10 // 左\n];\n// 对象类型\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"glyph.glyphType.barBoxplot.layout.gridTemplateRows":{"desc":"<p>网格布局的父图元设置行的高度</p>\n"},"glyph.glyphType.barBoxplot.layout.gridTemplateColumns":{"desc":"<p>网格布局的父图元设置列的宽度</p>\n"},"glyph.glyphType.barBoxplot.layout.gridRowGap":{"desc":"<p>网格布局的父图元设置行行距</p>\n"},"glyph.glyphType.barBoxplot.layout.gridColumnGap":{"desc":"<p>网格布局的父图元设置列间距</p>\n"},"glyph.glyphType.barBoxplot.layout.gridRowStart":{"desc":"<p>网格布局的子图元设置行开始的位置</p>\n"},"glyph.glyphType.barBoxplot.layout.gridRowEnd":{"desc":"<p>网格布局的子图元设置行结束的位置</p>\n"},"glyph.glyphType.barBoxplot.layout.gridColumnStart":{"desc":"<p>网格布局的子图元设置列开始的位置</p>\n"},"glyph.glyphType.barBoxplot.layout.gridColumnEnd":{"desc":"<p>网格布局的子图元设置列结束的位置</p>\n"},"glyph.glyphType.boxplot":{"desc":"<p>使用 boxplot 图元前需要执行 <code class=\"codespan\">registerBoxplotGlyph()</code> 对 boxplot 图元进行注册</p>\n"},"glyph.glyphType.boxplot.glyphType":{"desc":"<p>将 glyph 类型设置为 <code class=\"codespan\">boxplot</code></p>\n"},"glyph.glyphType.boxplot.glyphConfig":{"desc":"<p>支持的 glyph 配置包含：</p>\n<ul>\n<li><code class=\"codespan\">direction</code>(&#39;vertical&#39;|&#39;horizontal&#39;): boxplot 图元的方向，默认为 <code class=\"codespan\">&#39;vertical&#39;</code></li>\n</ul>\n"},"glyph.glyphType.boxplot.animation":{"desc":"<p>支持的内置动画类型包含：</p>\n<ul>\n<li><code class=\"codespan\">boxplotScaleIn</code>/<code class=\"codespan\">boxplotScaleOut</code>: boxplot 图元沿着中值线生长的动画</li>\n</ul>\n"},"glyph.glyphType.boxplot.encode":{"desc":"<p>设置图元的视觉通道编码，默认支持三种数据变化状态：</p>\n<ul>\n<li><code class=\"codespan\">enter</code> 新增数据元素</li>\n<li><code class=\"codespan\">update</code> 数据元素更新</li>\n<li><code class=\"codespan\">exit</code> 数据元素被删除</li>\n</ul>\n<p>注意，这里的数据状态是根据<code class=\"codespan\">mark</code>的<code class=\"codespan\">key</code>自动生成的，我们会针对<code class=\"codespan\">mark</code>的绑定数据，根据<code class=\"codespan\">key</code>的配置，计算数据对应的唯一标志符，数据更新后，如果对应的唯一标志符不存在了，则状态为<code class=\"codespan\">exit</code>，如果存在，则为<code class=\"codespan\">update</code>；如果之前的数据不存在改唯一标志符，则数据元素对应的状态为<code class=\"codespan\">enter</code></p>\n<p>默认支持一种交互状态：</p>\n<ul>\n<li><code class=\"codespan\">hover</code> 鼠标 hover 到具体的图形上，给图形设置对应的视觉通道编码</li>\n</ul>\n"},"glyph.glyphType.boxplot.encode.enter":{"desc":"<p>设置图元在数据初始化状态执行的视觉通道映射，注意数据更新的时候不再执行</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.boxplot.encode.enter.max":{"desc":"<p>图元最大值坐标</p>\n"},"glyph.glyphType.boxplot.encode.enter.min":{"desc":"<p>图元最小值坐标</p>\n"},"glyph.glyphType.boxplot.encode.enter.q1":{"desc":"<p>图元 1/4 值坐标</p>\n"},"glyph.glyphType.boxplot.encode.enter.q3":{"desc":"<p>图元 3/4 值坐标</p>\n"},"glyph.glyphType.boxplot.encode.enter.median":{"desc":"<p>图元中值坐标</p>\n"},"glyph.glyphType.boxplot.encode.enter.boxWidth":{"desc":"<p>q1q3 箱形部分的宽度</p>\n"},"glyph.glyphType.boxplot.encode.enter.boxHeight":{"desc":"<p>q1q3 箱形部分的高度</p>\n"},"glyph.glyphType.boxplot.encode.enter.ruleWidth":{"desc":"<p>minMax 线段部分的宽度</p>\n"},"glyph.glyphType.boxplot.encode.enter.ruleHeight":{"desc":"<p>minMax 线段部分的高度</p>\n<!-- base channels -->\n"},"glyph.glyphType.boxplot.encode.enter.x":{"desc":"<p>图元的 x 坐标</p>\n"},"glyph.glyphType.boxplot.encode.enter.y":{"desc":"<p>图元 y 坐标</p>\n"},"glyph.glyphType.boxplot.encode.enter.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"glyph.glyphType.boxplot.encode.enter.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"glyph.glyphType.boxplot.encode.enter.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.boxplot.encode.enter.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"glyph.glyphType.boxplot.encode.enter.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.boxplot.encode.enter.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"glyph.glyphType.boxplot.encode.enter.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"glyph.glyphType.boxplot.encode.enter.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"glyph.glyphType.boxplot.encode.enter.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"glyph.glyphType.boxplot.encode.enter.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.boxplot.encode.enter.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.boxplot.encode.enter.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"glyph.glyphType.boxplot.encode.enter.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"glyph.glyphType.boxplot.encode.enter.outerBorder":{"desc":"<p>外描边</p>\n"},"glyph.glyphType.boxplot.encode.enter.innerBorder":{"desc":"<p>内描边</p>\n"},"glyph.glyphType.boxplot.encode.enter.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"glyph.glyphType.boxplot.encode.enter.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.boxplot.encode.enter.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"glyph.glyphType.boxplot.encode.enter.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"glyph.glyphType.boxplot.encode.enter.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"glyph.glyphType.boxplot.encode.enter.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"glyph.glyphType.boxplot.encode.enter.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"glyph.glyphType.boxplot.encode.enter.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"glyph.glyphType.boxplot.encode.enter.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"glyph.glyphType.boxplot.encode.enter.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.boxplot.encode.enter.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.boxplot.encode.enter.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.boxplot.encode.enter.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"glyph.glyphType.boxplot.encode.enter.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"glyph.glyphType.boxplot.encode.enter.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"glyph.glyphType.boxplot.encode.enter.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"glyph.glyphType.boxplot.encode.enter.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"glyph.glyphType.boxplot.encode.enter.texture":{"desc":"<p>图元纹理</p>\n"},"glyph.glyphType.boxplot.encode.enter.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"glyph.glyphType.boxplot.encode.enter.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"glyph.glyphType.boxplot.encode.enter.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"glyph.glyphType.boxplot.encode.enter.blur":{"desc":"<p>图元边缘模糊</p>\n"},"glyph.glyphType.boxplot.encode.enter.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"glyph.glyphType.boxplot.encode.update":{"desc":"<p>设置图元在数据更新状态执行的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.boxplot.encode.update.max":{"desc":"<p>图元最大值坐标</p>\n"},"glyph.glyphType.boxplot.encode.update.min":{"desc":"<p>图元最小值坐标</p>\n"},"glyph.glyphType.boxplot.encode.update.q1":{"desc":"<p>图元 1/4 值坐标</p>\n"},"glyph.glyphType.boxplot.encode.update.q3":{"desc":"<p>图元 3/4 值坐标</p>\n"},"glyph.glyphType.boxplot.encode.update.median":{"desc":"<p>图元中值坐标</p>\n"},"glyph.glyphType.boxplot.encode.update.boxWidth":{"desc":"<p>q1q3 箱形部分的宽度</p>\n"},"glyph.glyphType.boxplot.encode.update.boxHeight":{"desc":"<p>q1q3 箱形部分的高度</p>\n"},"glyph.glyphType.boxplot.encode.update.ruleWidth":{"desc":"<p>minMax 线段部分的宽度</p>\n"},"glyph.glyphType.boxplot.encode.update.ruleHeight":{"desc":"<p>minMax 线段部分的高度</p>\n<!-- base channels -->\n"},"glyph.glyphType.boxplot.encode.update.x":{"desc":"<p>图元的 x 坐标</p>\n"},"glyph.glyphType.boxplot.encode.update.y":{"desc":"<p>图元 y 坐标</p>\n"},"glyph.glyphType.boxplot.encode.update.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"glyph.glyphType.boxplot.encode.update.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"glyph.glyphType.boxplot.encode.update.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.boxplot.encode.update.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"glyph.glyphType.boxplot.encode.update.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.boxplot.encode.update.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"glyph.glyphType.boxplot.encode.update.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"glyph.glyphType.boxplot.encode.update.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"glyph.glyphType.boxplot.encode.update.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"glyph.glyphType.boxplot.encode.update.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.boxplot.encode.update.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.boxplot.encode.update.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"glyph.glyphType.boxplot.encode.update.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"glyph.glyphType.boxplot.encode.update.outerBorder":{"desc":"<p>外描边</p>\n"},"glyph.glyphType.boxplot.encode.update.innerBorder":{"desc":"<p>内描边</p>\n"},"glyph.glyphType.boxplot.encode.update.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"glyph.glyphType.boxplot.encode.update.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.boxplot.encode.update.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"glyph.glyphType.boxplot.encode.update.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"glyph.glyphType.boxplot.encode.update.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"glyph.glyphType.boxplot.encode.update.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"glyph.glyphType.boxplot.encode.update.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"glyph.glyphType.boxplot.encode.update.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"glyph.glyphType.boxplot.encode.update.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"glyph.glyphType.boxplot.encode.update.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.boxplot.encode.update.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.boxplot.encode.update.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.boxplot.encode.update.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"glyph.glyphType.boxplot.encode.update.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"glyph.glyphType.boxplot.encode.update.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"glyph.glyphType.boxplot.encode.update.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"glyph.glyphType.boxplot.encode.update.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"glyph.glyphType.boxplot.encode.update.texture":{"desc":"<p>图元纹理</p>\n"},"glyph.glyphType.boxplot.encode.update.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"glyph.glyphType.boxplot.encode.update.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"glyph.glyphType.boxplot.encode.update.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"glyph.glyphType.boxplot.encode.update.blur":{"desc":"<p>图元边缘模糊</p>\n"},"glyph.glyphType.boxplot.encode.update.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"glyph.glyphType.boxplot.encode.exit":{"desc":"<p>设置图元在数据被删除的状态下执行的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.boxplot.encode.exit.max":{"desc":"<p>图元最大值坐标</p>\n"},"glyph.glyphType.boxplot.encode.exit.min":{"desc":"<p>图元最小值坐标</p>\n"},"glyph.glyphType.boxplot.encode.exit.q1":{"desc":"<p>图元 1/4 值坐标</p>\n"},"glyph.glyphType.boxplot.encode.exit.q3":{"desc":"<p>图元 3/4 值坐标</p>\n"},"glyph.glyphType.boxplot.encode.exit.median":{"desc":"<p>图元中值坐标</p>\n"},"glyph.glyphType.boxplot.encode.exit.boxWidth":{"desc":"<p>q1q3 箱形部分的宽度</p>\n"},"glyph.glyphType.boxplot.encode.exit.boxHeight":{"desc":"<p>q1q3 箱形部分的高度</p>\n"},"glyph.glyphType.boxplot.encode.exit.ruleWidth":{"desc":"<p>minMax 线段部分的宽度</p>\n"},"glyph.glyphType.boxplot.encode.exit.ruleHeight":{"desc":"<p>minMax 线段部分的高度</p>\n<!-- base channels -->\n"},"glyph.glyphType.boxplot.encode.exit.x":{"desc":"<p>图元的 x 坐标</p>\n"},"glyph.glyphType.boxplot.encode.exit.y":{"desc":"<p>图元 y 坐标</p>\n"},"glyph.glyphType.boxplot.encode.exit.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"glyph.glyphType.boxplot.encode.exit.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"glyph.glyphType.boxplot.encode.exit.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.boxplot.encode.exit.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"glyph.glyphType.boxplot.encode.exit.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.boxplot.encode.exit.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"glyph.glyphType.boxplot.encode.exit.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"glyph.glyphType.boxplot.encode.exit.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"glyph.glyphType.boxplot.encode.exit.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"glyph.glyphType.boxplot.encode.exit.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.boxplot.encode.exit.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.boxplot.encode.exit.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"glyph.glyphType.boxplot.encode.exit.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"glyph.glyphType.boxplot.encode.exit.outerBorder":{"desc":"<p>外描边</p>\n"},"glyph.glyphType.boxplot.encode.exit.innerBorder":{"desc":"<p>内描边</p>\n"},"glyph.glyphType.boxplot.encode.exit.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"glyph.glyphType.boxplot.encode.exit.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.boxplot.encode.exit.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"glyph.glyphType.boxplot.encode.exit.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"glyph.glyphType.boxplot.encode.exit.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"glyph.glyphType.boxplot.encode.exit.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"glyph.glyphType.boxplot.encode.exit.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"glyph.glyphType.boxplot.encode.exit.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"glyph.glyphType.boxplot.encode.exit.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"glyph.glyphType.boxplot.encode.exit.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.boxplot.encode.exit.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.boxplot.encode.exit.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.boxplot.encode.exit.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"glyph.glyphType.boxplot.encode.exit.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"glyph.glyphType.boxplot.encode.exit.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"glyph.glyphType.boxplot.encode.exit.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"glyph.glyphType.boxplot.encode.exit.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"glyph.glyphType.boxplot.encode.exit.texture":{"desc":"<p>图元纹理</p>\n"},"glyph.glyphType.boxplot.encode.exit.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"glyph.glyphType.boxplot.encode.exit.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"glyph.glyphType.boxplot.encode.exit.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"glyph.glyphType.boxplot.encode.exit.blur":{"desc":"<p>图元边缘模糊</p>\n"},"glyph.glyphType.boxplot.encode.exit.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"glyph.glyphType.boxplot.encode.hover":{"desc":"<p>设置<code class=\"codespan\">hover</code>状态的时候，图元对应的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.boxplot.encode.hover.max":{"desc":"<p>图元最大值坐标</p>\n"},"glyph.glyphType.boxplot.encode.hover.min":{"desc":"<p>图元最小值坐标</p>\n"},"glyph.glyphType.boxplot.encode.hover.q1":{"desc":"<p>图元 1/4 值坐标</p>\n"},"glyph.glyphType.boxplot.encode.hover.q3":{"desc":"<p>图元 3/4 值坐标</p>\n"},"glyph.glyphType.boxplot.encode.hover.median":{"desc":"<p>图元中值坐标</p>\n"},"glyph.glyphType.boxplot.encode.hover.boxWidth":{"desc":"<p>q1q3 箱形部分的宽度</p>\n"},"glyph.glyphType.boxplot.encode.hover.boxHeight":{"desc":"<p>q1q3 箱形部分的高度</p>\n"},"glyph.glyphType.boxplot.encode.hover.ruleWidth":{"desc":"<p>minMax 线段部分的宽度</p>\n"},"glyph.glyphType.boxplot.encode.hover.ruleHeight":{"desc":"<p>minMax 线段部分的高度</p>\n<!-- base channels -->\n"},"glyph.glyphType.boxplot.encode.hover.x":{"desc":"<p>图元的 x 坐标</p>\n"},"glyph.glyphType.boxplot.encode.hover.y":{"desc":"<p>图元 y 坐标</p>\n"},"glyph.glyphType.boxplot.encode.hover.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"glyph.glyphType.boxplot.encode.hover.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"glyph.glyphType.boxplot.encode.hover.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.boxplot.encode.hover.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"glyph.glyphType.boxplot.encode.hover.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.boxplot.encode.hover.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"glyph.glyphType.boxplot.encode.hover.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"glyph.glyphType.boxplot.encode.hover.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"glyph.glyphType.boxplot.encode.hover.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"glyph.glyphType.boxplot.encode.hover.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.boxplot.encode.hover.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.boxplot.encode.hover.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"glyph.glyphType.boxplot.encode.hover.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"glyph.glyphType.boxplot.encode.hover.outerBorder":{"desc":"<p>外描边</p>\n"},"glyph.glyphType.boxplot.encode.hover.innerBorder":{"desc":"<p>内描边</p>\n"},"glyph.glyphType.boxplot.encode.hover.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"glyph.glyphType.boxplot.encode.hover.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.boxplot.encode.hover.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"glyph.glyphType.boxplot.encode.hover.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"glyph.glyphType.boxplot.encode.hover.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"glyph.glyphType.boxplot.encode.hover.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"glyph.glyphType.boxplot.encode.hover.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"glyph.glyphType.boxplot.encode.hover.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"glyph.glyphType.boxplot.encode.hover.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"glyph.glyphType.boxplot.encode.hover.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.boxplot.encode.hover.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.boxplot.encode.hover.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.boxplot.encode.hover.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"glyph.glyphType.boxplot.encode.hover.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"glyph.glyphType.boxplot.encode.hover.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"glyph.glyphType.boxplot.encode.hover.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"glyph.glyphType.boxplot.encode.hover.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"glyph.glyphType.boxplot.encode.hover.texture":{"desc":"<p>图元纹理</p>\n"},"glyph.glyphType.boxplot.encode.hover.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"glyph.glyphType.boxplot.encode.hover.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"glyph.glyphType.boxplot.encode.hover.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"glyph.glyphType.boxplot.encode.hover.blur":{"desc":"<p>图元边缘模糊</p>\n"},"glyph.glyphType.boxplot.encode.hover.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"glyph.glyphType.boxplot.zIndex":{"desc":"<p>设置<code class=\"codespan\">mark</code>图元对应的容器图形(group)的 zIndex</p>\n"},"glyph.glyphType.boxplot.interactive":{"desc":"<p>类型：<code class=\"codespan\">boolean</code>\n是否必传： 否</p>\n"},"glyph.glyphType.boxplot.context":{"desc":"<p>设置图元的上下文参数</p>\n"},"glyph.glyphType.boxplot.setCustomizedShape":{"desc":"<p>设置自定义形状的回调函数，对应的 ts 类型定位如下：</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>其中<code class=\"codespan\">ICustomPath2D</code> 为 VRender 提供的绘制自定义的路径一个工具类</p>\n"},"glyph.glyphType.boxplot.support3d":{"desc":"<p>当画布设置了 3d 视角的时候，是否支持 3d 模式</p>\n"},"glyph.glyphType.boxplot.group":{"desc":"<p>设置父图元，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 父图元对应的 id</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> 父图元对应的语法元素，一般用于 API 调用场景</li>\n</ul>\n<p>如果不设置，会默认挂在到画布的根节点下面</p>\n"},"glyph.glyphType.boxplot.from":{"desc":"<p>ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>通过<code class=\"codespan\">data</code> 属性值，申明图元依赖的数据</p>\n"},"glyph.glyphType.boxplot.key":{"desc":"<p>设置图元数据元素的唯一标志符，用于计算图形元素的数据状态，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"glyph.glyphType.boxplot.sort":{"desc":"<p>对图元中的所有图形元素进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"glyph.glyphType.boxplot.groupBy":{"desc":"<p>设置分组的属性，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置分组<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析分组<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"glyph.glyphType.boxplot.groupSort":{"desc":"<p>对图元中的分组进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"glyph.glyphType.boxplot.coordinate":{"desc":"<p>设置该图元关联的坐标系对应的 id 或者坐标系对应的图形元素</p>\n"},"glyph.glyphType.boxplot.state":{"desc":"<p>设置当前图元所有图形元素的状态值，支持三种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置图形的状态，比如说:<code class=\"codespan\">{ state: &#39;selected&#39;}</code> 就是给所有的图形设置状态为<code class=\"codespan\">&#39;selected&#39;</code>，通常这种情况，<code class=\"codespan\">encode</code> 中也会设置<code class=\"codespan\">&#39;selected&#39;</code>状态对应的图形通道映射</li>\n<li><code class=\"codespan\">string[]</code> 给图形设置多个状态，可以配置<code class=\"codespan\">stateSort</code>来影响对应状态执行图形通道映射的顺序</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析状态值的回调函数，返回参数为<code class=\"codespan\">string | string[]</code>，对应的 ts 类型定义为：</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"glyph.glyphType.boxplot.stateSort":{"desc":"<p>设置当前图元所有图形元素的状态值的排序函数，会影响状态对应的图形通道映射的顺序，最先执行的状态可能被后续的状态覆盖图形通道映射结果，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"glyph.glyphType.boxplot.transform":{"desc":"<p>设置图元对应的变换，所有的数据变换都可以配置在图元上，用于对图元的<code class=\"codespan\">join data</code> 执行变换；\n另外一种类型的变换就是对图形元素执行的变换，比如说<code class=\"codespan\">dodge</code>；\n通用的类型定义如下：</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>每中变换支持的参数不同</p>\n"},"glyph.glyphType.boxplot.layout":{"desc":"<p>设置图元的布局参数，图元在参与布局的时候，存在两种角色：</p>\n<ul>\n<li>&#39;container&#39; 容器图元，一般是<code class=\"codespan\">group</code>图元</li>\n<li>&#39;item&#39; 布局子元素，作为容器图元的子节点</li>\n</ul>\n<p>注意，我们仅支持一层布局，如果是多层嵌套布局，建议使用自定义的布局方案进行实现；</p>\n<p>现在支持两种内容的布局：<code class=\"codespan\">grid</code> 布局 和 <code class=\"codespan\">relative</code>布局，相关类型定义如下</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>如果想要设置自定义的布局方案，<code class=\"codespan\">layout</code>也支持直接设置回调函数，回调函数的定义如下：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"glyph.glyphType.boxplot.layout.display":{"desc":"<p>容器图元设置布局的类型，支持两种配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> 相对布局</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> 网格布局</li>\n</ul>\n"},"glyph.glyphType.boxplot.layout.callback":{"desc":"<p>自定义该图元的回调函数，ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"glyph.glyphType.boxplot.layout.skipBeforeLayouted":{"desc":"<p>在布局完成前，跳过执行阶段</p>\n"},"glyph.glyphType.boxplot.layout.updateViewSignals":{"desc":"<p>是否更新默认的视图信号，也就是：<code class=\"codespan\">padding</code>、<code class=\"codespan\">viewWidth</code> 和 <code class=\"codespan\">viewHeight</code></p>\n<p>只能在设置了<code class=\"codespan\">{ layout: { display: &#39;relative&#39;} }</code>的容器图元上设置该属性</p>\n"},"glyph.glyphType.boxplot.layout.maxChildWidth":{"desc":"<p>相对布局的父图元，设置子图元的最大宽度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的宽度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"glyph.glyphType.boxplot.layout.maxChildHeight":{"desc":"<p>相对布局的父图元，设置子图元的最大高度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的高度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"glyph.glyphType.boxplot.layout.position":{"desc":"<p>设置相对布局的子图元的位置，支持的配置有：</p>\n<ul>\n<li>&#39;top&#39; 相对于父图元的顶部</li>\n<li>&#39;bottom&#39; 相对于父图元的底部</li>\n<li>&#39;left&#39; 相对于父图元的左侧</li>\n<li>&#39;right&#39; 相对于父图元的右侧</li>\n<li>&#39;content&#39; 相对于父图元的中心，也就是内容区域</li>\n<li>&#39;auto&#39; 图元设置了坐标系的时候，根据关联的<code class=\"codespan\">scale</code>，自定计算相对于父图元的位置</li>\n</ul>\n"},"glyph.glyphType.boxplot.layout.padding":{"desc":"<p>子图元内边距，单位 px，默认各方向内边距为 0，接受数值、数值数组以及对象设置。</p>\n<p>使用示例：</p>\n<pre><code class=\"lang-ts\">// 数值类型，设置内边距为 5\npadding: 5;\n// 数值数组，设置上下的内边距为 5，左右的内边距为 10，用法同 CSS 盒模型\npadding: [5, 10];\n// 数值数组，分别设置四个方向的内边距\npadding: [\n  5, // 上\n  10, // 右\n  5, // 下\n  10 // 左\n];\n// 对象类型\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"glyph.glyphType.boxplot.layout.gridTemplateRows":{"desc":"<p>网格布局的父图元设置行的高度</p>\n"},"glyph.glyphType.boxplot.layout.gridTemplateColumns":{"desc":"<p>网格布局的父图元设置列的宽度</p>\n"},"glyph.glyphType.boxplot.layout.gridRowGap":{"desc":"<p>网格布局的父图元设置行行距</p>\n"},"glyph.glyphType.boxplot.layout.gridColumnGap":{"desc":"<p>网格布局的父图元设置列间距</p>\n"},"glyph.glyphType.boxplot.layout.gridRowStart":{"desc":"<p>网格布局的子图元设置行开始的位置</p>\n"},"glyph.glyphType.boxplot.layout.gridRowEnd":{"desc":"<p>网格布局的子图元设置行结束的位置</p>\n"},"glyph.glyphType.boxplot.layout.gridColumnStart":{"desc":"<p>网格布局的子图元设置列开始的位置</p>\n"},"glyph.glyphType.boxplot.layout.gridColumnEnd":{"desc":"<p>网格布局的子图元设置列结束的位置</p>\n"},"glyph.glyphType.linkPath":{"desc":"<p>使用 linkPath 图元前需要执行 <code class=\"codespan\">registerLinkPathGlyph()</code> 对 linkPath 图元进行注册</p>\n"},"glyph.glyphType.linkPath.glyphType":{"desc":"<p>将 glyph 类型设置为 <code class=\"codespan\">linkPath</code></p>\n"},"glyph.glyphType.linkPath.glyphConfig":{"desc":"<p>支持的 glyph 配置包含：</p>\n<ul>\n<li><code class=\"codespan\">direction</code>: <code class=\"codespan\">&#39;vertical&#39;|&#39;horizontal&#39;</code>，linkPath 图元的方向，默认为 <code class=\"codespan\">&#39;vertical&#39;</code></li>\n</ul>\n"},"glyph.glyphType.linkPath.encode":{"desc":"<p>设置图元的视觉通道编码，默认支持三种数据变化状态：</p>\n<ul>\n<li><code class=\"codespan\">enter</code> 新增数据元素</li>\n<li><code class=\"codespan\">update</code> 数据元素更新</li>\n<li><code class=\"codespan\">exit</code> 数据元素被删除</li>\n</ul>\n<p>注意，这里的数据状态是根据<code class=\"codespan\">mark</code>的<code class=\"codespan\">key</code>自动生成的，我们会针对<code class=\"codespan\">mark</code>的绑定数据，根据<code class=\"codespan\">key</code>的配置，计算数据对应的唯一标志符，数据更新后，如果对应的唯一标志符不存在了，则状态为<code class=\"codespan\">exit</code>，如果存在，则为<code class=\"codespan\">update</code>；如果之前的数据不存在改唯一标志符，则数据元素对应的状态为<code class=\"codespan\">enter</code></p>\n<p>默认支持一种交互状态：</p>\n<ul>\n<li><code class=\"codespan\">hover</code> 鼠标 hover 到具体的图形上，给图形设置对应的视觉通道编码</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.enter":{"desc":"<p>设置图元在数据初始化状态执行的视觉通道映射，注意数据更新的时候不再执行</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.linkPath.encode.enter.x0":{"desc":"<p>最小水平位置</p>\n"},"glyph.glyphType.linkPath.encode.enter.x1":{"desc":"<p>最大水平位置</p>\n"},"glyph.glyphType.linkPath.encode.enter.y0":{"desc":"<p>最小垂直位置</p>\n"},"glyph.glyphType.linkPath.encode.enter.y1":{"desc":"<p>最大垂直位置</p>\n"},"glyph.glyphType.linkPath.encode.enter.thickness":{"desc":"<p>图元的厚度</p>\n"},"glyph.glyphType.linkPath.encode.enter.curvature":{"desc":"<p>图元的曲率，默认为 0.5</p>\n"},"glyph.glyphType.linkPath.encode.enter.round":{"desc":"<p>图元路径计算是否取整</p>\n"},"glyph.glyphType.linkPath.encode.enter.ratio":{"desc":"<p>普通路径的厚度占比</p>\n"},"glyph.glyphType.linkPath.encode.enter.align":{"desc":"<p>图元的对齐方式</p>\n<ul>\n<li>&#39;start&#39;</li>\n<li>&#39;end&#39;</li>\n<li>&#39;center&#39;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.enter.pathType":{"desc":"<p>图元的渲染形状</p>\n<ul>\n<li>&#39;line&#39;</li>\n<li>&#39;smooth&#39;</li>\n<li>&#39;polyline&#39;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.enter.startArrow":{"desc":"<p>是否开启开端的箭头</p>\n"},"glyph.glyphType.linkPath.encode.enter.endArrow":{"desc":"<p>是否开启终端的箭头</p>\n"},"glyph.glyphType.linkPath.encode.enter.backgroundStyle":{"desc":"<p>图元背景的样式</p>\n"},"glyph.glyphType.linkPath.encode.enter.direction":{"desc":"<p>图元的朝向</p>\n<ul>\n<li>&#39;horizontal&#39;</li>\n<li>&#39;vertical&#39;</li>\n<li>&#39;LR&#39;</li>\n<li>&#39;RL&#39;</li>\n<li>&#39;TB&#39;</li>\n<li>&#39;BL&#39;</li>\n<li>&#39;radial&#39;</li>\n</ul>\n<!-- base channels -->\n"},"glyph.glyphType.linkPath.encode.enter.x":{"desc":"<p>图元的 x 坐标</p>\n"},"glyph.glyphType.linkPath.encode.enter.y":{"desc":"<p>图元 y 坐标</p>\n"},"glyph.glyphType.linkPath.encode.enter.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"glyph.glyphType.linkPath.encode.enter.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"glyph.glyphType.linkPath.encode.enter.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.linkPath.encode.enter.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"glyph.glyphType.linkPath.encode.enter.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.linkPath.encode.enter.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"glyph.glyphType.linkPath.encode.enter.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"glyph.glyphType.linkPath.encode.enter.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"glyph.glyphType.linkPath.encode.enter.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"glyph.glyphType.linkPath.encode.enter.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.enter.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.enter.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"glyph.glyphType.linkPath.encode.enter.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"glyph.glyphType.linkPath.encode.enter.outerBorder":{"desc":"<p>外描边</p>\n"},"glyph.glyphType.linkPath.encode.enter.innerBorder":{"desc":"<p>内描边</p>\n"},"glyph.glyphType.linkPath.encode.enter.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"glyph.glyphType.linkPath.encode.enter.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.linkPath.encode.enter.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"glyph.glyphType.linkPath.encode.enter.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"glyph.glyphType.linkPath.encode.enter.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"glyph.glyphType.linkPath.encode.enter.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"glyph.glyphType.linkPath.encode.enter.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"glyph.glyphType.linkPath.encode.enter.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"glyph.glyphType.linkPath.encode.enter.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"glyph.glyphType.linkPath.encode.enter.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.linkPath.encode.enter.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.linkPath.encode.enter.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.linkPath.encode.enter.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"glyph.glyphType.linkPath.encode.enter.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"glyph.glyphType.linkPath.encode.enter.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"glyph.glyphType.linkPath.encode.enter.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.enter.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"glyph.glyphType.linkPath.encode.enter.texture":{"desc":"<p>图元纹理</p>\n"},"glyph.glyphType.linkPath.encode.enter.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"glyph.glyphType.linkPath.encode.enter.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"glyph.glyphType.linkPath.encode.enter.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"glyph.glyphType.linkPath.encode.enter.blur":{"desc":"<p>图元边缘模糊</p>\n"},"glyph.glyphType.linkPath.encode.enter.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.update":{"desc":"<p>设置图元在数据更新状态执行的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.linkPath.encode.update.x0":{"desc":"<p>最小水平位置</p>\n"},"glyph.glyphType.linkPath.encode.update.x1":{"desc":"<p>最大水平位置</p>\n"},"glyph.glyphType.linkPath.encode.update.y0":{"desc":"<p>最小垂直位置</p>\n"},"glyph.glyphType.linkPath.encode.update.y1":{"desc":"<p>最大垂直位置</p>\n"},"glyph.glyphType.linkPath.encode.update.thickness":{"desc":"<p>图元的厚度</p>\n"},"glyph.glyphType.linkPath.encode.update.curvature":{"desc":"<p>图元的曲率，默认为 0.5</p>\n"},"glyph.glyphType.linkPath.encode.update.round":{"desc":"<p>图元路径计算是否取整</p>\n"},"glyph.glyphType.linkPath.encode.update.ratio":{"desc":"<p>普通路径的厚度占比</p>\n"},"glyph.glyphType.linkPath.encode.update.align":{"desc":"<p>图元的对齐方式</p>\n<ul>\n<li>&#39;start&#39;</li>\n<li>&#39;end&#39;</li>\n<li>&#39;center&#39;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.update.pathType":{"desc":"<p>图元的渲染形状</p>\n<ul>\n<li>&#39;line&#39;</li>\n<li>&#39;smooth&#39;</li>\n<li>&#39;polyline&#39;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.update.startArrow":{"desc":"<p>是否开启开端的箭头</p>\n"},"glyph.glyphType.linkPath.encode.update.endArrow":{"desc":"<p>是否开启终端的箭头</p>\n"},"glyph.glyphType.linkPath.encode.update.backgroundStyle":{"desc":"<p>图元背景的样式</p>\n"},"glyph.glyphType.linkPath.encode.update.direction":{"desc":"<p>图元的朝向</p>\n<ul>\n<li>&#39;horizontal&#39;</li>\n<li>&#39;vertical&#39;</li>\n<li>&#39;LR&#39;</li>\n<li>&#39;RL&#39;</li>\n<li>&#39;TB&#39;</li>\n<li>&#39;BL&#39;</li>\n<li>&#39;radial&#39;</li>\n</ul>\n<!-- base channels -->\n"},"glyph.glyphType.linkPath.encode.update.x":{"desc":"<p>图元的 x 坐标</p>\n"},"glyph.glyphType.linkPath.encode.update.y":{"desc":"<p>图元 y 坐标</p>\n"},"glyph.glyphType.linkPath.encode.update.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"glyph.glyphType.linkPath.encode.update.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"glyph.glyphType.linkPath.encode.update.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.linkPath.encode.update.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"glyph.glyphType.linkPath.encode.update.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.linkPath.encode.update.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"glyph.glyphType.linkPath.encode.update.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"glyph.glyphType.linkPath.encode.update.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"glyph.glyphType.linkPath.encode.update.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"glyph.glyphType.linkPath.encode.update.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.update.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.update.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"glyph.glyphType.linkPath.encode.update.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"glyph.glyphType.linkPath.encode.update.outerBorder":{"desc":"<p>外描边</p>\n"},"glyph.glyphType.linkPath.encode.update.innerBorder":{"desc":"<p>内描边</p>\n"},"glyph.glyphType.linkPath.encode.update.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"glyph.glyphType.linkPath.encode.update.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.linkPath.encode.update.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"glyph.glyphType.linkPath.encode.update.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"glyph.glyphType.linkPath.encode.update.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"glyph.glyphType.linkPath.encode.update.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"glyph.glyphType.linkPath.encode.update.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"glyph.glyphType.linkPath.encode.update.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"glyph.glyphType.linkPath.encode.update.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"glyph.glyphType.linkPath.encode.update.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.linkPath.encode.update.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.linkPath.encode.update.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.linkPath.encode.update.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"glyph.glyphType.linkPath.encode.update.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"glyph.glyphType.linkPath.encode.update.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"glyph.glyphType.linkPath.encode.update.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.update.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"glyph.glyphType.linkPath.encode.update.texture":{"desc":"<p>图元纹理</p>\n"},"glyph.glyphType.linkPath.encode.update.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"glyph.glyphType.linkPath.encode.update.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"glyph.glyphType.linkPath.encode.update.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"glyph.glyphType.linkPath.encode.update.blur":{"desc":"<p>图元边缘模糊</p>\n"},"glyph.glyphType.linkPath.encode.update.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.exit":{"desc":"<p>设置图元在数据被删除的状态下执行的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.linkPath.encode.exit.x0":{"desc":"<p>最小水平位置</p>\n"},"glyph.glyphType.linkPath.encode.exit.x1":{"desc":"<p>最大水平位置</p>\n"},"glyph.glyphType.linkPath.encode.exit.y0":{"desc":"<p>最小垂直位置</p>\n"},"glyph.glyphType.linkPath.encode.exit.y1":{"desc":"<p>最大垂直位置</p>\n"},"glyph.glyphType.linkPath.encode.exit.thickness":{"desc":"<p>图元的厚度</p>\n"},"glyph.glyphType.linkPath.encode.exit.curvature":{"desc":"<p>图元的曲率，默认为 0.5</p>\n"},"glyph.glyphType.linkPath.encode.exit.round":{"desc":"<p>图元路径计算是否取整</p>\n"},"glyph.glyphType.linkPath.encode.exit.ratio":{"desc":"<p>普通路径的厚度占比</p>\n"},"glyph.glyphType.linkPath.encode.exit.align":{"desc":"<p>图元的对齐方式</p>\n<ul>\n<li>&#39;start&#39;</li>\n<li>&#39;end&#39;</li>\n<li>&#39;center&#39;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.exit.pathType":{"desc":"<p>图元的渲染形状</p>\n<ul>\n<li>&#39;line&#39;</li>\n<li>&#39;smooth&#39;</li>\n<li>&#39;polyline&#39;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.exit.startArrow":{"desc":"<p>是否开启开端的箭头</p>\n"},"glyph.glyphType.linkPath.encode.exit.endArrow":{"desc":"<p>是否开启终端的箭头</p>\n"},"glyph.glyphType.linkPath.encode.exit.backgroundStyle":{"desc":"<p>图元背景的样式</p>\n"},"glyph.glyphType.linkPath.encode.exit.direction":{"desc":"<p>图元的朝向</p>\n<ul>\n<li>&#39;horizontal&#39;</li>\n<li>&#39;vertical&#39;</li>\n<li>&#39;LR&#39;</li>\n<li>&#39;RL&#39;</li>\n<li>&#39;TB&#39;</li>\n<li>&#39;BL&#39;</li>\n<li>&#39;radial&#39;</li>\n</ul>\n<!-- base channels -->\n"},"glyph.glyphType.linkPath.encode.exit.x":{"desc":"<p>图元的 x 坐标</p>\n"},"glyph.glyphType.linkPath.encode.exit.y":{"desc":"<p>图元 y 坐标</p>\n"},"glyph.glyphType.linkPath.encode.exit.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"glyph.glyphType.linkPath.encode.exit.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"glyph.glyphType.linkPath.encode.exit.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.linkPath.encode.exit.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"glyph.glyphType.linkPath.encode.exit.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.linkPath.encode.exit.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"glyph.glyphType.linkPath.encode.exit.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"glyph.glyphType.linkPath.encode.exit.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"glyph.glyphType.linkPath.encode.exit.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"glyph.glyphType.linkPath.encode.exit.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.exit.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.exit.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"glyph.glyphType.linkPath.encode.exit.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"glyph.glyphType.linkPath.encode.exit.outerBorder":{"desc":"<p>外描边</p>\n"},"glyph.glyphType.linkPath.encode.exit.innerBorder":{"desc":"<p>内描边</p>\n"},"glyph.glyphType.linkPath.encode.exit.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"glyph.glyphType.linkPath.encode.exit.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.linkPath.encode.exit.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"glyph.glyphType.linkPath.encode.exit.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"glyph.glyphType.linkPath.encode.exit.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"glyph.glyphType.linkPath.encode.exit.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"glyph.glyphType.linkPath.encode.exit.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"glyph.glyphType.linkPath.encode.exit.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"glyph.glyphType.linkPath.encode.exit.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"glyph.glyphType.linkPath.encode.exit.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.linkPath.encode.exit.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.linkPath.encode.exit.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.linkPath.encode.exit.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"glyph.glyphType.linkPath.encode.exit.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"glyph.glyphType.linkPath.encode.exit.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"glyph.glyphType.linkPath.encode.exit.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.exit.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"glyph.glyphType.linkPath.encode.exit.texture":{"desc":"<p>图元纹理</p>\n"},"glyph.glyphType.linkPath.encode.exit.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"glyph.glyphType.linkPath.encode.exit.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"glyph.glyphType.linkPath.encode.exit.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"glyph.glyphType.linkPath.encode.exit.blur":{"desc":"<p>图元边缘模糊</p>\n"},"glyph.glyphType.linkPath.encode.exit.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.hover":{"desc":"<p>设置<code class=\"codespan\">hover</code>状态的时候，图元对应的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.linkPath.encode.hover.x0":{"desc":"<p>最小水平位置</p>\n"},"glyph.glyphType.linkPath.encode.hover.x1":{"desc":"<p>最大水平位置</p>\n"},"glyph.glyphType.linkPath.encode.hover.y0":{"desc":"<p>最小垂直位置</p>\n"},"glyph.glyphType.linkPath.encode.hover.y1":{"desc":"<p>最大垂直位置</p>\n"},"glyph.glyphType.linkPath.encode.hover.thickness":{"desc":"<p>图元的厚度</p>\n"},"glyph.glyphType.linkPath.encode.hover.curvature":{"desc":"<p>图元的曲率，默认为 0.5</p>\n"},"glyph.glyphType.linkPath.encode.hover.round":{"desc":"<p>图元路径计算是否取整</p>\n"},"glyph.glyphType.linkPath.encode.hover.ratio":{"desc":"<p>普通路径的厚度占比</p>\n"},"glyph.glyphType.linkPath.encode.hover.align":{"desc":"<p>图元的对齐方式</p>\n<ul>\n<li>&#39;start&#39;</li>\n<li>&#39;end&#39;</li>\n<li>&#39;center&#39;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.hover.pathType":{"desc":"<p>图元的渲染形状</p>\n<ul>\n<li>&#39;line&#39;</li>\n<li>&#39;smooth&#39;</li>\n<li>&#39;polyline&#39;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.hover.startArrow":{"desc":"<p>是否开启开端的箭头</p>\n"},"glyph.glyphType.linkPath.encode.hover.endArrow":{"desc":"<p>是否开启终端的箭头</p>\n"},"glyph.glyphType.linkPath.encode.hover.backgroundStyle":{"desc":"<p>图元背景的样式</p>\n"},"glyph.glyphType.linkPath.encode.hover.direction":{"desc":"<p>图元的朝向</p>\n<ul>\n<li>&#39;horizontal&#39;</li>\n<li>&#39;vertical&#39;</li>\n<li>&#39;LR&#39;</li>\n<li>&#39;RL&#39;</li>\n<li>&#39;TB&#39;</li>\n<li>&#39;BL&#39;</li>\n<li>&#39;radial&#39;</li>\n</ul>\n<!-- base channels -->\n"},"glyph.glyphType.linkPath.encode.hover.x":{"desc":"<p>图元的 x 坐标</p>\n"},"glyph.glyphType.linkPath.encode.hover.y":{"desc":"<p>图元 y 坐标</p>\n"},"glyph.glyphType.linkPath.encode.hover.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"glyph.glyphType.linkPath.encode.hover.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"glyph.glyphType.linkPath.encode.hover.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.linkPath.encode.hover.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"glyph.glyphType.linkPath.encode.hover.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.linkPath.encode.hover.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"glyph.glyphType.linkPath.encode.hover.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"glyph.glyphType.linkPath.encode.hover.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"glyph.glyphType.linkPath.encode.hover.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"glyph.glyphType.linkPath.encode.hover.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.hover.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.hover.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"glyph.glyphType.linkPath.encode.hover.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"glyph.glyphType.linkPath.encode.hover.outerBorder":{"desc":"<p>外描边</p>\n"},"glyph.glyphType.linkPath.encode.hover.innerBorder":{"desc":"<p>内描边</p>\n"},"glyph.glyphType.linkPath.encode.hover.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"glyph.glyphType.linkPath.encode.hover.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.linkPath.encode.hover.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"glyph.glyphType.linkPath.encode.hover.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"glyph.glyphType.linkPath.encode.hover.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"glyph.glyphType.linkPath.encode.hover.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"glyph.glyphType.linkPath.encode.hover.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"glyph.glyphType.linkPath.encode.hover.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"glyph.glyphType.linkPath.encode.hover.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"glyph.glyphType.linkPath.encode.hover.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.linkPath.encode.hover.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.linkPath.encode.hover.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.linkPath.encode.hover.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"glyph.glyphType.linkPath.encode.hover.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"glyph.glyphType.linkPath.encode.hover.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"glyph.glyphType.linkPath.encode.hover.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.hover.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"glyph.glyphType.linkPath.encode.hover.texture":{"desc":"<p>图元纹理</p>\n"},"glyph.glyphType.linkPath.encode.hover.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"glyph.glyphType.linkPath.encode.hover.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"glyph.glyphType.linkPath.encode.hover.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"glyph.glyphType.linkPath.encode.hover.blur":{"desc":"<p>图元边缘模糊</p>\n"},"glyph.glyphType.linkPath.encode.hover.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"glyph.glyphType.linkPath.zIndex":{"desc":"<p>设置<code class=\"codespan\">mark</code>图元对应的容器图形(group)的 zIndex</p>\n"},"glyph.glyphType.linkPath.interactive":{"desc":"<p>类型：<code class=\"codespan\">boolean</code>\n是否必传： 否</p>\n"},"glyph.glyphType.linkPath.context":{"desc":"<p>设置图元的上下文参数</p>\n"},"glyph.glyphType.linkPath.setCustomizedShape":{"desc":"<p>设置自定义形状的回调函数，对应的 ts 类型定位如下：</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>其中<code class=\"codespan\">ICustomPath2D</code> 为 VRender 提供的绘制自定义的路径一个工具类</p>\n"},"glyph.glyphType.linkPath.support3d":{"desc":"<p>当画布设置了 3d 视角的时候，是否支持 3d 模式</p>\n"},"glyph.glyphType.linkPath.group":{"desc":"<p>设置父图元，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 父图元对应的 id</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> 父图元对应的语法元素，一般用于 API 调用场景</li>\n</ul>\n<p>如果不设置，会默认挂在到画布的根节点下面</p>\n"},"glyph.glyphType.linkPath.from":{"desc":"<p>ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>通过<code class=\"codespan\">data</code> 属性值，申明图元依赖的数据</p>\n"},"glyph.glyphType.linkPath.key":{"desc":"<p>设置图元数据元素的唯一标志符，用于计算图形元素的数据状态，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"glyph.glyphType.linkPath.sort":{"desc":"<p>对图元中的所有图形元素进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"glyph.glyphType.linkPath.groupBy":{"desc":"<p>设置分组的属性，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置分组<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析分组<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"glyph.glyphType.linkPath.groupSort":{"desc":"<p>对图元中的分组进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"glyph.glyphType.linkPath.coordinate":{"desc":"<p>设置该图元关联的坐标系对应的 id 或者坐标系对应的图形元素</p>\n"},"glyph.glyphType.linkPath.state":{"desc":"<p>设置当前图元所有图形元素的状态值，支持三种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置图形的状态，比如说:<code class=\"codespan\">{ state: &#39;selected&#39;}</code> 就是给所有的图形设置状态为<code class=\"codespan\">&#39;selected&#39;</code>，通常这种情况，<code class=\"codespan\">encode</code> 中也会设置<code class=\"codespan\">&#39;selected&#39;</code>状态对应的图形通道映射</li>\n<li><code class=\"codespan\">string[]</code> 给图形设置多个状态，可以配置<code class=\"codespan\">stateSort</code>来影响对应状态执行图形通道映射的顺序</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析状态值的回调函数，返回参数为<code class=\"codespan\">string | string[]</code>，对应的 ts 类型定义为：</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"glyph.glyphType.linkPath.stateSort":{"desc":"<p>设置当前图元所有图形元素的状态值的排序函数，会影响状态对应的图形通道映射的顺序，最先执行的状态可能被后续的状态覆盖图形通道映射结果，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"glyph.glyphType.linkPath.transform":{"desc":"<p>设置图元对应的变换，所有的数据变换都可以配置在图元上，用于对图元的<code class=\"codespan\">join data</code> 执行变换；\n另外一种类型的变换就是对图形元素执行的变换，比如说<code class=\"codespan\">dodge</code>；\n通用的类型定义如下：</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>每中变换支持的参数不同</p>\n"},"glyph.glyphType.linkPath.layout":{"desc":"<p>设置图元的布局参数，图元在参与布局的时候，存在两种角色：</p>\n<ul>\n<li>&#39;container&#39; 容器图元，一般是<code class=\"codespan\">group</code>图元</li>\n<li>&#39;item&#39; 布局子元素，作为容器图元的子节点</li>\n</ul>\n<p>注意，我们仅支持一层布局，如果是多层嵌套布局，建议使用自定义的布局方案进行实现；</p>\n<p>现在支持两种内容的布局：<code class=\"codespan\">grid</code> 布局 和 <code class=\"codespan\">relative</code>布局，相关类型定义如下</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>如果想要设置自定义的布局方案，<code class=\"codespan\">layout</code>也支持直接设置回调函数，回调函数的定义如下：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"glyph.glyphType.linkPath.layout.display":{"desc":"<p>容器图元设置布局的类型，支持两种配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> 相对布局</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> 网格布局</li>\n</ul>\n"},"glyph.glyphType.linkPath.layout.callback":{"desc":"<p>自定义该图元的回调函数，ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"glyph.glyphType.linkPath.layout.skipBeforeLayouted":{"desc":"<p>在布局完成前，跳过执行阶段</p>\n"},"glyph.glyphType.linkPath.layout.updateViewSignals":{"desc":"<p>是否更新默认的视图信号，也就是：<code class=\"codespan\">padding</code>、<code class=\"codespan\">viewWidth</code> 和 <code class=\"codespan\">viewHeight</code></p>\n<p>只能在设置了<code class=\"codespan\">{ layout: { display: &#39;relative&#39;} }</code>的容器图元上设置该属性</p>\n"},"glyph.glyphType.linkPath.layout.maxChildWidth":{"desc":"<p>相对布局的父图元，设置子图元的最大宽度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的宽度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"glyph.glyphType.linkPath.layout.maxChildHeight":{"desc":"<p>相对布局的父图元，设置子图元的最大高度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的高度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"glyph.glyphType.linkPath.layout.position":{"desc":"<p>设置相对布局的子图元的位置，支持的配置有：</p>\n<ul>\n<li>&#39;top&#39; 相对于父图元的顶部</li>\n<li>&#39;bottom&#39; 相对于父图元的底部</li>\n<li>&#39;left&#39; 相对于父图元的左侧</li>\n<li>&#39;right&#39; 相对于父图元的右侧</li>\n<li>&#39;content&#39; 相对于父图元的中心，也就是内容区域</li>\n<li>&#39;auto&#39; 图元设置了坐标系的时候，根据关联的<code class=\"codespan\">scale</code>，自定计算相对于父图元的位置</li>\n</ul>\n"},"glyph.glyphType.linkPath.layout.padding":{"desc":"<p>子图元内边距，单位 px，默认各方向内边距为 0，接受数值、数值数组以及对象设置。</p>\n<p>使用示例：</p>\n<pre><code class=\"lang-ts\">// 数值类型，设置内边距为 5\npadding: 5;\n// 数值数组，设置上下的内边距为 5，左右的内边距为 10，用法同 CSS 盒模型\npadding: [5, 10];\n// 数值数组，分别设置四个方向的内边距\npadding: [\n  5, // 上\n  10, // 右\n  5, // 下\n  10 // 左\n];\n// 对象类型\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"glyph.glyphType.linkPath.layout.gridTemplateRows":{"desc":"<p>网格布局的父图元设置行的高度</p>\n"},"glyph.glyphType.linkPath.layout.gridTemplateColumns":{"desc":"<p>网格布局的父图元设置列的宽度</p>\n"},"glyph.glyphType.linkPath.layout.gridRowGap":{"desc":"<p>网格布局的父图元设置行行距</p>\n"},"glyph.glyphType.linkPath.layout.gridColumnGap":{"desc":"<p>网格布局的父图元设置列间距</p>\n"},"glyph.glyphType.linkPath.layout.gridRowStart":{"desc":"<p>网格布局的子图元设置行开始的位置</p>\n"},"glyph.glyphType.linkPath.layout.gridRowEnd":{"desc":"<p>网格布局的子图元设置行结束的位置</p>\n"},"glyph.glyphType.linkPath.layout.gridColumnStart":{"desc":"<p>网格布局的子图元设置列开始的位置</p>\n"},"glyph.glyphType.linkPath.layout.gridColumnEnd":{"desc":"<p>网格布局的子图元设置列结束的位置</p>\n"},"glyph.glyphType.ripplePoint":{"desc":"<p>使用 ripplePoint 图元前需要执行 <code class=\"codespan\">registerRippleGlyph()</code> 对 ripplePoint 图元进行注册</p>\n"},"glyph.glyphType.ripplePoint.glyphType":{"desc":"<p>将 glyph 类型设置为 <code class=\"codespan\">ripplePoint</code></p>\n"},"glyph.glyphType.ripplePoint.animation":{"desc":"<p>可以通过 <code class=\"codespan\">ripple</code> 通道实现涟漪的循环播放：</p>\n<pre><code class=\"lang-json\">{\n  &quot;channel&quot;: { &quot;ripple&quot;: { &quot;from&quot;: 0, &quot;to&quot;: 1 } },\n  &quot;loop&quot;: true\n}\n</code></pre>\n"},"glyph.glyphType.ripplePoint.encode":{"desc":"<p>设置图元的视觉通道编码，默认支持三种数据变化状态：</p>\n<ul>\n<li><code class=\"codespan\">enter</code> 新增数据元素</li>\n<li><code class=\"codespan\">update</code> 数据元素更新</li>\n<li><code class=\"codespan\">exit</code> 数据元素被删除</li>\n</ul>\n<p>注意，这里的数据状态是根据<code class=\"codespan\">mark</code>的<code class=\"codespan\">key</code>自动生成的，我们会针对<code class=\"codespan\">mark</code>的绑定数据，根据<code class=\"codespan\">key</code>的配置，计算数据对应的唯一标志符，数据更新后，如果对应的唯一标志符不存在了，则状态为<code class=\"codespan\">exit</code>，如果存在，则为<code class=\"codespan\">update</code>；如果之前的数据不存在改唯一标志符，则数据元素对应的状态为<code class=\"codespan\">enter</code></p>\n<p>默认支持一种交互状态：</p>\n<ul>\n<li><code class=\"codespan\">hover</code> 鼠标 hover 到具体的图形上，给图形设置对应的视觉通道编码</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.encode.enter":{"desc":"<p>设置图元在数据初始化状态执行的视觉通道映射，注意数据更新的时候不再执行</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.ripplePoint.encode.enter.ripple":{"desc":"<p>涟漪的变化状态，范围为 <code class=\"codespan\">[0, 1]</code></p>\n<!-- base channels -->\n"},"glyph.glyphType.ripplePoint.encode.enter.x":{"desc":"<p>图元的 x 坐标</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.y":{"desc":"<p>图元 y 坐标</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.ripplePoint.encode.enter.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.ripplePoint.encode.enter.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.encode.enter.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.encode.enter.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.outerBorder":{"desc":"<p>外描边</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.innerBorder":{"desc":"<p>内描边</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.ripplePoint.encode.enter.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.encode.enter.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.texture":{"desc":"<p>图元纹理</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.blur":{"desc":"<p>图元边缘模糊</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.encode.update":{"desc":"<p>设置图元在数据更新状态执行的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.ripplePoint.encode.update.ripple":{"desc":"<p>涟漪的变化状态，范围为 <code class=\"codespan\">[0, 1]</code></p>\n<!-- base channels -->\n"},"glyph.glyphType.ripplePoint.encode.update.x":{"desc":"<p>图元的 x 坐标</p>\n"},"glyph.glyphType.ripplePoint.encode.update.y":{"desc":"<p>图元 y 坐标</p>\n"},"glyph.glyphType.ripplePoint.encode.update.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"glyph.glyphType.ripplePoint.encode.update.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"glyph.glyphType.ripplePoint.encode.update.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.ripplePoint.encode.update.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"glyph.glyphType.ripplePoint.encode.update.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.ripplePoint.encode.update.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"glyph.glyphType.ripplePoint.encode.update.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"glyph.glyphType.ripplePoint.encode.update.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"glyph.glyphType.ripplePoint.encode.update.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"glyph.glyphType.ripplePoint.encode.update.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.encode.update.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.encode.update.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"glyph.glyphType.ripplePoint.encode.update.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"glyph.glyphType.ripplePoint.encode.update.outerBorder":{"desc":"<p>外描边</p>\n"},"glyph.glyphType.ripplePoint.encode.update.innerBorder":{"desc":"<p>内描边</p>\n"},"glyph.glyphType.ripplePoint.encode.update.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"glyph.glyphType.ripplePoint.encode.update.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.ripplePoint.encode.update.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"glyph.glyphType.ripplePoint.encode.update.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"glyph.glyphType.ripplePoint.encode.update.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"glyph.glyphType.ripplePoint.encode.update.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"glyph.glyphType.ripplePoint.encode.update.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"glyph.glyphType.ripplePoint.encode.update.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"glyph.glyphType.ripplePoint.encode.update.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"glyph.glyphType.ripplePoint.encode.update.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.ripplePoint.encode.update.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.ripplePoint.encode.update.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.ripplePoint.encode.update.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"glyph.glyphType.ripplePoint.encode.update.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"glyph.glyphType.ripplePoint.encode.update.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"glyph.glyphType.ripplePoint.encode.update.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.encode.update.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"glyph.glyphType.ripplePoint.encode.update.texture":{"desc":"<p>图元纹理</p>\n"},"glyph.glyphType.ripplePoint.encode.update.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"glyph.glyphType.ripplePoint.encode.update.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"glyph.glyphType.ripplePoint.encode.update.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"glyph.glyphType.ripplePoint.encode.update.blur":{"desc":"<p>图元边缘模糊</p>\n"},"glyph.glyphType.ripplePoint.encode.update.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.encode.exit":{"desc":"<p>设置图元在数据被删除的状态下执行的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.ripplePoint.encode.exit.ripple":{"desc":"<p>涟漪的变化状态，范围为 <code class=\"codespan\">[0, 1]</code></p>\n<!-- base channels -->\n"},"glyph.glyphType.ripplePoint.encode.exit.x":{"desc":"<p>图元的 x 坐标</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.y":{"desc":"<p>图元 y 坐标</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.ripplePoint.encode.exit.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.ripplePoint.encode.exit.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.encode.exit.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.encode.exit.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.outerBorder":{"desc":"<p>外描边</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.innerBorder":{"desc":"<p>内描边</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.ripplePoint.encode.exit.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.encode.exit.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.texture":{"desc":"<p>图元纹理</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.blur":{"desc":"<p>图元边缘模糊</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.encode.hover":{"desc":"<p>设置<code class=\"codespan\">hover</code>状态的时候，图元对应的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.ripplePoint.encode.hover.ripple":{"desc":"<p>涟漪的变化状态，范围为 <code class=\"codespan\">[0, 1]</code></p>\n<!-- base channels -->\n"},"glyph.glyphType.ripplePoint.encode.hover.x":{"desc":"<p>图元的 x 坐标</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.y":{"desc":"<p>图元 y 坐标</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.ripplePoint.encode.hover.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.ripplePoint.encode.hover.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.encode.hover.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.encode.hover.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.outerBorder":{"desc":"<p>外描边</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.innerBorder":{"desc":"<p>内描边</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.ripplePoint.encode.hover.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.encode.hover.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.texture":{"desc":"<p>图元纹理</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.blur":{"desc":"<p>图元边缘模糊</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.zIndex":{"desc":"<p>设置<code class=\"codespan\">mark</code>图元对应的容器图形(group)的 zIndex</p>\n"},"glyph.glyphType.ripplePoint.interactive":{"desc":"<p>类型：<code class=\"codespan\">boolean</code>\n是否必传： 否</p>\n"},"glyph.glyphType.ripplePoint.context":{"desc":"<p>设置图元的上下文参数</p>\n"},"glyph.glyphType.ripplePoint.setCustomizedShape":{"desc":"<p>设置自定义形状的回调函数，对应的 ts 类型定位如下：</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>其中<code class=\"codespan\">ICustomPath2D</code> 为 VRender 提供的绘制自定义的路径一个工具类</p>\n"},"glyph.glyphType.ripplePoint.support3d":{"desc":"<p>当画布设置了 3d 视角的时候，是否支持 3d 模式</p>\n"},"glyph.glyphType.ripplePoint.group":{"desc":"<p>设置父图元，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 父图元对应的 id</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> 父图元对应的语法元素，一般用于 API 调用场景</li>\n</ul>\n<p>如果不设置，会默认挂在到画布的根节点下面</p>\n"},"glyph.glyphType.ripplePoint.from":{"desc":"<p>ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>通过<code class=\"codespan\">data</code> 属性值，申明图元依赖的数据</p>\n"},"glyph.glyphType.ripplePoint.key":{"desc":"<p>设置图元数据元素的唯一标志符，用于计算图形元素的数据状态，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.sort":{"desc":"<p>对图元中的所有图形元素进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"glyph.glyphType.ripplePoint.groupBy":{"desc":"<p>设置分组的属性，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置分组<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析分组<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.groupSort":{"desc":"<p>对图元中的分组进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"glyph.glyphType.ripplePoint.coordinate":{"desc":"<p>设置该图元关联的坐标系对应的 id 或者坐标系对应的图形元素</p>\n"},"glyph.glyphType.ripplePoint.state":{"desc":"<p>设置当前图元所有图形元素的状态值，支持三种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置图形的状态，比如说:<code class=\"codespan\">{ state: &#39;selected&#39;}</code> 就是给所有的图形设置状态为<code class=\"codespan\">&#39;selected&#39;</code>，通常这种情况，<code class=\"codespan\">encode</code> 中也会设置<code class=\"codespan\">&#39;selected&#39;</code>状态对应的图形通道映射</li>\n<li><code class=\"codespan\">string[]</code> 给图形设置多个状态，可以配置<code class=\"codespan\">stateSort</code>来影响对应状态执行图形通道映射的顺序</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析状态值的回调函数，返回参数为<code class=\"codespan\">string | string[]</code>，对应的 ts 类型定义为：</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"glyph.glyphType.ripplePoint.stateSort":{"desc":"<p>设置当前图元所有图形元素的状态值的排序函数，会影响状态对应的图形通道映射的顺序，最先执行的状态可能被后续的状态覆盖图形通道映射结果，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"glyph.glyphType.ripplePoint.transform":{"desc":"<p>设置图元对应的变换，所有的数据变换都可以配置在图元上，用于对图元的<code class=\"codespan\">join data</code> 执行变换；\n另外一种类型的变换就是对图形元素执行的变换，比如说<code class=\"codespan\">dodge</code>；\n通用的类型定义如下：</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>每中变换支持的参数不同</p>\n"},"glyph.glyphType.ripplePoint.layout":{"desc":"<p>设置图元的布局参数，图元在参与布局的时候，存在两种角色：</p>\n<ul>\n<li>&#39;container&#39; 容器图元，一般是<code class=\"codespan\">group</code>图元</li>\n<li>&#39;item&#39; 布局子元素，作为容器图元的子节点</li>\n</ul>\n<p>注意，我们仅支持一层布局，如果是多层嵌套布局，建议使用自定义的布局方案进行实现；</p>\n<p>现在支持两种内容的布局：<code class=\"codespan\">grid</code> 布局 和 <code class=\"codespan\">relative</code>布局，相关类型定义如下</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>如果想要设置自定义的布局方案，<code class=\"codespan\">layout</code>也支持直接设置回调函数，回调函数的定义如下：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"glyph.glyphType.ripplePoint.layout.display":{"desc":"<p>容器图元设置布局的类型，支持两种配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> 相对布局</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> 网格布局</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.layout.callback":{"desc":"<p>自定义该图元的回调函数，ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"glyph.glyphType.ripplePoint.layout.skipBeforeLayouted":{"desc":"<p>在布局完成前，跳过执行阶段</p>\n"},"glyph.glyphType.ripplePoint.layout.updateViewSignals":{"desc":"<p>是否更新默认的视图信号，也就是：<code class=\"codespan\">padding</code>、<code class=\"codespan\">viewWidth</code> 和 <code class=\"codespan\">viewHeight</code></p>\n<p>只能在设置了<code class=\"codespan\">{ layout: { display: &#39;relative&#39;} }</code>的容器图元上设置该属性</p>\n"},"glyph.glyphType.ripplePoint.layout.maxChildWidth":{"desc":"<p>相对布局的父图元，设置子图元的最大宽度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的宽度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.layout.maxChildHeight":{"desc":"<p>相对布局的父图元，设置子图元的最大高度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的高度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.layout.position":{"desc":"<p>设置相对布局的子图元的位置，支持的配置有：</p>\n<ul>\n<li>&#39;top&#39; 相对于父图元的顶部</li>\n<li>&#39;bottom&#39; 相对于父图元的底部</li>\n<li>&#39;left&#39; 相对于父图元的左侧</li>\n<li>&#39;right&#39; 相对于父图元的右侧</li>\n<li>&#39;content&#39; 相对于父图元的中心，也就是内容区域</li>\n<li>&#39;auto&#39; 图元设置了坐标系的时候，根据关联的<code class=\"codespan\">scale</code>，自定计算相对于父图元的位置</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.layout.padding":{"desc":"<p>子图元内边距，单位 px，默认各方向内边距为 0，接受数值、数值数组以及对象设置。</p>\n<p>使用示例：</p>\n<pre><code class=\"lang-ts\">// 数值类型，设置内边距为 5\npadding: 5;\n// 数值数组，设置上下的内边距为 5，左右的内边距为 10，用法同 CSS 盒模型\npadding: [5, 10];\n// 数值数组，分别设置四个方向的内边距\npadding: [\n  5, // 上\n  10, // 右\n  5, // 下\n  10 // 左\n];\n// 对象类型\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"glyph.glyphType.ripplePoint.layout.gridTemplateRows":{"desc":"<p>网格布局的父图元设置行的高度</p>\n"},"glyph.glyphType.ripplePoint.layout.gridTemplateColumns":{"desc":"<p>网格布局的父图元设置列的宽度</p>\n"},"glyph.glyphType.ripplePoint.layout.gridRowGap":{"desc":"<p>网格布局的父图元设置行行距</p>\n"},"glyph.glyphType.ripplePoint.layout.gridColumnGap":{"desc":"<p>网格布局的父图元设置列间距</p>\n"},"glyph.glyphType.ripplePoint.layout.gridRowStart":{"desc":"<p>网格布局的子图元设置行开始的位置</p>\n"},"glyph.glyphType.ripplePoint.layout.gridRowEnd":{"desc":"<p>网格布局的子图元设置行结束的位置</p>\n"},"glyph.glyphType.ripplePoint.layout.gridColumnStart":{"desc":"<p>网格布局的子图元设置列开始的位置</p>\n"},"glyph.glyphType.ripplePoint.layout.gridColumnEnd":{"desc":"<p>网格布局的子图元设置列结束的位置</p>\n"},"glyph.glyphType.wave":{"desc":"<p>使用 wave 图元前需要执行 <code class=\"codespan\">registerWaveGlyph()</code> 对 wave 图元进行注册</p>\n"},"glyph.glyphType.wave.glyphType":{"desc":"<p>将 glyph 类型设置为 <code class=\"codespan\">wave</code></p>\n"},"glyph.glyphType.wave.animation":{"desc":"<p>可以通过 <code class=\"codespan\">wave</code> 通道实现涟漪的循环播放：</p>\n<pre><code class=\"lang-json\">{\n  &quot;channel&quot;: { &quot;wave&quot;: { &quot;from&quot;: 0, &quot;to&quot;: 1 } },\n  &quot;loop&quot;: true\n}\n</code></pre>\n"},"glyph.glyphType.wave.encode":{"desc":"<p>设置图元的视觉通道编码，默认支持三种数据变化状态：</p>\n<ul>\n<li><code class=\"codespan\">enter</code> 新增数据元素</li>\n<li><code class=\"codespan\">update</code> 数据元素更新</li>\n<li><code class=\"codespan\">exit</code> 数据元素被删除</li>\n</ul>\n<p>注意，这里的数据状态是根据<code class=\"codespan\">mark</code>的<code class=\"codespan\">key</code>自动生成的，我们会针对<code class=\"codespan\">mark</code>的绑定数据，根据<code class=\"codespan\">key</code>的配置，计算数据对应的唯一标志符，数据更新后，如果对应的唯一标志符不存在了，则状态为<code class=\"codespan\">exit</code>，如果存在，则为<code class=\"codespan\">update</code>；如果之前的数据不存在改唯一标志符，则数据元素对应的状态为<code class=\"codespan\">enter</code></p>\n<p>默认支持一种交互状态：</p>\n<ul>\n<li><code class=\"codespan\">hover</code> 鼠标 hover 到具体的图形上，给图形设置对应的视觉通道编码</li>\n</ul>\n"},"glyph.glyphType.wave.encode.enter":{"desc":"<p>设置图元在数据初始化状态执行的视觉通道映射，注意数据更新的时候不再执行</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.wave.encode.enter.wave":{"desc":"<p>波浪的变化状态，范围为 <code class=\"codespan\">[0, 1]</code></p>\n<!-- base channels -->\n"},"glyph.glyphType.wave.encode.enter.x":{"desc":"<p>图元的 x 坐标</p>\n"},"glyph.glyphType.wave.encode.enter.y":{"desc":"<p>图元 y 坐标</p>\n"},"glyph.glyphType.wave.encode.enter.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"glyph.glyphType.wave.encode.enter.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"glyph.glyphType.wave.encode.enter.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.wave.encode.enter.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"glyph.glyphType.wave.encode.enter.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.wave.encode.enter.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"glyph.glyphType.wave.encode.enter.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"glyph.glyphType.wave.encode.enter.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"glyph.glyphType.wave.encode.enter.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"glyph.glyphType.wave.encode.enter.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.wave.encode.enter.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.wave.encode.enter.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"glyph.glyphType.wave.encode.enter.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"glyph.glyphType.wave.encode.enter.outerBorder":{"desc":"<p>外描边</p>\n"},"glyph.glyphType.wave.encode.enter.innerBorder":{"desc":"<p>内描边</p>\n"},"glyph.glyphType.wave.encode.enter.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"glyph.glyphType.wave.encode.enter.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.wave.encode.enter.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"glyph.glyphType.wave.encode.enter.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"glyph.glyphType.wave.encode.enter.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"glyph.glyphType.wave.encode.enter.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"glyph.glyphType.wave.encode.enter.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"glyph.glyphType.wave.encode.enter.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"glyph.glyphType.wave.encode.enter.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"glyph.glyphType.wave.encode.enter.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.wave.encode.enter.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.wave.encode.enter.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.wave.encode.enter.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"glyph.glyphType.wave.encode.enter.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"glyph.glyphType.wave.encode.enter.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"glyph.glyphType.wave.encode.enter.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"glyph.glyphType.wave.encode.enter.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"glyph.glyphType.wave.encode.enter.texture":{"desc":"<p>图元纹理</p>\n"},"glyph.glyphType.wave.encode.enter.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"glyph.glyphType.wave.encode.enter.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"glyph.glyphType.wave.encode.enter.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"glyph.glyphType.wave.encode.enter.blur":{"desc":"<p>图元边缘模糊</p>\n"},"glyph.glyphType.wave.encode.enter.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"glyph.glyphType.wave.encode.update":{"desc":"<p>设置图元在数据更新状态执行的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.wave.encode.update.wave":{"desc":"<p>波浪的变化状态，范围为 <code class=\"codespan\">[0, 1]</code></p>\n<!-- base channels -->\n"},"glyph.glyphType.wave.encode.update.x":{"desc":"<p>图元的 x 坐标</p>\n"},"glyph.glyphType.wave.encode.update.y":{"desc":"<p>图元 y 坐标</p>\n"},"glyph.glyphType.wave.encode.update.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"glyph.glyphType.wave.encode.update.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"glyph.glyphType.wave.encode.update.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.wave.encode.update.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"glyph.glyphType.wave.encode.update.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.wave.encode.update.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"glyph.glyphType.wave.encode.update.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"glyph.glyphType.wave.encode.update.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"glyph.glyphType.wave.encode.update.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"glyph.glyphType.wave.encode.update.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.wave.encode.update.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.wave.encode.update.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"glyph.glyphType.wave.encode.update.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"glyph.glyphType.wave.encode.update.outerBorder":{"desc":"<p>外描边</p>\n"},"glyph.glyphType.wave.encode.update.innerBorder":{"desc":"<p>内描边</p>\n"},"glyph.glyphType.wave.encode.update.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"glyph.glyphType.wave.encode.update.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.wave.encode.update.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"glyph.glyphType.wave.encode.update.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"glyph.glyphType.wave.encode.update.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"glyph.glyphType.wave.encode.update.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"glyph.glyphType.wave.encode.update.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"glyph.glyphType.wave.encode.update.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"glyph.glyphType.wave.encode.update.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"glyph.glyphType.wave.encode.update.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.wave.encode.update.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.wave.encode.update.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.wave.encode.update.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"glyph.glyphType.wave.encode.update.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"glyph.glyphType.wave.encode.update.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"glyph.glyphType.wave.encode.update.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"glyph.glyphType.wave.encode.update.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"glyph.glyphType.wave.encode.update.texture":{"desc":"<p>图元纹理</p>\n"},"glyph.glyphType.wave.encode.update.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"glyph.glyphType.wave.encode.update.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"glyph.glyphType.wave.encode.update.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"glyph.glyphType.wave.encode.update.blur":{"desc":"<p>图元边缘模糊</p>\n"},"glyph.glyphType.wave.encode.update.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"glyph.glyphType.wave.encode.exit":{"desc":"<p>设置图元在数据被删除的状态下执行的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.wave.encode.exit.wave":{"desc":"<p>波浪的变化状态，范围为 <code class=\"codespan\">[0, 1]</code></p>\n<!-- base channels -->\n"},"glyph.glyphType.wave.encode.exit.x":{"desc":"<p>图元的 x 坐标</p>\n"},"glyph.glyphType.wave.encode.exit.y":{"desc":"<p>图元 y 坐标</p>\n"},"glyph.glyphType.wave.encode.exit.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"glyph.glyphType.wave.encode.exit.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"glyph.glyphType.wave.encode.exit.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.wave.encode.exit.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"glyph.glyphType.wave.encode.exit.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.wave.encode.exit.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"glyph.glyphType.wave.encode.exit.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"glyph.glyphType.wave.encode.exit.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"glyph.glyphType.wave.encode.exit.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"glyph.glyphType.wave.encode.exit.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.wave.encode.exit.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.wave.encode.exit.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"glyph.glyphType.wave.encode.exit.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"glyph.glyphType.wave.encode.exit.outerBorder":{"desc":"<p>外描边</p>\n"},"glyph.glyphType.wave.encode.exit.innerBorder":{"desc":"<p>内描边</p>\n"},"glyph.glyphType.wave.encode.exit.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"glyph.glyphType.wave.encode.exit.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.wave.encode.exit.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"glyph.glyphType.wave.encode.exit.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"glyph.glyphType.wave.encode.exit.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"glyph.glyphType.wave.encode.exit.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"glyph.glyphType.wave.encode.exit.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"glyph.glyphType.wave.encode.exit.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"glyph.glyphType.wave.encode.exit.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"glyph.glyphType.wave.encode.exit.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.wave.encode.exit.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.wave.encode.exit.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.wave.encode.exit.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"glyph.glyphType.wave.encode.exit.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"glyph.glyphType.wave.encode.exit.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"glyph.glyphType.wave.encode.exit.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"glyph.glyphType.wave.encode.exit.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"glyph.glyphType.wave.encode.exit.texture":{"desc":"<p>图元纹理</p>\n"},"glyph.glyphType.wave.encode.exit.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"glyph.glyphType.wave.encode.exit.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"glyph.glyphType.wave.encode.exit.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"glyph.glyphType.wave.encode.exit.blur":{"desc":"<p>图元边缘模糊</p>\n"},"glyph.glyphType.wave.encode.exit.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"glyph.glyphType.wave.encode.hover":{"desc":"<p>设置<code class=\"codespan\">hover</code>状态的时候，图元对应的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.wave.encode.hover.wave":{"desc":"<p>波浪的变化状态，范围为 <code class=\"codespan\">[0, 1]</code></p>\n<!-- base channels -->\n"},"glyph.glyphType.wave.encode.hover.x":{"desc":"<p>图元的 x 坐标</p>\n"},"glyph.glyphType.wave.encode.hover.y":{"desc":"<p>图元 y 坐标</p>\n"},"glyph.glyphType.wave.encode.hover.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"glyph.glyphType.wave.encode.hover.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"glyph.glyphType.wave.encode.hover.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.wave.encode.hover.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"glyph.glyphType.wave.encode.hover.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.wave.encode.hover.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"glyph.glyphType.wave.encode.hover.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"glyph.glyphType.wave.encode.hover.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"glyph.glyphType.wave.encode.hover.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"glyph.glyphType.wave.encode.hover.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.wave.encode.hover.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.wave.encode.hover.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"glyph.glyphType.wave.encode.hover.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"glyph.glyphType.wave.encode.hover.outerBorder":{"desc":"<p>外描边</p>\n"},"glyph.glyphType.wave.encode.hover.innerBorder":{"desc":"<p>内描边</p>\n"},"glyph.glyphType.wave.encode.hover.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"glyph.glyphType.wave.encode.hover.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.wave.encode.hover.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"glyph.glyphType.wave.encode.hover.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"glyph.glyphType.wave.encode.hover.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"glyph.glyphType.wave.encode.hover.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"glyph.glyphType.wave.encode.hover.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"glyph.glyphType.wave.encode.hover.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"glyph.glyphType.wave.encode.hover.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"glyph.glyphType.wave.encode.hover.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.wave.encode.hover.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.wave.encode.hover.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"glyph.glyphType.wave.encode.hover.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"glyph.glyphType.wave.encode.hover.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"glyph.glyphType.wave.encode.hover.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"glyph.glyphType.wave.encode.hover.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"glyph.glyphType.wave.encode.hover.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"glyph.glyphType.wave.encode.hover.texture":{"desc":"<p>图元纹理</p>\n"},"glyph.glyphType.wave.encode.hover.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"glyph.glyphType.wave.encode.hover.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"glyph.glyphType.wave.encode.hover.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"glyph.glyphType.wave.encode.hover.blur":{"desc":"<p>图元边缘模糊</p>\n"},"glyph.glyphType.wave.encode.hover.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"glyph.glyphType.wave.zIndex":{"desc":"<p>设置<code class=\"codespan\">mark</code>图元对应的容器图形(group)的 zIndex</p>\n"},"glyph.glyphType.wave.interactive":{"desc":"<p>类型：<code class=\"codespan\">boolean</code>\n是否必传： 否</p>\n"},"glyph.glyphType.wave.context":{"desc":"<p>设置图元的上下文参数</p>\n"},"glyph.glyphType.wave.setCustomizedShape":{"desc":"<p>设置自定义形状的回调函数，对应的 ts 类型定位如下：</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>其中<code class=\"codespan\">ICustomPath2D</code> 为 VRender 提供的绘制自定义的路径一个工具类</p>\n"},"glyph.glyphType.wave.support3d":{"desc":"<p>当画布设置了 3d 视角的时候，是否支持 3d 模式</p>\n"},"glyph.glyphType.wave.group":{"desc":"<p>设置父图元，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 父图元对应的 id</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> 父图元对应的语法元素，一般用于 API 调用场景</li>\n</ul>\n<p>如果不设置，会默认挂在到画布的根节点下面</p>\n"},"glyph.glyphType.wave.from":{"desc":"<p>ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>通过<code class=\"codespan\">data</code> 属性值，申明图元依赖的数据</p>\n"},"glyph.glyphType.wave.key":{"desc":"<p>设置图元数据元素的唯一标志符，用于计算图形元素的数据状态，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"glyph.glyphType.wave.sort":{"desc":"<p>对图元中的所有图形元素进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"glyph.glyphType.wave.groupBy":{"desc":"<p>设置分组的属性，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置分组<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析分组<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"glyph.glyphType.wave.groupSort":{"desc":"<p>对图元中的分组进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"glyph.glyphType.wave.coordinate":{"desc":"<p>设置该图元关联的坐标系对应的 id 或者坐标系对应的图形元素</p>\n"},"glyph.glyphType.wave.state":{"desc":"<p>设置当前图元所有图形元素的状态值，支持三种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置图形的状态，比如说:<code class=\"codespan\">{ state: &#39;selected&#39;}</code> 就是给所有的图形设置状态为<code class=\"codespan\">&#39;selected&#39;</code>，通常这种情况，<code class=\"codespan\">encode</code> 中也会设置<code class=\"codespan\">&#39;selected&#39;</code>状态对应的图形通道映射</li>\n<li><code class=\"codespan\">string[]</code> 给图形设置多个状态，可以配置<code class=\"codespan\">stateSort</code>来影响对应状态执行图形通道映射的顺序</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析状态值的回调函数，返回参数为<code class=\"codespan\">string | string[]</code>，对应的 ts 类型定义为：</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"glyph.glyphType.wave.stateSort":{"desc":"<p>设置当前图元所有图形元素的状态值的排序函数，会影响状态对应的图形通道映射的顺序，最先执行的状态可能被后续的状态覆盖图形通道映射结果，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"glyph.glyphType.wave.transform":{"desc":"<p>设置图元对应的变换，所有的数据变换都可以配置在图元上，用于对图元的<code class=\"codespan\">join data</code> 执行变换；\n另外一种类型的变换就是对图形元素执行的变换，比如说<code class=\"codespan\">dodge</code>；\n通用的类型定义如下：</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>每中变换支持的参数不同</p>\n"},"glyph.glyphType.wave.layout":{"desc":"<p>设置图元的布局参数，图元在参与布局的时候，存在两种角色：</p>\n<ul>\n<li>&#39;container&#39; 容器图元，一般是<code class=\"codespan\">group</code>图元</li>\n<li>&#39;item&#39; 布局子元素，作为容器图元的子节点</li>\n</ul>\n<p>注意，我们仅支持一层布局，如果是多层嵌套布局，建议使用自定义的布局方案进行实现；</p>\n<p>现在支持两种内容的布局：<code class=\"codespan\">grid</code> 布局 和 <code class=\"codespan\">relative</code>布局，相关类型定义如下</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>如果想要设置自定义的布局方案，<code class=\"codespan\">layout</code>也支持直接设置回调函数，回调函数的定义如下：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"glyph.glyphType.wave.layout.display":{"desc":"<p>容器图元设置布局的类型，支持两种配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> 相对布局</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> 网格布局</li>\n</ul>\n"},"glyph.glyphType.wave.layout.callback":{"desc":"<p>自定义该图元的回调函数，ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"glyph.glyphType.wave.layout.skipBeforeLayouted":{"desc":"<p>在布局完成前，跳过执行阶段</p>\n"},"glyph.glyphType.wave.layout.updateViewSignals":{"desc":"<p>是否更新默认的视图信号，也就是：<code class=\"codespan\">padding</code>、<code class=\"codespan\">viewWidth</code> 和 <code class=\"codespan\">viewHeight</code></p>\n<p>只能在设置了<code class=\"codespan\">{ layout: { display: &#39;relative&#39;} }</code>的容器图元上设置该属性</p>\n"},"glyph.glyphType.wave.layout.maxChildWidth":{"desc":"<p>相对布局的父图元，设置子图元的最大宽度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的宽度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"glyph.glyphType.wave.layout.maxChildHeight":{"desc":"<p>相对布局的父图元，设置子图元的最大高度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的高度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"glyph.glyphType.wave.layout.position":{"desc":"<p>设置相对布局的子图元的位置，支持的配置有：</p>\n<ul>\n<li>&#39;top&#39; 相对于父图元的顶部</li>\n<li>&#39;bottom&#39; 相对于父图元的底部</li>\n<li>&#39;left&#39; 相对于父图元的左侧</li>\n<li>&#39;right&#39; 相对于父图元的右侧</li>\n<li>&#39;content&#39; 相对于父图元的中心，也就是内容区域</li>\n<li>&#39;auto&#39; 图元设置了坐标系的时候，根据关联的<code class=\"codespan\">scale</code>，自定计算相对于父图元的位置</li>\n</ul>\n"},"glyph.glyphType.wave.layout.padding":{"desc":"<p>子图元内边距，单位 px，默认各方向内边距为 0，接受数值、数值数组以及对象设置。</p>\n<p>使用示例：</p>\n<pre><code class=\"lang-ts\">// 数值类型，设置内边距为 5\npadding: 5;\n// 数值数组，设置上下的内边距为 5，左右的内边距为 10，用法同 CSS 盒模型\npadding: [5, 10];\n// 数值数组，分别设置四个方向的内边距\npadding: [\n  5, // 上\n  10, // 右\n  5, // 下\n  10 // 左\n];\n// 对象类型\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"glyph.glyphType.wave.layout.gridTemplateRows":{"desc":"<p>网格布局的父图元设置行的高度</p>\n"},"glyph.glyphType.wave.layout.gridTemplateColumns":{"desc":"<p>网格布局的父图元设置列的宽度</p>\n"},"glyph.glyphType.wave.layout.gridRowGap":{"desc":"<p>网格布局的父图元设置行行距</p>\n"},"glyph.glyphType.wave.layout.gridColumnGap":{"desc":"<p>网格布局的父图元设置列间距</p>\n"},"glyph.glyphType.wave.layout.gridRowStart":{"desc":"<p>网格布局的子图元设置行开始的位置</p>\n"},"glyph.glyphType.wave.layout.gridRowEnd":{"desc":"<p>网格布局的子图元设置行结束的位置</p>\n"},"glyph.glyphType.wave.layout.gridColumnStart":{"desc":"<p>网格布局的子图元设置列开始的位置</p>\n"},"glyph.glyphType.wave.layout.gridColumnEnd":{"desc":"<p>网格布局的子图元设置列结束的位置</p>\n"},"component":{"desc":"<p><strong> component 图元 </strong></p>\n"},"component.type":{"desc":"<p>设置图元类型为 <code class=\"codespan\">component</code></p>\n"},"component.componentType":{"desc":"<p>设置组件的类型</p>\n"},"component.componentType.axis.componentType":{"desc":"<p>将组件类型设置为 <code class=\"codespan\">axis</code></p>\n"},"component.componentType.axis.axisType":{"desc":"<p>设置轴的类型，支持两种类型的配置：</p>\n<ul>\n<li>&#39;line&#39;</li>\n<li>&#39;circle&#39;;</li>\n</ul>\n"},"component.componentType.axis.tickCount":{"desc":"<p>设置刻度的个数</p>\n"},"component.componentType.axis.inside":{"desc":"<p>坐标轴是否朝向坐标系的内部</p>\n"},"component.componentType.axis.baseValue":{"desc":"<p>设置坐标值对应的基准值，比如说<code class=\"codespan\">x</code>轴对应了<code class=\"codespan\">y</code>轴基准值为<code class=\"codespan\">0</code></p>\n"},"component.componentType.axis.scale":{"desc":"<p>设置关联的<code class=\"codespan\">scale</code>语法元素，支持两种类型的设置：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 语法元素对应的 id</li>\n<li><code class=\"codespan\">IScale</code> 语法元素对应的实例，主要用于 API 创建模式</li>\n</ul>\n"},"component.componentType.axis.encode":{"desc":"<p>设置图元的视觉通道编码，默认支持三种数据变化状态：</p>\n<ul>\n<li><code class=\"codespan\">enter</code> 新增数据元素</li>\n<li><code class=\"codespan\">update</code> 数据元素更新</li>\n<li><code class=\"codespan\">exit</code> 数据元素被删除</li>\n</ul>\n<p>注意，这里的数据状态是根据<code class=\"codespan\">mark</code>的<code class=\"codespan\">key</code>自动生成的，我们会针对<code class=\"codespan\">mark</code>的绑定数据，根据<code class=\"codespan\">key</code>的配置，计算数据对应的唯一标志符，数据更新后，如果对应的唯一标志符不存在了，则状态为<code class=\"codespan\">exit</code>，如果存在，则为<code class=\"codespan\">update</code>；如果之前的数据不存在改唯一标志符，则数据元素对应的状态为<code class=\"codespan\">enter</code></p>\n<p>默认支持一种交互状态：</p>\n<ul>\n<li><code class=\"codespan\">hover</code> 鼠标 hover 到具体的图形上，给图形设置对应的视觉通道编码</li>\n</ul>\n"},"component.componentType.axis.encode.enter":{"desc":"<p>设置图元在数据初始化状态执行的视觉通道映射，注意数据更新的时候不再执行</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.axis.encode.enter.start":{"desc":"<p>设置坐标轴左上角的点坐标，格式为: <code class=\"codespan\">{ x: number; y: number }</code></p>\n"},"component.componentType.axis.encode.enter.end":{"desc":"<p>设置坐标轴右下角的点坐标，格式为: <code class=\"codespan\">{ x: number; y: number }</code></p>\n"},"component.componentType.axis.encode.enter.title":{"desc":"<p>设置轴的标题配置</p>\n"},"component.componentType.axis.encode.enter.label":{"desc":"<p>设置轴的标签配置</p>\n"},"component.componentType.axis.encode.enter.line":{"desc":"<p>设置轴的连线配置</p>\n"},"component.componentType.axis.encode.enter.tick":{"desc":"<p>设置轴的 tick 网格配置</p>\n"},"component.componentType.axis.encode.enter.subTick":{"desc":"<p>设置轴的次级 tick 配置</p>\n"},"component.componentType.axis.encode.enter.grid":{"desc":"<p>设置轴的网格配置</p>\n"},"component.componentType.axis.encode.enter.subGrid":{"desc":"<p>设置轴的次级网格配置</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.axis.encode.enter.x":{"desc":"<p>图元的 x 坐标</p>\n"},"component.componentType.axis.encode.enter.y":{"desc":"<p>图元 y 坐标</p>\n"},"component.componentType.axis.encode.enter.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"component.componentType.axis.encode.enter.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"component.componentType.axis.encode.enter.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.axis.encode.enter.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"component.componentType.axis.encode.enter.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.axis.encode.enter.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"component.componentType.axis.encode.enter.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"component.componentType.axis.encode.enter.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"component.componentType.axis.encode.enter.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"component.componentType.axis.encode.enter.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.axis.encode.enter.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.axis.encode.enter.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"component.componentType.axis.encode.enter.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"component.componentType.axis.encode.enter.outerBorder":{"desc":"<p>外描边</p>\n"},"component.componentType.axis.encode.enter.innerBorder":{"desc":"<p>内描边</p>\n"},"component.componentType.axis.encode.enter.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"component.componentType.axis.encode.enter.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.axis.encode.enter.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"component.componentType.axis.encode.enter.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"component.componentType.axis.encode.enter.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"component.componentType.axis.encode.enter.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"component.componentType.axis.encode.enter.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"component.componentType.axis.encode.enter.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"component.componentType.axis.encode.enter.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"component.componentType.axis.encode.enter.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.axis.encode.enter.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.axis.encode.enter.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.axis.encode.enter.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"component.componentType.axis.encode.enter.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"component.componentType.axis.encode.enter.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"component.componentType.axis.encode.enter.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"component.componentType.axis.encode.enter.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"component.componentType.axis.encode.enter.texture":{"desc":"<p>图元纹理</p>\n"},"component.componentType.axis.encode.enter.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"component.componentType.axis.encode.enter.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"component.componentType.axis.encode.enter.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"component.componentType.axis.encode.enter.blur":{"desc":"<p>图元边缘模糊</p>\n"},"component.componentType.axis.encode.enter.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"component.componentType.axis.encode.update":{"desc":"<p>设置图元在数据更新状态执行的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.axis.encode.update.start":{"desc":"<p>设置坐标轴左上角的点坐标，格式为: <code class=\"codespan\">{ x: number; y: number }</code></p>\n"},"component.componentType.axis.encode.update.end":{"desc":"<p>设置坐标轴右下角的点坐标，格式为: <code class=\"codespan\">{ x: number; y: number }</code></p>\n"},"component.componentType.axis.encode.update.title":{"desc":"<p>设置轴的标题配置</p>\n"},"component.componentType.axis.encode.update.label":{"desc":"<p>设置轴的标签配置</p>\n"},"component.componentType.axis.encode.update.line":{"desc":"<p>设置轴的连线配置</p>\n"},"component.componentType.axis.encode.update.tick":{"desc":"<p>设置轴的 tick 网格配置</p>\n"},"component.componentType.axis.encode.update.subTick":{"desc":"<p>设置轴的次级 tick 配置</p>\n"},"component.componentType.axis.encode.update.grid":{"desc":"<p>设置轴的网格配置</p>\n"},"component.componentType.axis.encode.update.subGrid":{"desc":"<p>设置轴的次级网格配置</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.axis.encode.update.x":{"desc":"<p>图元的 x 坐标</p>\n"},"component.componentType.axis.encode.update.y":{"desc":"<p>图元 y 坐标</p>\n"},"component.componentType.axis.encode.update.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"component.componentType.axis.encode.update.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"component.componentType.axis.encode.update.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.axis.encode.update.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"component.componentType.axis.encode.update.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.axis.encode.update.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"component.componentType.axis.encode.update.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"component.componentType.axis.encode.update.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"component.componentType.axis.encode.update.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"component.componentType.axis.encode.update.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.axis.encode.update.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.axis.encode.update.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"component.componentType.axis.encode.update.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"component.componentType.axis.encode.update.outerBorder":{"desc":"<p>外描边</p>\n"},"component.componentType.axis.encode.update.innerBorder":{"desc":"<p>内描边</p>\n"},"component.componentType.axis.encode.update.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"component.componentType.axis.encode.update.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.axis.encode.update.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"component.componentType.axis.encode.update.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"component.componentType.axis.encode.update.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"component.componentType.axis.encode.update.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"component.componentType.axis.encode.update.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"component.componentType.axis.encode.update.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"component.componentType.axis.encode.update.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"component.componentType.axis.encode.update.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.axis.encode.update.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.axis.encode.update.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.axis.encode.update.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"component.componentType.axis.encode.update.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"component.componentType.axis.encode.update.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"component.componentType.axis.encode.update.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"component.componentType.axis.encode.update.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"component.componentType.axis.encode.update.texture":{"desc":"<p>图元纹理</p>\n"},"component.componentType.axis.encode.update.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"component.componentType.axis.encode.update.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"component.componentType.axis.encode.update.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"component.componentType.axis.encode.update.blur":{"desc":"<p>图元边缘模糊</p>\n"},"component.componentType.axis.encode.update.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"component.componentType.axis.encode.exit":{"desc":"<p>设置图元在数据被删除的状态下执行的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.axis.encode.exit.start":{"desc":"<p>设置坐标轴左上角的点坐标，格式为: <code class=\"codespan\">{ x: number; y: number }</code></p>\n"},"component.componentType.axis.encode.exit.end":{"desc":"<p>设置坐标轴右下角的点坐标，格式为: <code class=\"codespan\">{ x: number; y: number }</code></p>\n"},"component.componentType.axis.encode.exit.title":{"desc":"<p>设置轴的标题配置</p>\n"},"component.componentType.axis.encode.exit.label":{"desc":"<p>设置轴的标签配置</p>\n"},"component.componentType.axis.encode.exit.line":{"desc":"<p>设置轴的连线配置</p>\n"},"component.componentType.axis.encode.exit.tick":{"desc":"<p>设置轴的 tick 网格配置</p>\n"},"component.componentType.axis.encode.exit.subTick":{"desc":"<p>设置轴的次级 tick 配置</p>\n"},"component.componentType.axis.encode.exit.grid":{"desc":"<p>设置轴的网格配置</p>\n"},"component.componentType.axis.encode.exit.subGrid":{"desc":"<p>设置轴的次级网格配置</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.axis.encode.exit.x":{"desc":"<p>图元的 x 坐标</p>\n"},"component.componentType.axis.encode.exit.y":{"desc":"<p>图元 y 坐标</p>\n"},"component.componentType.axis.encode.exit.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"component.componentType.axis.encode.exit.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"component.componentType.axis.encode.exit.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.axis.encode.exit.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"component.componentType.axis.encode.exit.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.axis.encode.exit.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"component.componentType.axis.encode.exit.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"component.componentType.axis.encode.exit.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"component.componentType.axis.encode.exit.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"component.componentType.axis.encode.exit.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.axis.encode.exit.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.axis.encode.exit.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"component.componentType.axis.encode.exit.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"component.componentType.axis.encode.exit.outerBorder":{"desc":"<p>外描边</p>\n"},"component.componentType.axis.encode.exit.innerBorder":{"desc":"<p>内描边</p>\n"},"component.componentType.axis.encode.exit.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"component.componentType.axis.encode.exit.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.axis.encode.exit.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"component.componentType.axis.encode.exit.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"component.componentType.axis.encode.exit.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"component.componentType.axis.encode.exit.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"component.componentType.axis.encode.exit.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"component.componentType.axis.encode.exit.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"component.componentType.axis.encode.exit.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"component.componentType.axis.encode.exit.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.axis.encode.exit.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.axis.encode.exit.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.axis.encode.exit.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"component.componentType.axis.encode.exit.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"component.componentType.axis.encode.exit.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"component.componentType.axis.encode.exit.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"component.componentType.axis.encode.exit.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"component.componentType.axis.encode.exit.texture":{"desc":"<p>图元纹理</p>\n"},"component.componentType.axis.encode.exit.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"component.componentType.axis.encode.exit.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"component.componentType.axis.encode.exit.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"component.componentType.axis.encode.exit.blur":{"desc":"<p>图元边缘模糊</p>\n"},"component.componentType.axis.encode.exit.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"component.componentType.axis.encode.hover":{"desc":"<p>设置<code class=\"codespan\">hover</code>状态的时候，图元对应的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.axis.encode.hover.start":{"desc":"<p>设置坐标轴左上角的点坐标，格式为: <code class=\"codespan\">{ x: number; y: number }</code></p>\n"},"component.componentType.axis.encode.hover.end":{"desc":"<p>设置坐标轴右下角的点坐标，格式为: <code class=\"codespan\">{ x: number; y: number }</code></p>\n"},"component.componentType.axis.encode.hover.title":{"desc":"<p>设置轴的标题配置</p>\n"},"component.componentType.axis.encode.hover.label":{"desc":"<p>设置轴的标签配置</p>\n"},"component.componentType.axis.encode.hover.line":{"desc":"<p>设置轴的连线配置</p>\n"},"component.componentType.axis.encode.hover.tick":{"desc":"<p>设置轴的 tick 网格配置</p>\n"},"component.componentType.axis.encode.hover.subTick":{"desc":"<p>设置轴的次级 tick 配置</p>\n"},"component.componentType.axis.encode.hover.grid":{"desc":"<p>设置轴的网格配置</p>\n"},"component.componentType.axis.encode.hover.subGrid":{"desc":"<p>设置轴的次级网格配置</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.axis.encode.hover.x":{"desc":"<p>图元的 x 坐标</p>\n"},"component.componentType.axis.encode.hover.y":{"desc":"<p>图元 y 坐标</p>\n"},"component.componentType.axis.encode.hover.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"component.componentType.axis.encode.hover.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"component.componentType.axis.encode.hover.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.axis.encode.hover.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"component.componentType.axis.encode.hover.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.axis.encode.hover.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"component.componentType.axis.encode.hover.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"component.componentType.axis.encode.hover.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"component.componentType.axis.encode.hover.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"component.componentType.axis.encode.hover.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.axis.encode.hover.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.axis.encode.hover.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"component.componentType.axis.encode.hover.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"component.componentType.axis.encode.hover.outerBorder":{"desc":"<p>外描边</p>\n"},"component.componentType.axis.encode.hover.innerBorder":{"desc":"<p>内描边</p>\n"},"component.componentType.axis.encode.hover.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"component.componentType.axis.encode.hover.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.axis.encode.hover.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"component.componentType.axis.encode.hover.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"component.componentType.axis.encode.hover.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"component.componentType.axis.encode.hover.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"component.componentType.axis.encode.hover.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"component.componentType.axis.encode.hover.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"component.componentType.axis.encode.hover.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"component.componentType.axis.encode.hover.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.axis.encode.hover.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.axis.encode.hover.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.axis.encode.hover.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"component.componentType.axis.encode.hover.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"component.componentType.axis.encode.hover.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"component.componentType.axis.encode.hover.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"component.componentType.axis.encode.hover.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"component.componentType.axis.encode.hover.texture":{"desc":"<p>图元纹理</p>\n"},"component.componentType.axis.encode.hover.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"component.componentType.axis.encode.hover.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"component.componentType.axis.encode.hover.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"component.componentType.axis.encode.hover.blur":{"desc":"<p>图元边缘模糊</p>\n"},"component.componentType.axis.encode.hover.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"component.componentType.axis.zIndex":{"desc":"<p>设置<code class=\"codespan\">mark</code>图元对应的容器图形(group)的 zIndex</p>\n"},"component.componentType.axis.interactive":{"desc":"<p>类型：<code class=\"codespan\">boolean</code>\n是否必传： 否</p>\n"},"component.componentType.axis.context":{"desc":"<p>设置图元的上下文参数</p>\n"},"component.componentType.axis.setCustomizedShape":{"desc":"<p>设置自定义形状的回调函数，对应的 ts 类型定位如下：</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>其中<code class=\"codespan\">ICustomPath2D</code> 为 VRender 提供的绘制自定义的路径一个工具类</p>\n"},"component.componentType.axis.support3d":{"desc":"<p>当画布设置了 3d 视角的时候，是否支持 3d 模式</p>\n"},"component.componentType.axis.group":{"desc":"<p>设置父图元，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 父图元对应的 id</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> 父图元对应的语法元素，一般用于 API 调用场景</li>\n</ul>\n<p>如果不设置，会默认挂在到画布的根节点下面</p>\n"},"component.componentType.axis.from":{"desc":"<p>ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>通过<code class=\"codespan\">data</code> 属性值，申明图元依赖的数据</p>\n"},"component.componentType.axis.key":{"desc":"<p>设置图元数据元素的唯一标志符，用于计算图形元素的数据状态，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"component.componentType.axis.sort":{"desc":"<p>对图元中的所有图形元素进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"component.componentType.axis.groupBy":{"desc":"<p>设置分组的属性，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置分组<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析分组<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"component.componentType.axis.groupSort":{"desc":"<p>对图元中的分组进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"component.componentType.axis.coordinate":{"desc":"<p>设置该图元关联的坐标系对应的 id 或者坐标系对应的图形元素</p>\n"},"component.componentType.axis.state":{"desc":"<p>设置当前图元所有图形元素的状态值，支持三种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置图形的状态，比如说:<code class=\"codespan\">{ state: &#39;selected&#39;}</code> 就是给所有的图形设置状态为<code class=\"codespan\">&#39;selected&#39;</code>，通常这种情况，<code class=\"codespan\">encode</code> 中也会设置<code class=\"codespan\">&#39;selected&#39;</code>状态对应的图形通道映射</li>\n<li><code class=\"codespan\">string[]</code> 给图形设置多个状态，可以配置<code class=\"codespan\">stateSort</code>来影响对应状态执行图形通道映射的顺序</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析状态值的回调函数，返回参数为<code class=\"codespan\">string | string[]</code>，对应的 ts 类型定义为：</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"component.componentType.axis.stateSort":{"desc":"<p>设置当前图元所有图形元素的状态值的排序函数，会影响状态对应的图形通道映射的顺序，最先执行的状态可能被后续的状态覆盖图形通道映射结果，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"component.componentType.axis.transform":{"desc":"<p>设置图元对应的变换，所有的数据变换都可以配置在图元上，用于对图元的<code class=\"codespan\">join data</code> 执行变换；\n另外一种类型的变换就是对图形元素执行的变换，比如说<code class=\"codespan\">dodge</code>；\n通用的类型定义如下：</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>每中变换支持的参数不同</p>\n"},"component.componentType.axis.layout":{"desc":"<p>设置图元的布局参数，图元在参与布局的时候，存在两种角色：</p>\n<ul>\n<li>&#39;container&#39; 容器图元，一般是<code class=\"codespan\">group</code>图元</li>\n<li>&#39;item&#39; 布局子元素，作为容器图元的子节点</li>\n</ul>\n<p>注意，我们仅支持一层布局，如果是多层嵌套布局，建议使用自定义的布局方案进行实现；</p>\n<p>现在支持两种内容的布局：<code class=\"codespan\">grid</code> 布局 和 <code class=\"codespan\">relative</code>布局，相关类型定义如下</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>如果想要设置自定义的布局方案，<code class=\"codespan\">layout</code>也支持直接设置回调函数，回调函数的定义如下：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"component.componentType.axis.layout.display":{"desc":"<p>容器图元设置布局的类型，支持两种配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> 相对布局</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> 网格布局</li>\n</ul>\n"},"component.componentType.axis.layout.callback":{"desc":"<p>自定义该图元的回调函数，ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"component.componentType.axis.layout.skipBeforeLayouted":{"desc":"<p>在布局完成前，跳过执行阶段</p>\n"},"component.componentType.axis.layout.updateViewSignals":{"desc":"<p>是否更新默认的视图信号，也就是：<code class=\"codespan\">padding</code>、<code class=\"codespan\">viewWidth</code> 和 <code class=\"codespan\">viewHeight</code></p>\n<p>只能在设置了<code class=\"codespan\">{ layout: { display: &#39;relative&#39;} }</code>的容器图元上设置该属性</p>\n"},"component.componentType.axis.layout.maxChildWidth":{"desc":"<p>相对布局的父图元，设置子图元的最大宽度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的宽度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"component.componentType.axis.layout.maxChildHeight":{"desc":"<p>相对布局的父图元，设置子图元的最大高度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的高度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"component.componentType.axis.layout.position":{"desc":"<p>设置相对布局的子图元的位置，支持的配置有：</p>\n<ul>\n<li>&#39;top&#39; 相对于父图元的顶部</li>\n<li>&#39;bottom&#39; 相对于父图元的底部</li>\n<li>&#39;left&#39; 相对于父图元的左侧</li>\n<li>&#39;right&#39; 相对于父图元的右侧</li>\n<li>&#39;content&#39; 相对于父图元的中心，也就是内容区域</li>\n<li>&#39;auto&#39; 图元设置了坐标系的时候，根据关联的<code class=\"codespan\">scale</code>，自定计算相对于父图元的位置</li>\n</ul>\n"},"component.componentType.axis.layout.padding":{"desc":"<p>子图元内边距，单位 px，默认各方向内边距为 0，接受数值、数值数组以及对象设置。</p>\n<p>使用示例：</p>\n<pre><code class=\"lang-ts\">// 数值类型，设置内边距为 5\npadding: 5;\n// 数值数组，设置上下的内边距为 5，左右的内边距为 10，用法同 CSS 盒模型\npadding: [5, 10];\n// 数值数组，分别设置四个方向的内边距\npadding: [\n  5, // 上\n  10, // 右\n  5, // 下\n  10 // 左\n];\n// 对象类型\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"component.componentType.axis.layout.gridTemplateRows":{"desc":"<p>网格布局的父图元设置行的高度</p>\n"},"component.componentType.axis.layout.gridTemplateColumns":{"desc":"<p>网格布局的父图元设置列的宽度</p>\n"},"component.componentType.axis.layout.gridRowGap":{"desc":"<p>网格布局的父图元设置行行距</p>\n"},"component.componentType.axis.layout.gridColumnGap":{"desc":"<p>网格布局的父图元设置列间距</p>\n"},"component.componentType.axis.layout.gridRowStart":{"desc":"<p>网格布局的子图元设置行开始的位置</p>\n"},"component.componentType.axis.layout.gridRowEnd":{"desc":"<p>网格布局的子图元设置行结束的位置</p>\n"},"component.componentType.axis.layout.gridColumnStart":{"desc":"<p>网格布局的子图元设置列开始的位置</p>\n"},"component.componentType.axis.layout.gridColumnEnd":{"desc":"<p>网格布局的子图元设置列结束的位置</p>\n"},"component.componentType.crosshair.componentType":{"desc":"<p>将组件类型设置为 <code class=\"codespan\">crosshair</code></p>\n"},"component.componentType.crosshair.crosshairType":{"desc":"<p>支持一下类型：</p>\n<ul>\n<li>&#39;x&#39;</li>\n<li>&#39;y&#39;</li>\n<li>&#39;angle&#39;</li>\n<li>&#39;radius&#39;</li>\n<li>&#39;radius-polygon&#39;</li>\n</ul>\n"},"component.componentType.crosshair.crosshairShape":{"desc":"<p>支持一下类型：</p>\n<ul>\n<li>&#39;line&#39;</li>\n<li>&#39;rect&#39;;</li>\n</ul>\n"},"component.componentType.crosshair.encode":{"desc":"<p>设置图元的视觉通道编码，默认支持三种数据变化状态：</p>\n<ul>\n<li><code class=\"codespan\">enter</code> 新增数据元素</li>\n<li><code class=\"codespan\">update</code> 数据元素更新</li>\n<li><code class=\"codespan\">exit</code> 数据元素被删除</li>\n</ul>\n<p>注意，这里的数据状态是根据<code class=\"codespan\">mark</code>的<code class=\"codespan\">key</code>自动生成的，我们会针对<code class=\"codespan\">mark</code>的绑定数据，根据<code class=\"codespan\">key</code>的配置，计算数据对应的唯一标志符，数据更新后，如果对应的唯一标志符不存在了，则状态为<code class=\"codespan\">exit</code>，如果存在，则为<code class=\"codespan\">update</code>；如果之前的数据不存在改唯一标志符，则数据元素对应的状态为<code class=\"codespan\">enter</code></p>\n<p>默认支持一种交互状态：</p>\n<ul>\n<li><code class=\"codespan\">hover</code> 鼠标 hover 到具体的图形上，给图形设置对应的视觉通道编码</li>\n</ul>\n"},"component.componentType.crosshair.encode.enter":{"desc":"<p>设置图元在数据初始化状态执行的视觉通道映射，注意数据更新的时候不再执行</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.crosshair.encode.enter.start":{"desc":"<p>在直角坐标系下使用时，设置坐标轴左上角的点坐标，格式为: <code class=\"codespan\">{ x: number; y: number }</code></p>\n"},"component.componentType.crosshair.encode.enter.end":{"desc":"<p>在直角坐标系下使用时，设置坐标轴右下角的点坐标，格式为: <code class=\"codespan\">{ x: number; y: number }</code></p>\n"},"component.componentType.crosshair.encode.enter.center":{"desc":"<p>极坐标系下使用时，设置坐标系原点坐标</p>\n"},"component.componentType.crosshair.encode.enter.radius":{"desc":"<p>极坐标系下使用时，设置坐标系半径</p>\n"},"component.componentType.crosshair.encode.enter.startAngle":{"desc":"<p>极坐标系下使用时，设置坐标系起始角度，默认为 <code class=\"codespan\">0</code></p>\n"},"component.componentType.crosshair.encode.enter.endAngle":{"desc":"<p>极坐标系下使用时，设置坐标系终止角度，默认为 <code class=\"codespan\">2 * PI</code></p>\n"},"component.componentType.crosshair.encode.enter.lineStyle":{"desc":"<p>设置<code class=\"codespan\">crosshairShape = &#39;line&#39;</code>类型的<code class=\"codespan\">crosshair</code>的线条样式</p>\n"},"component.componentType.crosshair.encode.enter.rectStyle":{"desc":"<p>设置<code class=\"codespan\">crosshairShape = &#39;rect&#39;</code>类型的<code class=\"codespan\">crosshair</code>的矩形的样式</p>\n"},"component.componentType.crosshair.encode.enter.sectorStyle":{"desc":"<p>设置<code class=\"codespan\">crosshairShape = &#39;rect&#39; &amp; crosshairType = &#39;angle&#39;</code> 类型的<code class=\"codespan\">crosshair</code>的图形的样式</p>\n"},"component.componentType.crosshair.encode.enter.innerRadius":{"desc":"<p>设置<code class=\"codespan\">crosshairShape = &#39;rect&#39; &amp; crosshairType = &#39;angle&#39;</code> 类型的<code class=\"codespan\">crosshair</code>的图形的内半径</p>\n"},"component.componentType.crosshair.encode.enter.sides":{"desc":"<p>设置<code class=\"codespan\">crosshairShape = &#39;line&#39; &amp; crosshairType = &#39;radius&#39;</code> 类型的<code class=\"codespan\">crosshair</code>的图形的多边形边数</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.crosshair.encode.enter.x":{"desc":"<p>图元的 x 坐标</p>\n"},"component.componentType.crosshair.encode.enter.y":{"desc":"<p>图元 y 坐标</p>\n"},"component.componentType.crosshair.encode.enter.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"component.componentType.crosshair.encode.enter.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"component.componentType.crosshair.encode.enter.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.crosshair.encode.enter.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"component.componentType.crosshair.encode.enter.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.crosshair.encode.enter.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"component.componentType.crosshair.encode.enter.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"component.componentType.crosshair.encode.enter.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"component.componentType.crosshair.encode.enter.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"component.componentType.crosshair.encode.enter.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.crosshair.encode.enter.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.crosshair.encode.enter.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"component.componentType.crosshair.encode.enter.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"component.componentType.crosshair.encode.enter.outerBorder":{"desc":"<p>外描边</p>\n"},"component.componentType.crosshair.encode.enter.innerBorder":{"desc":"<p>内描边</p>\n"},"component.componentType.crosshair.encode.enter.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"component.componentType.crosshair.encode.enter.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.crosshair.encode.enter.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"component.componentType.crosshair.encode.enter.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"component.componentType.crosshair.encode.enter.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"component.componentType.crosshair.encode.enter.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"component.componentType.crosshair.encode.enter.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"component.componentType.crosshair.encode.enter.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"component.componentType.crosshair.encode.enter.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"component.componentType.crosshair.encode.enter.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.crosshair.encode.enter.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.crosshair.encode.enter.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.crosshair.encode.enter.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"component.componentType.crosshair.encode.enter.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"component.componentType.crosshair.encode.enter.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"component.componentType.crosshair.encode.enter.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"component.componentType.crosshair.encode.enter.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"component.componentType.crosshair.encode.enter.texture":{"desc":"<p>图元纹理</p>\n"},"component.componentType.crosshair.encode.enter.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"component.componentType.crosshair.encode.enter.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"component.componentType.crosshair.encode.enter.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"component.componentType.crosshair.encode.enter.blur":{"desc":"<p>图元边缘模糊</p>\n"},"component.componentType.crosshair.encode.enter.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"component.componentType.crosshair.encode.update":{"desc":"<p>设置图元在数据更新状态执行的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.crosshair.encode.update.start":{"desc":"<p>在直角坐标系下使用时，设置坐标轴左上角的点坐标，格式为: <code class=\"codespan\">{ x: number; y: number }</code></p>\n"},"component.componentType.crosshair.encode.update.end":{"desc":"<p>在直角坐标系下使用时，设置坐标轴右下角的点坐标，格式为: <code class=\"codespan\">{ x: number; y: number }</code></p>\n"},"component.componentType.crosshair.encode.update.center":{"desc":"<p>极坐标系下使用时，设置坐标系原点坐标</p>\n"},"component.componentType.crosshair.encode.update.radius":{"desc":"<p>极坐标系下使用时，设置坐标系半径</p>\n"},"component.componentType.crosshair.encode.update.startAngle":{"desc":"<p>极坐标系下使用时，设置坐标系起始角度，默认为 <code class=\"codespan\">0</code></p>\n"},"component.componentType.crosshair.encode.update.endAngle":{"desc":"<p>极坐标系下使用时，设置坐标系终止角度，默认为 <code class=\"codespan\">2 * PI</code></p>\n"},"component.componentType.crosshair.encode.update.lineStyle":{"desc":"<p>设置<code class=\"codespan\">crosshairShape = &#39;line&#39;</code>类型的<code class=\"codespan\">crosshair</code>的线条样式</p>\n"},"component.componentType.crosshair.encode.update.rectStyle":{"desc":"<p>设置<code class=\"codespan\">crosshairShape = &#39;rect&#39;</code>类型的<code class=\"codespan\">crosshair</code>的矩形的样式</p>\n"},"component.componentType.crosshair.encode.update.sectorStyle":{"desc":"<p>设置<code class=\"codespan\">crosshairShape = &#39;rect&#39; &amp; crosshairType = &#39;angle&#39;</code> 类型的<code class=\"codespan\">crosshair</code>的图形的样式</p>\n"},"component.componentType.crosshair.encode.update.innerRadius":{"desc":"<p>设置<code class=\"codespan\">crosshairShape = &#39;rect&#39; &amp; crosshairType = &#39;angle&#39;</code> 类型的<code class=\"codespan\">crosshair</code>的图形的内半径</p>\n"},"component.componentType.crosshair.encode.update.sides":{"desc":"<p>设置<code class=\"codespan\">crosshairShape = &#39;line&#39; &amp; crosshairType = &#39;radius&#39;</code> 类型的<code class=\"codespan\">crosshair</code>的图形的多边形边数</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.crosshair.encode.update.x":{"desc":"<p>图元的 x 坐标</p>\n"},"component.componentType.crosshair.encode.update.y":{"desc":"<p>图元 y 坐标</p>\n"},"component.componentType.crosshair.encode.update.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"component.componentType.crosshair.encode.update.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"component.componentType.crosshair.encode.update.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.crosshair.encode.update.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"component.componentType.crosshair.encode.update.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.crosshair.encode.update.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"component.componentType.crosshair.encode.update.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"component.componentType.crosshair.encode.update.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"component.componentType.crosshair.encode.update.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"component.componentType.crosshair.encode.update.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.crosshair.encode.update.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.crosshair.encode.update.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"component.componentType.crosshair.encode.update.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"component.componentType.crosshair.encode.update.outerBorder":{"desc":"<p>外描边</p>\n"},"component.componentType.crosshair.encode.update.innerBorder":{"desc":"<p>内描边</p>\n"},"component.componentType.crosshair.encode.update.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"component.componentType.crosshair.encode.update.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.crosshair.encode.update.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"component.componentType.crosshair.encode.update.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"component.componentType.crosshair.encode.update.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"component.componentType.crosshair.encode.update.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"component.componentType.crosshair.encode.update.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"component.componentType.crosshair.encode.update.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"component.componentType.crosshair.encode.update.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"component.componentType.crosshair.encode.update.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.crosshair.encode.update.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.crosshair.encode.update.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.crosshair.encode.update.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"component.componentType.crosshair.encode.update.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"component.componentType.crosshair.encode.update.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"component.componentType.crosshair.encode.update.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"component.componentType.crosshair.encode.update.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"component.componentType.crosshair.encode.update.texture":{"desc":"<p>图元纹理</p>\n"},"component.componentType.crosshair.encode.update.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"component.componentType.crosshair.encode.update.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"component.componentType.crosshair.encode.update.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"component.componentType.crosshair.encode.update.blur":{"desc":"<p>图元边缘模糊</p>\n"},"component.componentType.crosshair.encode.update.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"component.componentType.crosshair.encode.exit":{"desc":"<p>设置图元在数据被删除的状态下执行的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.crosshair.encode.exit.start":{"desc":"<p>在直角坐标系下使用时，设置坐标轴左上角的点坐标，格式为: <code class=\"codespan\">{ x: number; y: number }</code></p>\n"},"component.componentType.crosshair.encode.exit.end":{"desc":"<p>在直角坐标系下使用时，设置坐标轴右下角的点坐标，格式为: <code class=\"codespan\">{ x: number; y: number }</code></p>\n"},"component.componentType.crosshair.encode.exit.center":{"desc":"<p>极坐标系下使用时，设置坐标系原点坐标</p>\n"},"component.componentType.crosshair.encode.exit.radius":{"desc":"<p>极坐标系下使用时，设置坐标系半径</p>\n"},"component.componentType.crosshair.encode.exit.startAngle":{"desc":"<p>极坐标系下使用时，设置坐标系起始角度，默认为 <code class=\"codespan\">0</code></p>\n"},"component.componentType.crosshair.encode.exit.endAngle":{"desc":"<p>极坐标系下使用时，设置坐标系终止角度，默认为 <code class=\"codespan\">2 * PI</code></p>\n"},"component.componentType.crosshair.encode.exit.lineStyle":{"desc":"<p>设置<code class=\"codespan\">crosshairShape = &#39;line&#39;</code>类型的<code class=\"codespan\">crosshair</code>的线条样式</p>\n"},"component.componentType.crosshair.encode.exit.rectStyle":{"desc":"<p>设置<code class=\"codespan\">crosshairShape = &#39;rect&#39;</code>类型的<code class=\"codespan\">crosshair</code>的矩形的样式</p>\n"},"component.componentType.crosshair.encode.exit.sectorStyle":{"desc":"<p>设置<code class=\"codespan\">crosshairShape = &#39;rect&#39; &amp; crosshairType = &#39;angle&#39;</code> 类型的<code class=\"codespan\">crosshair</code>的图形的样式</p>\n"},"component.componentType.crosshair.encode.exit.innerRadius":{"desc":"<p>设置<code class=\"codespan\">crosshairShape = &#39;rect&#39; &amp; crosshairType = &#39;angle&#39;</code> 类型的<code class=\"codespan\">crosshair</code>的图形的内半径</p>\n"},"component.componentType.crosshair.encode.exit.sides":{"desc":"<p>设置<code class=\"codespan\">crosshairShape = &#39;line&#39; &amp; crosshairType = &#39;radius&#39;</code> 类型的<code class=\"codespan\">crosshair</code>的图形的多边形边数</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.crosshair.encode.exit.x":{"desc":"<p>图元的 x 坐标</p>\n"},"component.componentType.crosshair.encode.exit.y":{"desc":"<p>图元 y 坐标</p>\n"},"component.componentType.crosshair.encode.exit.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"component.componentType.crosshair.encode.exit.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"component.componentType.crosshair.encode.exit.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.crosshair.encode.exit.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"component.componentType.crosshair.encode.exit.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.crosshair.encode.exit.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"component.componentType.crosshair.encode.exit.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"component.componentType.crosshair.encode.exit.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"component.componentType.crosshair.encode.exit.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"component.componentType.crosshair.encode.exit.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.crosshair.encode.exit.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.crosshair.encode.exit.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"component.componentType.crosshair.encode.exit.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"component.componentType.crosshair.encode.exit.outerBorder":{"desc":"<p>外描边</p>\n"},"component.componentType.crosshair.encode.exit.innerBorder":{"desc":"<p>内描边</p>\n"},"component.componentType.crosshair.encode.exit.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"component.componentType.crosshair.encode.exit.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.crosshair.encode.exit.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"component.componentType.crosshair.encode.exit.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"component.componentType.crosshair.encode.exit.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"component.componentType.crosshair.encode.exit.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"component.componentType.crosshair.encode.exit.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"component.componentType.crosshair.encode.exit.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"component.componentType.crosshair.encode.exit.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"component.componentType.crosshair.encode.exit.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.crosshair.encode.exit.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.crosshair.encode.exit.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.crosshair.encode.exit.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"component.componentType.crosshair.encode.exit.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"component.componentType.crosshair.encode.exit.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"component.componentType.crosshair.encode.exit.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"component.componentType.crosshair.encode.exit.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"component.componentType.crosshair.encode.exit.texture":{"desc":"<p>图元纹理</p>\n"},"component.componentType.crosshair.encode.exit.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"component.componentType.crosshair.encode.exit.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"component.componentType.crosshair.encode.exit.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"component.componentType.crosshair.encode.exit.blur":{"desc":"<p>图元边缘模糊</p>\n"},"component.componentType.crosshair.encode.exit.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"component.componentType.crosshair.encode.hover":{"desc":"<p>设置<code class=\"codespan\">hover</code>状态的时候，图元对应的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.crosshair.encode.hover.start":{"desc":"<p>在直角坐标系下使用时，设置坐标轴左上角的点坐标，格式为: <code class=\"codespan\">{ x: number; y: number }</code></p>\n"},"component.componentType.crosshair.encode.hover.end":{"desc":"<p>在直角坐标系下使用时，设置坐标轴右下角的点坐标，格式为: <code class=\"codespan\">{ x: number; y: number }</code></p>\n"},"component.componentType.crosshair.encode.hover.center":{"desc":"<p>极坐标系下使用时，设置坐标系原点坐标</p>\n"},"component.componentType.crosshair.encode.hover.radius":{"desc":"<p>极坐标系下使用时，设置坐标系半径</p>\n"},"component.componentType.crosshair.encode.hover.startAngle":{"desc":"<p>极坐标系下使用时，设置坐标系起始角度，默认为 <code class=\"codespan\">0</code></p>\n"},"component.componentType.crosshair.encode.hover.endAngle":{"desc":"<p>极坐标系下使用时，设置坐标系终止角度，默认为 <code class=\"codespan\">2 * PI</code></p>\n"},"component.componentType.crosshair.encode.hover.lineStyle":{"desc":"<p>设置<code class=\"codespan\">crosshairShape = &#39;line&#39;</code>类型的<code class=\"codespan\">crosshair</code>的线条样式</p>\n"},"component.componentType.crosshair.encode.hover.rectStyle":{"desc":"<p>设置<code class=\"codespan\">crosshairShape = &#39;rect&#39;</code>类型的<code class=\"codespan\">crosshair</code>的矩形的样式</p>\n"},"component.componentType.crosshair.encode.hover.sectorStyle":{"desc":"<p>设置<code class=\"codespan\">crosshairShape = &#39;rect&#39; &amp; crosshairType = &#39;angle&#39;</code> 类型的<code class=\"codespan\">crosshair</code>的图形的样式</p>\n"},"component.componentType.crosshair.encode.hover.innerRadius":{"desc":"<p>设置<code class=\"codespan\">crosshairShape = &#39;rect&#39; &amp; crosshairType = &#39;angle&#39;</code> 类型的<code class=\"codespan\">crosshair</code>的图形的内半径</p>\n"},"component.componentType.crosshair.encode.hover.sides":{"desc":"<p>设置<code class=\"codespan\">crosshairShape = &#39;line&#39; &amp; crosshairType = &#39;radius&#39;</code> 类型的<code class=\"codespan\">crosshair</code>的图形的多边形边数</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.crosshair.encode.hover.x":{"desc":"<p>图元的 x 坐标</p>\n"},"component.componentType.crosshair.encode.hover.y":{"desc":"<p>图元 y 坐标</p>\n"},"component.componentType.crosshair.encode.hover.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"component.componentType.crosshair.encode.hover.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"component.componentType.crosshair.encode.hover.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.crosshair.encode.hover.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"component.componentType.crosshair.encode.hover.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.crosshair.encode.hover.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"component.componentType.crosshair.encode.hover.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"component.componentType.crosshair.encode.hover.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"component.componentType.crosshair.encode.hover.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"component.componentType.crosshair.encode.hover.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.crosshair.encode.hover.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.crosshair.encode.hover.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"component.componentType.crosshair.encode.hover.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"component.componentType.crosshair.encode.hover.outerBorder":{"desc":"<p>外描边</p>\n"},"component.componentType.crosshair.encode.hover.innerBorder":{"desc":"<p>内描边</p>\n"},"component.componentType.crosshair.encode.hover.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"component.componentType.crosshair.encode.hover.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.crosshair.encode.hover.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"component.componentType.crosshair.encode.hover.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"component.componentType.crosshair.encode.hover.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"component.componentType.crosshair.encode.hover.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"component.componentType.crosshair.encode.hover.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"component.componentType.crosshair.encode.hover.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"component.componentType.crosshair.encode.hover.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"component.componentType.crosshair.encode.hover.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.crosshair.encode.hover.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.crosshair.encode.hover.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.crosshair.encode.hover.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"component.componentType.crosshair.encode.hover.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"component.componentType.crosshair.encode.hover.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"component.componentType.crosshair.encode.hover.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"component.componentType.crosshair.encode.hover.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"component.componentType.crosshair.encode.hover.texture":{"desc":"<p>图元纹理</p>\n"},"component.componentType.crosshair.encode.hover.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"component.componentType.crosshair.encode.hover.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"component.componentType.crosshair.encode.hover.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"component.componentType.crosshair.encode.hover.blur":{"desc":"<p>图元边缘模糊</p>\n"},"component.componentType.crosshair.encode.hover.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"component.componentType.crosshair.zIndex":{"desc":"<p>设置<code class=\"codespan\">mark</code>图元对应的容器图形(group)的 zIndex</p>\n"},"component.componentType.crosshair.interactive":{"desc":"<p>类型：<code class=\"codespan\">boolean</code>\n是否必传： 否</p>\n"},"component.componentType.crosshair.context":{"desc":"<p>设置图元的上下文参数</p>\n"},"component.componentType.crosshair.setCustomizedShape":{"desc":"<p>设置自定义形状的回调函数，对应的 ts 类型定位如下：</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>其中<code class=\"codespan\">ICustomPath2D</code> 为 VRender 提供的绘制自定义的路径一个工具类</p>\n"},"component.componentType.crosshair.support3d":{"desc":"<p>当画布设置了 3d 视角的时候，是否支持 3d 模式</p>\n"},"component.componentType.crosshair.group":{"desc":"<p>设置父图元，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 父图元对应的 id</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> 父图元对应的语法元素，一般用于 API 调用场景</li>\n</ul>\n<p>如果不设置，会默认挂在到画布的根节点下面</p>\n"},"component.componentType.crosshair.from":{"desc":"<p>ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>通过<code class=\"codespan\">data</code> 属性值，申明图元依赖的数据</p>\n"},"component.componentType.crosshair.key":{"desc":"<p>设置图元数据元素的唯一标志符，用于计算图形元素的数据状态，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"component.componentType.crosshair.sort":{"desc":"<p>对图元中的所有图形元素进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"component.componentType.crosshair.groupBy":{"desc":"<p>设置分组的属性，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置分组<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析分组<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"component.componentType.crosshair.groupSort":{"desc":"<p>对图元中的分组进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"component.componentType.crosshair.coordinate":{"desc":"<p>设置该图元关联的坐标系对应的 id 或者坐标系对应的图形元素</p>\n"},"component.componentType.crosshair.state":{"desc":"<p>设置当前图元所有图形元素的状态值，支持三种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置图形的状态，比如说:<code class=\"codespan\">{ state: &#39;selected&#39;}</code> 就是给所有的图形设置状态为<code class=\"codespan\">&#39;selected&#39;</code>，通常这种情况，<code class=\"codespan\">encode</code> 中也会设置<code class=\"codespan\">&#39;selected&#39;</code>状态对应的图形通道映射</li>\n<li><code class=\"codespan\">string[]</code> 给图形设置多个状态，可以配置<code class=\"codespan\">stateSort</code>来影响对应状态执行图形通道映射的顺序</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析状态值的回调函数，返回参数为<code class=\"codespan\">string | string[]</code>，对应的 ts 类型定义为：</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"component.componentType.crosshair.stateSort":{"desc":"<p>设置当前图元所有图形元素的状态值的排序函数，会影响状态对应的图形通道映射的顺序，最先执行的状态可能被后续的状态覆盖图形通道映射结果，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"component.componentType.crosshair.transform":{"desc":"<p>设置图元对应的变换，所有的数据变换都可以配置在图元上，用于对图元的<code class=\"codespan\">join data</code> 执行变换；\n另外一种类型的变换就是对图形元素执行的变换，比如说<code class=\"codespan\">dodge</code>；\n通用的类型定义如下：</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>每中变换支持的参数不同</p>\n"},"component.componentType.crosshair.layout":{"desc":"<p>设置图元的布局参数，图元在参与布局的时候，存在两种角色：</p>\n<ul>\n<li>&#39;container&#39; 容器图元，一般是<code class=\"codespan\">group</code>图元</li>\n<li>&#39;item&#39; 布局子元素，作为容器图元的子节点</li>\n</ul>\n<p>注意，我们仅支持一层布局，如果是多层嵌套布局，建议使用自定义的布局方案进行实现；</p>\n<p>现在支持两种内容的布局：<code class=\"codespan\">grid</code> 布局 和 <code class=\"codespan\">relative</code>布局，相关类型定义如下</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>如果想要设置自定义的布局方案，<code class=\"codespan\">layout</code>也支持直接设置回调函数，回调函数的定义如下：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"component.componentType.crosshair.layout.display":{"desc":"<p>容器图元设置布局的类型，支持两种配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> 相对布局</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> 网格布局</li>\n</ul>\n"},"component.componentType.crosshair.layout.callback":{"desc":"<p>自定义该图元的回调函数，ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"component.componentType.crosshair.layout.skipBeforeLayouted":{"desc":"<p>在布局完成前，跳过执行阶段</p>\n"},"component.componentType.crosshair.layout.updateViewSignals":{"desc":"<p>是否更新默认的视图信号，也就是：<code class=\"codespan\">padding</code>、<code class=\"codespan\">viewWidth</code> 和 <code class=\"codespan\">viewHeight</code></p>\n<p>只能在设置了<code class=\"codespan\">{ layout: { display: &#39;relative&#39;} }</code>的容器图元上设置该属性</p>\n"},"component.componentType.crosshair.layout.maxChildWidth":{"desc":"<p>相对布局的父图元，设置子图元的最大宽度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的宽度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"component.componentType.crosshair.layout.maxChildHeight":{"desc":"<p>相对布局的父图元，设置子图元的最大高度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的高度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"component.componentType.crosshair.layout.position":{"desc":"<p>设置相对布局的子图元的位置，支持的配置有：</p>\n<ul>\n<li>&#39;top&#39; 相对于父图元的顶部</li>\n<li>&#39;bottom&#39; 相对于父图元的底部</li>\n<li>&#39;left&#39; 相对于父图元的左侧</li>\n<li>&#39;right&#39; 相对于父图元的右侧</li>\n<li>&#39;content&#39; 相对于父图元的中心，也就是内容区域</li>\n<li>&#39;auto&#39; 图元设置了坐标系的时候，根据关联的<code class=\"codespan\">scale</code>，自定计算相对于父图元的位置</li>\n</ul>\n"},"component.componentType.crosshair.layout.padding":{"desc":"<p>子图元内边距，单位 px，默认各方向内边距为 0，接受数值、数值数组以及对象设置。</p>\n<p>使用示例：</p>\n<pre><code class=\"lang-ts\">// 数值类型，设置内边距为 5\npadding: 5;\n// 数值数组，设置上下的内边距为 5，左右的内边距为 10，用法同 CSS 盒模型\npadding: [5, 10];\n// 数值数组，分别设置四个方向的内边距\npadding: [\n  5, // 上\n  10, // 右\n  5, // 下\n  10 // 左\n];\n// 对象类型\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"component.componentType.crosshair.layout.gridTemplateRows":{"desc":"<p>网格布局的父图元设置行的高度</p>\n"},"component.componentType.crosshair.layout.gridTemplateColumns":{"desc":"<p>网格布局的父图元设置列的宽度</p>\n"},"component.componentType.crosshair.layout.gridRowGap":{"desc":"<p>网格布局的父图元设置行行距</p>\n"},"component.componentType.crosshair.layout.gridColumnGap":{"desc":"<p>网格布局的父图元设置列间距</p>\n"},"component.componentType.crosshair.layout.gridRowStart":{"desc":"<p>网格布局的子图元设置行开始的位置</p>\n"},"component.componentType.crosshair.layout.gridRowEnd":{"desc":"<p>网格布局的子图元设置行结束的位置</p>\n"},"component.componentType.crosshair.layout.gridColumnStart":{"desc":"<p>网格布局的子图元设置列开始的位置</p>\n"},"component.componentType.crosshair.layout.gridColumnEnd":{"desc":"<p>网格布局的子图元设置列结束的位置</p>\n"},"component.componentType.datazoom.componentType":{"desc":"<p>将组件类型设置为 <code class=\"codespan\">datazoom</code></p>\n"},"component.componentType.datazoom.preview":{"desc":"<p>设置预览对应的数据</p>\n"},"component.componentType.datazoom.preview.data":{"desc":"<p>设置预览数据对应的<code class=\"codespan\">data</code>语法元素，支持两种类型的设置：</p>\n<ul>\n<li><code class=\"codespan\">string</code> data 语法元素对应的 id</li>\n<li><code class=\"codespan\">IData</code> data 语法元素对应的实例，主要用于 API 创建模式</li>\n</ul>\n"},"component.componentType.datazoom.preview.x":{"desc":"<p>同<code class=\"codespan\">encode</code>中视觉通道设置</p>\n"},"component.componentType.datazoom.preview.y":{"desc":"<p>同<code class=\"codespan\">encode</code>中视觉通道设置</p>\n"},"component.componentType.datazoom.preview.x1":{"desc":"<p>同<code class=\"codespan\">encode</code>中视觉通道设置</p>\n"},"component.componentType.datazoom.preview.y1":{"desc":"<p>同<code class=\"codespan\">encode</code>中视觉通道设置</p>\n"},"component.componentType.datazoom.target":{"desc":"<p>设置 datazoom 触发数据更新后，需要更新的数据元素</p>\n"},"component.componentType.datazoom.target.data":{"desc":"<p>设置更新数据对应的<code class=\"codespan\">data</code>语法元素，支持两种类型的设置：</p>\n<ul>\n<li><code class=\"codespan\">string</code> data 语法元素对应的 id</li>\n<li><code class=\"codespan\">IData</code> data 语法元素对应的实例，主要用于 API 创建模式</li>\n</ul>\n"},"component.componentType.datazoom.target.filter":{"desc":"<p>对目标数据元素，执行 filter 操作，支持两种类型的设置：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 更新数据元素中对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义过滤函数，定义为：<code class=\"codespan\">(datum: any, value: { start: number; end: number; startRatio: number; endRatio: number }) =&gt; boolean</code></li>\n</ul>\n"},"component.componentType.datazoom.encode":{"desc":"<p>设置图元的视觉通道编码，默认支持三种数据变化状态：</p>\n<ul>\n<li><code class=\"codespan\">enter</code> 新增数据元素</li>\n<li><code class=\"codespan\">update</code> 数据元素更新</li>\n<li><code class=\"codespan\">exit</code> 数据元素被删除</li>\n</ul>\n<p>注意，这里的数据状态是根据<code class=\"codespan\">mark</code>的<code class=\"codespan\">key</code>自动生成的，我们会针对<code class=\"codespan\">mark</code>的绑定数据，根据<code class=\"codespan\">key</code>的配置，计算数据对应的唯一标志符，数据更新后，如果对应的唯一标志符不存在了，则状态为<code class=\"codespan\">exit</code>，如果存在，则为<code class=\"codespan\">update</code>；如果之前的数据不存在改唯一标志符，则数据元素对应的状态为<code class=\"codespan\">enter</code></p>\n<p>默认支持一种交互状态：</p>\n<ul>\n<li><code class=\"codespan\">hover</code> 鼠标 hover 到具体的图形上，给图形设置对应的视觉通道编码</li>\n</ul>\n"},"component.componentType.datazoom.encode.enter":{"desc":"<p>设置图元在数据初始化状态执行的视觉通道映射，注意数据更新的时候不再执行</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.datazoom.encode.enter.orient":{"desc":"<p>组件朝向</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n</ul>\n"},"component.componentType.datazoom.encode.enter.showDetail(boolean | string)":{"desc":"<p>是否显示前后内容文本</p>\n"},"component.componentType.datazoom.encode.enter.brushSelect":{"desc":"<p>是否启用刷选</p>\n"},"component.componentType.datazoom.encode.enter.backgroundStyle":{"desc":"<p>背景样式</p>\n"},"component.componentType.datazoom.encode.enter.dragMaskStyle":{"desc":"<p>拖拽区域样式</p>\n"},"component.componentType.datazoom.encode.enter.backgroundChartStyle":{"desc":"<p>缩略图样式</p>\n"},"component.componentType.datazoom.encode.enter.selectedBackgroundStyle":{"desc":"<p>选中区域背景央视</p>\n"},"component.componentType.datazoom.encode.enter.selectedBackgroundChartStyle":{"desc":"<p>选中区域缩略图样式</p>\n"},"component.componentType.datazoom.encode.enter.middleHandlerStyle":{"desc":"<p>中央手柄样式</p>\n"},"component.componentType.datazoom.encode.enter.startHandlerStyle":{"desc":"<p>初始手柄样式</p>\n"},"component.componentType.datazoom.encode.enter.endHandlerStyle":{"desc":"<p>终止手柄样式</p>\n"},"component.componentType.datazoom.encode.enter.startTextStyle":{"desc":"<p>首部文字样式</p>\n"},"component.componentType.datazoom.encode.enter.endTextStyle":{"desc":"<p>尾部文字样式</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.datazoom.encode.enter.x":{"desc":"<p>图元的 x 坐标</p>\n"},"component.componentType.datazoom.encode.enter.y":{"desc":"<p>图元 y 坐标</p>\n"},"component.componentType.datazoom.encode.enter.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"component.componentType.datazoom.encode.enter.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"component.componentType.datazoom.encode.enter.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.datazoom.encode.enter.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"component.componentType.datazoom.encode.enter.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.datazoom.encode.enter.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"component.componentType.datazoom.encode.enter.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"component.componentType.datazoom.encode.enter.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"component.componentType.datazoom.encode.enter.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"component.componentType.datazoom.encode.enter.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.datazoom.encode.enter.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.datazoom.encode.enter.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"component.componentType.datazoom.encode.enter.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"component.componentType.datazoom.encode.enter.outerBorder":{"desc":"<p>外描边</p>\n"},"component.componentType.datazoom.encode.enter.innerBorder":{"desc":"<p>内描边</p>\n"},"component.componentType.datazoom.encode.enter.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"component.componentType.datazoom.encode.enter.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.datazoom.encode.enter.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"component.componentType.datazoom.encode.enter.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"component.componentType.datazoom.encode.enter.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"component.componentType.datazoom.encode.enter.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"component.componentType.datazoom.encode.enter.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"component.componentType.datazoom.encode.enter.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"component.componentType.datazoom.encode.enter.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"component.componentType.datazoom.encode.enter.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.datazoom.encode.enter.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.datazoom.encode.enter.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.datazoom.encode.enter.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"component.componentType.datazoom.encode.enter.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"component.componentType.datazoom.encode.enter.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"component.componentType.datazoom.encode.enter.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"component.componentType.datazoom.encode.enter.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"component.componentType.datazoom.encode.enter.texture":{"desc":"<p>图元纹理</p>\n"},"component.componentType.datazoom.encode.enter.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"component.componentType.datazoom.encode.enter.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"component.componentType.datazoom.encode.enter.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"component.componentType.datazoom.encode.enter.blur":{"desc":"<p>图元边缘模糊</p>\n"},"component.componentType.datazoom.encode.enter.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"component.componentType.datazoom.encode.update":{"desc":"<p>设置图元在数据更新状态执行的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.datazoom.encode.update.orient":{"desc":"<p>组件朝向</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n</ul>\n"},"component.componentType.datazoom.encode.update.showDetail(boolean | string)":{"desc":"<p>是否显示前后内容文本</p>\n"},"component.componentType.datazoom.encode.update.brushSelect":{"desc":"<p>是否启用刷选</p>\n"},"component.componentType.datazoom.encode.update.backgroundStyle":{"desc":"<p>背景样式</p>\n"},"component.componentType.datazoom.encode.update.dragMaskStyle":{"desc":"<p>拖拽区域样式</p>\n"},"component.componentType.datazoom.encode.update.backgroundChartStyle":{"desc":"<p>缩略图样式</p>\n"},"component.componentType.datazoom.encode.update.selectedBackgroundStyle":{"desc":"<p>选中区域背景央视</p>\n"},"component.componentType.datazoom.encode.update.selectedBackgroundChartStyle":{"desc":"<p>选中区域缩略图样式</p>\n"},"component.componentType.datazoom.encode.update.middleHandlerStyle":{"desc":"<p>中央手柄样式</p>\n"},"component.componentType.datazoom.encode.update.startHandlerStyle":{"desc":"<p>初始手柄样式</p>\n"},"component.componentType.datazoom.encode.update.endHandlerStyle":{"desc":"<p>终止手柄样式</p>\n"},"component.componentType.datazoom.encode.update.startTextStyle":{"desc":"<p>首部文字样式</p>\n"},"component.componentType.datazoom.encode.update.endTextStyle":{"desc":"<p>尾部文字样式</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.datazoom.encode.update.x":{"desc":"<p>图元的 x 坐标</p>\n"},"component.componentType.datazoom.encode.update.y":{"desc":"<p>图元 y 坐标</p>\n"},"component.componentType.datazoom.encode.update.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"component.componentType.datazoom.encode.update.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"component.componentType.datazoom.encode.update.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.datazoom.encode.update.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"component.componentType.datazoom.encode.update.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.datazoom.encode.update.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"component.componentType.datazoom.encode.update.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"component.componentType.datazoom.encode.update.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"component.componentType.datazoom.encode.update.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"component.componentType.datazoom.encode.update.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.datazoom.encode.update.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.datazoom.encode.update.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"component.componentType.datazoom.encode.update.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"component.componentType.datazoom.encode.update.outerBorder":{"desc":"<p>外描边</p>\n"},"component.componentType.datazoom.encode.update.innerBorder":{"desc":"<p>内描边</p>\n"},"component.componentType.datazoom.encode.update.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"component.componentType.datazoom.encode.update.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.datazoom.encode.update.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"component.componentType.datazoom.encode.update.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"component.componentType.datazoom.encode.update.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"component.componentType.datazoom.encode.update.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"component.componentType.datazoom.encode.update.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"component.componentType.datazoom.encode.update.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"component.componentType.datazoom.encode.update.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"component.componentType.datazoom.encode.update.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.datazoom.encode.update.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.datazoom.encode.update.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.datazoom.encode.update.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"component.componentType.datazoom.encode.update.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"component.componentType.datazoom.encode.update.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"component.componentType.datazoom.encode.update.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"component.componentType.datazoom.encode.update.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"component.componentType.datazoom.encode.update.texture":{"desc":"<p>图元纹理</p>\n"},"component.componentType.datazoom.encode.update.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"component.componentType.datazoom.encode.update.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"component.componentType.datazoom.encode.update.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"component.componentType.datazoom.encode.update.blur":{"desc":"<p>图元边缘模糊</p>\n"},"component.componentType.datazoom.encode.update.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"component.componentType.datazoom.encode.exit":{"desc":"<p>设置图元在数据被删除的状态下执行的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.datazoom.encode.exit.orient":{"desc":"<p>组件朝向</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n</ul>\n"},"component.componentType.datazoom.encode.exit.showDetail(boolean | string)":{"desc":"<p>是否显示前后内容文本</p>\n"},"component.componentType.datazoom.encode.exit.brushSelect":{"desc":"<p>是否启用刷选</p>\n"},"component.componentType.datazoom.encode.exit.backgroundStyle":{"desc":"<p>背景样式</p>\n"},"component.componentType.datazoom.encode.exit.dragMaskStyle":{"desc":"<p>拖拽区域样式</p>\n"},"component.componentType.datazoom.encode.exit.backgroundChartStyle":{"desc":"<p>缩略图样式</p>\n"},"component.componentType.datazoom.encode.exit.selectedBackgroundStyle":{"desc":"<p>选中区域背景央视</p>\n"},"component.componentType.datazoom.encode.exit.selectedBackgroundChartStyle":{"desc":"<p>选中区域缩略图样式</p>\n"},"component.componentType.datazoom.encode.exit.middleHandlerStyle":{"desc":"<p>中央手柄样式</p>\n"},"component.componentType.datazoom.encode.exit.startHandlerStyle":{"desc":"<p>初始手柄样式</p>\n"},"component.componentType.datazoom.encode.exit.endHandlerStyle":{"desc":"<p>终止手柄样式</p>\n"},"component.componentType.datazoom.encode.exit.startTextStyle":{"desc":"<p>首部文字样式</p>\n"},"component.componentType.datazoom.encode.exit.endTextStyle":{"desc":"<p>尾部文字样式</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.datazoom.encode.exit.x":{"desc":"<p>图元的 x 坐标</p>\n"},"component.componentType.datazoom.encode.exit.y":{"desc":"<p>图元 y 坐标</p>\n"},"component.componentType.datazoom.encode.exit.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"component.componentType.datazoom.encode.exit.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"component.componentType.datazoom.encode.exit.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.datazoom.encode.exit.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"component.componentType.datazoom.encode.exit.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.datazoom.encode.exit.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"component.componentType.datazoom.encode.exit.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"component.componentType.datazoom.encode.exit.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"component.componentType.datazoom.encode.exit.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"component.componentType.datazoom.encode.exit.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.datazoom.encode.exit.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.datazoom.encode.exit.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"component.componentType.datazoom.encode.exit.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"component.componentType.datazoom.encode.exit.outerBorder":{"desc":"<p>外描边</p>\n"},"component.componentType.datazoom.encode.exit.innerBorder":{"desc":"<p>内描边</p>\n"},"component.componentType.datazoom.encode.exit.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"component.componentType.datazoom.encode.exit.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.datazoom.encode.exit.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"component.componentType.datazoom.encode.exit.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"component.componentType.datazoom.encode.exit.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"component.componentType.datazoom.encode.exit.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"component.componentType.datazoom.encode.exit.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"component.componentType.datazoom.encode.exit.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"component.componentType.datazoom.encode.exit.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"component.componentType.datazoom.encode.exit.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.datazoom.encode.exit.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.datazoom.encode.exit.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.datazoom.encode.exit.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"component.componentType.datazoom.encode.exit.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"component.componentType.datazoom.encode.exit.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"component.componentType.datazoom.encode.exit.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"component.componentType.datazoom.encode.exit.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"component.componentType.datazoom.encode.exit.texture":{"desc":"<p>图元纹理</p>\n"},"component.componentType.datazoom.encode.exit.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"component.componentType.datazoom.encode.exit.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"component.componentType.datazoom.encode.exit.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"component.componentType.datazoom.encode.exit.blur":{"desc":"<p>图元边缘模糊</p>\n"},"component.componentType.datazoom.encode.exit.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"component.componentType.datazoom.encode.hover":{"desc":"<p>设置<code class=\"codespan\">hover</code>状态的时候，图元对应的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.datazoom.encode.hover.orient":{"desc":"<p>组件朝向</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n</ul>\n"},"component.componentType.datazoom.encode.hover.showDetail(boolean | string)":{"desc":"<p>是否显示前后内容文本</p>\n"},"component.componentType.datazoom.encode.hover.brushSelect":{"desc":"<p>是否启用刷选</p>\n"},"component.componentType.datazoom.encode.hover.backgroundStyle":{"desc":"<p>背景样式</p>\n"},"component.componentType.datazoom.encode.hover.dragMaskStyle":{"desc":"<p>拖拽区域样式</p>\n"},"component.componentType.datazoom.encode.hover.backgroundChartStyle":{"desc":"<p>缩略图样式</p>\n"},"component.componentType.datazoom.encode.hover.selectedBackgroundStyle":{"desc":"<p>选中区域背景央视</p>\n"},"component.componentType.datazoom.encode.hover.selectedBackgroundChartStyle":{"desc":"<p>选中区域缩略图样式</p>\n"},"component.componentType.datazoom.encode.hover.middleHandlerStyle":{"desc":"<p>中央手柄样式</p>\n"},"component.componentType.datazoom.encode.hover.startHandlerStyle":{"desc":"<p>初始手柄样式</p>\n"},"component.componentType.datazoom.encode.hover.endHandlerStyle":{"desc":"<p>终止手柄样式</p>\n"},"component.componentType.datazoom.encode.hover.startTextStyle":{"desc":"<p>首部文字样式</p>\n"},"component.componentType.datazoom.encode.hover.endTextStyle":{"desc":"<p>尾部文字样式</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.datazoom.encode.hover.x":{"desc":"<p>图元的 x 坐标</p>\n"},"component.componentType.datazoom.encode.hover.y":{"desc":"<p>图元 y 坐标</p>\n"},"component.componentType.datazoom.encode.hover.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"component.componentType.datazoom.encode.hover.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"component.componentType.datazoom.encode.hover.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.datazoom.encode.hover.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"component.componentType.datazoom.encode.hover.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.datazoom.encode.hover.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"component.componentType.datazoom.encode.hover.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"component.componentType.datazoom.encode.hover.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"component.componentType.datazoom.encode.hover.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"component.componentType.datazoom.encode.hover.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.datazoom.encode.hover.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.datazoom.encode.hover.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"component.componentType.datazoom.encode.hover.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"component.componentType.datazoom.encode.hover.outerBorder":{"desc":"<p>外描边</p>\n"},"component.componentType.datazoom.encode.hover.innerBorder":{"desc":"<p>内描边</p>\n"},"component.componentType.datazoom.encode.hover.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"component.componentType.datazoom.encode.hover.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.datazoom.encode.hover.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"component.componentType.datazoom.encode.hover.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"component.componentType.datazoom.encode.hover.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"component.componentType.datazoom.encode.hover.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"component.componentType.datazoom.encode.hover.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"component.componentType.datazoom.encode.hover.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"component.componentType.datazoom.encode.hover.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"component.componentType.datazoom.encode.hover.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.datazoom.encode.hover.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.datazoom.encode.hover.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.datazoom.encode.hover.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"component.componentType.datazoom.encode.hover.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"component.componentType.datazoom.encode.hover.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"component.componentType.datazoom.encode.hover.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"component.componentType.datazoom.encode.hover.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"component.componentType.datazoom.encode.hover.texture":{"desc":"<p>图元纹理</p>\n"},"component.componentType.datazoom.encode.hover.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"component.componentType.datazoom.encode.hover.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"component.componentType.datazoom.encode.hover.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"component.componentType.datazoom.encode.hover.blur":{"desc":"<p>图元边缘模糊</p>\n"},"component.componentType.datazoom.encode.hover.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"component.componentType.datazoom.zIndex":{"desc":"<p>设置<code class=\"codespan\">mark</code>图元对应的容器图形(group)的 zIndex</p>\n"},"component.componentType.datazoom.interactive":{"desc":"<p>类型：<code class=\"codespan\">boolean</code>\n是否必传： 否</p>\n"},"component.componentType.datazoom.context":{"desc":"<p>设置图元的上下文参数</p>\n"},"component.componentType.datazoom.setCustomizedShape":{"desc":"<p>设置自定义形状的回调函数，对应的 ts 类型定位如下：</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>其中<code class=\"codespan\">ICustomPath2D</code> 为 VRender 提供的绘制自定义的路径一个工具类</p>\n"},"component.componentType.datazoom.support3d":{"desc":"<p>当画布设置了 3d 视角的时候，是否支持 3d 模式</p>\n"},"component.componentType.datazoom.group":{"desc":"<p>设置父图元，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 父图元对应的 id</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> 父图元对应的语法元素，一般用于 API 调用场景</li>\n</ul>\n<p>如果不设置，会默认挂在到画布的根节点下面</p>\n"},"component.componentType.datazoom.from":{"desc":"<p>ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>通过<code class=\"codespan\">data</code> 属性值，申明图元依赖的数据</p>\n"},"component.componentType.datazoom.key":{"desc":"<p>设置图元数据元素的唯一标志符，用于计算图形元素的数据状态，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"component.componentType.datazoom.sort":{"desc":"<p>对图元中的所有图形元素进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"component.componentType.datazoom.groupBy":{"desc":"<p>设置分组的属性，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置分组<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析分组<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"component.componentType.datazoom.groupSort":{"desc":"<p>对图元中的分组进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"component.componentType.datazoom.coordinate":{"desc":"<p>设置该图元关联的坐标系对应的 id 或者坐标系对应的图形元素</p>\n"},"component.componentType.datazoom.state":{"desc":"<p>设置当前图元所有图形元素的状态值，支持三种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置图形的状态，比如说:<code class=\"codespan\">{ state: &#39;selected&#39;}</code> 就是给所有的图形设置状态为<code class=\"codespan\">&#39;selected&#39;</code>，通常这种情况，<code class=\"codespan\">encode</code> 中也会设置<code class=\"codespan\">&#39;selected&#39;</code>状态对应的图形通道映射</li>\n<li><code class=\"codespan\">string[]</code> 给图形设置多个状态，可以配置<code class=\"codespan\">stateSort</code>来影响对应状态执行图形通道映射的顺序</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析状态值的回调函数，返回参数为<code class=\"codespan\">string | string[]</code>，对应的 ts 类型定义为：</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"component.componentType.datazoom.stateSort":{"desc":"<p>设置当前图元所有图形元素的状态值的排序函数，会影响状态对应的图形通道映射的顺序，最先执行的状态可能被后续的状态覆盖图形通道映射结果，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"component.componentType.datazoom.transform":{"desc":"<p>设置图元对应的变换，所有的数据变换都可以配置在图元上，用于对图元的<code class=\"codespan\">join data</code> 执行变换；\n另外一种类型的变换就是对图形元素执行的变换，比如说<code class=\"codespan\">dodge</code>；\n通用的类型定义如下：</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>每中变换支持的参数不同</p>\n"},"component.componentType.datazoom.layout":{"desc":"<p>设置图元的布局参数，图元在参与布局的时候，存在两种角色：</p>\n<ul>\n<li>&#39;container&#39; 容器图元，一般是<code class=\"codespan\">group</code>图元</li>\n<li>&#39;item&#39; 布局子元素，作为容器图元的子节点</li>\n</ul>\n<p>注意，我们仅支持一层布局，如果是多层嵌套布局，建议使用自定义的布局方案进行实现；</p>\n<p>现在支持两种内容的布局：<code class=\"codespan\">grid</code> 布局 和 <code class=\"codespan\">relative</code>布局，相关类型定义如下</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>如果想要设置自定义的布局方案，<code class=\"codespan\">layout</code>也支持直接设置回调函数，回调函数的定义如下：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"component.componentType.datazoom.layout.display":{"desc":"<p>容器图元设置布局的类型，支持两种配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> 相对布局</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> 网格布局</li>\n</ul>\n"},"component.componentType.datazoom.layout.callback":{"desc":"<p>自定义该图元的回调函数，ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"component.componentType.datazoom.layout.skipBeforeLayouted":{"desc":"<p>在布局完成前，跳过执行阶段</p>\n"},"component.componentType.datazoom.layout.updateViewSignals":{"desc":"<p>是否更新默认的视图信号，也就是：<code class=\"codespan\">padding</code>、<code class=\"codespan\">viewWidth</code> 和 <code class=\"codespan\">viewHeight</code></p>\n<p>只能在设置了<code class=\"codespan\">{ layout: { display: &#39;relative&#39;} }</code>的容器图元上设置该属性</p>\n"},"component.componentType.datazoom.layout.maxChildWidth":{"desc":"<p>相对布局的父图元，设置子图元的最大宽度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的宽度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"component.componentType.datazoom.layout.maxChildHeight":{"desc":"<p>相对布局的父图元，设置子图元的最大高度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的高度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"component.componentType.datazoom.layout.position":{"desc":"<p>设置相对布局的子图元的位置，支持的配置有：</p>\n<ul>\n<li>&#39;top&#39; 相对于父图元的顶部</li>\n<li>&#39;bottom&#39; 相对于父图元的底部</li>\n<li>&#39;left&#39; 相对于父图元的左侧</li>\n<li>&#39;right&#39; 相对于父图元的右侧</li>\n<li>&#39;content&#39; 相对于父图元的中心，也就是内容区域</li>\n<li>&#39;auto&#39; 图元设置了坐标系的时候，根据关联的<code class=\"codespan\">scale</code>，自定计算相对于父图元的位置</li>\n</ul>\n"},"component.componentType.datazoom.layout.padding":{"desc":"<p>子图元内边距，单位 px，默认各方向内边距为 0，接受数值、数值数组以及对象设置。</p>\n<p>使用示例：</p>\n<pre><code class=\"lang-ts\">// 数值类型，设置内边距为 5\npadding: 5;\n// 数值数组，设置上下的内边距为 5，左右的内边距为 10，用法同 CSS 盒模型\npadding: [5, 10];\n// 数值数组，分别设置四个方向的内边距\npadding: [\n  5, // 上\n  10, // 右\n  5, // 下\n  10 // 左\n];\n// 对象类型\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"component.componentType.datazoom.layout.gridTemplateRows":{"desc":"<p>网格布局的父图元设置行的高度</p>\n"},"component.componentType.datazoom.layout.gridTemplateColumns":{"desc":"<p>网格布局的父图元设置列的宽度</p>\n"},"component.componentType.datazoom.layout.gridRowGap":{"desc":"<p>网格布局的父图元设置行行距</p>\n"},"component.componentType.datazoom.layout.gridColumnGap":{"desc":"<p>网格布局的父图元设置列间距</p>\n"},"component.componentType.datazoom.layout.gridRowStart":{"desc":"<p>网格布局的子图元设置行开始的位置</p>\n"},"component.componentType.datazoom.layout.gridRowEnd":{"desc":"<p>网格布局的子图元设置行结束的位置</p>\n"},"component.componentType.datazoom.layout.gridColumnStart":{"desc":"<p>网格布局的子图元设置列开始的位置</p>\n"},"component.componentType.datazoom.layout.gridColumnEnd":{"desc":"<p>网格布局的子图元设置列结束的位置</p>\n"},"component.componentType.label.componentType":{"desc":"<p>将组件类型设置为 <code class=\"codespan\">label</code></p>\n"},"component.componentType.label.labelStyle":{"desc":"<p>设置 label 的样式</p>\n"},"component.componentType.label.size":{"desc":"<p>当关联<code class=\"codespan\">symbol</code>图元的时候，这只<code class=\"codespan\">symbol</code>对应的<code class=\"codespan\">size</code>视觉通道</p>\n"},"component.componentType.label.target":{"desc":"<p>关联的图元，支持关联单个图元或者多个图元，支持四种格式的配置：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 关联单个图元，配置关联图元对应的 id</li>\n<li><code class=\"codespan\">string[]</code> 关联多个图元，配置关联图元对应的 id</li>\n<li><code class=\"codespan\">IMark</code> 关联单个图元，配置关联图元对应的实例，主要用于 API 创建模式</li>\n<li><code class=\"codespan\">IMark[]</code> 关联多个图元，配置关联图元对应的实例，主要用于 API 创建模式</li>\n</ul>\n"},"component.componentType.label.encode":{"desc":"<p>设置图元的视觉通道编码，默认支持三种数据变化状态：</p>\n<ul>\n<li><code class=\"codespan\">enter</code> 新增数据元素</li>\n<li><code class=\"codespan\">update</code> 数据元素更新</li>\n<li><code class=\"codespan\">exit</code> 数据元素被删除</li>\n</ul>\n<p>注意，这里的数据状态是根据<code class=\"codespan\">mark</code>的<code class=\"codespan\">key</code>自动生成的，我们会针对<code class=\"codespan\">mark</code>的绑定数据，根据<code class=\"codespan\">key</code>的配置，计算数据对应的唯一标志符，数据更新后，如果对应的唯一标志符不存在了，则状态为<code class=\"codespan\">exit</code>，如果存在，则为<code class=\"codespan\">update</code>；如果之前的数据不存在改唯一标志符，则数据元素对应的状态为<code class=\"codespan\">enter</code></p>\n<p>默认支持一种交互状态：</p>\n<ul>\n<li><code class=\"codespan\">hover</code> 鼠标 hover 到具体的图形上，给图形设置对应的视觉通道编码</li>\n</ul>\n"},"component.componentType.label.encode.enter":{"desc":"<p>设置图元在数据初始化状态执行的视觉通道映射，注意数据更新的时候不再执行</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.label.encode.enter.size":{"desc":"<p>标签防重叠计算的范围</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.label.encode.enter.x":{"desc":"<p>图元的 x 坐标</p>\n"},"component.componentType.label.encode.enter.y":{"desc":"<p>图元 y 坐标</p>\n"},"component.componentType.label.encode.enter.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"component.componentType.label.encode.enter.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"component.componentType.label.encode.enter.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.label.encode.enter.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"component.componentType.label.encode.enter.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.label.encode.enter.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"component.componentType.label.encode.enter.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"component.componentType.label.encode.enter.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"component.componentType.label.encode.enter.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"component.componentType.label.encode.enter.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.label.encode.enter.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.label.encode.enter.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"component.componentType.label.encode.enter.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"component.componentType.label.encode.enter.outerBorder":{"desc":"<p>外描边</p>\n"},"component.componentType.label.encode.enter.innerBorder":{"desc":"<p>内描边</p>\n"},"component.componentType.label.encode.enter.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"component.componentType.label.encode.enter.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.label.encode.enter.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"component.componentType.label.encode.enter.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"component.componentType.label.encode.enter.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"component.componentType.label.encode.enter.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"component.componentType.label.encode.enter.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"component.componentType.label.encode.enter.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"component.componentType.label.encode.enter.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"component.componentType.label.encode.enter.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.label.encode.enter.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.label.encode.enter.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.label.encode.enter.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"component.componentType.label.encode.enter.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"component.componentType.label.encode.enter.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"component.componentType.label.encode.enter.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"component.componentType.label.encode.enter.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"component.componentType.label.encode.enter.texture":{"desc":"<p>图元纹理</p>\n"},"component.componentType.label.encode.enter.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"component.componentType.label.encode.enter.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"component.componentType.label.encode.enter.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"component.componentType.label.encode.enter.blur":{"desc":"<p>图元边缘模糊</p>\n"},"component.componentType.label.encode.enter.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"component.componentType.label.encode.update":{"desc":"<p>设置图元在数据更新状态执行的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.label.encode.update.size":{"desc":"<p>标签防重叠计算的范围</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.label.encode.update.x":{"desc":"<p>图元的 x 坐标</p>\n"},"component.componentType.label.encode.update.y":{"desc":"<p>图元 y 坐标</p>\n"},"component.componentType.label.encode.update.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"component.componentType.label.encode.update.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"component.componentType.label.encode.update.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.label.encode.update.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"component.componentType.label.encode.update.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.label.encode.update.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"component.componentType.label.encode.update.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"component.componentType.label.encode.update.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"component.componentType.label.encode.update.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"component.componentType.label.encode.update.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.label.encode.update.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.label.encode.update.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"component.componentType.label.encode.update.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"component.componentType.label.encode.update.outerBorder":{"desc":"<p>外描边</p>\n"},"component.componentType.label.encode.update.innerBorder":{"desc":"<p>内描边</p>\n"},"component.componentType.label.encode.update.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"component.componentType.label.encode.update.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.label.encode.update.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"component.componentType.label.encode.update.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"component.componentType.label.encode.update.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"component.componentType.label.encode.update.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"component.componentType.label.encode.update.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"component.componentType.label.encode.update.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"component.componentType.label.encode.update.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"component.componentType.label.encode.update.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.label.encode.update.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.label.encode.update.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.label.encode.update.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"component.componentType.label.encode.update.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"component.componentType.label.encode.update.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"component.componentType.label.encode.update.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"component.componentType.label.encode.update.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"component.componentType.label.encode.update.texture":{"desc":"<p>图元纹理</p>\n"},"component.componentType.label.encode.update.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"component.componentType.label.encode.update.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"component.componentType.label.encode.update.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"component.componentType.label.encode.update.blur":{"desc":"<p>图元边缘模糊</p>\n"},"component.componentType.label.encode.update.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"component.componentType.label.encode.exit":{"desc":"<p>设置图元在数据被删除的状态下执行的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.label.encode.exit.size":{"desc":"<p>标签防重叠计算的范围</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.label.encode.exit.x":{"desc":"<p>图元的 x 坐标</p>\n"},"component.componentType.label.encode.exit.y":{"desc":"<p>图元 y 坐标</p>\n"},"component.componentType.label.encode.exit.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"component.componentType.label.encode.exit.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"component.componentType.label.encode.exit.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.label.encode.exit.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"component.componentType.label.encode.exit.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.label.encode.exit.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"component.componentType.label.encode.exit.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"component.componentType.label.encode.exit.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"component.componentType.label.encode.exit.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"component.componentType.label.encode.exit.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.label.encode.exit.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.label.encode.exit.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"component.componentType.label.encode.exit.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"component.componentType.label.encode.exit.outerBorder":{"desc":"<p>外描边</p>\n"},"component.componentType.label.encode.exit.innerBorder":{"desc":"<p>内描边</p>\n"},"component.componentType.label.encode.exit.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"component.componentType.label.encode.exit.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.label.encode.exit.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"component.componentType.label.encode.exit.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"component.componentType.label.encode.exit.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"component.componentType.label.encode.exit.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"component.componentType.label.encode.exit.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"component.componentType.label.encode.exit.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"component.componentType.label.encode.exit.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"component.componentType.label.encode.exit.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.label.encode.exit.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.label.encode.exit.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.label.encode.exit.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"component.componentType.label.encode.exit.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"component.componentType.label.encode.exit.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"component.componentType.label.encode.exit.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"component.componentType.label.encode.exit.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"component.componentType.label.encode.exit.texture":{"desc":"<p>图元纹理</p>\n"},"component.componentType.label.encode.exit.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"component.componentType.label.encode.exit.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"component.componentType.label.encode.exit.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"component.componentType.label.encode.exit.blur":{"desc":"<p>图元边缘模糊</p>\n"},"component.componentType.label.encode.exit.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"component.componentType.label.encode.hover":{"desc":"<p>设置<code class=\"codespan\">hover</code>状态的时候，图元对应的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.label.encode.hover.size":{"desc":"<p>标签防重叠计算的范围</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.label.encode.hover.x":{"desc":"<p>图元的 x 坐标</p>\n"},"component.componentType.label.encode.hover.y":{"desc":"<p>图元 y 坐标</p>\n"},"component.componentType.label.encode.hover.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"component.componentType.label.encode.hover.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"component.componentType.label.encode.hover.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.label.encode.hover.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"component.componentType.label.encode.hover.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.label.encode.hover.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"component.componentType.label.encode.hover.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"component.componentType.label.encode.hover.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"component.componentType.label.encode.hover.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"component.componentType.label.encode.hover.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.label.encode.hover.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.label.encode.hover.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"component.componentType.label.encode.hover.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"component.componentType.label.encode.hover.outerBorder":{"desc":"<p>外描边</p>\n"},"component.componentType.label.encode.hover.innerBorder":{"desc":"<p>内描边</p>\n"},"component.componentType.label.encode.hover.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"component.componentType.label.encode.hover.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.label.encode.hover.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"component.componentType.label.encode.hover.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"component.componentType.label.encode.hover.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"component.componentType.label.encode.hover.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"component.componentType.label.encode.hover.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"component.componentType.label.encode.hover.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"component.componentType.label.encode.hover.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"component.componentType.label.encode.hover.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.label.encode.hover.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.label.encode.hover.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.label.encode.hover.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"component.componentType.label.encode.hover.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"component.componentType.label.encode.hover.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"component.componentType.label.encode.hover.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"component.componentType.label.encode.hover.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"component.componentType.label.encode.hover.texture":{"desc":"<p>图元纹理</p>\n"},"component.componentType.label.encode.hover.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"component.componentType.label.encode.hover.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"component.componentType.label.encode.hover.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"component.componentType.label.encode.hover.blur":{"desc":"<p>图元边缘模糊</p>\n"},"component.componentType.label.encode.hover.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"component.componentType.label.zIndex":{"desc":"<p>设置<code class=\"codespan\">mark</code>图元对应的容器图形(group)的 zIndex</p>\n"},"component.componentType.label.interactive":{"desc":"<p>类型：<code class=\"codespan\">boolean</code>\n是否必传： 否</p>\n"},"component.componentType.label.context":{"desc":"<p>设置图元的上下文参数</p>\n"},"component.componentType.label.setCustomizedShape":{"desc":"<p>设置自定义形状的回调函数，对应的 ts 类型定位如下：</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>其中<code class=\"codespan\">ICustomPath2D</code> 为 VRender 提供的绘制自定义的路径一个工具类</p>\n"},"component.componentType.label.support3d":{"desc":"<p>当画布设置了 3d 视角的时候，是否支持 3d 模式</p>\n"},"component.componentType.label.group":{"desc":"<p>设置父图元，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 父图元对应的 id</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> 父图元对应的语法元素，一般用于 API 调用场景</li>\n</ul>\n<p>如果不设置，会默认挂在到画布的根节点下面</p>\n"},"component.componentType.label.from":{"desc":"<p>ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>通过<code class=\"codespan\">data</code> 属性值，申明图元依赖的数据</p>\n"},"component.componentType.label.key":{"desc":"<p>设置图元数据元素的唯一标志符，用于计算图形元素的数据状态，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"component.componentType.label.sort":{"desc":"<p>对图元中的所有图形元素进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"component.componentType.label.groupBy":{"desc":"<p>设置分组的属性，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置分组<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析分组<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"component.componentType.label.groupSort":{"desc":"<p>对图元中的分组进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"component.componentType.label.coordinate":{"desc":"<p>设置该图元关联的坐标系对应的 id 或者坐标系对应的图形元素</p>\n"},"component.componentType.label.state":{"desc":"<p>设置当前图元所有图形元素的状态值，支持三种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置图形的状态，比如说:<code class=\"codespan\">{ state: &#39;selected&#39;}</code> 就是给所有的图形设置状态为<code class=\"codespan\">&#39;selected&#39;</code>，通常这种情况，<code class=\"codespan\">encode</code> 中也会设置<code class=\"codespan\">&#39;selected&#39;</code>状态对应的图形通道映射</li>\n<li><code class=\"codespan\">string[]</code> 给图形设置多个状态，可以配置<code class=\"codespan\">stateSort</code>来影响对应状态执行图形通道映射的顺序</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析状态值的回调函数，返回参数为<code class=\"codespan\">string | string[]</code>，对应的 ts 类型定义为：</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"component.componentType.label.stateSort":{"desc":"<p>设置当前图元所有图形元素的状态值的排序函数，会影响状态对应的图形通道映射的顺序，最先执行的状态可能被后续的状态覆盖图形通道映射结果，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"component.componentType.label.transform":{"desc":"<p>设置图元对应的变换，所有的数据变换都可以配置在图元上，用于对图元的<code class=\"codespan\">join data</code> 执行变换；\n另外一种类型的变换就是对图形元素执行的变换，比如说<code class=\"codespan\">dodge</code>；\n通用的类型定义如下：</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>每中变换支持的参数不同</p>\n"},"component.componentType.label.layout":{"desc":"<p>设置图元的布局参数，图元在参与布局的时候，存在两种角色：</p>\n<ul>\n<li>&#39;container&#39; 容器图元，一般是<code class=\"codespan\">group</code>图元</li>\n<li>&#39;item&#39; 布局子元素，作为容器图元的子节点</li>\n</ul>\n<p>注意，我们仅支持一层布局，如果是多层嵌套布局，建议使用自定义的布局方案进行实现；</p>\n<p>现在支持两种内容的布局：<code class=\"codespan\">grid</code> 布局 和 <code class=\"codespan\">relative</code>布局，相关类型定义如下</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>如果想要设置自定义的布局方案，<code class=\"codespan\">layout</code>也支持直接设置回调函数，回调函数的定义如下：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"component.componentType.label.layout.display":{"desc":"<p>容器图元设置布局的类型，支持两种配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> 相对布局</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> 网格布局</li>\n</ul>\n"},"component.componentType.label.layout.callback":{"desc":"<p>自定义该图元的回调函数，ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"component.componentType.label.layout.skipBeforeLayouted":{"desc":"<p>在布局完成前，跳过执行阶段</p>\n"},"component.componentType.label.layout.updateViewSignals":{"desc":"<p>是否更新默认的视图信号，也就是：<code class=\"codespan\">padding</code>、<code class=\"codespan\">viewWidth</code> 和 <code class=\"codespan\">viewHeight</code></p>\n<p>只能在设置了<code class=\"codespan\">{ layout: { display: &#39;relative&#39;} }</code>的容器图元上设置该属性</p>\n"},"component.componentType.label.layout.maxChildWidth":{"desc":"<p>相对布局的父图元，设置子图元的最大宽度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的宽度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"component.componentType.label.layout.maxChildHeight":{"desc":"<p>相对布局的父图元，设置子图元的最大高度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的高度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"component.componentType.label.layout.position":{"desc":"<p>设置相对布局的子图元的位置，支持的配置有：</p>\n<ul>\n<li>&#39;top&#39; 相对于父图元的顶部</li>\n<li>&#39;bottom&#39; 相对于父图元的底部</li>\n<li>&#39;left&#39; 相对于父图元的左侧</li>\n<li>&#39;right&#39; 相对于父图元的右侧</li>\n<li>&#39;content&#39; 相对于父图元的中心，也就是内容区域</li>\n<li>&#39;auto&#39; 图元设置了坐标系的时候，根据关联的<code class=\"codespan\">scale</code>，自定计算相对于父图元的位置</li>\n</ul>\n"},"component.componentType.label.layout.padding":{"desc":"<p>子图元内边距，单位 px，默认各方向内边距为 0，接受数值、数值数组以及对象设置。</p>\n<p>使用示例：</p>\n<pre><code class=\"lang-ts\">// 数值类型，设置内边距为 5\npadding: 5;\n// 数值数组，设置上下的内边距为 5，左右的内边距为 10，用法同 CSS 盒模型\npadding: [5, 10];\n// 数值数组，分别设置四个方向的内边距\npadding: [\n  5, // 上\n  10, // 右\n  5, // 下\n  10 // 左\n];\n// 对象类型\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"component.componentType.label.layout.gridTemplateRows":{"desc":"<p>网格布局的父图元设置行的高度</p>\n"},"component.componentType.label.layout.gridTemplateColumns":{"desc":"<p>网格布局的父图元设置列的宽度</p>\n"},"component.componentType.label.layout.gridRowGap":{"desc":"<p>网格布局的父图元设置行行距</p>\n"},"component.componentType.label.layout.gridColumnGap":{"desc":"<p>网格布局的父图元设置列间距</p>\n"},"component.componentType.label.layout.gridRowStart":{"desc":"<p>网格布局的子图元设置行开始的位置</p>\n"},"component.componentType.label.layout.gridRowEnd":{"desc":"<p>网格布局的子图元设置行结束的位置</p>\n"},"component.componentType.label.layout.gridColumnStart":{"desc":"<p>网格布局的子图元设置列开始的位置</p>\n"},"component.componentType.label.layout.gridColumnEnd":{"desc":"<p>网格布局的子图元设置列结束的位置</p>\n"},"component.componentType.legend.componentType":{"desc":"<p>将组件类型设置为 <code class=\"codespan\">legend</code></p>\n"},"component.componentType.legend.legendType":{"desc":"<p>设置图例类型</p>\n<ul>\n<li>&#39;auto&#39; 根据关联的<code class=\"codespan\">scale</code>自动解析</li>\n<li>&#39;discrete&#39; 离散类型</li>\n<li>&#39;color&#39; 颜色类型</li>\n<li>&#39;size&#39; 大小类型</li>\n</ul>\n"},"component.componentType.legend.scale":{"desc":"<p>设置关联的<code class=\"codespan\">scale</code>语法元素，支持两种类型的设置：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 语法元素对应的 id</li>\n<li><code class=\"codespan\">IScale</code> 语法元素对应的实例，主要用于 API 创建模式</li>\n</ul>\n"},"component.componentType.legend.target":{"desc":"<p>设置 legend 触发数据更新后，需要更新的数据元素</p>\n"},"component.componentType.legend.target.data":{"desc":"<p>设置更新数据对应的<code class=\"codespan\">data</code>语法元素，支持两种类型的设置：</p>\n<ul>\n<li><code class=\"codespan\">string</code> data 语法元素对应的 id</li>\n<li><code class=\"codespan\">IData</code> data 语法元素对应的实例，主要用于 API 创建模式</li>\n</ul>\n"},"component.componentType.legend.target.filter":{"desc":"<p>对目标数据元素，执行 filter 操作，支持两种类型的设置：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 更新数据元素中对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义过滤函数，定义为：<code class=\"codespan\">(datum: any, value: any[]) =&gt; boolean</code></li>\n</ul>\n"},"component.componentType.legend.encode":{"desc":"<p>设置图元的视觉通道编码，默认支持三种数据变化状态：</p>\n<ul>\n<li><code class=\"codespan\">enter</code> 新增数据元素</li>\n<li><code class=\"codespan\">update</code> 数据元素更新</li>\n<li><code class=\"codespan\">exit</code> 数据元素被删除</li>\n</ul>\n<p>注意，这里的数据状态是根据<code class=\"codespan\">mark</code>的<code class=\"codespan\">key</code>自动生成的，我们会针对<code class=\"codespan\">mark</code>的绑定数据，根据<code class=\"codespan\">key</code>的配置，计算数据对应的唯一标志符，数据更新后，如果对应的唯一标志符不存在了，则状态为<code class=\"codespan\">exit</code>，如果存在，则为<code class=\"codespan\">update</code>；如果之前的数据不存在改唯一标志符，则数据元素对应的状态为<code class=\"codespan\">enter</code></p>\n<p>默认支持一种交互状态：</p>\n<ul>\n<li><code class=\"codespan\">hover</code> 鼠标 hover 到具体的图形上，给图形设置对应的视觉通道编码</li>\n</ul>\n"},"component.componentType.legend.encode.enter":{"desc":"<p>设置图元在数据初始化状态执行的视觉通道映射，注意数据更新的时候不再执行</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<p>layout\ntitle\npadding(array)</p>\n"},"component.componentType.legend.encode.enter.select":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例是否允许选中</p>\n"},"component.componentType.legend.encode.enter.hover":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例是否允许 hover</p>\n"},"component.componentType.legend.encode.enter.items":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例的图例项</p>\n"},"component.componentType.legend.encode.enter.defaultSelected":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例的默认选中图例项</p>\n"},"component.componentType.legend.encode.enter.selectMode":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例的图例选中模式</p>\n<ul>\n<li>&#39;single&#39;</li>\n<li>&#39;multiple&#39;</li>\n</ul>\n"},"component.componentType.legend.encode.enter.allowAllCanceled":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例是否允许全部取消</p>\n"},"component.componentType.legend.encode.enter.reversed":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例是否逆序展示图例项</p>\n"},"component.componentType.legend.encode.enter.item":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例的图例项样式</p>\n"},"component.componentType.legend.encode.enter.maxWidth":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例的最大宽度</p>\n"},"component.componentType.legend.encode.enter.maxHeight":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例的最大高度</p>\n"},"component.componentType.legend.encode.enter.maxRow":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例的最大行数</p>\n"},"component.componentType.legend.encode.enter.maxCol":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例的最大列数</p>\n"},"component.componentType.legend.encode.enter.autoPage":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例是否支持自动翻页</p>\n"},"component.componentType.legend.encode.enter.pager":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例的翻页器样式</p>\n"},"component.componentType.legend.encode.enter.colors":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;color&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;color&#39;</code> 类型的颜色图例的色板</p>\n"},"component.componentType.legend.encode.enter.sizeBackground":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;size&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;size&#39;</code> 类型的大小图例的背景样式</p>\n"},"component.componentType.legend.encode.enter.slider":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;color&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;color&#39;</code> 类型的颜色图例以及设置<code class=\"codespan\">legendType = &#39;size&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;size&#39;</code> 类型的大小图例包含 slider 组件的相应样式</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.legend.encode.enter.x":{"desc":"<p>图元的 x 坐标</p>\n"},"component.componentType.legend.encode.enter.y":{"desc":"<p>图元 y 坐标</p>\n"},"component.componentType.legend.encode.enter.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"component.componentType.legend.encode.enter.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"component.componentType.legend.encode.enter.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.legend.encode.enter.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"component.componentType.legend.encode.enter.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.legend.encode.enter.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"component.componentType.legend.encode.enter.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"component.componentType.legend.encode.enter.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"component.componentType.legend.encode.enter.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"component.componentType.legend.encode.enter.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.legend.encode.enter.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.legend.encode.enter.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"component.componentType.legend.encode.enter.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"component.componentType.legend.encode.enter.outerBorder":{"desc":"<p>外描边</p>\n"},"component.componentType.legend.encode.enter.innerBorder":{"desc":"<p>内描边</p>\n"},"component.componentType.legend.encode.enter.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"component.componentType.legend.encode.enter.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.legend.encode.enter.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"component.componentType.legend.encode.enter.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"component.componentType.legend.encode.enter.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"component.componentType.legend.encode.enter.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"component.componentType.legend.encode.enter.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"component.componentType.legend.encode.enter.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"component.componentType.legend.encode.enter.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"component.componentType.legend.encode.enter.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.legend.encode.enter.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.legend.encode.enter.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.legend.encode.enter.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"component.componentType.legend.encode.enter.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"component.componentType.legend.encode.enter.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"component.componentType.legend.encode.enter.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"component.componentType.legend.encode.enter.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"component.componentType.legend.encode.enter.texture":{"desc":"<p>图元纹理</p>\n"},"component.componentType.legend.encode.enter.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"component.componentType.legend.encode.enter.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"component.componentType.legend.encode.enter.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"component.componentType.legend.encode.enter.blur":{"desc":"<p>图元边缘模糊</p>\n"},"component.componentType.legend.encode.enter.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"component.componentType.legend.encode.update":{"desc":"<p>设置图元在数据更新状态执行的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<p>layout\ntitle\npadding(array)</p>\n"},"component.componentType.legend.encode.update.select":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例是否允许选中</p>\n"},"component.componentType.legend.encode.update.hover":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例是否允许 hover</p>\n"},"component.componentType.legend.encode.update.items":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例的图例项</p>\n"},"component.componentType.legend.encode.update.defaultSelected":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例的默认选中图例项</p>\n"},"component.componentType.legend.encode.update.selectMode":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例的图例选中模式</p>\n<ul>\n<li>&#39;single&#39;</li>\n<li>&#39;multiple&#39;</li>\n</ul>\n"},"component.componentType.legend.encode.update.allowAllCanceled":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例是否允许全部取消</p>\n"},"component.componentType.legend.encode.update.reversed":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例是否逆序展示图例项</p>\n"},"component.componentType.legend.encode.update.item":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例的图例项样式</p>\n"},"component.componentType.legend.encode.update.maxWidth":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例的最大宽度</p>\n"},"component.componentType.legend.encode.update.maxHeight":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例的最大高度</p>\n"},"component.componentType.legend.encode.update.maxRow":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例的最大行数</p>\n"},"component.componentType.legend.encode.update.maxCol":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例的最大列数</p>\n"},"component.componentType.legend.encode.update.autoPage":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例是否支持自动翻页</p>\n"},"component.componentType.legend.encode.update.pager":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例的翻页器样式</p>\n"},"component.componentType.legend.encode.update.colors":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;color&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;color&#39;</code> 类型的颜色图例的色板</p>\n"},"component.componentType.legend.encode.update.sizeBackground":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;size&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;size&#39;</code> 类型的大小图例的背景样式</p>\n"},"component.componentType.legend.encode.update.slider":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;color&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;color&#39;</code> 类型的颜色图例以及设置<code class=\"codespan\">legendType = &#39;size&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;size&#39;</code> 类型的大小图例包含 slider 组件的相应样式</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.legend.encode.update.x":{"desc":"<p>图元的 x 坐标</p>\n"},"component.componentType.legend.encode.update.y":{"desc":"<p>图元 y 坐标</p>\n"},"component.componentType.legend.encode.update.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"component.componentType.legend.encode.update.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"component.componentType.legend.encode.update.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.legend.encode.update.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"component.componentType.legend.encode.update.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.legend.encode.update.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"component.componentType.legend.encode.update.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"component.componentType.legend.encode.update.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"component.componentType.legend.encode.update.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"component.componentType.legend.encode.update.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.legend.encode.update.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.legend.encode.update.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"component.componentType.legend.encode.update.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"component.componentType.legend.encode.update.outerBorder":{"desc":"<p>外描边</p>\n"},"component.componentType.legend.encode.update.innerBorder":{"desc":"<p>内描边</p>\n"},"component.componentType.legend.encode.update.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"component.componentType.legend.encode.update.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.legend.encode.update.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"component.componentType.legend.encode.update.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"component.componentType.legend.encode.update.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"component.componentType.legend.encode.update.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"component.componentType.legend.encode.update.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"component.componentType.legend.encode.update.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"component.componentType.legend.encode.update.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"component.componentType.legend.encode.update.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.legend.encode.update.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.legend.encode.update.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.legend.encode.update.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"component.componentType.legend.encode.update.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"component.componentType.legend.encode.update.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"component.componentType.legend.encode.update.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"component.componentType.legend.encode.update.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"component.componentType.legend.encode.update.texture":{"desc":"<p>图元纹理</p>\n"},"component.componentType.legend.encode.update.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"component.componentType.legend.encode.update.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"component.componentType.legend.encode.update.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"component.componentType.legend.encode.update.blur":{"desc":"<p>图元边缘模糊</p>\n"},"component.componentType.legend.encode.update.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"component.componentType.legend.encode.exit":{"desc":"<p>设置图元在数据被删除的状态下执行的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<p>layout\ntitle\npadding(array)</p>\n"},"component.componentType.legend.encode.exit.select":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例是否允许选中</p>\n"},"component.componentType.legend.encode.exit.hover":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例是否允许 hover</p>\n"},"component.componentType.legend.encode.exit.items":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例的图例项</p>\n"},"component.componentType.legend.encode.exit.defaultSelected":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例的默认选中图例项</p>\n"},"component.componentType.legend.encode.exit.selectMode":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例的图例选中模式</p>\n<ul>\n<li>&#39;single&#39;</li>\n<li>&#39;multiple&#39;</li>\n</ul>\n"},"component.componentType.legend.encode.exit.allowAllCanceled":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例是否允许全部取消</p>\n"},"component.componentType.legend.encode.exit.reversed":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例是否逆序展示图例项</p>\n"},"component.componentType.legend.encode.exit.item":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例的图例项样式</p>\n"},"component.componentType.legend.encode.exit.maxWidth":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例的最大宽度</p>\n"},"component.componentType.legend.encode.exit.maxHeight":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例的最大高度</p>\n"},"component.componentType.legend.encode.exit.maxRow":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例的最大行数</p>\n"},"component.componentType.legend.encode.exit.maxCol":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例的最大列数</p>\n"},"component.componentType.legend.encode.exit.autoPage":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例是否支持自动翻页</p>\n"},"component.componentType.legend.encode.exit.pager":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例的翻页器样式</p>\n"},"component.componentType.legend.encode.exit.colors":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;color&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;color&#39;</code> 类型的颜色图例的色板</p>\n"},"component.componentType.legend.encode.exit.sizeBackground":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;size&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;size&#39;</code> 类型的大小图例的背景样式</p>\n"},"component.componentType.legend.encode.exit.slider":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;color&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;color&#39;</code> 类型的颜色图例以及设置<code class=\"codespan\">legendType = &#39;size&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;size&#39;</code> 类型的大小图例包含 slider 组件的相应样式</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.legend.encode.exit.x":{"desc":"<p>图元的 x 坐标</p>\n"},"component.componentType.legend.encode.exit.y":{"desc":"<p>图元 y 坐标</p>\n"},"component.componentType.legend.encode.exit.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"component.componentType.legend.encode.exit.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"component.componentType.legend.encode.exit.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.legend.encode.exit.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"component.componentType.legend.encode.exit.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.legend.encode.exit.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"component.componentType.legend.encode.exit.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"component.componentType.legend.encode.exit.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"component.componentType.legend.encode.exit.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"component.componentType.legend.encode.exit.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.legend.encode.exit.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.legend.encode.exit.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"component.componentType.legend.encode.exit.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"component.componentType.legend.encode.exit.outerBorder":{"desc":"<p>外描边</p>\n"},"component.componentType.legend.encode.exit.innerBorder":{"desc":"<p>内描边</p>\n"},"component.componentType.legend.encode.exit.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"component.componentType.legend.encode.exit.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.legend.encode.exit.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"component.componentType.legend.encode.exit.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"component.componentType.legend.encode.exit.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"component.componentType.legend.encode.exit.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"component.componentType.legend.encode.exit.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"component.componentType.legend.encode.exit.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"component.componentType.legend.encode.exit.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"component.componentType.legend.encode.exit.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.legend.encode.exit.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.legend.encode.exit.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.legend.encode.exit.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"component.componentType.legend.encode.exit.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"component.componentType.legend.encode.exit.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"component.componentType.legend.encode.exit.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"component.componentType.legend.encode.exit.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"component.componentType.legend.encode.exit.texture":{"desc":"<p>图元纹理</p>\n"},"component.componentType.legend.encode.exit.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"component.componentType.legend.encode.exit.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"component.componentType.legend.encode.exit.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"component.componentType.legend.encode.exit.blur":{"desc":"<p>图元边缘模糊</p>\n"},"component.componentType.legend.encode.exit.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"component.componentType.legend.encode.hover":{"desc":"<p>设置<code class=\"codespan\">hover</code>状态的时候，图元对应的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<p>layout\ntitle\npadding(array)</p>\n"},"component.componentType.legend.encode.hover.select":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例是否允许选中</p>\n"},"component.componentType.legend.encode.hover.hover":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例是否允许 hover</p>\n"},"component.componentType.legend.encode.hover.items":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例的图例项</p>\n"},"component.componentType.legend.encode.hover.defaultSelected":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例的默认选中图例项</p>\n"},"component.componentType.legend.encode.hover.selectMode":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例的图例选中模式</p>\n<ul>\n<li>&#39;single&#39;</li>\n<li>&#39;multiple&#39;</li>\n</ul>\n"},"component.componentType.legend.encode.hover.allowAllCanceled":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例是否允许全部取消</p>\n"},"component.componentType.legend.encode.hover.reversed":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例是否逆序展示图例项</p>\n"},"component.componentType.legend.encode.hover.item":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例的图例项样式</p>\n"},"component.componentType.legend.encode.hover.maxWidth":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例的最大宽度</p>\n"},"component.componentType.legend.encode.hover.maxHeight":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例的最大高度</p>\n"},"component.componentType.legend.encode.hover.maxRow":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例的最大行数</p>\n"},"component.componentType.legend.encode.hover.maxCol":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例的最大列数</p>\n"},"component.componentType.legend.encode.hover.autoPage":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例是否支持自动翻页</p>\n"},"component.componentType.legend.encode.hover.pager":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;discrete&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;discrete&#39;</code> 时的离散图例的翻页器样式</p>\n"},"component.componentType.legend.encode.hover.colors":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;color&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;color&#39;</code> 类型的颜色图例的色板</p>\n"},"component.componentType.legend.encode.hover.sizeBackground":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;size&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;size&#39;</code> 类型的大小图例的背景样式</p>\n"},"component.componentType.legend.encode.hover.slider":{"desc":"<p>设置<code class=\"codespan\">legendType = &#39;color&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;color&#39;</code> 类型的颜色图例以及设置<code class=\"codespan\">legendType = &#39;size&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;size&#39;</code> 类型的大小图例包含 slider 组件的相应样式</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.legend.encode.hover.x":{"desc":"<p>图元的 x 坐标</p>\n"},"component.componentType.legend.encode.hover.y":{"desc":"<p>图元 y 坐标</p>\n"},"component.componentType.legend.encode.hover.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"component.componentType.legend.encode.hover.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"component.componentType.legend.encode.hover.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.legend.encode.hover.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"component.componentType.legend.encode.hover.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.legend.encode.hover.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"component.componentType.legend.encode.hover.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"component.componentType.legend.encode.hover.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"component.componentType.legend.encode.hover.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"component.componentType.legend.encode.hover.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.legend.encode.hover.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.legend.encode.hover.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"component.componentType.legend.encode.hover.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"component.componentType.legend.encode.hover.outerBorder":{"desc":"<p>外描边</p>\n"},"component.componentType.legend.encode.hover.innerBorder":{"desc":"<p>内描边</p>\n"},"component.componentType.legend.encode.hover.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"component.componentType.legend.encode.hover.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.legend.encode.hover.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"component.componentType.legend.encode.hover.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"component.componentType.legend.encode.hover.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"component.componentType.legend.encode.hover.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"component.componentType.legend.encode.hover.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"component.componentType.legend.encode.hover.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"component.componentType.legend.encode.hover.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"component.componentType.legend.encode.hover.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.legend.encode.hover.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.legend.encode.hover.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.legend.encode.hover.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"component.componentType.legend.encode.hover.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"component.componentType.legend.encode.hover.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"component.componentType.legend.encode.hover.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"component.componentType.legend.encode.hover.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"component.componentType.legend.encode.hover.texture":{"desc":"<p>图元纹理</p>\n"},"component.componentType.legend.encode.hover.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"component.componentType.legend.encode.hover.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"component.componentType.legend.encode.hover.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"component.componentType.legend.encode.hover.blur":{"desc":"<p>图元边缘模糊</p>\n"},"component.componentType.legend.encode.hover.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"component.componentType.legend.zIndex":{"desc":"<p>设置<code class=\"codespan\">mark</code>图元对应的容器图形(group)的 zIndex</p>\n"},"component.componentType.legend.interactive":{"desc":"<p>类型：<code class=\"codespan\">boolean</code>\n是否必传： 否</p>\n"},"component.componentType.legend.context":{"desc":"<p>设置图元的上下文参数</p>\n"},"component.componentType.legend.setCustomizedShape":{"desc":"<p>设置自定义形状的回调函数，对应的 ts 类型定位如下：</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>其中<code class=\"codespan\">ICustomPath2D</code> 为 VRender 提供的绘制自定义的路径一个工具类</p>\n"},"component.componentType.legend.support3d":{"desc":"<p>当画布设置了 3d 视角的时候，是否支持 3d 模式</p>\n"},"component.componentType.legend.group":{"desc":"<p>设置父图元，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 父图元对应的 id</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> 父图元对应的语法元素，一般用于 API 调用场景</li>\n</ul>\n<p>如果不设置，会默认挂在到画布的根节点下面</p>\n"},"component.componentType.legend.from":{"desc":"<p>ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>通过<code class=\"codespan\">data</code> 属性值，申明图元依赖的数据</p>\n"},"component.componentType.legend.key":{"desc":"<p>设置图元数据元素的唯一标志符，用于计算图形元素的数据状态，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"component.componentType.legend.sort":{"desc":"<p>对图元中的所有图形元素进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"component.componentType.legend.groupBy":{"desc":"<p>设置分组的属性，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置分组<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析分组<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"component.componentType.legend.groupSort":{"desc":"<p>对图元中的分组进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"component.componentType.legend.coordinate":{"desc":"<p>设置该图元关联的坐标系对应的 id 或者坐标系对应的图形元素</p>\n"},"component.componentType.legend.state":{"desc":"<p>设置当前图元所有图形元素的状态值，支持三种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置图形的状态，比如说:<code class=\"codespan\">{ state: &#39;selected&#39;}</code> 就是给所有的图形设置状态为<code class=\"codespan\">&#39;selected&#39;</code>，通常这种情况，<code class=\"codespan\">encode</code> 中也会设置<code class=\"codespan\">&#39;selected&#39;</code>状态对应的图形通道映射</li>\n<li><code class=\"codespan\">string[]</code> 给图形设置多个状态，可以配置<code class=\"codespan\">stateSort</code>来影响对应状态执行图形通道映射的顺序</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析状态值的回调函数，返回参数为<code class=\"codespan\">string | string[]</code>，对应的 ts 类型定义为：</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"component.componentType.legend.stateSort":{"desc":"<p>设置当前图元所有图形元素的状态值的排序函数，会影响状态对应的图形通道映射的顺序，最先执行的状态可能被后续的状态覆盖图形通道映射结果，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"component.componentType.legend.transform":{"desc":"<p>设置图元对应的变换，所有的数据变换都可以配置在图元上，用于对图元的<code class=\"codespan\">join data</code> 执行变换；\n另外一种类型的变换就是对图形元素执行的变换，比如说<code class=\"codespan\">dodge</code>；\n通用的类型定义如下：</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>每中变换支持的参数不同</p>\n"},"component.componentType.legend.layout":{"desc":"<p>设置图元的布局参数，图元在参与布局的时候，存在两种角色：</p>\n<ul>\n<li>&#39;container&#39; 容器图元，一般是<code class=\"codespan\">group</code>图元</li>\n<li>&#39;item&#39; 布局子元素，作为容器图元的子节点</li>\n</ul>\n<p>注意，我们仅支持一层布局，如果是多层嵌套布局，建议使用自定义的布局方案进行实现；</p>\n<p>现在支持两种内容的布局：<code class=\"codespan\">grid</code> 布局 和 <code class=\"codespan\">relative</code>布局，相关类型定义如下</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>如果想要设置自定义的布局方案，<code class=\"codespan\">layout</code>也支持直接设置回调函数，回调函数的定义如下：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"component.componentType.legend.layout.display":{"desc":"<p>容器图元设置布局的类型，支持两种配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> 相对布局</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> 网格布局</li>\n</ul>\n"},"component.componentType.legend.layout.callback":{"desc":"<p>自定义该图元的回调函数，ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"component.componentType.legend.layout.skipBeforeLayouted":{"desc":"<p>在布局完成前，跳过执行阶段</p>\n"},"component.componentType.legend.layout.updateViewSignals":{"desc":"<p>是否更新默认的视图信号，也就是：<code class=\"codespan\">padding</code>、<code class=\"codespan\">viewWidth</code> 和 <code class=\"codespan\">viewHeight</code></p>\n<p>只能在设置了<code class=\"codespan\">{ layout: { display: &#39;relative&#39;} }</code>的容器图元上设置该属性</p>\n"},"component.componentType.legend.layout.maxChildWidth":{"desc":"<p>相对布局的父图元，设置子图元的最大宽度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的宽度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"component.componentType.legend.layout.maxChildHeight":{"desc":"<p>相对布局的父图元，设置子图元的最大高度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的高度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"component.componentType.legend.layout.position":{"desc":"<p>设置相对布局的子图元的位置，支持的配置有：</p>\n<ul>\n<li>&#39;top&#39; 相对于父图元的顶部</li>\n<li>&#39;bottom&#39; 相对于父图元的底部</li>\n<li>&#39;left&#39; 相对于父图元的左侧</li>\n<li>&#39;right&#39; 相对于父图元的右侧</li>\n<li>&#39;content&#39; 相对于父图元的中心，也就是内容区域</li>\n<li>&#39;auto&#39; 图元设置了坐标系的时候，根据关联的<code class=\"codespan\">scale</code>，自定计算相对于父图元的位置</li>\n</ul>\n"},"component.componentType.legend.layout.padding":{"desc":"<p>子图元内边距，单位 px，默认各方向内边距为 0，接受数值、数值数组以及对象设置。</p>\n<p>使用示例：</p>\n<pre><code class=\"lang-ts\">// 数值类型，设置内边距为 5\npadding: 5;\n// 数值数组，设置上下的内边距为 5，左右的内边距为 10，用法同 CSS 盒模型\npadding: [5, 10];\n// 数值数组，分别设置四个方向的内边距\npadding: [\n  5, // 上\n  10, // 右\n  5, // 下\n  10 // 左\n];\n// 对象类型\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"component.componentType.legend.layout.gridTemplateRows":{"desc":"<p>网格布局的父图元设置行的高度</p>\n"},"component.componentType.legend.layout.gridTemplateColumns":{"desc":"<p>网格布局的父图元设置列的宽度</p>\n"},"component.componentType.legend.layout.gridRowGap":{"desc":"<p>网格布局的父图元设置行行距</p>\n"},"component.componentType.legend.layout.gridColumnGap":{"desc":"<p>网格布局的父图元设置列间距</p>\n"},"component.componentType.legend.layout.gridRowStart":{"desc":"<p>网格布局的子图元设置行开始的位置</p>\n"},"component.componentType.legend.layout.gridRowEnd":{"desc":"<p>网格布局的子图元设置行结束的位置</p>\n"},"component.componentType.legend.layout.gridColumnStart":{"desc":"<p>网格布局的子图元设置列开始的位置</p>\n"},"component.componentType.legend.layout.gridColumnEnd":{"desc":"<p>网格布局的子图元设置列结束的位置</p>\n"},"component.componentType.player.componentType":{"desc":"<p>将组件类型设置为 <code class=\"codespan\">player</code></p>\n"},"component.componentType.player.playerType":{"desc":"<p>支持一下类型：</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;discrete&#39;</li>\n<li>&#39;continuous&#39;</li>\n</ul>\n"},"component.componentType.player.target":{"desc":"<p>设置 player 触发数据更新后，需要更新的数据元素</p>\n"},"component.componentType.player.target.data":{"desc":"<p>设置更新数据对应的<code class=\"codespan\">data</code>语法元素，支持两种类型的设置：</p>\n<ul>\n<li><code class=\"codespan\">string</code> data 语法元素对应的 id</li>\n<li><code class=\"codespan\">IData</code> data 语法元素对应的实例，主要用于 API 创建模式</li>\n</ul>\n"},"component.componentType.player.target.source":{"desc":"<p>设置数据来源，支持三种类型的设置：</p>\n<ul>\n<li><code class=\"codespan\">string</code> data 语法元素对应的 id</li>\n<li><code class=\"codespan\">IData</code> data 语法元素对应的实例，主要用于 API 创建模式</li>\n<li><code class=\"codespan\">any[]</code> 自定义的数据</li>\n</ul>\n"},"component.componentType.player.encode":{"desc":"<p>设置图元的视觉通道编码，默认支持三种数据变化状态：</p>\n<ul>\n<li><code class=\"codespan\">enter</code> 新增数据元素</li>\n<li><code class=\"codespan\">update</code> 数据元素更新</li>\n<li><code class=\"codespan\">exit</code> 数据元素被删除</li>\n</ul>\n<p>注意，这里的数据状态是根据<code class=\"codespan\">mark</code>的<code class=\"codespan\">key</code>自动生成的，我们会针对<code class=\"codespan\">mark</code>的绑定数据，根据<code class=\"codespan\">key</code>的配置，计算数据对应的唯一标志符，数据更新后，如果对应的唯一标志符不存在了，则状态为<code class=\"codespan\">exit</code>，如果存在，则为<code class=\"codespan\">update</code>；如果之前的数据不存在改唯一标志符，则数据元素对应的状态为<code class=\"codespan\">enter</code></p>\n<p>默认支持一种交互状态：</p>\n<ul>\n<li><code class=\"codespan\">hover</code> 鼠标 hover 到具体的图形上，给图形设置对应的视觉通道编码</li>\n</ul>\n"},"component.componentType.player.encode.enter":{"desc":"<p>设置图元在数据初始化状态执行的视觉通道映射，注意数据更新的时候不再执行</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.player.encode.enter.data":{"desc":"<p>数据项内容</p>\n"},"component.componentType.player.encode.enter.dataIndex":{"desc":"<p>数据项索引</p>\n"},"component.componentType.player.encode.enter.orient":{"desc":"<p>播放器朝向</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n</ul>\n"},"component.componentType.player.encode.enter.size":{"desc":"<p>播放器尺寸</p>\n"},"component.componentType.player.encode.enter.slider":{"desc":"<p>播放器滑条样式</p>\n"},"component.componentType.player.encode.enter.controller":{"desc":"<p>播放器控制器样式</p>\n"},"component.componentType.player.encode.enter.interval":{"desc":"<p>播放间隔</p>\n"},"component.componentType.player.encode.enter.totalDuration":{"desc":"<p>设置 <code class=\"codespan\">playerType = &#39;continuous&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;continuous&#39;</code> 类型播放器的总时长，与 <code class=\"codespan\">interval</code> 配置项互斥</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.player.encode.enter.x":{"desc":"<p>图元的 x 坐标</p>\n"},"component.componentType.player.encode.enter.y":{"desc":"<p>图元 y 坐标</p>\n"},"component.componentType.player.encode.enter.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"component.componentType.player.encode.enter.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"component.componentType.player.encode.enter.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.player.encode.enter.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"component.componentType.player.encode.enter.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.player.encode.enter.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"component.componentType.player.encode.enter.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"component.componentType.player.encode.enter.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"component.componentType.player.encode.enter.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"component.componentType.player.encode.enter.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.player.encode.enter.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.player.encode.enter.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"component.componentType.player.encode.enter.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"component.componentType.player.encode.enter.outerBorder":{"desc":"<p>外描边</p>\n"},"component.componentType.player.encode.enter.innerBorder":{"desc":"<p>内描边</p>\n"},"component.componentType.player.encode.enter.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"component.componentType.player.encode.enter.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.player.encode.enter.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"component.componentType.player.encode.enter.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"component.componentType.player.encode.enter.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"component.componentType.player.encode.enter.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"component.componentType.player.encode.enter.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"component.componentType.player.encode.enter.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"component.componentType.player.encode.enter.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"component.componentType.player.encode.enter.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.player.encode.enter.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.player.encode.enter.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.player.encode.enter.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"component.componentType.player.encode.enter.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"component.componentType.player.encode.enter.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"component.componentType.player.encode.enter.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"component.componentType.player.encode.enter.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"component.componentType.player.encode.enter.texture":{"desc":"<p>图元纹理</p>\n"},"component.componentType.player.encode.enter.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"component.componentType.player.encode.enter.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"component.componentType.player.encode.enter.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"component.componentType.player.encode.enter.blur":{"desc":"<p>图元边缘模糊</p>\n"},"component.componentType.player.encode.enter.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"component.componentType.player.encode.update":{"desc":"<p>设置图元在数据更新状态执行的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.player.encode.update.data":{"desc":"<p>数据项内容</p>\n"},"component.componentType.player.encode.update.dataIndex":{"desc":"<p>数据项索引</p>\n"},"component.componentType.player.encode.update.orient":{"desc":"<p>播放器朝向</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n</ul>\n"},"component.componentType.player.encode.update.size":{"desc":"<p>播放器尺寸</p>\n"},"component.componentType.player.encode.update.slider":{"desc":"<p>播放器滑条样式</p>\n"},"component.componentType.player.encode.update.controller":{"desc":"<p>播放器控制器样式</p>\n"},"component.componentType.player.encode.update.interval":{"desc":"<p>播放间隔</p>\n"},"component.componentType.player.encode.update.totalDuration":{"desc":"<p>设置 <code class=\"codespan\">playerType = &#39;continuous&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;continuous&#39;</code> 类型播放器的总时长，与 <code class=\"codespan\">interval</code> 配置项互斥</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.player.encode.update.x":{"desc":"<p>图元的 x 坐标</p>\n"},"component.componentType.player.encode.update.y":{"desc":"<p>图元 y 坐标</p>\n"},"component.componentType.player.encode.update.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"component.componentType.player.encode.update.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"component.componentType.player.encode.update.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.player.encode.update.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"component.componentType.player.encode.update.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.player.encode.update.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"component.componentType.player.encode.update.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"component.componentType.player.encode.update.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"component.componentType.player.encode.update.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"component.componentType.player.encode.update.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.player.encode.update.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.player.encode.update.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"component.componentType.player.encode.update.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"component.componentType.player.encode.update.outerBorder":{"desc":"<p>外描边</p>\n"},"component.componentType.player.encode.update.innerBorder":{"desc":"<p>内描边</p>\n"},"component.componentType.player.encode.update.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"component.componentType.player.encode.update.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.player.encode.update.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"component.componentType.player.encode.update.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"component.componentType.player.encode.update.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"component.componentType.player.encode.update.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"component.componentType.player.encode.update.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"component.componentType.player.encode.update.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"component.componentType.player.encode.update.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"component.componentType.player.encode.update.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.player.encode.update.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.player.encode.update.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.player.encode.update.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"component.componentType.player.encode.update.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"component.componentType.player.encode.update.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"component.componentType.player.encode.update.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"component.componentType.player.encode.update.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"component.componentType.player.encode.update.texture":{"desc":"<p>图元纹理</p>\n"},"component.componentType.player.encode.update.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"component.componentType.player.encode.update.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"component.componentType.player.encode.update.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"component.componentType.player.encode.update.blur":{"desc":"<p>图元边缘模糊</p>\n"},"component.componentType.player.encode.update.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"component.componentType.player.encode.exit":{"desc":"<p>设置图元在数据被删除的状态下执行的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.player.encode.exit.data":{"desc":"<p>数据项内容</p>\n"},"component.componentType.player.encode.exit.dataIndex":{"desc":"<p>数据项索引</p>\n"},"component.componentType.player.encode.exit.orient":{"desc":"<p>播放器朝向</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n</ul>\n"},"component.componentType.player.encode.exit.size":{"desc":"<p>播放器尺寸</p>\n"},"component.componentType.player.encode.exit.slider":{"desc":"<p>播放器滑条样式</p>\n"},"component.componentType.player.encode.exit.controller":{"desc":"<p>播放器控制器样式</p>\n"},"component.componentType.player.encode.exit.interval":{"desc":"<p>播放间隔</p>\n"},"component.componentType.player.encode.exit.totalDuration":{"desc":"<p>设置 <code class=\"codespan\">playerType = &#39;continuous&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;continuous&#39;</code> 类型播放器的总时长，与 <code class=\"codespan\">interval</code> 配置项互斥</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.player.encode.exit.x":{"desc":"<p>图元的 x 坐标</p>\n"},"component.componentType.player.encode.exit.y":{"desc":"<p>图元 y 坐标</p>\n"},"component.componentType.player.encode.exit.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"component.componentType.player.encode.exit.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"component.componentType.player.encode.exit.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.player.encode.exit.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"component.componentType.player.encode.exit.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.player.encode.exit.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"component.componentType.player.encode.exit.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"component.componentType.player.encode.exit.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"component.componentType.player.encode.exit.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"component.componentType.player.encode.exit.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.player.encode.exit.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.player.encode.exit.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"component.componentType.player.encode.exit.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"component.componentType.player.encode.exit.outerBorder":{"desc":"<p>外描边</p>\n"},"component.componentType.player.encode.exit.innerBorder":{"desc":"<p>内描边</p>\n"},"component.componentType.player.encode.exit.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"component.componentType.player.encode.exit.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.player.encode.exit.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"component.componentType.player.encode.exit.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"component.componentType.player.encode.exit.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"component.componentType.player.encode.exit.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"component.componentType.player.encode.exit.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"component.componentType.player.encode.exit.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"component.componentType.player.encode.exit.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"component.componentType.player.encode.exit.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.player.encode.exit.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.player.encode.exit.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.player.encode.exit.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"component.componentType.player.encode.exit.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"component.componentType.player.encode.exit.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"component.componentType.player.encode.exit.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"component.componentType.player.encode.exit.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"component.componentType.player.encode.exit.texture":{"desc":"<p>图元纹理</p>\n"},"component.componentType.player.encode.exit.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"component.componentType.player.encode.exit.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"component.componentType.player.encode.exit.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"component.componentType.player.encode.exit.blur":{"desc":"<p>图元边缘模糊</p>\n"},"component.componentType.player.encode.exit.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"component.componentType.player.encode.hover":{"desc":"<p>设置<code class=\"codespan\">hover</code>状态的时候，图元对应的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.player.encode.hover.data":{"desc":"<p>数据项内容</p>\n"},"component.componentType.player.encode.hover.dataIndex":{"desc":"<p>数据项索引</p>\n"},"component.componentType.player.encode.hover.orient":{"desc":"<p>播放器朝向</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n</ul>\n"},"component.componentType.player.encode.hover.size":{"desc":"<p>播放器尺寸</p>\n"},"component.componentType.player.encode.hover.slider":{"desc":"<p>播放器滑条样式</p>\n"},"component.componentType.player.encode.hover.controller":{"desc":"<p>播放器控制器样式</p>\n"},"component.componentType.player.encode.hover.interval":{"desc":"<p>播放间隔</p>\n"},"component.componentType.player.encode.hover.totalDuration":{"desc":"<p>设置 <code class=\"codespan\">playerType = &#39;continuous&#39;</code> 或者自动计算为 <code class=\"codespan\">&#39;continuous&#39;</code> 类型播放器的总时长，与 <code class=\"codespan\">interval</code> 配置项互斥</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.player.encode.hover.x":{"desc":"<p>图元的 x 坐标</p>\n"},"component.componentType.player.encode.hover.y":{"desc":"<p>图元 y 坐标</p>\n"},"component.componentType.player.encode.hover.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"component.componentType.player.encode.hover.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"component.componentType.player.encode.hover.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.player.encode.hover.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"component.componentType.player.encode.hover.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.player.encode.hover.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"component.componentType.player.encode.hover.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"component.componentType.player.encode.hover.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"component.componentType.player.encode.hover.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"component.componentType.player.encode.hover.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.player.encode.hover.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.player.encode.hover.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"component.componentType.player.encode.hover.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"component.componentType.player.encode.hover.outerBorder":{"desc":"<p>外描边</p>\n"},"component.componentType.player.encode.hover.innerBorder":{"desc":"<p>内描边</p>\n"},"component.componentType.player.encode.hover.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"component.componentType.player.encode.hover.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.player.encode.hover.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"component.componentType.player.encode.hover.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"component.componentType.player.encode.hover.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"component.componentType.player.encode.hover.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"component.componentType.player.encode.hover.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"component.componentType.player.encode.hover.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"component.componentType.player.encode.hover.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"component.componentType.player.encode.hover.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.player.encode.hover.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.player.encode.hover.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.player.encode.hover.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"component.componentType.player.encode.hover.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"component.componentType.player.encode.hover.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"component.componentType.player.encode.hover.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"component.componentType.player.encode.hover.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"component.componentType.player.encode.hover.texture":{"desc":"<p>图元纹理</p>\n"},"component.componentType.player.encode.hover.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"component.componentType.player.encode.hover.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"component.componentType.player.encode.hover.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"component.componentType.player.encode.hover.blur":{"desc":"<p>图元边缘模糊</p>\n"},"component.componentType.player.encode.hover.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"component.componentType.player.zIndex":{"desc":"<p>设置<code class=\"codespan\">mark</code>图元对应的容器图形(group)的 zIndex</p>\n"},"component.componentType.player.interactive":{"desc":"<p>类型：<code class=\"codespan\">boolean</code>\n是否必传： 否</p>\n"},"component.componentType.player.context":{"desc":"<p>设置图元的上下文参数</p>\n"},"component.componentType.player.setCustomizedShape":{"desc":"<p>设置自定义形状的回调函数，对应的 ts 类型定位如下：</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>其中<code class=\"codespan\">ICustomPath2D</code> 为 VRender 提供的绘制自定义的路径一个工具类</p>\n"},"component.componentType.player.support3d":{"desc":"<p>当画布设置了 3d 视角的时候，是否支持 3d 模式</p>\n"},"component.componentType.player.group":{"desc":"<p>设置父图元，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 父图元对应的 id</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> 父图元对应的语法元素，一般用于 API 调用场景</li>\n</ul>\n<p>如果不设置，会默认挂在到画布的根节点下面</p>\n"},"component.componentType.player.from":{"desc":"<p>ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>通过<code class=\"codespan\">data</code> 属性值，申明图元依赖的数据</p>\n"},"component.componentType.player.key":{"desc":"<p>设置图元数据元素的唯一标志符，用于计算图形元素的数据状态，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"component.componentType.player.sort":{"desc":"<p>对图元中的所有图形元素进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"component.componentType.player.groupBy":{"desc":"<p>设置分组的属性，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置分组<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析分组<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"component.componentType.player.groupSort":{"desc":"<p>对图元中的分组进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"component.componentType.player.coordinate":{"desc":"<p>设置该图元关联的坐标系对应的 id 或者坐标系对应的图形元素</p>\n"},"component.componentType.player.state":{"desc":"<p>设置当前图元所有图形元素的状态值，支持三种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置图形的状态，比如说:<code class=\"codespan\">{ state: &#39;selected&#39;}</code> 就是给所有的图形设置状态为<code class=\"codespan\">&#39;selected&#39;</code>，通常这种情况，<code class=\"codespan\">encode</code> 中也会设置<code class=\"codespan\">&#39;selected&#39;</code>状态对应的图形通道映射</li>\n<li><code class=\"codespan\">string[]</code> 给图形设置多个状态，可以配置<code class=\"codespan\">stateSort</code>来影响对应状态执行图形通道映射的顺序</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析状态值的回调函数，返回参数为<code class=\"codespan\">string | string[]</code>，对应的 ts 类型定义为：</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"component.componentType.player.stateSort":{"desc":"<p>设置当前图元所有图形元素的状态值的排序函数，会影响状态对应的图形通道映射的顺序，最先执行的状态可能被后续的状态覆盖图形通道映射结果，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"component.componentType.player.transform":{"desc":"<p>设置图元对应的变换，所有的数据变换都可以配置在图元上，用于对图元的<code class=\"codespan\">join data</code> 执行变换；\n另外一种类型的变换就是对图形元素执行的变换，比如说<code class=\"codespan\">dodge</code>；\n通用的类型定义如下：</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>每中变换支持的参数不同</p>\n"},"component.componentType.player.layout":{"desc":"<p>设置图元的布局参数，图元在参与布局的时候，存在两种角色：</p>\n<ul>\n<li>&#39;container&#39; 容器图元，一般是<code class=\"codespan\">group</code>图元</li>\n<li>&#39;item&#39; 布局子元素，作为容器图元的子节点</li>\n</ul>\n<p>注意，我们仅支持一层布局，如果是多层嵌套布局，建议使用自定义的布局方案进行实现；</p>\n<p>现在支持两种内容的布局：<code class=\"codespan\">grid</code> 布局 和 <code class=\"codespan\">relative</code>布局，相关类型定义如下</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>如果想要设置自定义的布局方案，<code class=\"codespan\">layout</code>也支持直接设置回调函数，回调函数的定义如下：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"component.componentType.player.layout.display":{"desc":"<p>容器图元设置布局的类型，支持两种配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> 相对布局</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> 网格布局</li>\n</ul>\n"},"component.componentType.player.layout.callback":{"desc":"<p>自定义该图元的回调函数，ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"component.componentType.player.layout.skipBeforeLayouted":{"desc":"<p>在布局完成前，跳过执行阶段</p>\n"},"component.componentType.player.layout.updateViewSignals":{"desc":"<p>是否更新默认的视图信号，也就是：<code class=\"codespan\">padding</code>、<code class=\"codespan\">viewWidth</code> 和 <code class=\"codespan\">viewHeight</code></p>\n<p>只能在设置了<code class=\"codespan\">{ layout: { display: &#39;relative&#39;} }</code>的容器图元上设置该属性</p>\n"},"component.componentType.player.layout.maxChildWidth":{"desc":"<p>相对布局的父图元，设置子图元的最大宽度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的宽度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"component.componentType.player.layout.maxChildHeight":{"desc":"<p>相对布局的父图元，设置子图元的最大高度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的高度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"component.componentType.player.layout.position":{"desc":"<p>设置相对布局的子图元的位置，支持的配置有：</p>\n<ul>\n<li>&#39;top&#39; 相对于父图元的顶部</li>\n<li>&#39;bottom&#39; 相对于父图元的底部</li>\n<li>&#39;left&#39; 相对于父图元的左侧</li>\n<li>&#39;right&#39; 相对于父图元的右侧</li>\n<li>&#39;content&#39; 相对于父图元的中心，也就是内容区域</li>\n<li>&#39;auto&#39; 图元设置了坐标系的时候，根据关联的<code class=\"codespan\">scale</code>，自定计算相对于父图元的位置</li>\n</ul>\n"},"component.componentType.player.layout.padding":{"desc":"<p>子图元内边距，单位 px，默认各方向内边距为 0，接受数值、数值数组以及对象设置。</p>\n<p>使用示例：</p>\n<pre><code class=\"lang-ts\">// 数值类型，设置内边距为 5\npadding: 5;\n// 数值数组，设置上下的内边距为 5，左右的内边距为 10，用法同 CSS 盒模型\npadding: [5, 10];\n// 数值数组，分别设置四个方向的内边距\npadding: [\n  5, // 上\n  10, // 右\n  5, // 下\n  10 // 左\n];\n// 对象类型\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"component.componentType.player.layout.gridTemplateRows":{"desc":"<p>网格布局的父图元设置行的高度</p>\n"},"component.componentType.player.layout.gridTemplateColumns":{"desc":"<p>网格布局的父图元设置列的宽度</p>\n"},"component.componentType.player.layout.gridRowGap":{"desc":"<p>网格布局的父图元设置行行距</p>\n"},"component.componentType.player.layout.gridColumnGap":{"desc":"<p>网格布局的父图元设置列间距</p>\n"},"component.componentType.player.layout.gridRowStart":{"desc":"<p>网格布局的子图元设置行开始的位置</p>\n"},"component.componentType.player.layout.gridRowEnd":{"desc":"<p>网格布局的子图元设置行结束的位置</p>\n"},"component.componentType.player.layout.gridColumnStart":{"desc":"<p>网格布局的子图元设置列开始的位置</p>\n"},"component.componentType.player.layout.gridColumnEnd":{"desc":"<p>网格布局的子图元设置列结束的位置</p>\n"},"component.componentType.slider.componentType":{"desc":"<p>将组件类型设置为 <code class=\"codespan\">slider</code></p>\n"},"component.componentType.slider.min":{"desc":"<p>设置最小值</p>\n"},"component.componentType.slider.max":{"desc":"<p>设置最大值</p>\n"},"component.componentType.slider.target":{"desc":"<p>设置 slider 触发数据更新后，需要更新的数据元素</p>\n"},"component.componentType.slider.target.data":{"desc":"<p>设置更新数据对应的<code class=\"codespan\">data</code>语法元素，支持两种类型的设置：</p>\n<ul>\n<li><code class=\"codespan\">string</code> data 语法元素对应的 id</li>\n<li><code class=\"codespan\">IData</code> data 语法元素对应的实例，主要用于 API 创建模式</li>\n</ul>\n"},"component.componentType.slider.target.filter":{"desc":"<p>对目标数据元素，执行 filter 操作，支持两种类型的设置：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 更新数据元素中对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义过滤函数，定义为：<code class=\"codespan\">(datum: any, value: { start: number; end: number }) =&gt; boolean</code></li>\n</ul>\n"},"component.componentType.slider.encode":{"desc":"<p>设置图元的视觉通道编码，默认支持三种数据变化状态：</p>\n<ul>\n<li><code class=\"codespan\">enter</code> 新增数据元素</li>\n<li><code class=\"codespan\">update</code> 数据元素更新</li>\n<li><code class=\"codespan\">exit</code> 数据元素被删除</li>\n</ul>\n<p>注意，这里的数据状态是根据<code class=\"codespan\">mark</code>的<code class=\"codespan\">key</code>自动生成的，我们会针对<code class=\"codespan\">mark</code>的绑定数据，根据<code class=\"codespan\">key</code>的配置，计算数据对应的唯一标志符，数据更新后，如果对应的唯一标志符不存在了，则状态为<code class=\"codespan\">exit</code>，如果存在，则为<code class=\"codespan\">update</code>；如果之前的数据不存在改唯一标志符，则数据元素对应的状态为<code class=\"codespan\">enter</code></p>\n<p>默认支持一种交互状态：</p>\n<ul>\n<li><code class=\"codespan\">hover</code> 鼠标 hover 到具体的图形上，给图形设置对应的视觉通道编码</li>\n</ul>\n"},"component.componentType.slider.encode.enter":{"desc":"<p>设置图元在数据初始化状态执行的视觉通道映射，注意数据更新的时候不再执行</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.slider.encode.enter.slidable":{"desc":"<p>是否允许拖动</p>\n"},"component.componentType.slider.encode.enter.layout":{"desc":"<p>布局方式</p>\n<ul>\n<li>&#39;horizontal&#39;</li>\n<li>&#39;vertical&#39;</li>\n</ul>\n"},"component.componentType.slider.encode.enter.align":{"desc":"<p>手柄与文字的摆放位置</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n</ul>\n"},"component.componentType.slider.encode.enter.range":{"desc":"<p>滑条数值范围</p>\n"},"component.componentType.slider.encode.enter.min":{"desc":"<p>滑条最大值</p>\n"},"component.componentType.slider.encode.enter.max":{"desc":"<p>滑条最大值</p>\n"},"component.componentType.slider.encode.enter.value":{"desc":"<p>滑条当前值</p>\n"},"component.componentType.slider.encode.enter.step":{"desc":"<p>滑动步长</p>\n"},"component.componentType.slider.encode.enter.railWidth":{"desc":"<p>滑轨宽度</p>\n"},"component.componentType.slider.encode.enter.railHeight":{"desc":"<p>滑轨高度</p>\n"},"component.componentType.slider.encode.enter.showHandler":{"desc":"<p>是否显示滑块</p>\n"},"component.componentType.slider.encode.enter.handlerSize":{"desc":"<p>滑块大小</p>\n"},"component.componentType.slider.encode.enter.handlerStyle":{"desc":"<p>滑块样式</p>\n"},"component.componentType.slider.encode.enter.railStyle":{"desc":"<p>滑轨样式</p>\n"},"component.componentType.slider.encode.enter.trackStyle":{"desc":"<p>选中区域样式</p>\n"},"component.componentType.slider.encode.enter.startText":{"desc":"<p>首部文字样式</p>\n"},"component.componentType.slider.encode.enter.endText":{"desc":"<p>尾部文字样式</p>\n"},"component.componentType.slider.encode.enter.handlerText":{"desc":"<p>滑块文字央视</p>\n"},"component.componentType.slider.encode.enter.showTooltip":{"desc":"<p>是否显示提示信息</p>\n"},"component.componentType.slider.encode.enter.tooltip":{"desc":"<p>提示信息样式</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.slider.encode.enter.x":{"desc":"<p>图元的 x 坐标</p>\n"},"component.componentType.slider.encode.enter.y":{"desc":"<p>图元 y 坐标</p>\n"},"component.componentType.slider.encode.enter.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"component.componentType.slider.encode.enter.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"component.componentType.slider.encode.enter.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.slider.encode.enter.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"component.componentType.slider.encode.enter.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.slider.encode.enter.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"component.componentType.slider.encode.enter.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"component.componentType.slider.encode.enter.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"component.componentType.slider.encode.enter.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"component.componentType.slider.encode.enter.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.slider.encode.enter.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.slider.encode.enter.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"component.componentType.slider.encode.enter.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"component.componentType.slider.encode.enter.outerBorder":{"desc":"<p>外描边</p>\n"},"component.componentType.slider.encode.enter.innerBorder":{"desc":"<p>内描边</p>\n"},"component.componentType.slider.encode.enter.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"component.componentType.slider.encode.enter.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.slider.encode.enter.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"component.componentType.slider.encode.enter.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"component.componentType.slider.encode.enter.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"component.componentType.slider.encode.enter.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"component.componentType.slider.encode.enter.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"component.componentType.slider.encode.enter.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"component.componentType.slider.encode.enter.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"component.componentType.slider.encode.enter.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.slider.encode.enter.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.slider.encode.enter.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.slider.encode.enter.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"component.componentType.slider.encode.enter.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"component.componentType.slider.encode.enter.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"component.componentType.slider.encode.enter.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"component.componentType.slider.encode.enter.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"component.componentType.slider.encode.enter.texture":{"desc":"<p>图元纹理</p>\n"},"component.componentType.slider.encode.enter.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"component.componentType.slider.encode.enter.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"component.componentType.slider.encode.enter.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"component.componentType.slider.encode.enter.blur":{"desc":"<p>图元边缘模糊</p>\n"},"component.componentType.slider.encode.enter.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"component.componentType.slider.encode.update":{"desc":"<p>设置图元在数据更新状态执行的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.slider.encode.update.slidable":{"desc":"<p>是否允许拖动</p>\n"},"component.componentType.slider.encode.update.layout":{"desc":"<p>布局方式</p>\n<ul>\n<li>&#39;horizontal&#39;</li>\n<li>&#39;vertical&#39;</li>\n</ul>\n"},"component.componentType.slider.encode.update.align":{"desc":"<p>手柄与文字的摆放位置</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n</ul>\n"},"component.componentType.slider.encode.update.range":{"desc":"<p>滑条数值范围</p>\n"},"component.componentType.slider.encode.update.min":{"desc":"<p>滑条最大值</p>\n"},"component.componentType.slider.encode.update.max":{"desc":"<p>滑条最大值</p>\n"},"component.componentType.slider.encode.update.value":{"desc":"<p>滑条当前值</p>\n"},"component.componentType.slider.encode.update.step":{"desc":"<p>滑动步长</p>\n"},"component.componentType.slider.encode.update.railWidth":{"desc":"<p>滑轨宽度</p>\n"},"component.componentType.slider.encode.update.railHeight":{"desc":"<p>滑轨高度</p>\n"},"component.componentType.slider.encode.update.showHandler":{"desc":"<p>是否显示滑块</p>\n"},"component.componentType.slider.encode.update.handlerSize":{"desc":"<p>滑块大小</p>\n"},"component.componentType.slider.encode.update.handlerStyle":{"desc":"<p>滑块样式</p>\n"},"component.componentType.slider.encode.update.railStyle":{"desc":"<p>滑轨样式</p>\n"},"component.componentType.slider.encode.update.trackStyle":{"desc":"<p>选中区域样式</p>\n"},"component.componentType.slider.encode.update.startText":{"desc":"<p>首部文字样式</p>\n"},"component.componentType.slider.encode.update.endText":{"desc":"<p>尾部文字样式</p>\n"},"component.componentType.slider.encode.update.handlerText":{"desc":"<p>滑块文字央视</p>\n"},"component.componentType.slider.encode.update.showTooltip":{"desc":"<p>是否显示提示信息</p>\n"},"component.componentType.slider.encode.update.tooltip":{"desc":"<p>提示信息样式</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.slider.encode.update.x":{"desc":"<p>图元的 x 坐标</p>\n"},"component.componentType.slider.encode.update.y":{"desc":"<p>图元 y 坐标</p>\n"},"component.componentType.slider.encode.update.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"component.componentType.slider.encode.update.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"component.componentType.slider.encode.update.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.slider.encode.update.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"component.componentType.slider.encode.update.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.slider.encode.update.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"component.componentType.slider.encode.update.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"component.componentType.slider.encode.update.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"component.componentType.slider.encode.update.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"component.componentType.slider.encode.update.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.slider.encode.update.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.slider.encode.update.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"component.componentType.slider.encode.update.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"component.componentType.slider.encode.update.outerBorder":{"desc":"<p>外描边</p>\n"},"component.componentType.slider.encode.update.innerBorder":{"desc":"<p>内描边</p>\n"},"component.componentType.slider.encode.update.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"component.componentType.slider.encode.update.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.slider.encode.update.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"component.componentType.slider.encode.update.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"component.componentType.slider.encode.update.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"component.componentType.slider.encode.update.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"component.componentType.slider.encode.update.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"component.componentType.slider.encode.update.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"component.componentType.slider.encode.update.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"component.componentType.slider.encode.update.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.slider.encode.update.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.slider.encode.update.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.slider.encode.update.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"component.componentType.slider.encode.update.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"component.componentType.slider.encode.update.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"component.componentType.slider.encode.update.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"component.componentType.slider.encode.update.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"component.componentType.slider.encode.update.texture":{"desc":"<p>图元纹理</p>\n"},"component.componentType.slider.encode.update.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"component.componentType.slider.encode.update.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"component.componentType.slider.encode.update.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"component.componentType.slider.encode.update.blur":{"desc":"<p>图元边缘模糊</p>\n"},"component.componentType.slider.encode.update.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"component.componentType.slider.encode.exit":{"desc":"<p>设置图元在数据被删除的状态下执行的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.slider.encode.exit.slidable":{"desc":"<p>是否允许拖动</p>\n"},"component.componentType.slider.encode.exit.layout":{"desc":"<p>布局方式</p>\n<ul>\n<li>&#39;horizontal&#39;</li>\n<li>&#39;vertical&#39;</li>\n</ul>\n"},"component.componentType.slider.encode.exit.align":{"desc":"<p>手柄与文字的摆放位置</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n</ul>\n"},"component.componentType.slider.encode.exit.range":{"desc":"<p>滑条数值范围</p>\n"},"component.componentType.slider.encode.exit.min":{"desc":"<p>滑条最大值</p>\n"},"component.componentType.slider.encode.exit.max":{"desc":"<p>滑条最大值</p>\n"},"component.componentType.slider.encode.exit.value":{"desc":"<p>滑条当前值</p>\n"},"component.componentType.slider.encode.exit.step":{"desc":"<p>滑动步长</p>\n"},"component.componentType.slider.encode.exit.railWidth":{"desc":"<p>滑轨宽度</p>\n"},"component.componentType.slider.encode.exit.railHeight":{"desc":"<p>滑轨高度</p>\n"},"component.componentType.slider.encode.exit.showHandler":{"desc":"<p>是否显示滑块</p>\n"},"component.componentType.slider.encode.exit.handlerSize":{"desc":"<p>滑块大小</p>\n"},"component.componentType.slider.encode.exit.handlerStyle":{"desc":"<p>滑块样式</p>\n"},"component.componentType.slider.encode.exit.railStyle":{"desc":"<p>滑轨样式</p>\n"},"component.componentType.slider.encode.exit.trackStyle":{"desc":"<p>选中区域样式</p>\n"},"component.componentType.slider.encode.exit.startText":{"desc":"<p>首部文字样式</p>\n"},"component.componentType.slider.encode.exit.endText":{"desc":"<p>尾部文字样式</p>\n"},"component.componentType.slider.encode.exit.handlerText":{"desc":"<p>滑块文字央视</p>\n"},"component.componentType.slider.encode.exit.showTooltip":{"desc":"<p>是否显示提示信息</p>\n"},"component.componentType.slider.encode.exit.tooltip":{"desc":"<p>提示信息样式</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.slider.encode.exit.x":{"desc":"<p>图元的 x 坐标</p>\n"},"component.componentType.slider.encode.exit.y":{"desc":"<p>图元 y 坐标</p>\n"},"component.componentType.slider.encode.exit.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"component.componentType.slider.encode.exit.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"component.componentType.slider.encode.exit.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.slider.encode.exit.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"component.componentType.slider.encode.exit.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.slider.encode.exit.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"component.componentType.slider.encode.exit.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"component.componentType.slider.encode.exit.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"component.componentType.slider.encode.exit.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"component.componentType.slider.encode.exit.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.slider.encode.exit.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.slider.encode.exit.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"component.componentType.slider.encode.exit.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"component.componentType.slider.encode.exit.outerBorder":{"desc":"<p>外描边</p>\n"},"component.componentType.slider.encode.exit.innerBorder":{"desc":"<p>内描边</p>\n"},"component.componentType.slider.encode.exit.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"component.componentType.slider.encode.exit.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.slider.encode.exit.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"component.componentType.slider.encode.exit.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"component.componentType.slider.encode.exit.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"component.componentType.slider.encode.exit.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"component.componentType.slider.encode.exit.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"component.componentType.slider.encode.exit.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"component.componentType.slider.encode.exit.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"component.componentType.slider.encode.exit.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.slider.encode.exit.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.slider.encode.exit.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.slider.encode.exit.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"component.componentType.slider.encode.exit.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"component.componentType.slider.encode.exit.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"component.componentType.slider.encode.exit.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"component.componentType.slider.encode.exit.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"component.componentType.slider.encode.exit.texture":{"desc":"<p>图元纹理</p>\n"},"component.componentType.slider.encode.exit.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"component.componentType.slider.encode.exit.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"component.componentType.slider.encode.exit.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"component.componentType.slider.encode.exit.blur":{"desc":"<p>图元边缘模糊</p>\n"},"component.componentType.slider.encode.exit.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"component.componentType.slider.encode.hover":{"desc":"<p>设置<code class=\"codespan\">hover</code>状态的时候，图元对应的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.slider.encode.hover.slidable":{"desc":"<p>是否允许拖动</p>\n"},"component.componentType.slider.encode.hover.layout":{"desc":"<p>布局方式</p>\n<ul>\n<li>&#39;horizontal&#39;</li>\n<li>&#39;vertical&#39;</li>\n</ul>\n"},"component.componentType.slider.encode.hover.align":{"desc":"<p>手柄与文字的摆放位置</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n</ul>\n"},"component.componentType.slider.encode.hover.range":{"desc":"<p>滑条数值范围</p>\n"},"component.componentType.slider.encode.hover.min":{"desc":"<p>滑条最大值</p>\n"},"component.componentType.slider.encode.hover.max":{"desc":"<p>滑条最大值</p>\n"},"component.componentType.slider.encode.hover.value":{"desc":"<p>滑条当前值</p>\n"},"component.componentType.slider.encode.hover.step":{"desc":"<p>滑动步长</p>\n"},"component.componentType.slider.encode.hover.railWidth":{"desc":"<p>滑轨宽度</p>\n"},"component.componentType.slider.encode.hover.railHeight":{"desc":"<p>滑轨高度</p>\n"},"component.componentType.slider.encode.hover.showHandler":{"desc":"<p>是否显示滑块</p>\n"},"component.componentType.slider.encode.hover.handlerSize":{"desc":"<p>滑块大小</p>\n"},"component.componentType.slider.encode.hover.handlerStyle":{"desc":"<p>滑块样式</p>\n"},"component.componentType.slider.encode.hover.railStyle":{"desc":"<p>滑轨样式</p>\n"},"component.componentType.slider.encode.hover.trackStyle":{"desc":"<p>选中区域样式</p>\n"},"component.componentType.slider.encode.hover.startText":{"desc":"<p>首部文字样式</p>\n"},"component.componentType.slider.encode.hover.endText":{"desc":"<p>尾部文字样式</p>\n"},"component.componentType.slider.encode.hover.handlerText":{"desc":"<p>滑块文字央视</p>\n"},"component.componentType.slider.encode.hover.showTooltip":{"desc":"<p>是否显示提示信息</p>\n"},"component.componentType.slider.encode.hover.tooltip":{"desc":"<p>提示信息样式</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.slider.encode.hover.x":{"desc":"<p>图元的 x 坐标</p>\n"},"component.componentType.slider.encode.hover.y":{"desc":"<p>图元 y 坐标</p>\n"},"component.componentType.slider.encode.hover.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"component.componentType.slider.encode.hover.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"component.componentType.slider.encode.hover.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.slider.encode.hover.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"component.componentType.slider.encode.hover.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.slider.encode.hover.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"component.componentType.slider.encode.hover.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"component.componentType.slider.encode.hover.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"component.componentType.slider.encode.hover.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"component.componentType.slider.encode.hover.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.slider.encode.hover.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.slider.encode.hover.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"component.componentType.slider.encode.hover.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"component.componentType.slider.encode.hover.outerBorder":{"desc":"<p>外描边</p>\n"},"component.componentType.slider.encode.hover.innerBorder":{"desc":"<p>内描边</p>\n"},"component.componentType.slider.encode.hover.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"component.componentType.slider.encode.hover.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.slider.encode.hover.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"component.componentType.slider.encode.hover.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"component.componentType.slider.encode.hover.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"component.componentType.slider.encode.hover.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"component.componentType.slider.encode.hover.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"component.componentType.slider.encode.hover.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"component.componentType.slider.encode.hover.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"component.componentType.slider.encode.hover.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.slider.encode.hover.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.slider.encode.hover.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.slider.encode.hover.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"component.componentType.slider.encode.hover.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"component.componentType.slider.encode.hover.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"component.componentType.slider.encode.hover.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"component.componentType.slider.encode.hover.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"component.componentType.slider.encode.hover.texture":{"desc":"<p>图元纹理</p>\n"},"component.componentType.slider.encode.hover.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"component.componentType.slider.encode.hover.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"component.componentType.slider.encode.hover.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"component.componentType.slider.encode.hover.blur":{"desc":"<p>图元边缘模糊</p>\n"},"component.componentType.slider.encode.hover.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"component.componentType.slider.zIndex":{"desc":"<p>设置<code class=\"codespan\">mark</code>图元对应的容器图形(group)的 zIndex</p>\n"},"component.componentType.slider.interactive":{"desc":"<p>类型：<code class=\"codespan\">boolean</code>\n是否必传： 否</p>\n"},"component.componentType.slider.context":{"desc":"<p>设置图元的上下文参数</p>\n"},"component.componentType.slider.setCustomizedShape":{"desc":"<p>设置自定义形状的回调函数，对应的 ts 类型定位如下：</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>其中<code class=\"codespan\">ICustomPath2D</code> 为 VRender 提供的绘制自定义的路径一个工具类</p>\n"},"component.componentType.slider.support3d":{"desc":"<p>当画布设置了 3d 视角的时候，是否支持 3d 模式</p>\n"},"component.componentType.slider.group":{"desc":"<p>设置父图元，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 父图元对应的 id</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> 父图元对应的语法元素，一般用于 API 调用场景</li>\n</ul>\n<p>如果不设置，会默认挂在到画布的根节点下面</p>\n"},"component.componentType.slider.from":{"desc":"<p>ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>通过<code class=\"codespan\">data</code> 属性值，申明图元依赖的数据</p>\n"},"component.componentType.slider.key":{"desc":"<p>设置图元数据元素的唯一标志符，用于计算图形元素的数据状态，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"component.componentType.slider.sort":{"desc":"<p>对图元中的所有图形元素进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"component.componentType.slider.groupBy":{"desc":"<p>设置分组的属性，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置分组<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析分组<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"component.componentType.slider.groupSort":{"desc":"<p>对图元中的分组进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"component.componentType.slider.coordinate":{"desc":"<p>设置该图元关联的坐标系对应的 id 或者坐标系对应的图形元素</p>\n"},"component.componentType.slider.state":{"desc":"<p>设置当前图元所有图形元素的状态值，支持三种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置图形的状态，比如说:<code class=\"codespan\">{ state: &#39;selected&#39;}</code> 就是给所有的图形设置状态为<code class=\"codespan\">&#39;selected&#39;</code>，通常这种情况，<code class=\"codespan\">encode</code> 中也会设置<code class=\"codespan\">&#39;selected&#39;</code>状态对应的图形通道映射</li>\n<li><code class=\"codespan\">string[]</code> 给图形设置多个状态，可以配置<code class=\"codespan\">stateSort</code>来影响对应状态执行图形通道映射的顺序</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析状态值的回调函数，返回参数为<code class=\"codespan\">string | string[]</code>，对应的 ts 类型定义为：</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"component.componentType.slider.stateSort":{"desc":"<p>设置当前图元所有图形元素的状态值的排序函数，会影响状态对应的图形通道映射的顺序，最先执行的状态可能被后续的状态覆盖图形通道映射结果，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"component.componentType.slider.transform":{"desc":"<p>设置图元对应的变换，所有的数据变换都可以配置在图元上，用于对图元的<code class=\"codespan\">join data</code> 执行变换；\n另外一种类型的变换就是对图形元素执行的变换，比如说<code class=\"codespan\">dodge</code>；\n通用的类型定义如下：</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>每中变换支持的参数不同</p>\n"},"component.componentType.slider.layout":{"desc":"<p>设置图元的布局参数，图元在参与布局的时候，存在两种角色：</p>\n<ul>\n<li>&#39;container&#39; 容器图元，一般是<code class=\"codespan\">group</code>图元</li>\n<li>&#39;item&#39; 布局子元素，作为容器图元的子节点</li>\n</ul>\n<p>注意，我们仅支持一层布局，如果是多层嵌套布局，建议使用自定义的布局方案进行实现；</p>\n<p>现在支持两种内容的布局：<code class=\"codespan\">grid</code> 布局 和 <code class=\"codespan\">relative</code>布局，相关类型定义如下</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>如果想要设置自定义的布局方案，<code class=\"codespan\">layout</code>也支持直接设置回调函数，回调函数的定义如下：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"component.componentType.slider.layout.display":{"desc":"<p>容器图元设置布局的类型，支持两种配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> 相对布局</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> 网格布局</li>\n</ul>\n"},"component.componentType.slider.layout.callback":{"desc":"<p>自定义该图元的回调函数，ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"component.componentType.slider.layout.skipBeforeLayouted":{"desc":"<p>在布局完成前，跳过执行阶段</p>\n"},"component.componentType.slider.layout.updateViewSignals":{"desc":"<p>是否更新默认的视图信号，也就是：<code class=\"codespan\">padding</code>、<code class=\"codespan\">viewWidth</code> 和 <code class=\"codespan\">viewHeight</code></p>\n<p>只能在设置了<code class=\"codespan\">{ layout: { display: &#39;relative&#39;} }</code>的容器图元上设置该属性</p>\n"},"component.componentType.slider.layout.maxChildWidth":{"desc":"<p>相对布局的父图元，设置子图元的最大宽度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的宽度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"component.componentType.slider.layout.maxChildHeight":{"desc":"<p>相对布局的父图元，设置子图元的最大高度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的高度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"component.componentType.slider.layout.position":{"desc":"<p>设置相对布局的子图元的位置，支持的配置有：</p>\n<ul>\n<li>&#39;top&#39; 相对于父图元的顶部</li>\n<li>&#39;bottom&#39; 相对于父图元的底部</li>\n<li>&#39;left&#39; 相对于父图元的左侧</li>\n<li>&#39;right&#39; 相对于父图元的右侧</li>\n<li>&#39;content&#39; 相对于父图元的中心，也就是内容区域</li>\n<li>&#39;auto&#39; 图元设置了坐标系的时候，根据关联的<code class=\"codespan\">scale</code>，自定计算相对于父图元的位置</li>\n</ul>\n"},"component.componentType.slider.layout.padding":{"desc":"<p>子图元内边距，单位 px，默认各方向内边距为 0，接受数值、数值数组以及对象设置。</p>\n<p>使用示例：</p>\n<pre><code class=\"lang-ts\">// 数值类型，设置内边距为 5\npadding: 5;\n// 数值数组，设置上下的内边距为 5，左右的内边距为 10，用法同 CSS 盒模型\npadding: [5, 10];\n// 数值数组，分别设置四个方向的内边距\npadding: [\n  5, // 上\n  10, // 右\n  5, // 下\n  10 // 左\n];\n// 对象类型\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"component.componentType.slider.layout.gridTemplateRows":{"desc":"<p>网格布局的父图元设置行的高度</p>\n"},"component.componentType.slider.layout.gridTemplateColumns":{"desc":"<p>网格布局的父图元设置列的宽度</p>\n"},"component.componentType.slider.layout.gridRowGap":{"desc":"<p>网格布局的父图元设置行行距</p>\n"},"component.componentType.slider.layout.gridColumnGap":{"desc":"<p>网格布局的父图元设置列间距</p>\n"},"component.componentType.slider.layout.gridRowStart":{"desc":"<p>网格布局的子图元设置行开始的位置</p>\n"},"component.componentType.slider.layout.gridRowEnd":{"desc":"<p>网格布局的子图元设置行结束的位置</p>\n"},"component.componentType.slider.layout.gridColumnStart":{"desc":"<p>网格布局的子图元设置列开始的位置</p>\n"},"component.componentType.slider.layout.gridColumnEnd":{"desc":"<p>网格布局的子图元设置列结束的位置</p>\n"},"component.componentType.tooltip.componentType":{"desc":"<p>将组件类型设置为 <code class=\"codespan\">tooltip</code></p>\n"},"component.componentType.tooltip.title.visible":{"desc":"<p>是否显示</p>\n"},"component.componentType.tooltip.title.key":{"desc":"<p>设置<code class=\"codespan\">key</code> 对应的内容，支持多种格式：</p>\n<p><strong>第一种</strong>： 通过两种格式，返回<code class=\"codespan\">key</code>对应的值</p>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">string</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(datum: any, el: IElement, parameters: any) =&gt; string;\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 mark 语法元素依赖的其他语法元素</p>\n<p><strong>第二种</strong>：通过两种格式，返回<code class=\"codespan\">key</code>对应的<code class=\"codespan\">text</code>类型的图形展示的图形属性，可以参考<code class=\"codespan\">type: &#39;text&#39;</code>的 mark 对应的 encode 设置</p>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">ITextGraphicAttribute</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(datum: any, el: IElement, parameters: any) =&gt; ITextGraphicAttribute;\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 mark 语法元素依赖的其他语法元素</p>\n<p><strong>第三种</strong>：通过字段，设置<code class=\"codespan\">key</code>对应的值</p>\n<p>类型定义为：</p>\n<pre><code class=\"lang-ts\">type FieldEncodeType = {\n  field: string;\n};\n</code></pre>\n<p><code class=\"codespan\">field</code> 设置从关联数据的相应字段中读取值</p>\n"},"component.componentType.tooltip.title.value":{"desc":"<p>设置<code class=\"codespan\">value</code> 对应的内容，支持多种格式：</p>\n<p><strong>第一种</strong>： 通过两种格式，返回<code class=\"codespan\">value</code>对应的值</p>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">string</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(datum: any, el: IElement, parameters: any) =&gt; string;\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 mark 语法元素依赖的其他语法元素</p>\n<p><strong>第二种</strong>：通过两种格式，返回<code class=\"codespan\">value</code>对应的<code class=\"codespan\">text</code>类型的图形展示的图形属性，可以参考<code class=\"codespan\">type: &#39;text&#39;</code>的 mark 对应的 encode 设置</p>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">ISymbolGraphicAttribute</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(datum: any, el: IElement, parameters: any) =&gt; ISymbolGraphicAttribute;\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 mark 语法元素依赖的其他语法元素</p>\n<p>第三种：通过字段，设置<code class=\"codespan\">value</code>对应的值</p>\n<p>类型定义为：</p>\n<pre><code class=\"lang-ts\">type FieldEncodeType = {\n  field: string;\n};\n</code></pre>\n<p><code class=\"codespan\">field</code> 设置从关联数据的相应字段中读取值</p>\n"},"component.componentType.tooltip.title.symbol":{"desc":"<p>设置<code class=\"codespan\">symbol</code> 对应的内容，支持多种格式：</p>\n<p><strong>第一种</strong>： 通过两种格式，返回<code class=\"codespan\">symbol</code>对应类型</p>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">string</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(datum: any, el: IElement, parameters: any) =&gt; string;\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 mark 语法元素依赖的其他语法元素</p>\n<p><strong>第二种</strong>：通过两种格式，返回<code class=\"codespan\">symbol</code>对应的图形属性，可以参考<code class=\"codespan\">type: &#39;symbol&#39;</code>的 mark 对应的 encode 设置</p>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">ISymbolGraphicAttribute</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(datum: any, el: IElement, parameters: any) =&gt; ISymbolGraphicAttribute;\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 mark 语法元素依赖的其他语法元素</p>\n<p><strong>第三种</strong>：通过字段，设置<code class=\"codespan\">symbol</code>对应的对应</p>\n<p>类型定义为：</p>\n<pre><code class=\"lang-ts\">type FieldEncodeType = {\n  field: string;\n};\n</code></pre>\n<p><code class=\"codespan\">field</code> 设置从关联数据的相应字段中读取值</p>\n"},"component.componentType.tooltip.content":{"desc":"<p>设置 tooltip 的内容，支持两种类型：</p>\n<ul>\n<li><code class=\"codespan\">ITooltipRow</code> 具体配置如下：</li>\n<li><code class=\"codespan\">ITooltipRow[]</code> 将下面的配置，通过数组对象传入</li>\n</ul>\n"},"component.componentType.tooltip.content.visible":{"desc":"<p>是否显示</p>\n"},"component.componentType.tooltip.content.key":{"desc":"<p>设置<code class=\"codespan\">key</code> 对应的内容，支持多种格式：</p>\n<p><strong>第一种</strong>： 通过两种格式，返回<code class=\"codespan\">key</code>对应的值</p>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">string</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(datum: any, el: IElement, parameters: any) =&gt; string;\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 mark 语法元素依赖的其他语法元素</p>\n<p><strong>第二种</strong>：通过两种格式，返回<code class=\"codespan\">key</code>对应的<code class=\"codespan\">text</code>类型的图形展示的图形属性，可以参考<code class=\"codespan\">type: &#39;text&#39;</code>的 mark 对应的 encode 设置</p>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">ITextGraphicAttribute</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(datum: any, el: IElement, parameters: any) =&gt; ITextGraphicAttribute;\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 mark 语法元素依赖的其他语法元素</p>\n<p><strong>第三种</strong>：通过字段，设置<code class=\"codespan\">key</code>对应的值</p>\n<p>类型定义为：</p>\n<pre><code class=\"lang-ts\">type FieldEncodeType = {\n  field: string;\n};\n</code></pre>\n<p><code class=\"codespan\">field</code> 设置从关联数据的相应字段中读取值</p>\n"},"component.componentType.tooltip.content.value":{"desc":"<p>设置<code class=\"codespan\">value</code> 对应的内容，支持多种格式：</p>\n<p><strong>第一种</strong>： 通过两种格式，返回<code class=\"codespan\">value</code>对应的值</p>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">string</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(datum: any, el: IElement, parameters: any) =&gt; string;\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 mark 语法元素依赖的其他语法元素</p>\n<p><strong>第二种</strong>：通过两种格式，返回<code class=\"codespan\">value</code>对应的<code class=\"codespan\">text</code>类型的图形展示的图形属性，可以参考<code class=\"codespan\">type: &#39;text&#39;</code>的 mark 对应的 encode 设置</p>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">ISymbolGraphicAttribute</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(datum: any, el: IElement, parameters: any) =&gt; ISymbolGraphicAttribute;\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 mark 语法元素依赖的其他语法元素</p>\n<p>第三种：通过字段，设置<code class=\"codespan\">value</code>对应的值</p>\n<p>类型定义为：</p>\n<pre><code class=\"lang-ts\">type FieldEncodeType = {\n  field: string;\n};\n</code></pre>\n<p><code class=\"codespan\">field</code> 设置从关联数据的相应字段中读取值</p>\n"},"component.componentType.tooltip.content.symbol":{"desc":"<p>设置<code class=\"codespan\">symbol</code> 对应的内容，支持多种格式：</p>\n<p><strong>第一种</strong>： 通过两种格式，返回<code class=\"codespan\">symbol</code>对应类型</p>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">string</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(datum: any, el: IElement, parameters: any) =&gt; string;\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 mark 语法元素依赖的其他语法元素</p>\n<p><strong>第二种</strong>：通过两种格式，返回<code class=\"codespan\">symbol</code>对应的图形属性，可以参考<code class=\"codespan\">type: &#39;symbol&#39;</code>的 mark 对应的 encode 设置</p>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">ISymbolGraphicAttribute</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(datum: any, el: IElement, parameters: any) =&gt; ISymbolGraphicAttribute;\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 mark 语法元素依赖的其他语法元素</p>\n<p><strong>第三种</strong>：通过字段，设置<code class=\"codespan\">symbol</code>对应的对应</p>\n<p>类型定义为：</p>\n<pre><code class=\"lang-ts\">type FieldEncodeType = {\n  field: string;\n};\n</code></pre>\n<p><code class=\"codespan\">field</code> 设置从关联数据的相应字段中读取值</p>\n"},"component.componentType.tooltip.target":{"desc":"<p>关联的图元，支持关联单个图元或者多个图元，支持四种格式的配置：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 关联单个图元，配置关联图元对应的 id</li>\n<li><code class=\"codespan\">string[]</code> 关联多个图元，配置关联图元对应的 id</li>\n<li><code class=\"codespan\">IMark</code> 关联单个图元，配置关联图元对应的实例，主要用于 API 创建模式</li>\n<li><code class=\"codespan\">IMark[]</code> 关联多个图元，配置关联图元对应的实例，主要用于 API 创建模式</li>\n</ul>\n"},"component.componentType.tooltip.encode":{"desc":"<p>设置图元的视觉通道编码，默认支持三种数据变化状态：</p>\n<ul>\n<li><code class=\"codespan\">enter</code> 新增数据元素</li>\n<li><code class=\"codespan\">update</code> 数据元素更新</li>\n<li><code class=\"codespan\">exit</code> 数据元素被删除</li>\n</ul>\n<p>注意，这里的数据状态是根据<code class=\"codespan\">mark</code>的<code class=\"codespan\">key</code>自动生成的，我们会针对<code class=\"codespan\">mark</code>的绑定数据，根据<code class=\"codespan\">key</code>的配置，计算数据对应的唯一标志符，数据更新后，如果对应的唯一标志符不存在了，则状态为<code class=\"codespan\">exit</code>，如果存在，则为<code class=\"codespan\">update</code>；如果之前的数据不存在改唯一标志符，则数据元素对应的状态为<code class=\"codespan\">enter</code></p>\n<p>默认支持一种交互状态：</p>\n<ul>\n<li><code class=\"codespan\">hover</code> 鼠标 hover 到具体的图形上，给图形设置对应的视觉通道编码</li>\n</ul>\n"},"component.componentType.tooltip.encode.enter":{"desc":"<p>设置图元在数据初始化状态执行的视觉通道映射，注意数据更新的时候不再执行</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.tooltip.encode.enter.padding":{"desc":"<p>内边距</p>\n"},"component.componentType.tooltip.encode.enter.positionX":{"desc":"<p>X 方向上提示信息相对于光标的位置</p>\n<ul>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;center&#39;</li>\n</ul>\n"},"component.componentType.tooltip.encode.enter.positionY":{"desc":"<p>Y 方向上提示信息相对于光标的位置</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;middle&#39;</li>\n</ul>\n"},"component.componentType.tooltip.encode.enter.offsetX":{"desc":"<p>X 方向上提示信息的额外偏移</p>\n"},"component.componentType.tooltip.encode.enter.offsetY":{"desc":"<p>X 方向上提示信息的额外偏移</p>\n"},"component.componentType.tooltip.encode.enter.parentBounds":{"desc":"<p>父节点的包围盒</p>\n"},"component.componentType.tooltip.encode.enter.autoCalculatePosition":{"desc":"<p>是否自动计算位置</p>\n"},"component.componentType.tooltip.encode.enter.autoMeasure":{"desc":"<p>是否自动测量内容文字宽高</p>\n"},"component.componentType.tooltip.encode.enter.panel":{"desc":"<p>背景样式</p>\n"},"component.componentType.tooltip.encode.enter.titleStyle":{"desc":"<p>标题样式</p>\n"},"component.componentType.tooltip.encode.enter.contentStyle":{"desc":"<p>内容样式</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.tooltip.encode.enter.x":{"desc":"<p>图元的 x 坐标</p>\n"},"component.componentType.tooltip.encode.enter.y":{"desc":"<p>图元 y 坐标</p>\n"},"component.componentType.tooltip.encode.enter.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"component.componentType.tooltip.encode.enter.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"component.componentType.tooltip.encode.enter.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.tooltip.encode.enter.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"component.componentType.tooltip.encode.enter.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.tooltip.encode.enter.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"component.componentType.tooltip.encode.enter.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"component.componentType.tooltip.encode.enter.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"component.componentType.tooltip.encode.enter.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"component.componentType.tooltip.encode.enter.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.tooltip.encode.enter.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.tooltip.encode.enter.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"component.componentType.tooltip.encode.enter.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"component.componentType.tooltip.encode.enter.outerBorder":{"desc":"<p>外描边</p>\n"},"component.componentType.tooltip.encode.enter.innerBorder":{"desc":"<p>内描边</p>\n"},"component.componentType.tooltip.encode.enter.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"component.componentType.tooltip.encode.enter.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.tooltip.encode.enter.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"component.componentType.tooltip.encode.enter.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"component.componentType.tooltip.encode.enter.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"component.componentType.tooltip.encode.enter.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"component.componentType.tooltip.encode.enter.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"component.componentType.tooltip.encode.enter.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"component.componentType.tooltip.encode.enter.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"component.componentType.tooltip.encode.enter.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.tooltip.encode.enter.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.tooltip.encode.enter.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.tooltip.encode.enter.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"component.componentType.tooltip.encode.enter.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"component.componentType.tooltip.encode.enter.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"component.componentType.tooltip.encode.enter.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"component.componentType.tooltip.encode.enter.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"component.componentType.tooltip.encode.enter.texture":{"desc":"<p>图元纹理</p>\n"},"component.componentType.tooltip.encode.enter.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"component.componentType.tooltip.encode.enter.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"component.componentType.tooltip.encode.enter.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"component.componentType.tooltip.encode.enter.blur":{"desc":"<p>图元边缘模糊</p>\n"},"component.componentType.tooltip.encode.enter.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"component.componentType.tooltip.encode.update":{"desc":"<p>设置图元在数据更新状态执行的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.tooltip.encode.update.padding":{"desc":"<p>内边距</p>\n"},"component.componentType.tooltip.encode.update.positionX":{"desc":"<p>X 方向上提示信息相对于光标的位置</p>\n<ul>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;center&#39;</li>\n</ul>\n"},"component.componentType.tooltip.encode.update.positionY":{"desc":"<p>Y 方向上提示信息相对于光标的位置</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;middle&#39;</li>\n</ul>\n"},"component.componentType.tooltip.encode.update.offsetX":{"desc":"<p>X 方向上提示信息的额外偏移</p>\n"},"component.componentType.tooltip.encode.update.offsetY":{"desc":"<p>X 方向上提示信息的额外偏移</p>\n"},"component.componentType.tooltip.encode.update.parentBounds":{"desc":"<p>父节点的包围盒</p>\n"},"component.componentType.tooltip.encode.update.autoCalculatePosition":{"desc":"<p>是否自动计算位置</p>\n"},"component.componentType.tooltip.encode.update.autoMeasure":{"desc":"<p>是否自动测量内容文字宽高</p>\n"},"component.componentType.tooltip.encode.update.panel":{"desc":"<p>背景样式</p>\n"},"component.componentType.tooltip.encode.update.titleStyle":{"desc":"<p>标题样式</p>\n"},"component.componentType.tooltip.encode.update.contentStyle":{"desc":"<p>内容样式</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.tooltip.encode.update.x":{"desc":"<p>图元的 x 坐标</p>\n"},"component.componentType.tooltip.encode.update.y":{"desc":"<p>图元 y 坐标</p>\n"},"component.componentType.tooltip.encode.update.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"component.componentType.tooltip.encode.update.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"component.componentType.tooltip.encode.update.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.tooltip.encode.update.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"component.componentType.tooltip.encode.update.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.tooltip.encode.update.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"component.componentType.tooltip.encode.update.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"component.componentType.tooltip.encode.update.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"component.componentType.tooltip.encode.update.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"component.componentType.tooltip.encode.update.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.tooltip.encode.update.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.tooltip.encode.update.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"component.componentType.tooltip.encode.update.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"component.componentType.tooltip.encode.update.outerBorder":{"desc":"<p>外描边</p>\n"},"component.componentType.tooltip.encode.update.innerBorder":{"desc":"<p>内描边</p>\n"},"component.componentType.tooltip.encode.update.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"component.componentType.tooltip.encode.update.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.tooltip.encode.update.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"component.componentType.tooltip.encode.update.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"component.componentType.tooltip.encode.update.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"component.componentType.tooltip.encode.update.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"component.componentType.tooltip.encode.update.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"component.componentType.tooltip.encode.update.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"component.componentType.tooltip.encode.update.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"component.componentType.tooltip.encode.update.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.tooltip.encode.update.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.tooltip.encode.update.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.tooltip.encode.update.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"component.componentType.tooltip.encode.update.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"component.componentType.tooltip.encode.update.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"component.componentType.tooltip.encode.update.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"component.componentType.tooltip.encode.update.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"component.componentType.tooltip.encode.update.texture":{"desc":"<p>图元纹理</p>\n"},"component.componentType.tooltip.encode.update.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"component.componentType.tooltip.encode.update.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"component.componentType.tooltip.encode.update.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"component.componentType.tooltip.encode.update.blur":{"desc":"<p>图元边缘模糊</p>\n"},"component.componentType.tooltip.encode.update.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"component.componentType.tooltip.encode.exit":{"desc":"<p>设置图元在数据被删除的状态下执行的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.tooltip.encode.exit.padding":{"desc":"<p>内边距</p>\n"},"component.componentType.tooltip.encode.exit.positionX":{"desc":"<p>X 方向上提示信息相对于光标的位置</p>\n<ul>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;center&#39;</li>\n</ul>\n"},"component.componentType.tooltip.encode.exit.positionY":{"desc":"<p>Y 方向上提示信息相对于光标的位置</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;middle&#39;</li>\n</ul>\n"},"component.componentType.tooltip.encode.exit.offsetX":{"desc":"<p>X 方向上提示信息的额外偏移</p>\n"},"component.componentType.tooltip.encode.exit.offsetY":{"desc":"<p>X 方向上提示信息的额外偏移</p>\n"},"component.componentType.tooltip.encode.exit.parentBounds":{"desc":"<p>父节点的包围盒</p>\n"},"component.componentType.tooltip.encode.exit.autoCalculatePosition":{"desc":"<p>是否自动计算位置</p>\n"},"component.componentType.tooltip.encode.exit.autoMeasure":{"desc":"<p>是否自动测量内容文字宽高</p>\n"},"component.componentType.tooltip.encode.exit.panel":{"desc":"<p>背景样式</p>\n"},"component.componentType.tooltip.encode.exit.titleStyle":{"desc":"<p>标题样式</p>\n"},"component.componentType.tooltip.encode.exit.contentStyle":{"desc":"<p>内容样式</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.tooltip.encode.exit.x":{"desc":"<p>图元的 x 坐标</p>\n"},"component.componentType.tooltip.encode.exit.y":{"desc":"<p>图元 y 坐标</p>\n"},"component.componentType.tooltip.encode.exit.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"component.componentType.tooltip.encode.exit.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"component.componentType.tooltip.encode.exit.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.tooltip.encode.exit.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"component.componentType.tooltip.encode.exit.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.tooltip.encode.exit.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"component.componentType.tooltip.encode.exit.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"component.componentType.tooltip.encode.exit.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"component.componentType.tooltip.encode.exit.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"component.componentType.tooltip.encode.exit.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.tooltip.encode.exit.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.tooltip.encode.exit.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"component.componentType.tooltip.encode.exit.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"component.componentType.tooltip.encode.exit.outerBorder":{"desc":"<p>外描边</p>\n"},"component.componentType.tooltip.encode.exit.innerBorder":{"desc":"<p>内描边</p>\n"},"component.componentType.tooltip.encode.exit.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"component.componentType.tooltip.encode.exit.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.tooltip.encode.exit.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"component.componentType.tooltip.encode.exit.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"component.componentType.tooltip.encode.exit.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"component.componentType.tooltip.encode.exit.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"component.componentType.tooltip.encode.exit.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"component.componentType.tooltip.encode.exit.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"component.componentType.tooltip.encode.exit.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"component.componentType.tooltip.encode.exit.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.tooltip.encode.exit.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.tooltip.encode.exit.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.tooltip.encode.exit.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"component.componentType.tooltip.encode.exit.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"component.componentType.tooltip.encode.exit.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"component.componentType.tooltip.encode.exit.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"component.componentType.tooltip.encode.exit.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"component.componentType.tooltip.encode.exit.texture":{"desc":"<p>图元纹理</p>\n"},"component.componentType.tooltip.encode.exit.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"component.componentType.tooltip.encode.exit.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"component.componentType.tooltip.encode.exit.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"component.componentType.tooltip.encode.exit.blur":{"desc":"<p>图元边缘模糊</p>\n"},"component.componentType.tooltip.encode.exit.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"component.componentType.tooltip.encode.hover":{"desc":"<p>设置<code class=\"codespan\">hover</code>状态的时候，图元对应的视觉通道映射</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.tooltip.encode.hover.padding":{"desc":"<p>内边距</p>\n"},"component.componentType.tooltip.encode.hover.positionX":{"desc":"<p>X 方向上提示信息相对于光标的位置</p>\n<ul>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;center&#39;</li>\n</ul>\n"},"component.componentType.tooltip.encode.hover.positionY":{"desc":"<p>Y 方向上提示信息相对于光标的位置</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;middle&#39;</li>\n</ul>\n"},"component.componentType.tooltip.encode.hover.offsetX":{"desc":"<p>X 方向上提示信息的额外偏移</p>\n"},"component.componentType.tooltip.encode.hover.offsetY":{"desc":"<p>X 方向上提示信息的额外偏移</p>\n"},"component.componentType.tooltip.encode.hover.parentBounds":{"desc":"<p>父节点的包围盒</p>\n"},"component.componentType.tooltip.encode.hover.autoCalculatePosition":{"desc":"<p>是否自动计算位置</p>\n"},"component.componentType.tooltip.encode.hover.autoMeasure":{"desc":"<p>是否自动测量内容文字宽高</p>\n"},"component.componentType.tooltip.encode.hover.panel":{"desc":"<p>背景样式</p>\n"},"component.componentType.tooltip.encode.hover.titleStyle":{"desc":"<p>标题样式</p>\n"},"component.componentType.tooltip.encode.hover.contentStyle":{"desc":"<p>内容样式</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.tooltip.encode.hover.x":{"desc":"<p>图元的 x 坐标</p>\n"},"component.componentType.tooltip.encode.hover.y":{"desc":"<p>图元 y 坐标</p>\n"},"component.componentType.tooltip.encode.hover.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"component.componentType.tooltip.encode.hover.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"component.componentType.tooltip.encode.hover.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.tooltip.encode.hover.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"component.componentType.tooltip.encode.hover.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.tooltip.encode.hover.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"component.componentType.tooltip.encode.hover.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"component.componentType.tooltip.encode.hover.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"component.componentType.tooltip.encode.hover.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"component.componentType.tooltip.encode.hover.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.tooltip.encode.hover.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.tooltip.encode.hover.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"component.componentType.tooltip.encode.hover.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"component.componentType.tooltip.encode.hover.outerBorder":{"desc":"<p>外描边</p>\n"},"component.componentType.tooltip.encode.hover.innerBorder":{"desc":"<p>内描边</p>\n"},"component.componentType.tooltip.encode.hover.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"component.componentType.tooltip.encode.hover.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"component.componentType.tooltip.encode.hover.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"component.componentType.tooltip.encode.hover.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"component.componentType.tooltip.encode.hover.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"component.componentType.tooltip.encode.hover.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"component.componentType.tooltip.encode.hover.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"component.componentType.tooltip.encode.hover.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"component.componentType.tooltip.encode.hover.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"component.componentType.tooltip.encode.hover.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.tooltip.encode.hover.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.tooltip.encode.hover.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"component.componentType.tooltip.encode.hover.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"component.componentType.tooltip.encode.hover.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"component.componentType.tooltip.encode.hover.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"component.componentType.tooltip.encode.hover.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"component.componentType.tooltip.encode.hover.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"component.componentType.tooltip.encode.hover.texture":{"desc":"<p>图元纹理</p>\n"},"component.componentType.tooltip.encode.hover.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"component.componentType.tooltip.encode.hover.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"component.componentType.tooltip.encode.hover.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"component.componentType.tooltip.encode.hover.blur":{"desc":"<p>图元边缘模糊</p>\n"},"component.componentType.tooltip.encode.hover.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"component.componentType.tooltip.zIndex":{"desc":"<p>设置<code class=\"codespan\">mark</code>图元对应的容器图形(group)的 zIndex</p>\n"},"component.componentType.tooltip.interactive":{"desc":"<p>类型：<code class=\"codespan\">boolean</code>\n是否必传： 否</p>\n"},"component.componentType.tooltip.context":{"desc":"<p>设置图元的上下文参数</p>\n"},"component.componentType.tooltip.setCustomizedShape":{"desc":"<p>设置自定义形状的回调函数，对应的 ts 类型定位如下：</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>其中<code class=\"codespan\">ICustomPath2D</code> 为 VRender 提供的绘制自定义的路径一个工具类</p>\n"},"component.componentType.tooltip.support3d":{"desc":"<p>当画布设置了 3d 视角的时候，是否支持 3d 模式</p>\n"},"component.componentType.tooltip.group":{"desc":"<p>设置父图元，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 父图元对应的 id</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> 父图元对应的语法元素，一般用于 API 调用场景</li>\n</ul>\n<p>如果不设置，会默认挂在到画布的根节点下面</p>\n"},"component.componentType.tooltip.from":{"desc":"<p>ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>通过<code class=\"codespan\">data</code> 属性值，申明图元依赖的数据</p>\n"},"component.componentType.tooltip.key":{"desc":"<p>设置图元数据元素的唯一标志符，用于计算图形元素的数据状态，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"component.componentType.tooltip.sort":{"desc":"<p>对图元中的所有图形元素进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"component.componentType.tooltip.groupBy":{"desc":"<p>设置分组的属性，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置分组<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析分组<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"component.componentType.tooltip.groupSort":{"desc":"<p>对图元中的分组进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"component.componentType.tooltip.coordinate":{"desc":"<p>设置该图元关联的坐标系对应的 id 或者坐标系对应的图形元素</p>\n"},"component.componentType.tooltip.state":{"desc":"<p>设置当前图元所有图形元素的状态值，支持三种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置图形的状态，比如说:<code class=\"codespan\">{ state: &#39;selected&#39;}</code> 就是给所有的图形设置状态为<code class=\"codespan\">&#39;selected&#39;</code>，通常这种情况，<code class=\"codespan\">encode</code> 中也会设置<code class=\"codespan\">&#39;selected&#39;</code>状态对应的图形通道映射</li>\n<li><code class=\"codespan\">string[]</code> 给图形设置多个状态，可以配置<code class=\"codespan\">stateSort</code>来影响对应状态执行图形通道映射的顺序</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析状态值的回调函数，返回参数为<code class=\"codespan\">string | string[]</code>，对应的 ts 类型定义为：</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"component.componentType.tooltip.stateSort":{"desc":"<p>设置当前图元所有图形元素的状态值的排序函数，会影响状态对应的图形通道映射的顺序，最先执行的状态可能被后续的状态覆盖图形通道映射结果，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"component.componentType.tooltip.transform":{"desc":"<p>设置图元对应的变换，所有的数据变换都可以配置在图元上，用于对图元的<code class=\"codespan\">join data</code> 执行变换；\n另外一种类型的变换就是对图形元素执行的变换，比如说<code class=\"codespan\">dodge</code>；\n通用的类型定义如下：</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>每中变换支持的参数不同</p>\n"},"component.componentType.tooltip.layout":{"desc":"<p>设置图元的布局参数，图元在参与布局的时候，存在两种角色：</p>\n<ul>\n<li>&#39;container&#39; 容器图元，一般是<code class=\"codespan\">group</code>图元</li>\n<li>&#39;item&#39; 布局子元素，作为容器图元的子节点</li>\n</ul>\n<p>注意，我们仅支持一层布局，如果是多层嵌套布局，建议使用自定义的布局方案进行实现；</p>\n<p>现在支持两种内容的布局：<code class=\"codespan\">grid</code> 布局 和 <code class=\"codespan\">relative</code>布局，相关类型定义如下</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>如果想要设置自定义的布局方案，<code class=\"codespan\">layout</code>也支持直接设置回调函数，回调函数的定义如下：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"component.componentType.tooltip.layout.display":{"desc":"<p>容器图元设置布局的类型，支持两种配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> 相对布局</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> 网格布局</li>\n</ul>\n"},"component.componentType.tooltip.layout.callback":{"desc":"<p>自定义该图元的回调函数，ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"component.componentType.tooltip.layout.skipBeforeLayouted":{"desc":"<p>在布局完成前，跳过执行阶段</p>\n"},"component.componentType.tooltip.layout.updateViewSignals":{"desc":"<p>是否更新默认的视图信号，也就是：<code class=\"codespan\">padding</code>、<code class=\"codespan\">viewWidth</code> 和 <code class=\"codespan\">viewHeight</code></p>\n<p>只能在设置了<code class=\"codespan\">{ layout: { display: &#39;relative&#39;} }</code>的容器图元上设置该属性</p>\n"},"component.componentType.tooltip.layout.maxChildWidth":{"desc":"<p>相对布局的父图元，设置子图元的最大宽度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的宽度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"component.componentType.tooltip.layout.maxChildHeight":{"desc":"<p>相对布局的父图元，设置子图元的最大高度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的高度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"component.componentType.tooltip.layout.position":{"desc":"<p>设置相对布局的子图元的位置，支持的配置有：</p>\n<ul>\n<li>&#39;top&#39; 相对于父图元的顶部</li>\n<li>&#39;bottom&#39; 相对于父图元的底部</li>\n<li>&#39;left&#39; 相对于父图元的左侧</li>\n<li>&#39;right&#39; 相对于父图元的右侧</li>\n<li>&#39;content&#39; 相对于父图元的中心，也就是内容区域</li>\n<li>&#39;auto&#39; 图元设置了坐标系的时候，根据关联的<code class=\"codespan\">scale</code>，自定计算相对于父图元的位置</li>\n</ul>\n"},"component.componentType.tooltip.layout.padding":{"desc":"<p>子图元内边距，单位 px，默认各方向内边距为 0，接受数值、数值数组以及对象设置。</p>\n<p>使用示例：</p>\n<pre><code class=\"lang-ts\">// 数值类型，设置内边距为 5\npadding: 5;\n// 数值数组，设置上下的内边距为 5，左右的内边距为 10，用法同 CSS 盒模型\npadding: [5, 10];\n// 数值数组，分别设置四个方向的内边距\npadding: [\n  5, // 上\n  10, // 右\n  5, // 下\n  10 // 左\n];\n// 对象类型\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"component.componentType.tooltip.layout.gridTemplateRows":{"desc":"<p>网格布局的父图元设置行的高度</p>\n"},"component.componentType.tooltip.layout.gridTemplateColumns":{"desc":"<p>网格布局的父图元设置列的宽度</p>\n"},"component.componentType.tooltip.layout.gridRowGap":{"desc":"<p>网格布局的父图元设置行行距</p>\n"},"component.componentType.tooltip.layout.gridColumnGap":{"desc":"<p>网格布局的父图元设置列间距</p>\n"},"component.componentType.tooltip.layout.gridRowStart":{"desc":"<p>网格布局的子图元设置行开始的位置</p>\n"},"component.componentType.tooltip.layout.gridRowEnd":{"desc":"<p>网格布局的子图元设置行结束的位置</p>\n"},"component.componentType.tooltip.layout.gridColumnStart":{"desc":"<p>网格布局的子图元设置列开始的位置</p>\n"},"component.componentType.tooltip.layout.gridColumnEnd":{"desc":"<p>网格布局的子图元设置列结束的位置</p>\n"},"arc3d":{"desc":"<p><strong> arc3d 图元 </strong></p>\n"},"arc3d.type":{"desc":"<p>设置图元类型为 <code class=\"codespan\">arc3d</code></p>\n"},"arc3d.encode":{"desc":"<p>设置图元的视觉通道编码，默认支持三种数据变化状态：</p>\n<ul>\n<li><code class=\"codespan\">enter</code> 新增数据元素</li>\n<li><code class=\"codespan\">update</code> 数据元素更新</li>\n<li><code class=\"codespan\">exit</code> 数据元素被删除</li>\n</ul>\n<p>注意，这里的数据状态是根据<code class=\"codespan\">mark</code>的<code class=\"codespan\">key</code>自动生成的，我们会针对<code class=\"codespan\">mark</code>的绑定数据，根据<code class=\"codespan\">key</code>的配置，计算数据对应的唯一标志符，数据更新后，如果对应的唯一标志符不存在了，则状态为<code class=\"codespan\">exit</code>，如果存在，则为<code class=\"codespan\">update</code>；如果之前的数据不存在改唯一标志符，则数据元素对应的状态为<code class=\"codespan\">enter</code></p>\n<p>默认支持一种交互状态：</p>\n<ul>\n<li><code class=\"codespan\">hover</code> 鼠标 hover 到具体的图形上，给图形设置对应的视觉通道编码</li>\n</ul>\n"},"arc3d.encode.enter":{"desc":"<p>设置图元在数据初始化状态执行的视觉通道映射，注意数据更新的时候不再执行</p>\n"},"arc3d.encode.enter.innerRadius":{"desc":"<p>内半径</p>\n"},"arc3d.encode.enter.outerRadius":{"desc":"<p>外半径</p>\n"},"arc3d.encode.enter.startAngle":{"desc":"<p>圆弧的起始角度；\n以弧度的形式指定，0 表示 12 点钟方向并且顺时针方向为正。\n如果 <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code> 则会绘制一个完整的扇形或圆环</p>\n"},"arc3d.encode.enter.endAngle":{"desc":"<p>圆弧的终止角度；\n以弧度的形式指定，0 表示 12 点钟方向并且顺时针方向为正。\n如果 <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code> 则会绘制一个完整的扇形或圆环</p>\n"},"arc3d.encode.enter.padAngle":{"desc":"<p>间隙角度；间隔角度会转换为一个在两个相邻的弧之间的确定的线性距离，定义为 <code class=\"codespan\">padRadius * | padAngle |</code></p>\n<p>这个距离在弧的开始和结束处都是相等的；\n间隔角度通常只应用于环形扇区（即当内半径大于 0）</p>\n"},"arc3d.encode.enter.padRadius":{"desc":"<p>配合<code class=\"codespan\">padAngle</code>一起使用</p>\n"},"arc3d.encode.enter.cap":{"desc":"<p>对应了线段的 lineCap 属性，lineCap 表示的是线段末端如何绘制，支持两种类型的设置</p>\n<ul>\n<li><p><code class=\"codespan\">boolean</code>: <code class=\"codespan\">cap: true</code> 表示在弧线的起始位置都增加一个角度，角度是 <code class=\"codespan\">| outerRadius - innerRadius | / outerRadius</code></p>\n</li>\n<li><p><code class=\"codespan\">[boolean, boolean]</code>: 针对首尾设置不同的末端绘制策略</p>\n</li>\n</ul>\n"},"arc3d.encode.enter.forceShowCap":{"desc":"<p>当 cap = true 并且 使用了渐变填充的时候，自动实现 conical 渐变，也就是环形的渐变</p>\n<!-- arc3d -->\n"},"arc3d.encode.enter.height":{"desc":"<p>圆弧的高度</p>\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"arc3d.encode.enter.x":{"desc":"<p>图元的 x 坐标</p>\n"},"arc3d.encode.enter.y":{"desc":"<p>图元 y 坐标</p>\n"},"arc3d.encode.enter.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"arc3d.encode.enter.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"arc3d.encode.enter.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"arc3d.encode.enter.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"arc3d.encode.enter.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"arc3d.encode.enter.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"arc3d.encode.enter.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"arc3d.encode.enter.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"arc3d.encode.enter.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"arc3d.encode.enter.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"arc3d.encode.enter.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"arc3d.encode.enter.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"arc3d.encode.enter.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"arc3d.encode.enter.outerBorder":{"desc":"<p>外描边</p>\n"},"arc3d.encode.enter.innerBorder":{"desc":"<p>内描边</p>\n"},"arc3d.encode.enter.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"arc3d.encode.enter.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"arc3d.encode.enter.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"arc3d.encode.enter.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"arc3d.encode.enter.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"arc3d.encode.enter.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"arc3d.encode.enter.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"arc3d.encode.enter.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"arc3d.encode.enter.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"arc3d.encode.enter.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"arc3d.encode.enter.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"arc3d.encode.enter.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"arc3d.encode.enter.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"arc3d.encode.enter.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"arc3d.encode.enter.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"arc3d.encode.enter.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"arc3d.encode.enter.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"arc3d.encode.enter.texture":{"desc":"<p>图元纹理</p>\n"},"arc3d.encode.enter.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"arc3d.encode.enter.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"arc3d.encode.enter.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"arc3d.encode.enter.blur":{"desc":"<p>图元边缘模糊</p>\n"},"arc3d.encode.enter.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"arc3d.encode.update":{"desc":"<p>设置图元在数据更新状态执行的视觉通道映射</p>\n"},"arc3d.encode.update.innerRadius":{"desc":"<p>内半径</p>\n"},"arc3d.encode.update.outerRadius":{"desc":"<p>外半径</p>\n"},"arc3d.encode.update.startAngle":{"desc":"<p>圆弧的起始角度；\n以弧度的形式指定，0 表示 12 点钟方向并且顺时针方向为正。\n如果 <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code> 则会绘制一个完整的扇形或圆环</p>\n"},"arc3d.encode.update.endAngle":{"desc":"<p>圆弧的终止角度；\n以弧度的形式指定，0 表示 12 点钟方向并且顺时针方向为正。\n如果 <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code> 则会绘制一个完整的扇形或圆环</p>\n"},"arc3d.encode.update.padAngle":{"desc":"<p>间隙角度；间隔角度会转换为一个在两个相邻的弧之间的确定的线性距离，定义为 <code class=\"codespan\">padRadius * | padAngle |</code></p>\n<p>这个距离在弧的开始和结束处都是相等的；\n间隔角度通常只应用于环形扇区（即当内半径大于 0）</p>\n"},"arc3d.encode.update.padRadius":{"desc":"<p>配合<code class=\"codespan\">padAngle</code>一起使用</p>\n"},"arc3d.encode.update.cap":{"desc":"<p>对应了线段的 lineCap 属性，lineCap 表示的是线段末端如何绘制，支持两种类型的设置</p>\n<ul>\n<li><p><code class=\"codespan\">boolean</code>: <code class=\"codespan\">cap: true</code> 表示在弧线的起始位置都增加一个角度，角度是 <code class=\"codespan\">| outerRadius - innerRadius | / outerRadius</code></p>\n</li>\n<li><p><code class=\"codespan\">[boolean, boolean]</code>: 针对首尾设置不同的末端绘制策略</p>\n</li>\n</ul>\n"},"arc3d.encode.update.forceShowCap":{"desc":"<p>当 cap = true 并且 使用了渐变填充的时候，自动实现 conical 渐变，也就是环形的渐变</p>\n<!-- arc3d -->\n"},"arc3d.encode.update.height":{"desc":"<p>圆弧的高度</p>\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"arc3d.encode.update.x":{"desc":"<p>图元的 x 坐标</p>\n"},"arc3d.encode.update.y":{"desc":"<p>图元 y 坐标</p>\n"},"arc3d.encode.update.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"arc3d.encode.update.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"arc3d.encode.update.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"arc3d.encode.update.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"arc3d.encode.update.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"arc3d.encode.update.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"arc3d.encode.update.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"arc3d.encode.update.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"arc3d.encode.update.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"arc3d.encode.update.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"arc3d.encode.update.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"arc3d.encode.update.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"arc3d.encode.update.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"arc3d.encode.update.outerBorder":{"desc":"<p>外描边</p>\n"},"arc3d.encode.update.innerBorder":{"desc":"<p>内描边</p>\n"},"arc3d.encode.update.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"arc3d.encode.update.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"arc3d.encode.update.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"arc3d.encode.update.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"arc3d.encode.update.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"arc3d.encode.update.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"arc3d.encode.update.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"arc3d.encode.update.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"arc3d.encode.update.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"arc3d.encode.update.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"arc3d.encode.update.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"arc3d.encode.update.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"arc3d.encode.update.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"arc3d.encode.update.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"arc3d.encode.update.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"arc3d.encode.update.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"arc3d.encode.update.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"arc3d.encode.update.texture":{"desc":"<p>图元纹理</p>\n"},"arc3d.encode.update.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"arc3d.encode.update.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"arc3d.encode.update.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"arc3d.encode.update.blur":{"desc":"<p>图元边缘模糊</p>\n"},"arc3d.encode.update.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"arc3d.encode.exit":{"desc":"<p>设置图元在数据被删除的状态下执行的视觉通道映射</p>\n"},"arc3d.encode.exit.innerRadius":{"desc":"<p>内半径</p>\n"},"arc3d.encode.exit.outerRadius":{"desc":"<p>外半径</p>\n"},"arc3d.encode.exit.startAngle":{"desc":"<p>圆弧的起始角度；\n以弧度的形式指定，0 表示 12 点钟方向并且顺时针方向为正。\n如果 <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code> 则会绘制一个完整的扇形或圆环</p>\n"},"arc3d.encode.exit.endAngle":{"desc":"<p>圆弧的终止角度；\n以弧度的形式指定，0 表示 12 点钟方向并且顺时针方向为正。\n如果 <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code> 则会绘制一个完整的扇形或圆环</p>\n"},"arc3d.encode.exit.padAngle":{"desc":"<p>间隙角度；间隔角度会转换为一个在两个相邻的弧之间的确定的线性距离，定义为 <code class=\"codespan\">padRadius * | padAngle |</code></p>\n<p>这个距离在弧的开始和结束处都是相等的；\n间隔角度通常只应用于环形扇区（即当内半径大于 0）</p>\n"},"arc3d.encode.exit.padRadius":{"desc":"<p>配合<code class=\"codespan\">padAngle</code>一起使用</p>\n"},"arc3d.encode.exit.cap":{"desc":"<p>对应了线段的 lineCap 属性，lineCap 表示的是线段末端如何绘制，支持两种类型的设置</p>\n<ul>\n<li><p><code class=\"codespan\">boolean</code>: <code class=\"codespan\">cap: true</code> 表示在弧线的起始位置都增加一个角度，角度是 <code class=\"codespan\">| outerRadius - innerRadius | / outerRadius</code></p>\n</li>\n<li><p><code class=\"codespan\">[boolean, boolean]</code>: 针对首尾设置不同的末端绘制策略</p>\n</li>\n</ul>\n"},"arc3d.encode.exit.forceShowCap":{"desc":"<p>当 cap = true 并且 使用了渐变填充的时候，自动实现 conical 渐变，也就是环形的渐变</p>\n<!-- arc3d -->\n"},"arc3d.encode.exit.height":{"desc":"<p>圆弧的高度</p>\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"arc3d.encode.exit.x":{"desc":"<p>图元的 x 坐标</p>\n"},"arc3d.encode.exit.y":{"desc":"<p>图元 y 坐标</p>\n"},"arc3d.encode.exit.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"arc3d.encode.exit.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"arc3d.encode.exit.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"arc3d.encode.exit.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"arc3d.encode.exit.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"arc3d.encode.exit.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"arc3d.encode.exit.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"arc3d.encode.exit.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"arc3d.encode.exit.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"arc3d.encode.exit.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"arc3d.encode.exit.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"arc3d.encode.exit.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"arc3d.encode.exit.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"arc3d.encode.exit.outerBorder":{"desc":"<p>外描边</p>\n"},"arc3d.encode.exit.innerBorder":{"desc":"<p>内描边</p>\n"},"arc3d.encode.exit.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"arc3d.encode.exit.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"arc3d.encode.exit.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"arc3d.encode.exit.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"arc3d.encode.exit.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"arc3d.encode.exit.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"arc3d.encode.exit.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"arc3d.encode.exit.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"arc3d.encode.exit.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"arc3d.encode.exit.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"arc3d.encode.exit.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"arc3d.encode.exit.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"arc3d.encode.exit.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"arc3d.encode.exit.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"arc3d.encode.exit.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"arc3d.encode.exit.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"arc3d.encode.exit.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"arc3d.encode.exit.texture":{"desc":"<p>图元纹理</p>\n"},"arc3d.encode.exit.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"arc3d.encode.exit.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"arc3d.encode.exit.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"arc3d.encode.exit.blur":{"desc":"<p>图元边缘模糊</p>\n"},"arc3d.encode.exit.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"arc3d.encode.hover":{"desc":"<p>设置<code class=\"codespan\">hover</code>状态的时候，图元对应的视觉通道映射</p>\n"},"arc3d.encode.hover.innerRadius":{"desc":"<p>内半径</p>\n"},"arc3d.encode.hover.outerRadius":{"desc":"<p>外半径</p>\n"},"arc3d.encode.hover.startAngle":{"desc":"<p>圆弧的起始角度；\n以弧度的形式指定，0 表示 12 点钟方向并且顺时针方向为正。\n如果 <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code> 则会绘制一个完整的扇形或圆环</p>\n"},"arc3d.encode.hover.endAngle":{"desc":"<p>圆弧的终止角度；\n以弧度的形式指定，0 表示 12 点钟方向并且顺时针方向为正。\n如果 <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code> 则会绘制一个完整的扇形或圆环</p>\n"},"arc3d.encode.hover.padAngle":{"desc":"<p>间隙角度；间隔角度会转换为一个在两个相邻的弧之间的确定的线性距离，定义为 <code class=\"codespan\">padRadius * | padAngle |</code></p>\n<p>这个距离在弧的开始和结束处都是相等的；\n间隔角度通常只应用于环形扇区（即当内半径大于 0）</p>\n"},"arc3d.encode.hover.padRadius":{"desc":"<p>配合<code class=\"codespan\">padAngle</code>一起使用</p>\n"},"arc3d.encode.hover.cap":{"desc":"<p>对应了线段的 lineCap 属性，lineCap 表示的是线段末端如何绘制，支持两种类型的设置</p>\n<ul>\n<li><p><code class=\"codespan\">boolean</code>: <code class=\"codespan\">cap: true</code> 表示在弧线的起始位置都增加一个角度，角度是 <code class=\"codespan\">| outerRadius - innerRadius | / outerRadius</code></p>\n</li>\n<li><p><code class=\"codespan\">[boolean, boolean]</code>: 针对首尾设置不同的末端绘制策略</p>\n</li>\n</ul>\n"},"arc3d.encode.hover.forceShowCap":{"desc":"<p>当 cap = true 并且 使用了渐变填充的时候，自动实现 conical 渐变，也就是环形的渐变</p>\n<!-- arc3d -->\n"},"arc3d.encode.hover.height":{"desc":"<p>圆弧的高度</p>\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"arc3d.encode.hover.x":{"desc":"<p>图元的 x 坐标</p>\n"},"arc3d.encode.hover.y":{"desc":"<p>图元 y 坐标</p>\n"},"arc3d.encode.hover.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"arc3d.encode.hover.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"arc3d.encode.hover.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"arc3d.encode.hover.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"arc3d.encode.hover.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"arc3d.encode.hover.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"arc3d.encode.hover.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"arc3d.encode.hover.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"arc3d.encode.hover.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"arc3d.encode.hover.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"arc3d.encode.hover.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"arc3d.encode.hover.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"arc3d.encode.hover.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"arc3d.encode.hover.outerBorder":{"desc":"<p>外描边</p>\n"},"arc3d.encode.hover.innerBorder":{"desc":"<p>内描边</p>\n"},"arc3d.encode.hover.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"arc3d.encode.hover.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"arc3d.encode.hover.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"arc3d.encode.hover.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"arc3d.encode.hover.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"arc3d.encode.hover.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"arc3d.encode.hover.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"arc3d.encode.hover.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"arc3d.encode.hover.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"arc3d.encode.hover.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"arc3d.encode.hover.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"arc3d.encode.hover.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"arc3d.encode.hover.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"arc3d.encode.hover.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"arc3d.encode.hover.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"arc3d.encode.hover.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"arc3d.encode.hover.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"arc3d.encode.hover.texture":{"desc":"<p>图元纹理</p>\n"},"arc3d.encode.hover.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"arc3d.encode.hover.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"arc3d.encode.hover.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"arc3d.encode.hover.blur":{"desc":"<p>图元边缘模糊</p>\n"},"arc3d.encode.hover.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"arc3d.animationState":{"desc":"<p>类型：<code class=\"codespan\">MarkFunctionType</code>\n是否必传： 否\nanimation attributes</p>\n"},"arc3d.animation":{"desc":"<p>支持设置各种状态对应的动画，数据驱动的动画状态有三种：</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>交互触发的状态变更，通过统一的交互动画进行配置，配置的 key 为 <code class=\"codespan\">state</code></p>\n"},"arc3d.animation.type":{"desc":"<p>动画执行类型，指定特定的内置动画执行效果</p>\n<p>通用的内置动画类型包括：</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: 渐入渐出动画</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: 缩放动画</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: 移入移出动画</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: 旋转动画</li>\n<li><code class=\"codespan\">update</code>: 更新动画</li>\n</ul>\n"},"arc3d.animation.channel":{"desc":"<p>动画执行前后的视觉通道，与 <code class=\"codespan\">type</code> 配置冲突</p>\n"},"arc3d.animation.custom":{"desc":"<p>自定义动画，如果设定了自定义动画配置则会替换默认的视觉通道插值逻辑</p>\n"},"arc3d.animation.customParameters":{"desc":"<p>自定义动画参数</p>\n"},"arc3d.animation.easing":{"desc":"<p>动画缓动，默认为 <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"arc3d.animation.delay":{"desc":"<p>动画执行的延迟时间，默认为 0</p>\n"},"arc3d.animation.duration":{"desc":"<p>动画执行时长，默认为 1000ms</p>\n"},"arc3d.animation.oneByOne":{"desc":"<p>动画依次执行的延迟时长，如果配置为 <code class=\"codespan\">true</code> 则会在上一个元素动画执行结束后执行下一个元素的动画，默认为 <code class=\"codespan\">false</code></p>\n"},"arc3d.animation.startTime":{"desc":"<p>动画执行的初始时间，这一初始时间不会在循环动画中被重复应用，默认为 0</p>\n"},"arc3d.animation.totalTime":{"desc":"<p>动画执行的最大时间，如果动画执行到达设定时间将会被终止</p>\n"},"arc3d.animation.loop":{"desc":"<p>动画循环次数，如果配置为 <code class=\"codespan\">true</code> 则会无限循环</p>\n"},"arc3d.animation.options":{"desc":"<p>特定动画类型执行时设定的额外参数</p>\n"},"arc3d.animation.controlOptions":{"desc":"<p>动画执行逻辑的控制参数：</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: 当动画状态变更时是否立即终止自身动画</li>\n<li><code class=\"codespan\">immediatelyApply</code>: 是否立即应用动画初始的视觉通道</li>\n</ul>\n"},"arc3d.zIndex":{"desc":"<p>设置<code class=\"codespan\">mark</code>图元对应的容器图形(group)的 zIndex</p>\n"},"arc3d.interactive":{"desc":"<p>类型：<code class=\"codespan\">boolean</code>\n是否必传： 否</p>\n"},"arc3d.context":{"desc":"<p>设置图元的上下文参数</p>\n"},"arc3d.setCustomizedShape":{"desc":"<p>设置自定义形状的回调函数，对应的 ts 类型定位如下：</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>其中<code class=\"codespan\">ICustomPath2D</code> 为 VRender 提供的绘制自定义的路径一个工具类</p>\n"},"arc3d.support3d":{"desc":"<p>当画布设置了 3d 视角的时候，是否支持 3d 模式</p>\n"},"arc3d.group":{"desc":"<p>设置父图元，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 父图元对应的 id</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> 父图元对应的语法元素，一般用于 API 调用场景</li>\n</ul>\n<p>如果不设置，会默认挂在到画布的根节点下面</p>\n"},"arc3d.from":{"desc":"<p>ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>通过<code class=\"codespan\">data</code> 属性值，申明图元依赖的数据</p>\n"},"arc3d.key":{"desc":"<p>设置图元数据元素的唯一标志符，用于计算图形元素的数据状态，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"arc3d.sort":{"desc":"<p>对图元中的所有图形元素进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"arc3d.groupBy":{"desc":"<p>设置分组的属性，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置分组<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析分组<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"arc3d.groupSort":{"desc":"<p>对图元中的分组进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"arc3d.coordinate":{"desc":"<p>设置该图元关联的坐标系对应的 id 或者坐标系对应的图形元素</p>\n"},"arc3d.state":{"desc":"<p>设置当前图元所有图形元素的状态值，支持三种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置图形的状态，比如说:<code class=\"codespan\">{ state: &#39;selected&#39;}</code> 就是给所有的图形设置状态为<code class=\"codespan\">&#39;selected&#39;</code>，通常这种情况，<code class=\"codespan\">encode</code> 中也会设置<code class=\"codespan\">&#39;selected&#39;</code>状态对应的图形通道映射</li>\n<li><code class=\"codespan\">string[]</code> 给图形设置多个状态，可以配置<code class=\"codespan\">stateSort</code>来影响对应状态执行图形通道映射的顺序</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析状态值的回调函数，返回参数为<code class=\"codespan\">string | string[]</code>，对应的 ts 类型定义为：</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"arc3d.stateSort":{"desc":"<p>设置当前图元所有图形元素的状态值的排序函数，会影响状态对应的图形通道映射的顺序，最先执行的状态可能被后续的状态覆盖图形通道映射结果，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"arc3d.transform":{"desc":"<p>设置图元对应的变换，所有的数据变换都可以配置在图元上，用于对图元的<code class=\"codespan\">join data</code> 执行变换；\n另外一种类型的变换就是对图形元素执行的变换，比如说<code class=\"codespan\">dodge</code>；\n通用的类型定义如下：</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>每中变换支持的参数不同</p>\n"},"arc3d.layout":{"desc":"<p>设置图元的布局参数，图元在参与布局的时候，存在两种角色：</p>\n<ul>\n<li>&#39;container&#39; 容器图元，一般是<code class=\"codespan\">group</code>图元</li>\n<li>&#39;item&#39; 布局子元素，作为容器图元的子节点</li>\n</ul>\n<p>注意，我们仅支持一层布局，如果是多层嵌套布局，建议使用自定义的布局方案进行实现；</p>\n<p>现在支持两种内容的布局：<code class=\"codespan\">grid</code> 布局 和 <code class=\"codespan\">relative</code>布局，相关类型定义如下</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>如果想要设置自定义的布局方案，<code class=\"codespan\">layout</code>也支持直接设置回调函数，回调函数的定义如下：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"arc3d.layout.display":{"desc":"<p>容器图元设置布局的类型，支持两种配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> 相对布局</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> 网格布局</li>\n</ul>\n"},"arc3d.layout.callback":{"desc":"<p>自定义该图元的回调函数，ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"arc3d.layout.skipBeforeLayouted":{"desc":"<p>在布局完成前，跳过执行阶段</p>\n"},"arc3d.layout.updateViewSignals":{"desc":"<p>是否更新默认的视图信号，也就是：<code class=\"codespan\">padding</code>、<code class=\"codespan\">viewWidth</code> 和 <code class=\"codespan\">viewHeight</code></p>\n<p>只能在设置了<code class=\"codespan\">{ layout: { display: &#39;relative&#39;} }</code>的容器图元上设置该属性</p>\n"},"arc3d.layout.maxChildWidth":{"desc":"<p>相对布局的父图元，设置子图元的最大宽度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的宽度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"arc3d.layout.maxChildHeight":{"desc":"<p>相对布局的父图元，设置子图元的最大高度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的高度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"arc3d.layout.position":{"desc":"<p>设置相对布局的子图元的位置，支持的配置有：</p>\n<ul>\n<li>&#39;top&#39; 相对于父图元的顶部</li>\n<li>&#39;bottom&#39; 相对于父图元的底部</li>\n<li>&#39;left&#39; 相对于父图元的左侧</li>\n<li>&#39;right&#39; 相对于父图元的右侧</li>\n<li>&#39;content&#39; 相对于父图元的中心，也就是内容区域</li>\n<li>&#39;auto&#39; 图元设置了坐标系的时候，根据关联的<code class=\"codespan\">scale</code>，自定计算相对于父图元的位置</li>\n</ul>\n"},"arc3d.layout.padding":{"desc":"<p>子图元内边距，单位 px，默认各方向内边距为 0，接受数值、数值数组以及对象设置。</p>\n<p>使用示例：</p>\n<pre><code class=\"lang-ts\">// 数值类型，设置内边距为 5\npadding: 5;\n// 数值数组，设置上下的内边距为 5，左右的内边距为 10，用法同 CSS 盒模型\npadding: [5, 10];\n// 数值数组，分别设置四个方向的内边距\npadding: [\n  5, // 上\n  10, // 右\n  5, // 下\n  10 // 左\n];\n// 对象类型\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"arc3d.layout.gridTemplateRows":{"desc":"<p>网格布局的父图元设置行的高度</p>\n"},"arc3d.layout.gridTemplateColumns":{"desc":"<p>网格布局的父图元设置列的宽度</p>\n"},"arc3d.layout.gridRowGap":{"desc":"<p>网格布局的父图元设置行行距</p>\n"},"arc3d.layout.gridColumnGap":{"desc":"<p>网格布局的父图元设置列间距</p>\n"},"arc3d.layout.gridRowStart":{"desc":"<p>网格布局的子图元设置行开始的位置</p>\n"},"arc3d.layout.gridRowEnd":{"desc":"<p>网格布局的子图元设置行结束的位置</p>\n"},"arc3d.layout.gridColumnStart":{"desc":"<p>网格布局的子图元设置列开始的位置</p>\n"},"arc3d.layout.gridColumnEnd":{"desc":"<p>网格布局的子图元设置列结束的位置</p>\n"},"arc3d.large":{"desc":"<p>是否开启大数据渲染模式</p>\n"},"arc3d.largeThreshold":{"desc":"<p>开启大数据渲染优化的阀值，对应的是 data 的长度</p>\n"},"arc3d.progressiveStep":{"desc":"<p>开启分片渲染的步长，对应的是分片的数据长度</p>\n"},"arc3d.progressiveThreshold":{"desc":"<p>开启分片渲染的阀值，对应的是单系列 data 的长度</p>\n"},"arc3d.morph":{"desc":"<p>是否对当前图元开启全局的过渡形变动画</p>\n"},"arc3d.morphKey":{"desc":"<p>用于匹配全局过渡形变动画的图元，具有相对的<code class=\"codespan\">morphKey</code>的图元，会进行形变动画</p>\n"},"arc3d.morphElementKey":{"desc":"<p>对于匹配上的前后图元，通过该配置，进行图形元素的匹配；如果不申明，我们默认会读取<code class=\"codespan\">key</code>配置，用于匹配图形元素，进行形变动画；\n默认支持一对一、一对多、多对一的图形形变动画</p>\n"},"pyramid3d":{"desc":"<p><strong> pyramid3d 图元 </strong></p>\n"},"pyramid3d.type":{"desc":"<p>设置图元类型为 <code class=\"codespan\">pyramid3d</code></p>\n"},"pyramid3d.encode":{"desc":"<p>设置图元的视觉通道编码，默认支持三种数据变化状态：</p>\n<ul>\n<li><code class=\"codespan\">enter</code> 新增数据元素</li>\n<li><code class=\"codespan\">update</code> 数据元素更新</li>\n<li><code class=\"codespan\">exit</code> 数据元素被删除</li>\n</ul>\n<p>注意，这里的数据状态是根据<code class=\"codespan\">mark</code>的<code class=\"codespan\">key</code>自动生成的，我们会针对<code class=\"codespan\">mark</code>的绑定数据，根据<code class=\"codespan\">key</code>的配置，计算数据对应的唯一标志符，数据更新后，如果对应的唯一标志符不存在了，则状态为<code class=\"codespan\">exit</code>，如果存在，则为<code class=\"codespan\">update</code>；如果之前的数据不存在改唯一标志符，则数据元素对应的状态为<code class=\"codespan\">enter</code></p>\n<p>默认支持一种交互状态：</p>\n<ul>\n<li><code class=\"codespan\">hover</code> 鼠标 hover 到具体的图形上，给图形设置对应的视觉通道编码</li>\n</ul>\n"},"pyramid3d.encode.enter":{"desc":"<p>设置图元在数据初始化状态执行的视觉通道映射，注意数据更新的时候不再执行</p>\n"},"pyramid3d.encode.enter.points":{"desc":"<p>多边形对应的点</p>\n"},"pyramid3d.encode.enter.borderRadius":{"desc":"<p>设置圆角，默认为 0，支持两种格式的设置：</p>\n<ul>\n<li><code class=\"codespan\">number</code>: 给所有的角设置统一的圆角</li>\n<li><code class=\"codespan\">number[]</code>: 分别给每个角设置不同的圆角</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n"},"pyramid3d.encode.enter.depthRatio":{"desc":"<p>深度比例</p>\n"},"pyramid3d.encode.enter.face":{"desc":"<p>设置上下左右前后 6 个面，ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">[boolean, boolean, boolean, boolean, boolean, boolean];\n</code></pre>\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"pyramid3d.encode.enter.x":{"desc":"<p>图元的 x 坐标</p>\n"},"pyramid3d.encode.enter.y":{"desc":"<p>图元 y 坐标</p>\n"},"pyramid3d.encode.enter.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"pyramid3d.encode.enter.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"pyramid3d.encode.enter.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"pyramid3d.encode.enter.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"pyramid3d.encode.enter.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"pyramid3d.encode.enter.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"pyramid3d.encode.enter.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"pyramid3d.encode.enter.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"pyramid3d.encode.enter.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"pyramid3d.encode.enter.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"pyramid3d.encode.enter.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"pyramid3d.encode.enter.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"pyramid3d.encode.enter.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"pyramid3d.encode.enter.outerBorder":{"desc":"<p>外描边</p>\n"},"pyramid3d.encode.enter.innerBorder":{"desc":"<p>内描边</p>\n"},"pyramid3d.encode.enter.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"pyramid3d.encode.enter.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"pyramid3d.encode.enter.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"pyramid3d.encode.enter.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"pyramid3d.encode.enter.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"pyramid3d.encode.enter.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"pyramid3d.encode.enter.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"pyramid3d.encode.enter.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"pyramid3d.encode.enter.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"pyramid3d.encode.enter.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"pyramid3d.encode.enter.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"pyramid3d.encode.enter.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"pyramid3d.encode.enter.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"pyramid3d.encode.enter.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"pyramid3d.encode.enter.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"pyramid3d.encode.enter.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"pyramid3d.encode.enter.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"pyramid3d.encode.enter.texture":{"desc":"<p>图元纹理</p>\n"},"pyramid3d.encode.enter.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"pyramid3d.encode.enter.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"pyramid3d.encode.enter.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"pyramid3d.encode.enter.blur":{"desc":"<p>图元边缘模糊</p>\n"},"pyramid3d.encode.enter.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"pyramid3d.encode.update":{"desc":"<p>设置图元在数据更新状态执行的视觉通道映射</p>\n"},"pyramid3d.encode.update.points":{"desc":"<p>多边形对应的点</p>\n"},"pyramid3d.encode.update.borderRadius":{"desc":"<p>设置圆角，默认为 0，支持两种格式的设置：</p>\n<ul>\n<li><code class=\"codespan\">number</code>: 给所有的角设置统一的圆角</li>\n<li><code class=\"codespan\">number[]</code>: 分别给每个角设置不同的圆角</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n"},"pyramid3d.encode.update.depthRatio":{"desc":"<p>深度比例</p>\n"},"pyramid3d.encode.update.face":{"desc":"<p>设置上下左右前后 6 个面，ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">[boolean, boolean, boolean, boolean, boolean, boolean];\n</code></pre>\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"pyramid3d.encode.update.x":{"desc":"<p>图元的 x 坐标</p>\n"},"pyramid3d.encode.update.y":{"desc":"<p>图元 y 坐标</p>\n"},"pyramid3d.encode.update.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"pyramid3d.encode.update.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"pyramid3d.encode.update.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"pyramid3d.encode.update.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"pyramid3d.encode.update.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"pyramid3d.encode.update.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"pyramid3d.encode.update.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"pyramid3d.encode.update.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"pyramid3d.encode.update.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"pyramid3d.encode.update.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"pyramid3d.encode.update.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"pyramid3d.encode.update.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"pyramid3d.encode.update.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"pyramid3d.encode.update.outerBorder":{"desc":"<p>外描边</p>\n"},"pyramid3d.encode.update.innerBorder":{"desc":"<p>内描边</p>\n"},"pyramid3d.encode.update.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"pyramid3d.encode.update.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"pyramid3d.encode.update.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"pyramid3d.encode.update.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"pyramid3d.encode.update.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"pyramid3d.encode.update.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"pyramid3d.encode.update.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"pyramid3d.encode.update.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"pyramid3d.encode.update.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"pyramid3d.encode.update.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"pyramid3d.encode.update.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"pyramid3d.encode.update.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"pyramid3d.encode.update.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"pyramid3d.encode.update.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"pyramid3d.encode.update.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"pyramid3d.encode.update.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"pyramid3d.encode.update.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"pyramid3d.encode.update.texture":{"desc":"<p>图元纹理</p>\n"},"pyramid3d.encode.update.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"pyramid3d.encode.update.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"pyramid3d.encode.update.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"pyramid3d.encode.update.blur":{"desc":"<p>图元边缘模糊</p>\n"},"pyramid3d.encode.update.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"pyramid3d.encode.exit":{"desc":"<p>设置图元在数据被删除的状态下执行的视觉通道映射</p>\n"},"pyramid3d.encode.exit.points":{"desc":"<p>多边形对应的点</p>\n"},"pyramid3d.encode.exit.borderRadius":{"desc":"<p>设置圆角，默认为 0，支持两种格式的设置：</p>\n<ul>\n<li><code class=\"codespan\">number</code>: 给所有的角设置统一的圆角</li>\n<li><code class=\"codespan\">number[]</code>: 分别给每个角设置不同的圆角</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n"},"pyramid3d.encode.exit.depthRatio":{"desc":"<p>深度比例</p>\n"},"pyramid3d.encode.exit.face":{"desc":"<p>设置上下左右前后 6 个面，ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">[boolean, boolean, boolean, boolean, boolean, boolean];\n</code></pre>\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"pyramid3d.encode.exit.x":{"desc":"<p>图元的 x 坐标</p>\n"},"pyramid3d.encode.exit.y":{"desc":"<p>图元 y 坐标</p>\n"},"pyramid3d.encode.exit.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"pyramid3d.encode.exit.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"pyramid3d.encode.exit.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"pyramid3d.encode.exit.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"pyramid3d.encode.exit.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"pyramid3d.encode.exit.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"pyramid3d.encode.exit.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"pyramid3d.encode.exit.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"pyramid3d.encode.exit.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"pyramid3d.encode.exit.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"pyramid3d.encode.exit.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"pyramid3d.encode.exit.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"pyramid3d.encode.exit.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"pyramid3d.encode.exit.outerBorder":{"desc":"<p>外描边</p>\n"},"pyramid3d.encode.exit.innerBorder":{"desc":"<p>内描边</p>\n"},"pyramid3d.encode.exit.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"pyramid3d.encode.exit.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"pyramid3d.encode.exit.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"pyramid3d.encode.exit.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"pyramid3d.encode.exit.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"pyramid3d.encode.exit.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"pyramid3d.encode.exit.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"pyramid3d.encode.exit.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"pyramid3d.encode.exit.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"pyramid3d.encode.exit.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"pyramid3d.encode.exit.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"pyramid3d.encode.exit.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"pyramid3d.encode.exit.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"pyramid3d.encode.exit.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"pyramid3d.encode.exit.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"pyramid3d.encode.exit.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"pyramid3d.encode.exit.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"pyramid3d.encode.exit.texture":{"desc":"<p>图元纹理</p>\n"},"pyramid3d.encode.exit.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"pyramid3d.encode.exit.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"pyramid3d.encode.exit.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"pyramid3d.encode.exit.blur":{"desc":"<p>图元边缘模糊</p>\n"},"pyramid3d.encode.exit.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"pyramid3d.encode.hover":{"desc":"<p>设置<code class=\"codespan\">hover</code>状态的时候，图元对应的视觉通道映射</p>\n"},"pyramid3d.encode.hover.points":{"desc":"<p>多边形对应的点</p>\n"},"pyramid3d.encode.hover.borderRadius":{"desc":"<p>设置圆角，默认为 0，支持两种格式的设置：</p>\n<ul>\n<li><code class=\"codespan\">number</code>: 给所有的角设置统一的圆角</li>\n<li><code class=\"codespan\">number[]</code>: 分别给每个角设置不同的圆角</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n"},"pyramid3d.encode.hover.depthRatio":{"desc":"<p>深度比例</p>\n"},"pyramid3d.encode.hover.face":{"desc":"<p>设置上下左右前后 6 个面，ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">[boolean, boolean, boolean, boolean, boolean, boolean];\n</code></pre>\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"pyramid3d.encode.hover.x":{"desc":"<p>图元的 x 坐标</p>\n"},"pyramid3d.encode.hover.y":{"desc":"<p>图元 y 坐标</p>\n"},"pyramid3d.encode.hover.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"pyramid3d.encode.hover.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"pyramid3d.encode.hover.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"pyramid3d.encode.hover.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"pyramid3d.encode.hover.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"pyramid3d.encode.hover.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"pyramid3d.encode.hover.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"pyramid3d.encode.hover.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"pyramid3d.encode.hover.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"pyramid3d.encode.hover.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"pyramid3d.encode.hover.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"pyramid3d.encode.hover.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"pyramid3d.encode.hover.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"pyramid3d.encode.hover.outerBorder":{"desc":"<p>外描边</p>\n"},"pyramid3d.encode.hover.innerBorder":{"desc":"<p>内描边</p>\n"},"pyramid3d.encode.hover.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"pyramid3d.encode.hover.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"pyramid3d.encode.hover.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"pyramid3d.encode.hover.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"pyramid3d.encode.hover.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"pyramid3d.encode.hover.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"pyramid3d.encode.hover.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"pyramid3d.encode.hover.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"pyramid3d.encode.hover.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"pyramid3d.encode.hover.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"pyramid3d.encode.hover.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"pyramid3d.encode.hover.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"pyramid3d.encode.hover.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"pyramid3d.encode.hover.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"pyramid3d.encode.hover.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"pyramid3d.encode.hover.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"pyramid3d.encode.hover.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"pyramid3d.encode.hover.texture":{"desc":"<p>图元纹理</p>\n"},"pyramid3d.encode.hover.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"pyramid3d.encode.hover.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"pyramid3d.encode.hover.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"pyramid3d.encode.hover.blur":{"desc":"<p>图元边缘模糊</p>\n"},"pyramid3d.encode.hover.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"pyramid3d.animationState":{"desc":"<p>类型：<code class=\"codespan\">MarkFunctionType</code>\n是否必传： 否\nanimation attributes</p>\n"},"pyramid3d.animation":{"desc":"<p>支持设置各种状态对应的动画，数据驱动的动画状态有三种：</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>交互触发的状态变更，通过统一的交互动画进行配置，配置的 key 为 <code class=\"codespan\">state</code></p>\n"},"pyramid3d.animation.type":{"desc":"<p>动画执行类型，指定特定的内置动画执行效果</p>\n<p>通用的内置动画类型包括：</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: 渐入渐出动画</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: 缩放动画</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: 移入移出动画</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: 旋转动画</li>\n<li><code class=\"codespan\">update</code>: 更新动画</li>\n</ul>\n"},"pyramid3d.animation.channel":{"desc":"<p>动画执行前后的视觉通道，与 <code class=\"codespan\">type</code> 配置冲突</p>\n"},"pyramid3d.animation.custom":{"desc":"<p>自定义动画，如果设定了自定义动画配置则会替换默认的视觉通道插值逻辑</p>\n"},"pyramid3d.animation.customParameters":{"desc":"<p>自定义动画参数</p>\n"},"pyramid3d.animation.easing":{"desc":"<p>动画缓动，默认为 <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"pyramid3d.animation.delay":{"desc":"<p>动画执行的延迟时间，默认为 0</p>\n"},"pyramid3d.animation.duration":{"desc":"<p>动画执行时长，默认为 1000ms</p>\n"},"pyramid3d.animation.oneByOne":{"desc":"<p>动画依次执行的延迟时长，如果配置为 <code class=\"codespan\">true</code> 则会在上一个元素动画执行结束后执行下一个元素的动画，默认为 <code class=\"codespan\">false</code></p>\n"},"pyramid3d.animation.startTime":{"desc":"<p>动画执行的初始时间，这一初始时间不会在循环动画中被重复应用，默认为 0</p>\n"},"pyramid3d.animation.totalTime":{"desc":"<p>动画执行的最大时间，如果动画执行到达设定时间将会被终止</p>\n"},"pyramid3d.animation.loop":{"desc":"<p>动画循环次数，如果配置为 <code class=\"codespan\">true</code> 则会无限循环</p>\n"},"pyramid3d.animation.options":{"desc":"<p>特定动画类型执行时设定的额外参数</p>\n"},"pyramid3d.animation.controlOptions":{"desc":"<p>动画执行逻辑的控制参数：</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: 当动画状态变更时是否立即终止自身动画</li>\n<li><code class=\"codespan\">immediatelyApply</code>: 是否立即应用动画初始的视觉通道</li>\n</ul>\n"},"pyramid3d.zIndex":{"desc":"<p>设置<code class=\"codespan\">mark</code>图元对应的容器图形(group)的 zIndex</p>\n"},"pyramid3d.interactive":{"desc":"<p>类型：<code class=\"codespan\">boolean</code>\n是否必传： 否</p>\n"},"pyramid3d.context":{"desc":"<p>设置图元的上下文参数</p>\n"},"pyramid3d.setCustomizedShape":{"desc":"<p>设置自定义形状的回调函数，对应的 ts 类型定位如下：</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>其中<code class=\"codespan\">ICustomPath2D</code> 为 VRender 提供的绘制自定义的路径一个工具类</p>\n"},"pyramid3d.support3d":{"desc":"<p>当画布设置了 3d 视角的时候，是否支持 3d 模式</p>\n"},"pyramid3d.group":{"desc":"<p>设置父图元，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 父图元对应的 id</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> 父图元对应的语法元素，一般用于 API 调用场景</li>\n</ul>\n<p>如果不设置，会默认挂在到画布的根节点下面</p>\n"},"pyramid3d.from":{"desc":"<p>ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>通过<code class=\"codespan\">data</code> 属性值，申明图元依赖的数据</p>\n"},"pyramid3d.key":{"desc":"<p>设置图元数据元素的唯一标志符，用于计算图形元素的数据状态，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"pyramid3d.sort":{"desc":"<p>对图元中的所有图形元素进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"pyramid3d.groupBy":{"desc":"<p>设置分组的属性，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置分组<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析分组<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"pyramid3d.groupSort":{"desc":"<p>对图元中的分组进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"pyramid3d.coordinate":{"desc":"<p>设置该图元关联的坐标系对应的 id 或者坐标系对应的图形元素</p>\n"},"pyramid3d.state":{"desc":"<p>设置当前图元所有图形元素的状态值，支持三种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置图形的状态，比如说:<code class=\"codespan\">{ state: &#39;selected&#39;}</code> 就是给所有的图形设置状态为<code class=\"codespan\">&#39;selected&#39;</code>，通常这种情况，<code class=\"codespan\">encode</code> 中也会设置<code class=\"codespan\">&#39;selected&#39;</code>状态对应的图形通道映射</li>\n<li><code class=\"codespan\">string[]</code> 给图形设置多个状态，可以配置<code class=\"codespan\">stateSort</code>来影响对应状态执行图形通道映射的顺序</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析状态值的回调函数，返回参数为<code class=\"codespan\">string | string[]</code>，对应的 ts 类型定义为：</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"pyramid3d.stateSort":{"desc":"<p>设置当前图元所有图形元素的状态值的排序函数，会影响状态对应的图形通道映射的顺序，最先执行的状态可能被后续的状态覆盖图形通道映射结果，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"pyramid3d.transform":{"desc":"<p>设置图元对应的变换，所有的数据变换都可以配置在图元上，用于对图元的<code class=\"codespan\">join data</code> 执行变换；\n另外一种类型的变换就是对图形元素执行的变换，比如说<code class=\"codespan\">dodge</code>；\n通用的类型定义如下：</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>每中变换支持的参数不同</p>\n"},"pyramid3d.layout":{"desc":"<p>设置图元的布局参数，图元在参与布局的时候，存在两种角色：</p>\n<ul>\n<li>&#39;container&#39; 容器图元，一般是<code class=\"codespan\">group</code>图元</li>\n<li>&#39;item&#39; 布局子元素，作为容器图元的子节点</li>\n</ul>\n<p>注意，我们仅支持一层布局，如果是多层嵌套布局，建议使用自定义的布局方案进行实现；</p>\n<p>现在支持两种内容的布局：<code class=\"codespan\">grid</code> 布局 和 <code class=\"codespan\">relative</code>布局，相关类型定义如下</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>如果想要设置自定义的布局方案，<code class=\"codespan\">layout</code>也支持直接设置回调函数，回调函数的定义如下：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"pyramid3d.layout.display":{"desc":"<p>容器图元设置布局的类型，支持两种配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> 相对布局</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> 网格布局</li>\n</ul>\n"},"pyramid3d.layout.callback":{"desc":"<p>自定义该图元的回调函数，ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"pyramid3d.layout.skipBeforeLayouted":{"desc":"<p>在布局完成前，跳过执行阶段</p>\n"},"pyramid3d.layout.updateViewSignals":{"desc":"<p>是否更新默认的视图信号，也就是：<code class=\"codespan\">padding</code>、<code class=\"codespan\">viewWidth</code> 和 <code class=\"codespan\">viewHeight</code></p>\n<p>只能在设置了<code class=\"codespan\">{ layout: { display: &#39;relative&#39;} }</code>的容器图元上设置该属性</p>\n"},"pyramid3d.layout.maxChildWidth":{"desc":"<p>相对布局的父图元，设置子图元的最大宽度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的宽度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"pyramid3d.layout.maxChildHeight":{"desc":"<p>相对布局的父图元，设置子图元的最大高度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的高度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"pyramid3d.layout.position":{"desc":"<p>设置相对布局的子图元的位置，支持的配置有：</p>\n<ul>\n<li>&#39;top&#39; 相对于父图元的顶部</li>\n<li>&#39;bottom&#39; 相对于父图元的底部</li>\n<li>&#39;left&#39; 相对于父图元的左侧</li>\n<li>&#39;right&#39; 相对于父图元的右侧</li>\n<li>&#39;content&#39; 相对于父图元的中心，也就是内容区域</li>\n<li>&#39;auto&#39; 图元设置了坐标系的时候，根据关联的<code class=\"codespan\">scale</code>，自定计算相对于父图元的位置</li>\n</ul>\n"},"pyramid3d.layout.padding":{"desc":"<p>子图元内边距，单位 px，默认各方向内边距为 0，接受数值、数值数组以及对象设置。</p>\n<p>使用示例：</p>\n<pre><code class=\"lang-ts\">// 数值类型，设置内边距为 5\npadding: 5;\n// 数值数组，设置上下的内边距为 5，左右的内边距为 10，用法同 CSS 盒模型\npadding: [5, 10];\n// 数值数组，分别设置四个方向的内边距\npadding: [\n  5, // 上\n  10, // 右\n  5, // 下\n  10 // 左\n];\n// 对象类型\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"pyramid3d.layout.gridTemplateRows":{"desc":"<p>网格布局的父图元设置行的高度</p>\n"},"pyramid3d.layout.gridTemplateColumns":{"desc":"<p>网格布局的父图元设置列的宽度</p>\n"},"pyramid3d.layout.gridRowGap":{"desc":"<p>网格布局的父图元设置行行距</p>\n"},"pyramid3d.layout.gridColumnGap":{"desc":"<p>网格布局的父图元设置列间距</p>\n"},"pyramid3d.layout.gridRowStart":{"desc":"<p>网格布局的子图元设置行开始的位置</p>\n"},"pyramid3d.layout.gridRowEnd":{"desc":"<p>网格布局的子图元设置行结束的位置</p>\n"},"pyramid3d.layout.gridColumnStart":{"desc":"<p>网格布局的子图元设置列开始的位置</p>\n"},"pyramid3d.layout.gridColumnEnd":{"desc":"<p>网格布局的子图元设置列结束的位置</p>\n"},"pyramid3d.large":{"desc":"<p>是否开启大数据渲染模式</p>\n"},"pyramid3d.largeThreshold":{"desc":"<p>开启大数据渲染优化的阀值，对应的是 data 的长度</p>\n"},"pyramid3d.progressiveStep":{"desc":"<p>开启分片渲染的步长，对应的是分片的数据长度</p>\n"},"pyramid3d.progressiveThreshold":{"desc":"<p>开启分片渲染的阀值，对应的是单系列 data 的长度</p>\n"},"pyramid3d.morph":{"desc":"<p>是否对当前图元开启全局的过渡形变动画</p>\n"},"pyramid3d.morphKey":{"desc":"<p>用于匹配全局过渡形变动画的图元，具有相对的<code class=\"codespan\">morphKey</code>的图元，会进行形变动画</p>\n"},"pyramid3d.morphElementKey":{"desc":"<p>对于匹配上的前后图元，通过该配置，进行图形元素的匹配；如果不申明，我们默认会读取<code class=\"codespan\">key</code>配置，用于匹配图形元素，进行形变动画；\n默认支持一对一、一对多、多对一的图形形变动画</p>\n"},"rect3d":{"desc":"<p><strong> rect3d 图元 </strong></p>\n"},"rect3d.type":{"desc":"<p>设置图元类型为 <code class=\"codespan\">rect3d</code></p>\n"},"rect3d.encode":{"desc":"<p>设置图元的视觉通道编码，默认支持三种数据变化状态：</p>\n<ul>\n<li><code class=\"codespan\">enter</code> 新增数据元素</li>\n<li><code class=\"codespan\">update</code> 数据元素更新</li>\n<li><code class=\"codespan\">exit</code> 数据元素被删除</li>\n</ul>\n<p>注意，这里的数据状态是根据<code class=\"codespan\">mark</code>的<code class=\"codespan\">key</code>自动生成的，我们会针对<code class=\"codespan\">mark</code>的绑定数据，根据<code class=\"codespan\">key</code>的配置，计算数据对应的唯一标志符，数据更新后，如果对应的唯一标志符不存在了，则状态为<code class=\"codespan\">exit</code>，如果存在，则为<code class=\"codespan\">update</code>；如果之前的数据不存在改唯一标志符，则数据元素对应的状态为<code class=\"codespan\">enter</code></p>\n<p>默认支持一种交互状态：</p>\n<ul>\n<li><code class=\"codespan\">hover</code> 鼠标 hover 到具体的图形上，给图形设置对应的视觉通道编码</li>\n</ul>\n"},"rect3d.encode.enter":{"desc":"<p>设置图元在数据初始化状态执行的视觉通道映射，注意数据更新的时候不再执行</p>\n"},"rect3d.encode.enter.width":{"desc":"<p>图元的宽度</p>\n"},"rect3d.encode.enter.height":{"desc":"<p>图元的高度</p>\n"},"rect3d.encode.enter.borderRadius":{"desc":"<p>设置圆角，默认为 0，支持两种格式的设置：</p>\n<ul>\n<li><code class=\"codespan\">number</code>: 给四个角度设置统一的圆角</li>\n<li><code class=\"codespan\">number[]</code>: 分别给四个角度设置不同的圆角<ul>\n<li>当数组的长度为<code class=\"codespan\">1</code>，给四个角设置相同的圆角</li>\n<li>当数组的长度为<code class=\"codespan\">2</code>或者<code class=\"codespan\">3</code>，给<strong>左上角</strong>和<strong>右下角</strong>设置圆角长度为<code class=\"codespan\">borderRadius[0]</code>,给<strong>右上角</strong>和<strong>左下角</strong>设置圆角长度为<code class=\"codespan\">borderRadius[1]</code></li>\n<li>当数组的长度为<code class=\"codespan\">4</code>及以上，四个角度设置不同的圆角</li>\n</ul>\n</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n"},"rect3d.encode.enter.length":{"desc":"<p>长度</p>\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"rect3d.encode.enter.x":{"desc":"<p>图元的 x 坐标</p>\n"},"rect3d.encode.enter.y":{"desc":"<p>图元 y 坐标</p>\n"},"rect3d.encode.enter.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"rect3d.encode.enter.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"rect3d.encode.enter.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"rect3d.encode.enter.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"rect3d.encode.enter.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"rect3d.encode.enter.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"rect3d.encode.enter.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"rect3d.encode.enter.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"rect3d.encode.enter.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"rect3d.encode.enter.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"rect3d.encode.enter.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"rect3d.encode.enter.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"rect3d.encode.enter.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"rect3d.encode.enter.outerBorder":{"desc":"<p>外描边</p>\n"},"rect3d.encode.enter.innerBorder":{"desc":"<p>内描边</p>\n"},"rect3d.encode.enter.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"rect3d.encode.enter.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"rect3d.encode.enter.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"rect3d.encode.enter.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"rect3d.encode.enter.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"rect3d.encode.enter.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"rect3d.encode.enter.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"rect3d.encode.enter.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"rect3d.encode.enter.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"rect3d.encode.enter.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"rect3d.encode.enter.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"rect3d.encode.enter.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"rect3d.encode.enter.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"rect3d.encode.enter.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"rect3d.encode.enter.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"rect3d.encode.enter.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"rect3d.encode.enter.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"rect3d.encode.enter.texture":{"desc":"<p>图元纹理</p>\n"},"rect3d.encode.enter.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"rect3d.encode.enter.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"rect3d.encode.enter.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"rect3d.encode.enter.blur":{"desc":"<p>图元边缘模糊</p>\n"},"rect3d.encode.enter.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"rect3d.encode.update":{"desc":"<p>设置图元在数据更新状态执行的视觉通道映射</p>\n"},"rect3d.encode.update.width":{"desc":"<p>图元的宽度</p>\n"},"rect3d.encode.update.height":{"desc":"<p>图元的高度</p>\n"},"rect3d.encode.update.borderRadius":{"desc":"<p>设置圆角，默认为 0，支持两种格式的设置：</p>\n<ul>\n<li><code class=\"codespan\">number</code>: 给四个角度设置统一的圆角</li>\n<li><code class=\"codespan\">number[]</code>: 分别给四个角度设置不同的圆角<ul>\n<li>当数组的长度为<code class=\"codespan\">1</code>，给四个角设置相同的圆角</li>\n<li>当数组的长度为<code class=\"codespan\">2</code>或者<code class=\"codespan\">3</code>，给<strong>左上角</strong>和<strong>右下角</strong>设置圆角长度为<code class=\"codespan\">borderRadius[0]</code>,给<strong>右上角</strong>和<strong>左下角</strong>设置圆角长度为<code class=\"codespan\">borderRadius[1]</code></li>\n<li>当数组的长度为<code class=\"codespan\">4</code>及以上，四个角度设置不同的圆角</li>\n</ul>\n</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n"},"rect3d.encode.update.length":{"desc":"<p>长度</p>\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"rect3d.encode.update.x":{"desc":"<p>图元的 x 坐标</p>\n"},"rect3d.encode.update.y":{"desc":"<p>图元 y 坐标</p>\n"},"rect3d.encode.update.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"rect3d.encode.update.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"rect3d.encode.update.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"rect3d.encode.update.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"rect3d.encode.update.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"rect3d.encode.update.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"rect3d.encode.update.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"rect3d.encode.update.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"rect3d.encode.update.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"rect3d.encode.update.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"rect3d.encode.update.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"rect3d.encode.update.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"rect3d.encode.update.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"rect3d.encode.update.outerBorder":{"desc":"<p>外描边</p>\n"},"rect3d.encode.update.innerBorder":{"desc":"<p>内描边</p>\n"},"rect3d.encode.update.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"rect3d.encode.update.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"rect3d.encode.update.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"rect3d.encode.update.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"rect3d.encode.update.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"rect3d.encode.update.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"rect3d.encode.update.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"rect3d.encode.update.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"rect3d.encode.update.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"rect3d.encode.update.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"rect3d.encode.update.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"rect3d.encode.update.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"rect3d.encode.update.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"rect3d.encode.update.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"rect3d.encode.update.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"rect3d.encode.update.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"rect3d.encode.update.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"rect3d.encode.update.texture":{"desc":"<p>图元纹理</p>\n"},"rect3d.encode.update.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"rect3d.encode.update.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"rect3d.encode.update.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"rect3d.encode.update.blur":{"desc":"<p>图元边缘模糊</p>\n"},"rect3d.encode.update.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"rect3d.encode.exit":{"desc":"<p>设置图元在数据被删除的状态下执行的视觉通道映射</p>\n"},"rect3d.encode.exit.width":{"desc":"<p>图元的宽度</p>\n"},"rect3d.encode.exit.height":{"desc":"<p>图元的高度</p>\n"},"rect3d.encode.exit.borderRadius":{"desc":"<p>设置圆角，默认为 0，支持两种格式的设置：</p>\n<ul>\n<li><code class=\"codespan\">number</code>: 给四个角度设置统一的圆角</li>\n<li><code class=\"codespan\">number[]</code>: 分别给四个角度设置不同的圆角<ul>\n<li>当数组的长度为<code class=\"codespan\">1</code>，给四个角设置相同的圆角</li>\n<li>当数组的长度为<code class=\"codespan\">2</code>或者<code class=\"codespan\">3</code>，给<strong>左上角</strong>和<strong>右下角</strong>设置圆角长度为<code class=\"codespan\">borderRadius[0]</code>,给<strong>右上角</strong>和<strong>左下角</strong>设置圆角长度为<code class=\"codespan\">borderRadius[1]</code></li>\n<li>当数组的长度为<code class=\"codespan\">4</code>及以上，四个角度设置不同的圆角</li>\n</ul>\n</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n"},"rect3d.encode.exit.length":{"desc":"<p>长度</p>\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"rect3d.encode.exit.x":{"desc":"<p>图元的 x 坐标</p>\n"},"rect3d.encode.exit.y":{"desc":"<p>图元 y 坐标</p>\n"},"rect3d.encode.exit.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"rect3d.encode.exit.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"rect3d.encode.exit.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"rect3d.encode.exit.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"rect3d.encode.exit.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"rect3d.encode.exit.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"rect3d.encode.exit.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"rect3d.encode.exit.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"rect3d.encode.exit.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"rect3d.encode.exit.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"rect3d.encode.exit.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"rect3d.encode.exit.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"rect3d.encode.exit.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"rect3d.encode.exit.outerBorder":{"desc":"<p>外描边</p>\n"},"rect3d.encode.exit.innerBorder":{"desc":"<p>内描边</p>\n"},"rect3d.encode.exit.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"rect3d.encode.exit.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"rect3d.encode.exit.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"rect3d.encode.exit.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"rect3d.encode.exit.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"rect3d.encode.exit.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"rect3d.encode.exit.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"rect3d.encode.exit.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"rect3d.encode.exit.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"rect3d.encode.exit.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"rect3d.encode.exit.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"rect3d.encode.exit.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"rect3d.encode.exit.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"rect3d.encode.exit.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"rect3d.encode.exit.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"rect3d.encode.exit.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"rect3d.encode.exit.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"rect3d.encode.exit.texture":{"desc":"<p>图元纹理</p>\n"},"rect3d.encode.exit.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"rect3d.encode.exit.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"rect3d.encode.exit.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"rect3d.encode.exit.blur":{"desc":"<p>图元边缘模糊</p>\n"},"rect3d.encode.exit.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"rect3d.encode.hover":{"desc":"<p>设置<code class=\"codespan\">hover</code>状态的时候，图元对应的视觉通道映射</p>\n"},"rect3d.encode.hover.width":{"desc":"<p>图元的宽度</p>\n"},"rect3d.encode.hover.height":{"desc":"<p>图元的高度</p>\n"},"rect3d.encode.hover.borderRadius":{"desc":"<p>设置圆角，默认为 0，支持两种格式的设置：</p>\n<ul>\n<li><code class=\"codespan\">number</code>: 给四个角度设置统一的圆角</li>\n<li><code class=\"codespan\">number[]</code>: 分别给四个角度设置不同的圆角<ul>\n<li>当数组的长度为<code class=\"codespan\">1</code>，给四个角设置相同的圆角</li>\n<li>当数组的长度为<code class=\"codespan\">2</code>或者<code class=\"codespan\">3</code>，给<strong>左上角</strong>和<strong>右下角</strong>设置圆角长度为<code class=\"codespan\">borderRadius[0]</code>,给<strong>右上角</strong>和<strong>左下角</strong>设置圆角长度为<code class=\"codespan\">borderRadius[1]</code></li>\n<li>当数组的长度为<code class=\"codespan\">4</code>及以上，四个角度设置不同的圆角</li>\n</ul>\n</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n"},"rect3d.encode.hover.length":{"desc":"<p>长度</p>\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"rect3d.encode.hover.x":{"desc":"<p>图元的 x 坐标</p>\n"},"rect3d.encode.hover.y":{"desc":"<p>图元 y 坐标</p>\n"},"rect3d.encode.hover.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"rect3d.encode.hover.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"rect3d.encode.hover.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"rect3d.encode.hover.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"rect3d.encode.hover.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"rect3d.encode.hover.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"rect3d.encode.hover.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"rect3d.encode.hover.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"rect3d.encode.hover.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"rect3d.encode.hover.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"rect3d.encode.hover.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"rect3d.encode.hover.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"rect3d.encode.hover.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"rect3d.encode.hover.outerBorder":{"desc":"<p>外描边</p>\n"},"rect3d.encode.hover.innerBorder":{"desc":"<p>内描边</p>\n"},"rect3d.encode.hover.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"rect3d.encode.hover.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"rect3d.encode.hover.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"rect3d.encode.hover.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"rect3d.encode.hover.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"rect3d.encode.hover.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"rect3d.encode.hover.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"rect3d.encode.hover.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"rect3d.encode.hover.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"rect3d.encode.hover.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"rect3d.encode.hover.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"rect3d.encode.hover.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"rect3d.encode.hover.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"rect3d.encode.hover.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"rect3d.encode.hover.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"rect3d.encode.hover.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"rect3d.encode.hover.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"rect3d.encode.hover.texture":{"desc":"<p>图元纹理</p>\n"},"rect3d.encode.hover.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"rect3d.encode.hover.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"rect3d.encode.hover.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"rect3d.encode.hover.blur":{"desc":"<p>图元边缘模糊</p>\n"},"rect3d.encode.hover.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"rect3d.animationState":{"desc":"<p>类型：<code class=\"codespan\">MarkFunctionType</code>\n是否必传： 否\nanimation attributes</p>\n"},"rect3d.animation":{"desc":"<p>支持设置各种状态对应的动画，数据驱动的动画状态有三种：</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>交互触发的状态变更，通过统一的交互动画进行配置，配置的 key 为 <code class=\"codespan\">state</code></p>\n"},"rect3d.animation.type":{"desc":"<p>动画执行类型，指定特定的内置动画执行效果</p>\n<p>通用的内置动画类型包括：</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: 渐入渐出动画</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: 缩放动画</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: 移入移出动画</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: 旋转动画</li>\n<li><code class=\"codespan\">update</code>: 更新动画</li>\n</ul>\n"},"rect3d.animation.channel":{"desc":"<p>动画执行前后的视觉通道，与 <code class=\"codespan\">type</code> 配置冲突</p>\n"},"rect3d.animation.custom":{"desc":"<p>自定义动画，如果设定了自定义动画配置则会替换默认的视觉通道插值逻辑</p>\n"},"rect3d.animation.customParameters":{"desc":"<p>自定义动画参数</p>\n"},"rect3d.animation.easing":{"desc":"<p>动画缓动，默认为 <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"rect3d.animation.delay":{"desc":"<p>动画执行的延迟时间，默认为 0</p>\n"},"rect3d.animation.duration":{"desc":"<p>动画执行时长，默认为 1000ms</p>\n"},"rect3d.animation.oneByOne":{"desc":"<p>动画依次执行的延迟时长，如果配置为 <code class=\"codespan\">true</code> 则会在上一个元素动画执行结束后执行下一个元素的动画，默认为 <code class=\"codespan\">false</code></p>\n"},"rect3d.animation.startTime":{"desc":"<p>动画执行的初始时间，这一初始时间不会在循环动画中被重复应用，默认为 0</p>\n"},"rect3d.animation.totalTime":{"desc":"<p>动画执行的最大时间，如果动画执行到达设定时间将会被终止</p>\n"},"rect3d.animation.loop":{"desc":"<p>动画循环次数，如果配置为 <code class=\"codespan\">true</code> 则会无限循环</p>\n"},"rect3d.animation.options":{"desc":"<p>特定动画类型执行时设定的额外参数</p>\n"},"rect3d.animation.controlOptions":{"desc":"<p>动画执行逻辑的控制参数：</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: 当动画状态变更时是否立即终止自身动画</li>\n<li><code class=\"codespan\">immediatelyApply</code>: 是否立即应用动画初始的视觉通道</li>\n</ul>\n"},"rect3d.zIndex":{"desc":"<p>设置<code class=\"codespan\">mark</code>图元对应的容器图形(group)的 zIndex</p>\n"},"rect3d.interactive":{"desc":"<p>类型：<code class=\"codespan\">boolean</code>\n是否必传： 否</p>\n"},"rect3d.context":{"desc":"<p>设置图元的上下文参数</p>\n"},"rect3d.setCustomizedShape":{"desc":"<p>设置自定义形状的回调函数，对应的 ts 类型定位如下：</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>其中<code class=\"codespan\">ICustomPath2D</code> 为 VRender 提供的绘制自定义的路径一个工具类</p>\n"},"rect3d.support3d":{"desc":"<p>当画布设置了 3d 视角的时候，是否支持 3d 模式</p>\n"},"rect3d.group":{"desc":"<p>设置父图元，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 父图元对应的 id</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> 父图元对应的语法元素，一般用于 API 调用场景</li>\n</ul>\n<p>如果不设置，会默认挂在到画布的根节点下面</p>\n"},"rect3d.from":{"desc":"<p>ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>通过<code class=\"codespan\">data</code> 属性值，申明图元依赖的数据</p>\n"},"rect3d.key":{"desc":"<p>设置图元数据元素的唯一标志符，用于计算图形元素的数据状态，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"rect3d.sort":{"desc":"<p>对图元中的所有图形元素进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"rect3d.groupBy":{"desc":"<p>设置分组的属性，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置分组<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析分组<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"rect3d.groupSort":{"desc":"<p>对图元中的分组进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"rect3d.coordinate":{"desc":"<p>设置该图元关联的坐标系对应的 id 或者坐标系对应的图形元素</p>\n"},"rect3d.state":{"desc":"<p>设置当前图元所有图形元素的状态值，支持三种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置图形的状态，比如说:<code class=\"codespan\">{ state: &#39;selected&#39;}</code> 就是给所有的图形设置状态为<code class=\"codespan\">&#39;selected&#39;</code>，通常这种情况，<code class=\"codespan\">encode</code> 中也会设置<code class=\"codespan\">&#39;selected&#39;</code>状态对应的图形通道映射</li>\n<li><code class=\"codespan\">string[]</code> 给图形设置多个状态，可以配置<code class=\"codespan\">stateSort</code>来影响对应状态执行图形通道映射的顺序</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析状态值的回调函数，返回参数为<code class=\"codespan\">string | string[]</code>，对应的 ts 类型定义为：</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"rect3d.stateSort":{"desc":"<p>设置当前图元所有图形元素的状态值的排序函数，会影响状态对应的图形通道映射的顺序，最先执行的状态可能被后续的状态覆盖图形通道映射结果，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"rect3d.transform":{"desc":"<p>设置图元对应的变换，所有的数据变换都可以配置在图元上，用于对图元的<code class=\"codespan\">join data</code> 执行变换；\n另外一种类型的变换就是对图形元素执行的变换，比如说<code class=\"codespan\">dodge</code>；\n通用的类型定义如下：</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>每中变换支持的参数不同</p>\n"},"rect3d.layout":{"desc":"<p>设置图元的布局参数，图元在参与布局的时候，存在两种角色：</p>\n<ul>\n<li>&#39;container&#39; 容器图元，一般是<code class=\"codespan\">group</code>图元</li>\n<li>&#39;item&#39; 布局子元素，作为容器图元的子节点</li>\n</ul>\n<p>注意，我们仅支持一层布局，如果是多层嵌套布局，建议使用自定义的布局方案进行实现；</p>\n<p>现在支持两种内容的布局：<code class=\"codespan\">grid</code> 布局 和 <code class=\"codespan\">relative</code>布局，相关类型定义如下</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>如果想要设置自定义的布局方案，<code class=\"codespan\">layout</code>也支持直接设置回调函数，回调函数的定义如下：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"rect3d.layout.display":{"desc":"<p>容器图元设置布局的类型，支持两种配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> 相对布局</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> 网格布局</li>\n</ul>\n"},"rect3d.layout.callback":{"desc":"<p>自定义该图元的回调函数，ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"rect3d.layout.skipBeforeLayouted":{"desc":"<p>在布局完成前，跳过执行阶段</p>\n"},"rect3d.layout.updateViewSignals":{"desc":"<p>是否更新默认的视图信号，也就是：<code class=\"codespan\">padding</code>、<code class=\"codespan\">viewWidth</code> 和 <code class=\"codespan\">viewHeight</code></p>\n<p>只能在设置了<code class=\"codespan\">{ layout: { display: &#39;relative&#39;} }</code>的容器图元上设置该属性</p>\n"},"rect3d.layout.maxChildWidth":{"desc":"<p>相对布局的父图元，设置子图元的最大宽度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的宽度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"rect3d.layout.maxChildHeight":{"desc":"<p>相对布局的父图元，设置子图元的最大高度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的高度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"rect3d.layout.position":{"desc":"<p>设置相对布局的子图元的位置，支持的配置有：</p>\n<ul>\n<li>&#39;top&#39; 相对于父图元的顶部</li>\n<li>&#39;bottom&#39; 相对于父图元的底部</li>\n<li>&#39;left&#39; 相对于父图元的左侧</li>\n<li>&#39;right&#39; 相对于父图元的右侧</li>\n<li>&#39;content&#39; 相对于父图元的中心，也就是内容区域</li>\n<li>&#39;auto&#39; 图元设置了坐标系的时候，根据关联的<code class=\"codespan\">scale</code>，自定计算相对于父图元的位置</li>\n</ul>\n"},"rect3d.layout.padding":{"desc":"<p>子图元内边距，单位 px，默认各方向内边距为 0，接受数值、数值数组以及对象设置。</p>\n<p>使用示例：</p>\n<pre><code class=\"lang-ts\">// 数值类型，设置内边距为 5\npadding: 5;\n// 数值数组，设置上下的内边距为 5，左右的内边距为 10，用法同 CSS 盒模型\npadding: [5, 10];\n// 数值数组，分别设置四个方向的内边距\npadding: [\n  5, // 上\n  10, // 右\n  5, // 下\n  10 // 左\n];\n// 对象类型\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"rect3d.layout.gridTemplateRows":{"desc":"<p>网格布局的父图元设置行的高度</p>\n"},"rect3d.layout.gridTemplateColumns":{"desc":"<p>网格布局的父图元设置列的宽度</p>\n"},"rect3d.layout.gridRowGap":{"desc":"<p>网格布局的父图元设置行行距</p>\n"},"rect3d.layout.gridColumnGap":{"desc":"<p>网格布局的父图元设置列间距</p>\n"},"rect3d.layout.gridRowStart":{"desc":"<p>网格布局的子图元设置行开始的位置</p>\n"},"rect3d.layout.gridRowEnd":{"desc":"<p>网格布局的子图元设置行结束的位置</p>\n"},"rect3d.layout.gridColumnStart":{"desc":"<p>网格布局的子图元设置列开始的位置</p>\n"},"rect3d.layout.gridColumnEnd":{"desc":"<p>网格布局的子图元设置列结束的位置</p>\n"},"rect3d.large":{"desc":"<p>是否开启大数据渲染模式</p>\n"},"rect3d.largeThreshold":{"desc":"<p>开启大数据渲染优化的阀值，对应的是 data 的长度</p>\n"},"rect3d.progressiveStep":{"desc":"<p>开启分片渲染的步长，对应的是分片的数据长度</p>\n"},"rect3d.progressiveThreshold":{"desc":"<p>开启分片渲染的阀值，对应的是单系列 data 的长度</p>\n"},"rect3d.morph":{"desc":"<p>是否对当前图元开启全局的过渡形变动画</p>\n"},"rect3d.morphKey":{"desc":"<p>用于匹配全局过渡形变动画的图元，具有相对的<code class=\"codespan\">morphKey</code>的图元，会进行形变动画</p>\n"},"rect3d.morphElementKey":{"desc":"<p>对于匹配上的前后图元，通过该配置，进行图形元素的匹配；如果不申明，我们默认会读取<code class=\"codespan\">key</code>配置，用于匹配图形元素，进行形变动画；\n默认支持一对一、一对多、多对一的图形形变动画</p>\n"}}