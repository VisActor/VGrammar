{"type":{"desc":"<p>设置图元类型为 <code class=\"codespan\">richtext</code></p>\n"},"encode":{"desc":"<p>设置图元的视觉通道编码，默认支持三种数据变化状态：</p>\n<ul>\n<li><code class=\"codespan\">enter</code> 新增数据元素</li>\n<li><code class=\"codespan\">update</code> 数据元素更新</li>\n<li><code class=\"codespan\">exit</code> 数据元素被删除</li>\n</ul>\n<p>注意，这里的数据状态是根据<code class=\"codespan\">mark</code>的<code class=\"codespan\">key</code>自动生成的，我们会针对<code class=\"codespan\">mark</code>的绑定数据，根据<code class=\"codespan\">key</code>的配置，计算数据对应的唯一标志符，数据更新后，如果对应的唯一标志符不存在了，则状态为<code class=\"codespan\">exit</code>，如果存在，则为<code class=\"codespan\">update</code>；如果之前的数据不存在改唯一标志符，则数据元素对应的状态为<code class=\"codespan\">enter</code></p>\n<p>默认支持一种交互状态：</p>\n<ul>\n<li><code class=\"codespan\">hover</code> 鼠标 hover 到具体的图形上，给图形设置对应的视觉通道编码</li>\n</ul>\n"},"encode.enter":{"desc":"<p>设置图元在数据初始化状态执行的视觉通道映射，注意数据更新的时候不再执行</p>\n"},"encode.enter.width":{"desc":"<p>图元的宽度</p>\n"},"encode.enter.height":{"desc":"<p>图元的高度</p>\n"},"encode.enter.textConfig":{"desc":"<p>设置子文本的样式，类型为<code class=\"codespan\">IRichTextCharacter[]</code>，具体的定义如下：</p>\n<pre><code class=\"lang-ts\">type IRichTextBasicCharacter = {\n  lineHeight?: number;\n  textAlign?: CanvasTextAlign; // left, right, center\n  textBaseline?: CanvasTextBaseline;\n  direction?: RichTextLayoutDirectionType;\n};\n\ntype IRichTextParagraphCharacter = IRichTextBasicCharacter &amp; {\n  text: string;\n  fontSize?: number;\n  fontFamily?: string;\n  fill?: boolean;\n  stroke?: boolean;\n  fillColor?: IColor;\n  strokeColor?: IColor;\n  fontWeight?: string;\n  // lineHeight?: number;\n  fontStyle?: RichTextFontStyle; // normal, italic, oblique\n  textDecoration?: RichTextTextDecoration; // none, underline, line-through\n  // textAlign?: RichTextTextAlign; // left, right, center\n  script?: RichTextScript; // normal, sub, super\n  underline?: boolean;\n  lineThrough?: boolean;\n  // direction?: RichTextLayoutDirectionType;\n};\n\ntype IRichTextImageCharacter = IRichTextBasicCharacter &amp; {\n  // 图片基础属性\n  image: string | HTMLImageElement | HTMLCanvasElement;\n  width: number;\n  height: number;\n\n  // hover相关属性\n  // backgroundShow?: boolean; // 是否显示background\n  backgroundShowMode?: &#39;always&#39; | &#39;hover&#39;;\n  backgroundFill?: boolean;\n  backgroundFillColor?: IColor; // 背景矩形填充颜色\n  backgroundFillOpacity?: number; // 背景矩形填充透明度\n  backgroundStroke?: boolean;\n  backgroundStrokeColor?: IColor; // 背景矩形边框颜色\n  backgroundStrokeOpacity?: number; // 背景矩形边框透明度\n  backgroundRadius?: number; // 背景矩形圆角\n  // background size 同时控制了该icon的响应范围\n  backgroundWidth?: number;\n  backgroundHeight?: number;\n\n  // 唯一标识符\n  id?: string;\n\n  // lineHeight?: number;\n  // textAlign?: RichTextTextAlign; // left, right, center\n  // direction?: RichTextLayoutDirectionType;\n  margin?: number | number[];\n\n  funcType?: string;\n  hoverImage?: string | HTMLImageElement | HTMLCanvasElement;\n};\n\ntype IRichTextCharacter = IRichTextParagraphCharacter | IRichTextImageCharacter;\n</code></pre>\n"},"encode.enter.ellipsis":{"desc":"<p>文本超长的时候，缩略符相关配置，支持两种类型的配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 开启自动省略，并设置省略符号</li>\n<li><code class=\"codespan\">&#39;boolean&#39;</code> 是否开启自动省略，默认的省略符号为<code class=\"codespan\">&#39;...&#39;</code></li>\n</ul>\n"},"encode.enter.wordBreak":{"desc":"<p>文字断开设置，支持两个配置值：</p>\n<ul>\n<li><code class=\"codespan\">&#39;break-word&#39;</code></li>\n<li><code class=\"codespan\">&#39;break-all&#39;</code></li>\n</ul>\n"},"encode.enter.verticalDirection":{"desc":"<p>数值方向对齐方式，支持配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;top&#39;</code></li>\n<li><code class=\"codespan\">&#39;middle&#39;</code></li>\n<li><code class=\"codespan\">&#39;bottom&#39;</code></li>\n</ul>\n"},"encode.enter.layoutDirection":{"desc":"<p>布局方向，支持配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;horizontal&#39;</code></li>\n<li><code class=\"codespan\">&#39;vertical&#39;</code></li>\n</ul>\n"},"encode.enter.singleLine":{"desc":"<p>是否单行展示</p>\n"},"encode.enter.maxHeight":{"desc":"<p>最大高度</p>\n"},"encode.enter.maxWidth":{"desc":"<p>最大宽度</p>\n"},"encode.enter.textAlign":{"desc":"<p>文字的对齐方式，支持配置：</p>\n<ul>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;center&#39;</li>\n</ul>\n"},"encode.enter.textBaseline":{"desc":"<p>文字的竖直对齐线，支持配置：</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;middle&#39;</li>\n<li>&#39;bottom&#39;</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"encode.enter.x":{"desc":"<p>图元的 x 坐标</p>\n"},"encode.enter.y":{"desc":"<p>图元 y 坐标</p>\n"},"encode.enter.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"encode.enter.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"encode.enter.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"encode.enter.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"encode.enter.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"encode.enter.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"encode.enter.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"encode.enter.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"encode.enter.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"encode.enter.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"encode.enter.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"encode.enter.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"encode.enter.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"encode.enter.outerBorder":{"desc":"<p>外描边</p>\n"},"encode.enter.innerBorder":{"desc":"<p>内描边</p>\n"},"encode.enter.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"encode.enter.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"encode.enter.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"encode.enter.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"encode.enter.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"encode.enter.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"encode.enter.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"encode.enter.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"encode.enter.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"encode.enter.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"encode.enter.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"encode.enter.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"encode.enter.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"encode.enter.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"encode.enter.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"encode.enter.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"encode.enter.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"encode.enter.texture":{"desc":"<p>图元纹理</p>\n"},"encode.enter.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"encode.enter.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"encode.enter.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"encode.enter.blur":{"desc":"<p>图元边缘模糊</p>\n"},"encode.enter.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"encode.update":{"desc":"<p>设置图元在数据更新状态执行的视觉通道映射</p>\n"},"encode.update.width":{"desc":"<p>图元的宽度</p>\n"},"encode.update.height":{"desc":"<p>图元的高度</p>\n"},"encode.update.textConfig":{"desc":"<p>设置子文本的样式，类型为<code class=\"codespan\">IRichTextCharacter[]</code>，具体的定义如下：</p>\n<pre><code class=\"lang-ts\">type IRichTextBasicCharacter = {\n  lineHeight?: number;\n  textAlign?: CanvasTextAlign; // left, right, center\n  textBaseline?: CanvasTextBaseline;\n  direction?: RichTextLayoutDirectionType;\n};\n\ntype IRichTextParagraphCharacter = IRichTextBasicCharacter &amp; {\n  text: string;\n  fontSize?: number;\n  fontFamily?: string;\n  fill?: boolean;\n  stroke?: boolean;\n  fillColor?: IColor;\n  strokeColor?: IColor;\n  fontWeight?: string;\n  // lineHeight?: number;\n  fontStyle?: RichTextFontStyle; // normal, italic, oblique\n  textDecoration?: RichTextTextDecoration; // none, underline, line-through\n  // textAlign?: RichTextTextAlign; // left, right, center\n  script?: RichTextScript; // normal, sub, super\n  underline?: boolean;\n  lineThrough?: boolean;\n  // direction?: RichTextLayoutDirectionType;\n};\n\ntype IRichTextImageCharacter = IRichTextBasicCharacter &amp; {\n  // 图片基础属性\n  image: string | HTMLImageElement | HTMLCanvasElement;\n  width: number;\n  height: number;\n\n  // hover相关属性\n  // backgroundShow?: boolean; // 是否显示background\n  backgroundShowMode?: &#39;always&#39; | &#39;hover&#39;;\n  backgroundFill?: boolean;\n  backgroundFillColor?: IColor; // 背景矩形填充颜色\n  backgroundFillOpacity?: number; // 背景矩形填充透明度\n  backgroundStroke?: boolean;\n  backgroundStrokeColor?: IColor; // 背景矩形边框颜色\n  backgroundStrokeOpacity?: number; // 背景矩形边框透明度\n  backgroundRadius?: number; // 背景矩形圆角\n  // background size 同时控制了该icon的响应范围\n  backgroundWidth?: number;\n  backgroundHeight?: number;\n\n  // 唯一标识符\n  id?: string;\n\n  // lineHeight?: number;\n  // textAlign?: RichTextTextAlign; // left, right, center\n  // direction?: RichTextLayoutDirectionType;\n  margin?: number | number[];\n\n  funcType?: string;\n  hoverImage?: string | HTMLImageElement | HTMLCanvasElement;\n};\n\ntype IRichTextCharacter = IRichTextParagraphCharacter | IRichTextImageCharacter;\n</code></pre>\n"},"encode.update.ellipsis":{"desc":"<p>文本超长的时候，缩略符相关配置，支持两种类型的配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 开启自动省略，并设置省略符号</li>\n<li><code class=\"codespan\">&#39;boolean&#39;</code> 是否开启自动省略，默认的省略符号为<code class=\"codespan\">&#39;...&#39;</code></li>\n</ul>\n"},"encode.update.wordBreak":{"desc":"<p>文字断开设置，支持两个配置值：</p>\n<ul>\n<li><code class=\"codespan\">&#39;break-word&#39;</code></li>\n<li><code class=\"codespan\">&#39;break-all&#39;</code></li>\n</ul>\n"},"encode.update.verticalDirection":{"desc":"<p>数值方向对齐方式，支持配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;top&#39;</code></li>\n<li><code class=\"codespan\">&#39;middle&#39;</code></li>\n<li><code class=\"codespan\">&#39;bottom&#39;</code></li>\n</ul>\n"},"encode.update.layoutDirection":{"desc":"<p>布局方向，支持配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;horizontal&#39;</code></li>\n<li><code class=\"codespan\">&#39;vertical&#39;</code></li>\n</ul>\n"},"encode.update.singleLine":{"desc":"<p>是否单行展示</p>\n"},"encode.update.maxHeight":{"desc":"<p>最大高度</p>\n"},"encode.update.maxWidth":{"desc":"<p>最大宽度</p>\n"},"encode.update.textAlign":{"desc":"<p>文字的对齐方式，支持配置：</p>\n<ul>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;center&#39;</li>\n</ul>\n"},"encode.update.textBaseline":{"desc":"<p>文字的竖直对齐线，支持配置：</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;middle&#39;</li>\n<li>&#39;bottom&#39;</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"encode.update.x":{"desc":"<p>图元的 x 坐标</p>\n"},"encode.update.y":{"desc":"<p>图元 y 坐标</p>\n"},"encode.update.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"encode.update.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"encode.update.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"encode.update.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"encode.update.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"encode.update.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"encode.update.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"encode.update.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"encode.update.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"encode.update.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"encode.update.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"encode.update.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"encode.update.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"encode.update.outerBorder":{"desc":"<p>外描边</p>\n"},"encode.update.innerBorder":{"desc":"<p>内描边</p>\n"},"encode.update.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"encode.update.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"encode.update.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"encode.update.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"encode.update.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"encode.update.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"encode.update.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"encode.update.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"encode.update.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"encode.update.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"encode.update.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"encode.update.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"encode.update.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"encode.update.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"encode.update.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"encode.update.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"encode.update.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"encode.update.texture":{"desc":"<p>图元纹理</p>\n"},"encode.update.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"encode.update.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"encode.update.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"encode.update.blur":{"desc":"<p>图元边缘模糊</p>\n"},"encode.update.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"encode.exit":{"desc":"<p>设置图元在数据被删除的状态下执行的视觉通道映射</p>\n"},"encode.exit.width":{"desc":"<p>图元的宽度</p>\n"},"encode.exit.height":{"desc":"<p>图元的高度</p>\n"},"encode.exit.textConfig":{"desc":"<p>设置子文本的样式，类型为<code class=\"codespan\">IRichTextCharacter[]</code>，具体的定义如下：</p>\n<pre><code class=\"lang-ts\">type IRichTextBasicCharacter = {\n  lineHeight?: number;\n  textAlign?: CanvasTextAlign; // left, right, center\n  textBaseline?: CanvasTextBaseline;\n  direction?: RichTextLayoutDirectionType;\n};\n\ntype IRichTextParagraphCharacter = IRichTextBasicCharacter &amp; {\n  text: string;\n  fontSize?: number;\n  fontFamily?: string;\n  fill?: boolean;\n  stroke?: boolean;\n  fillColor?: IColor;\n  strokeColor?: IColor;\n  fontWeight?: string;\n  // lineHeight?: number;\n  fontStyle?: RichTextFontStyle; // normal, italic, oblique\n  textDecoration?: RichTextTextDecoration; // none, underline, line-through\n  // textAlign?: RichTextTextAlign; // left, right, center\n  script?: RichTextScript; // normal, sub, super\n  underline?: boolean;\n  lineThrough?: boolean;\n  // direction?: RichTextLayoutDirectionType;\n};\n\ntype IRichTextImageCharacter = IRichTextBasicCharacter &amp; {\n  // 图片基础属性\n  image: string | HTMLImageElement | HTMLCanvasElement;\n  width: number;\n  height: number;\n\n  // hover相关属性\n  // backgroundShow?: boolean; // 是否显示background\n  backgroundShowMode?: &#39;always&#39; | &#39;hover&#39;;\n  backgroundFill?: boolean;\n  backgroundFillColor?: IColor; // 背景矩形填充颜色\n  backgroundFillOpacity?: number; // 背景矩形填充透明度\n  backgroundStroke?: boolean;\n  backgroundStrokeColor?: IColor; // 背景矩形边框颜色\n  backgroundStrokeOpacity?: number; // 背景矩形边框透明度\n  backgroundRadius?: number; // 背景矩形圆角\n  // background size 同时控制了该icon的响应范围\n  backgroundWidth?: number;\n  backgroundHeight?: number;\n\n  // 唯一标识符\n  id?: string;\n\n  // lineHeight?: number;\n  // textAlign?: RichTextTextAlign; // left, right, center\n  // direction?: RichTextLayoutDirectionType;\n  margin?: number | number[];\n\n  funcType?: string;\n  hoverImage?: string | HTMLImageElement | HTMLCanvasElement;\n};\n\ntype IRichTextCharacter = IRichTextParagraphCharacter | IRichTextImageCharacter;\n</code></pre>\n"},"encode.exit.ellipsis":{"desc":"<p>文本超长的时候，缩略符相关配置，支持两种类型的配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 开启自动省略，并设置省略符号</li>\n<li><code class=\"codespan\">&#39;boolean&#39;</code> 是否开启自动省略，默认的省略符号为<code class=\"codespan\">&#39;...&#39;</code></li>\n</ul>\n"},"encode.exit.wordBreak":{"desc":"<p>文字断开设置，支持两个配置值：</p>\n<ul>\n<li><code class=\"codespan\">&#39;break-word&#39;</code></li>\n<li><code class=\"codespan\">&#39;break-all&#39;</code></li>\n</ul>\n"},"encode.exit.verticalDirection":{"desc":"<p>数值方向对齐方式，支持配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;top&#39;</code></li>\n<li><code class=\"codespan\">&#39;middle&#39;</code></li>\n<li><code class=\"codespan\">&#39;bottom&#39;</code></li>\n</ul>\n"},"encode.exit.layoutDirection":{"desc":"<p>布局方向，支持配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;horizontal&#39;</code></li>\n<li><code class=\"codespan\">&#39;vertical&#39;</code></li>\n</ul>\n"},"encode.exit.singleLine":{"desc":"<p>是否单行展示</p>\n"},"encode.exit.maxHeight":{"desc":"<p>最大高度</p>\n"},"encode.exit.maxWidth":{"desc":"<p>最大宽度</p>\n"},"encode.exit.textAlign":{"desc":"<p>文字的对齐方式，支持配置：</p>\n<ul>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;center&#39;</li>\n</ul>\n"},"encode.exit.textBaseline":{"desc":"<p>文字的竖直对齐线，支持配置：</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;middle&#39;</li>\n<li>&#39;bottom&#39;</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"encode.exit.x":{"desc":"<p>图元的 x 坐标</p>\n"},"encode.exit.y":{"desc":"<p>图元 y 坐标</p>\n"},"encode.exit.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"encode.exit.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"encode.exit.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"encode.exit.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"encode.exit.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"encode.exit.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"encode.exit.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"encode.exit.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"encode.exit.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"encode.exit.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"encode.exit.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"encode.exit.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"encode.exit.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"encode.exit.outerBorder":{"desc":"<p>外描边</p>\n"},"encode.exit.innerBorder":{"desc":"<p>内描边</p>\n"},"encode.exit.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"encode.exit.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"encode.exit.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"encode.exit.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"encode.exit.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"encode.exit.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"encode.exit.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"encode.exit.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"encode.exit.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"encode.exit.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"encode.exit.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"encode.exit.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"encode.exit.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"encode.exit.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"encode.exit.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"encode.exit.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"encode.exit.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"encode.exit.texture":{"desc":"<p>图元纹理</p>\n"},"encode.exit.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"encode.exit.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"encode.exit.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"encode.exit.blur":{"desc":"<p>图元边缘模糊</p>\n"},"encode.exit.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"encode.hover":{"desc":"<p>设置<code class=\"codespan\">hover</code>状态的时候，图元对应的视觉通道映射</p>\n"},"encode.hover.width":{"desc":"<p>图元的宽度</p>\n"},"encode.hover.height":{"desc":"<p>图元的高度</p>\n"},"encode.hover.textConfig":{"desc":"<p>设置子文本的样式，类型为<code class=\"codespan\">IRichTextCharacter[]</code>，具体的定义如下：</p>\n<pre><code class=\"lang-ts\">type IRichTextBasicCharacter = {\n  lineHeight?: number;\n  textAlign?: CanvasTextAlign; // left, right, center\n  textBaseline?: CanvasTextBaseline;\n  direction?: RichTextLayoutDirectionType;\n};\n\ntype IRichTextParagraphCharacter = IRichTextBasicCharacter &amp; {\n  text: string;\n  fontSize?: number;\n  fontFamily?: string;\n  fill?: boolean;\n  stroke?: boolean;\n  fillColor?: IColor;\n  strokeColor?: IColor;\n  fontWeight?: string;\n  // lineHeight?: number;\n  fontStyle?: RichTextFontStyle; // normal, italic, oblique\n  textDecoration?: RichTextTextDecoration; // none, underline, line-through\n  // textAlign?: RichTextTextAlign; // left, right, center\n  script?: RichTextScript; // normal, sub, super\n  underline?: boolean;\n  lineThrough?: boolean;\n  // direction?: RichTextLayoutDirectionType;\n};\n\ntype IRichTextImageCharacter = IRichTextBasicCharacter &amp; {\n  // 图片基础属性\n  image: string | HTMLImageElement | HTMLCanvasElement;\n  width: number;\n  height: number;\n\n  // hover相关属性\n  // backgroundShow?: boolean; // 是否显示background\n  backgroundShowMode?: &#39;always&#39; | &#39;hover&#39;;\n  backgroundFill?: boolean;\n  backgroundFillColor?: IColor; // 背景矩形填充颜色\n  backgroundFillOpacity?: number; // 背景矩形填充透明度\n  backgroundStroke?: boolean;\n  backgroundStrokeColor?: IColor; // 背景矩形边框颜色\n  backgroundStrokeOpacity?: number; // 背景矩形边框透明度\n  backgroundRadius?: number; // 背景矩形圆角\n  // background size 同时控制了该icon的响应范围\n  backgroundWidth?: number;\n  backgroundHeight?: number;\n\n  // 唯一标识符\n  id?: string;\n\n  // lineHeight?: number;\n  // textAlign?: RichTextTextAlign; // left, right, center\n  // direction?: RichTextLayoutDirectionType;\n  margin?: number | number[];\n\n  funcType?: string;\n  hoverImage?: string | HTMLImageElement | HTMLCanvasElement;\n};\n\ntype IRichTextCharacter = IRichTextParagraphCharacter | IRichTextImageCharacter;\n</code></pre>\n"},"encode.hover.ellipsis":{"desc":"<p>文本超长的时候，缩略符相关配置，支持两种类型的配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 开启自动省略，并设置省略符号</li>\n<li><code class=\"codespan\">&#39;boolean&#39;</code> 是否开启自动省略，默认的省略符号为<code class=\"codespan\">&#39;...&#39;</code></li>\n</ul>\n"},"encode.hover.wordBreak":{"desc":"<p>文字断开设置，支持两个配置值：</p>\n<ul>\n<li><code class=\"codespan\">&#39;break-word&#39;</code></li>\n<li><code class=\"codespan\">&#39;break-all&#39;</code></li>\n</ul>\n"},"encode.hover.verticalDirection":{"desc":"<p>数值方向对齐方式，支持配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;top&#39;</code></li>\n<li><code class=\"codespan\">&#39;middle&#39;</code></li>\n<li><code class=\"codespan\">&#39;bottom&#39;</code></li>\n</ul>\n"},"encode.hover.layoutDirection":{"desc":"<p>布局方向，支持配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;horizontal&#39;</code></li>\n<li><code class=\"codespan\">&#39;vertical&#39;</code></li>\n</ul>\n"},"encode.hover.singleLine":{"desc":"<p>是否单行展示</p>\n"},"encode.hover.maxHeight":{"desc":"<p>最大高度</p>\n"},"encode.hover.maxWidth":{"desc":"<p>最大宽度</p>\n"},"encode.hover.textAlign":{"desc":"<p>文字的对齐方式，支持配置：</p>\n<ul>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;center&#39;</li>\n</ul>\n"},"encode.hover.textBaseline":{"desc":"<p>文字的竖直对齐线，支持配置：</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;middle&#39;</li>\n<li>&#39;bottom&#39;</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"encode.hover.x":{"desc":"<p>图元的 x 坐标</p>\n"},"encode.hover.y":{"desc":"<p>图元 y 坐标</p>\n"},"encode.hover.z":{"desc":"<p>图元 z 坐标，仅适用于 3D 图元</p>\n"},"encode.hover.opacity":{"desc":"<p>图元渲染的不透明度</p>\n"},"encode.hover.fill":{"desc":"<p>图元的填充颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"encode.hover.fillOpacity":{"desc":"<p>图元填充的不透明度</p>\n"},"encode.hover.stroke":{"desc":"<p>图元的描边颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"encode.hover.strokeOpacity":{"desc":"<p>图元描边的不透明度</p>\n"},"encode.hover.lineWidth":{"desc":"<p>图元描边的线宽</p>\n"},"encode.hover.lineDash":{"desc":"<p>类型为： number[]\n图元描边的线段模式</p>\n"},"encode.hover.lineDashOffset":{"desc":"<p>图元描边线段模式的偏移</p>\n"},"encode.hover.lineCap":{"desc":"<p>图元描边的线端形状，配置可选项如下：</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"encode.hover.lineJoin":{"desc":"<p>图元描边的连线方式，配置可选项如下：</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"encode.hover.miterLimit":{"desc":"<p>当 <code class=\"codespan\">lineJoin</code> 类型是 miter 时，miter 效果生效的限制值</p>\n"},"encode.hover.strokeBoundsBuffer":{"desc":"<p>图元描边的 boundsBuffer，用于控制 bounds 的 buffer</p>\n"},"encode.hover.outerBorder":{"desc":"<p>外描边</p>\n"},"encode.hover.innerBorder":{"desc":"<p>内描边</p>\n"},"encode.hover.shadowBlur":{"desc":"<p>图元阴影的虚化半径大小</p>\n"},"encode.hover.shadowColor":{"desc":"<p>图元的阴影颜色。支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n"},"encode.hover.shadowOffsetX":{"desc":"<p>图元阴影的 x 偏移</p>\n"},"encode.hover.shadowOffsetY":{"desc":"<p>图元阴影的 y 偏移</p>\n"},"encode.hover.dx":{"desc":"<p>图元在 x 方向上的偏移</p>\n"},"encode.hover.dy":{"desc":"<p>图元在 y 方向上的偏移</p>\n"},"encode.hover.dz":{"desc":"<p>图元在 z 方向上的偏移</p>\n"},"encode.hover.scrollX":{"desc":"<p>图元在 X 方向上的滚动偏移量</p>\n"},"encode.hover.scrollY":{"desc":"<p>图元在 y 方向上的滚动偏移量</p>\n"},"encode.hover.scaleX":{"desc":"<p>图元在 x 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"encode.hover.scaleY":{"desc":"<p>图元在 y 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"encode.hover.scaleZ":{"desc":"<p>图元在 z 方向上的缩放比例，默认无缩放，也就是相当于值为 1</p>\n"},"encode.hover.angle":{"desc":"<p>图元在 x-y 平面 旋转的角度，在 3d 模式下，对应了绕 z 轴的转角</p>\n"},"encode.hover.alpha":{"desc":"<p>3d 模式下绕 y 轴的转角</p>\n"},"encode.hover.beta":{"desc":"<p>3d 模式下绕 x 轴的转角</p>\n"},"encode.hover.background":{"desc":"<p>图元背景颜色，或者背景图片；</p>\n<p>当设置背景颜色的时候，支持使用 <code class=\"codespan\">rgb(255,255,255)</code>，<code class=\"codespan\">rgba(255,255,255,1)</code>，<code class=\"codespan\">#fff</code> 等方式设置为纯色，也支持设置为渐变色填充。</p>\n<p>渐变色配置。可以在图元样式的 <code class=\"codespan\">fill</code> 和 <code class=\"codespan\">stroke</code> 等支持配置颜色的属性上配置渐变色，目前支持三种渐变配置：</p>\n<ul>\n<li>线性渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 线性渐变，前四个参数分别是 x0, y0, x1, y1, 范围从 0 - 1，相当于在图形包围盒中的百分比\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // 100% 处的颜色\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>径向渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 径向渐变，前五个参数分别是 x0, y0, r0, x1, y1, r1，其中 r0 r1 代表半径，取值同线性渐变\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // 0% 处的颜色\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // 100% 处的颜色\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>锥形渐变</li>\n</ul>\n<pre><code class=\"lang-ts\">// 锥形渐变，startAngle 代表起始弧度，endAngle 代表结束弧度，x, y 为坐标，取值范围 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // 0% 处的颜色\n    { offset: 0.2, color: &#39;blue&#39; },   // 20% 处的颜色\n    { offset: 0.4, color: &#39;orange&#39; }, // 40% 处的颜色\n    { offset: 0.6, color: &#39;pink&#39; },   // 60% 处的颜色\n    { offset: 0.8, color: &#39;green&#39; },  // 80% 处的颜色\n    { offset: 1, color: &#39;purple&#39; }    // 100% 处的颜色\n  ],\n}\n</code></pre>\n<p>当设置图片的时候：</p>\n<p>图片，支持多种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 图片地址</li>\n<li><code class=\"codespan\">HTMLImageElement</code> 图片对应的<code class=\"codespan\">image</code>标签</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code> 图片对应的<code class=\"codespan\">canvas</code>标签</li>\n</ul>\n"},"encode.hover.backgroundMode":{"desc":"<p>图元背景的填充模式，与具体图元有关</p>\n"},"encode.hover.texture":{"desc":"<p>图元纹理</p>\n"},"encode.hover.textureColor":{"desc":"<p>图元纹理颜色</p>\n"},"encode.hover.textureSize":{"desc":"<p>图元纹理大小</p>\n"},"encode.hover.texturePadding":{"desc":"<p>图元纹理间隙</p>\n"},"encode.hover.blur":{"desc":"<p>图元边缘模糊</p>\n"},"encode.hover.cursor":{"desc":"<p>图元鼠标样式，同<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM 样式</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;;</li>\n</ul>\n"},"animationState":{"desc":"<p>类型：<code class=\"codespan\">MarkFunctionType</code>\n是否必传： 否\nanimation attributes</p>\n"},"animation":{"desc":"<p>支持设置各种状态对应的动画，数据驱动的动画状态有三种：</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>交互触发的状态变更，通过统一的交互动画进行配置，配置的 key 为 <code class=\"codespan\">state</code></p>\n"},"animation.type":{"desc":"<p>动画执行类型，指定特定的内置动画执行效果</p>\n<p>通用的内置动画类型包括：</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: 渐入渐出动画</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: 缩放动画</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: 移入移出动画</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: 旋转动画</li>\n<li><code class=\"codespan\">update</code>: 更新动画</li>\n</ul>\n"},"animation.channel":{"desc":"<p>动画执行前后的视觉通道，与 <code class=\"codespan\">type</code> 配置冲突</p>\n"},"animation.custom":{"desc":"<p>自定义动画，如果设定了自定义动画配置则会替换默认的视觉通道插值逻辑</p>\n"},"animation.customParameters":{"desc":"<p>自定义动画参数</p>\n"},"animation.easing":{"desc":"<p>动画缓动，默认为 <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"animation.delay":{"desc":"<p>动画执行的延迟时间，默认为 0</p>\n"},"animation.duration":{"desc":"<p>动画执行时长，默认为 1000ms</p>\n"},"animation.oneByOne":{"desc":"<p>动画依次执行的延迟时长，如果配置为 <code class=\"codespan\">true</code> 则会在上一个元素动画执行结束后执行下一个元素的动画，默认为 <code class=\"codespan\">false</code></p>\n"},"animation.startTime":{"desc":"<p>动画执行的初始时间，这一初始时间不会在循环动画中被重复应用，默认为 0</p>\n"},"animation.totalTime":{"desc":"<p>动画执行的最大时间，如果动画执行到达设定时间将会被终止</p>\n"},"animation.loop":{"desc":"<p>动画循环次数，如果配置为 <code class=\"codespan\">true</code> 则会无限循环</p>\n"},"animation.options":{"desc":"<p>特定动画类型执行时设定的额外参数</p>\n"},"animation.controlOptions":{"desc":"<p>动画执行逻辑的控制参数：</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: 当动画状态变更时是否立即终止自身动画</li>\n<li><code class=\"codespan\">immediatelyApply</code>: 是否立即应用动画初始的视觉通道</li>\n</ul>\n"},"zIndex":{"desc":"<p>设置<code class=\"codespan\">mark</code>图元对应的容器图形(group)的 zIndex</p>\n"},"interactive":{"desc":"<p>类型：<code class=\"codespan\">boolean</code>\n是否必传： 否</p>\n"},"context":{"desc":"<p>设置图元的上下文参数</p>\n"},"setCustomizedShape":{"desc":"<p>设置自定义形状的回调函数，对应的 ts 类型定位如下：</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>其中<code class=\"codespan\">ICustomPath2D</code> 为 VRender 提供的绘制自定义的路径一个工具类</p>\n"},"support3d":{"desc":"<p>当画布设置了 3d 视角的时候，是否支持 3d 模式</p>\n"},"group":{"desc":"<p>设置父图元，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 父图元对应的 id</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> 父图元对应的语法元素，一般用于 API 调用场景</li>\n</ul>\n<p>如果不设置，会默认挂在到画布的根节点下面</p>\n"},"from":{"desc":"<p>ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>通过<code class=\"codespan\">data</code> 属性值，申明图元依赖的数据</p>\n"},"key":{"desc":"<p>设置图元数据元素的唯一标志符，用于计算图形元素的数据状态，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"sort":{"desc":"<p>对图元中的所有图形元素进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"groupBy":{"desc":"<p>设置分组的属性，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>也就是说，支持两种类型的格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置分组<code class=\"codespan\">key</code>对应的字段</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析分组<code class=\"codespan\">key</code>的回调函数</li>\n</ul>\n"},"groupSort":{"desc":"<p>对图元中的分组进行排序，设置对应的排序回调函数：</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"coordinate":{"desc":"<p>设置该图元关联的坐标系对应的 id 或者坐标系对应的图形元素</p>\n"},"state":{"desc":"<p>设置当前图元所有图形元素的状态值，支持三种格式：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 设置图形的状态，比如说:<code class=\"codespan\">{ state: &#39;selected&#39;}</code> 就是给所有的图形设置状态为<code class=\"codespan\">&#39;selected&#39;</code>，通常这种情况，<code class=\"codespan\">encode</code> 中也会设置<code class=\"codespan\">&#39;selected&#39;</code>状态对应的图形通道映射</li>\n<li><code class=\"codespan\">string[]</code> 给图形设置多个状态，可以配置<code class=\"codespan\">stateSort</code>来影响对应状态执行图形通道映射的顺序</li>\n<li><code class=\"codespan\">function</code> 自定义设置解析状态值的回调函数，返回参数为<code class=\"codespan\">string | string[]</code>，对应的 ts 类型定义为：</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"stateSort":{"desc":"<p>设置当前图元所有图形元素的状态值的排序函数，会影响状态对应的图形通道映射的顺序，最先执行的状态可能被后续的状态覆盖图形通道映射结果，对应的 ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"transform":{"desc":"<p>设置图元对应的变换，所有的数据变换都可以配置在图元上，用于对图元的<code class=\"codespan\">join data</code> 执行变换；\n另外一种类型的变换就是对图形元素执行的变换，比如说<code class=\"codespan\">dodge</code>；\n通用的类型定义如下：</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>每中变换支持的参数不同</p>\n"},"layout":{"desc":"<p>设置图元的布局参数，图元在参与布局的时候，存在两种角色：</p>\n<ul>\n<li>&#39;container&#39; 容器图元，一般是<code class=\"codespan\">group</code>图元</li>\n<li>&#39;item&#39; 布局子元素，作为容器图元的子节点</li>\n</ul>\n<p>注意，我们仅支持一层布局，如果是多层嵌套布局，建议使用自定义的布局方案进行实现；</p>\n<p>现在支持两种内容的布局：<code class=\"codespan\">grid</code> 布局 和 <code class=\"codespan\">relative</code>布局，相关类型定义如下</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>如果想要设置自定义的布局方案，<code class=\"codespan\">layout</code>也支持直接设置回调函数，回调函数的定义如下：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"layout.display":{"desc":"<p>容器图元设置布局的类型，支持两种配置：</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> 相对布局</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> 网格布局</li>\n</ul>\n"},"layout.callback":{"desc":"<p>自定义该图元的回调函数，ts 类型定义为：</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"layout.skipBeforeLayouted":{"desc":"<p>在布局完成前，跳过执行阶段</p>\n"},"layout.updateViewSignals":{"desc":"<p>是否更新默认的视图信号，也就是：<code class=\"codespan\">padding</code>、<code class=\"codespan\">viewWidth</code> 和 <code class=\"codespan\">viewHeight</code></p>\n<p>只能在设置了<code class=\"codespan\">{ layout: { display: &#39;relative&#39;} }</code>的容器图元上设置该属性</p>\n"},"layout.maxChildWidth":{"desc":"<p>相对布局的父图元，设置子图元的最大宽度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的宽度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"layout.maxChildHeight":{"desc":"<p>相对布局的父图元，设置子图元的最大高度，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> 百分比字符串，如：<code class=\"codespan\">&#39;20%&#39;</code>，分母对应的是容器图元的包围盒的高度</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> 单位为<code class=\"codespan\">px</code>，设置绝对宽度</li>\n</ul>\n"},"layout.position":{"desc":"<p>设置相对布局的子图元的位置，支持的配置有：</p>\n<ul>\n<li>&#39;top&#39; 相对于父图元的顶部</li>\n<li>&#39;bottom&#39; 相对于父图元的底部</li>\n<li>&#39;left&#39; 相对于父图元的左侧</li>\n<li>&#39;right&#39; 相对于父图元的右侧</li>\n<li>&#39;content&#39; 相对于父图元的中心，也就是内容区域</li>\n<li>&#39;auto&#39; 图元设置了坐标系的时候，根据关联的<code class=\"codespan\">scale</code>，自定计算相对于父图元的位置</li>\n</ul>\n"},"layout.padding":{"desc":"<p>子图元内边距，单位 px，默认各方向内边距为 0，接受数值、数值数组以及对象设置。</p>\n<p>使用示例：</p>\n<pre><code class=\"lang-ts\">// 数值类型，设置内边距为 5\npadding: 5;\n// 数值数组，设置上下的内边距为 5，左右的内边距为 10，用法同 CSS 盒模型\npadding: [5, 10];\n// 数值数组，分别设置四个方向的内边距\npadding: [\n  5, // 上\n  10, // 右\n  5, // 下\n  10 // 左\n];\n// 对象类型\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"layout.gridTemplateRows":{"desc":"<p>网格布局的父图元设置行的高度</p>\n"},"layout.gridTemplateColumns":{"desc":"<p>网格布局的父图元设置列的宽度</p>\n"},"layout.gridRowGap":{"desc":"<p>网格布局的父图元设置行行距</p>\n"},"layout.gridColumnGap":{"desc":"<p>网格布局的父图元设置列间距</p>\n"},"layout.gridRowStart":{"desc":"<p>网格布局的子图元设置行开始的位置</p>\n"},"layout.gridRowEnd":{"desc":"<p>网格布局的子图元设置行结束的位置</p>\n"},"layout.gridColumnStart":{"desc":"<p>网格布局的子图元设置列开始的位置</p>\n"},"layout.gridColumnEnd":{"desc":"<p>网格布局的子图元设置列结束的位置</p>\n"},"large":{"desc":"<p>是否开启大数据渲染模式</p>\n"},"largeThreshold":{"desc":"<p>开启大数据渲染优化的阀值，对应的是 data 的长度</p>\n"},"progressiveStep":{"desc":"<p>开启分片渲染的步长，对应的是分片的数据长度</p>\n"},"progressiveThreshold":{"desc":"<p>开启分片渲染的阀值，对应的是单系列 data 的长度</p>\n"},"morph":{"desc":"<p>是否对当前图元开启全局的过渡形变动画</p>\n"},"morphKey":{"desc":"<p>用于匹配全局过渡形变动画的图元，具有相对的<code class=\"codespan\">morphKey</code>的图元，会进行形变动画</p>\n"},"morphElementKey":{"desc":"<p>对于匹配上的前后图元，通过该配置，进行图形元素的匹配；如果不申明，我们默认会读取<code class=\"codespan\">key</code>配置，用于匹配图形元素，进行形变动画；\n默认支持一对一、一对多、多对一的图形形变动画</p>\n"}}