{"ordinal.type":{"desc":"<p>设置刻度类型为 <code class=\"codespan\">ordinal</code></p>\n<!-- 语法元素 data, DataSpec -->\n"},"ordinal.domain":{"desc":"<p>设置<code class=\"codespan\">scale</code>的定义域，支持两种格式的设置：</p>\n<ul>\n<li>对象类型，具体类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  data: string | IData;\n  field: string | string[];\n  sort?: (datumA: any, datumB: any) =&gt; number\n}\n</code></pre>\n<ul>\n<li>自定义函数类型，具体的类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">(scale: IBaseScale, parameters: any) =&gt; any;\n</code></pre>\n<!-- 语法元素 data, DataSpec -->\n"},"ordinal.range":{"desc":"<p>设置<code class=\"codespan\">scale</code>的值域，可以是坐标，也可以颜色，或者其他的内容</p>\n<p>支持的格式有三种：</p>\n<ul>\n<li>对象类型，通过解析某个数据，来设置<code class=\"codespan\">range</code>的值，具体类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  data: string | IData;\n  field: string | string[];\n  sort?: (datumA: any, datumB: any) =&gt; number\n}\n</code></pre>\n<ul>\n<li>自定义函数类型，具体的类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">(scale: IBaseScale, parameters: any) =&gt; any;\n</code></pre>\n<ul>\n<li>对象类型，通过和坐标系的某个轴进行绑定，来设置<code class=\"codespan\">range</code>的值，这种情况，<code class=\"codespan\">range</code>对应的是坐标系某个轴的坐标范围，具体的配置如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  coordinate: string;\n  dimension: &#39;x&#39; | &#39;y&#39;;\n  isSubshaft?: boolean;\n  reversed?: boolean\n}\n</code></pre>\n"},"band":{"desc":"<p><code class=\"codespan\">band</code>刻度主要用于将离散的数据，映射到连续的区间</p>\n"},"band.type":{"desc":"<p>设置刻度类型为 <code class=\"codespan\">band</code></p>\n<!-- 语法元素 data, DataSpec -->\n"},"band.domain":{"desc":"<p>设置<code class=\"codespan\">scale</code>的定义域，支持两种格式的设置：</p>\n<ul>\n<li>对象类型，具体类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  data: string | IData;\n  field: string | string[];\n  sort?: (datumA: any, datumB: any) =&gt; number\n}\n</code></pre>\n<ul>\n<li>自定义函数类型，具体的类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">(scale: IBaseScale, parameters: any) =&gt; any;\n</code></pre>\n<!-- 语法元素 data, DataSpec -->\n"},"band.range":{"desc":"<p>设置<code class=\"codespan\">scale</code>的值域，可以是坐标，也可以颜色，或者其他的内容</p>\n<p>支持的格式有三种：</p>\n<ul>\n<li>对象类型，通过解析某个数据，来设置<code class=\"codespan\">range</code>的值，具体类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  data: string | IData;\n  field: string | string[];\n  sort?: (datumA: any, datumB: any) =&gt; number\n}\n</code></pre>\n<ul>\n<li>自定义函数类型，具体的类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">(scale: IBaseScale, parameters: any) =&gt; any;\n</code></pre>\n<ul>\n<li>对象类型，通过和坐标系的某个轴进行绑定，来设置<code class=\"codespan\">range</code>的值，这种情况，<code class=\"codespan\">range</code>对应的是坐标系某个轴的坐标范围，具体的配置如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  coordinate: string;\n  dimension: &#39;x&#39; | &#39;y&#39;;\n  isSubshaft?: boolean;\n  reversed?: boolean\n}\n</code></pre>\n"},"band.round":{"desc":"<p>类型为: <code class=\"codespan\">ScaleFunctionType&lt;boolean&gt;</code>\n对分段的坐标，是否自动取整，支持多种值：</p>\n<ul>\n<li><code class=\"codespan\">boolean</code></li>\n<li><code class=\"codespan\">function</code>，接受参数<code class=\"codespan\">scale</code>和<code class=\"codespan\">params</code>，返回一个<code class=\"codespan\">boolean</code>值</li>\n</ul>\n"},"band.padding":{"desc":"<p>将<code class=\"codespan\">paddingInner</code>和<code class=\"codespan\">paddingOuter</code>的值统一设置为一个值</p>\n"},"band.paddingInner":{"desc":"<p>分组之间的 padding 占比</p>\n"},"band.paddingOuter":{"desc":"<p>外部 padding 占比</p>\n"},"band.align":{"desc":"<p>对齐的点，默认居中对齐</p>\n"},"point.type":{"desc":"<p>设置刻度类型为 <code class=\"codespan\">point</code></p>\n<!-- 语法元素 data, DataSpec -->\n"},"point.domain":{"desc":"<p>设置<code class=\"codespan\">scale</code>的定义域，支持两种格式的设置：</p>\n<ul>\n<li>对象类型，具体类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  data: string | IData;\n  field: string | string[];\n  sort?: (datumA: any, datumB: any) =&gt; number\n}\n</code></pre>\n<ul>\n<li>自定义函数类型，具体的类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">(scale: IBaseScale, parameters: any) =&gt; any;\n</code></pre>\n<!-- 语法元素 data, DataSpec -->\n"},"point.range":{"desc":"<p>设置<code class=\"codespan\">scale</code>的值域，可以是坐标，也可以颜色，或者其他的内容</p>\n<p>支持的格式有三种：</p>\n<ul>\n<li>对象类型，通过解析某个数据，来设置<code class=\"codespan\">range</code>的值，具体类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  data: string | IData;\n  field: string | string[];\n  sort?: (datumA: any, datumB: any) =&gt; number\n}\n</code></pre>\n<ul>\n<li>自定义函数类型，具体的类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">(scale: IBaseScale, parameters: any) =&gt; any;\n</code></pre>\n<ul>\n<li>对象类型，通过和坐标系的某个轴进行绑定，来设置<code class=\"codespan\">range</code>的值，这种情况，<code class=\"codespan\">range</code>对应的是坐标系某个轴的坐标范围，具体的配置如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  coordinate: string;\n  dimension: &#39;x&#39; | &#39;y&#39;;\n  isSubshaft?: boolean;\n  reversed?: boolean\n}\n</code></pre>\n"},"linear.type":{"desc":"<p>设置刻度类型为 <code class=\"codespan\">linear</code></p>\n<!-- 语法元素 data, DataSpec -->\n"},"linear.domain":{"desc":"<p>设置<code class=\"codespan\">scale</code>的定义域，支持两种格式的设置：</p>\n<ul>\n<li>对象类型，具体类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  data: string | IData;\n  field: string | string[];\n  sort?: (datumA: any, datumB: any) =&gt; number\n}\n</code></pre>\n<ul>\n<li>自定义函数类型，具体的类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">(scale: IBaseScale, parameters: any) =&gt; any;\n</code></pre>\n<!-- 语法元素 data, DataSpec -->\n"},"linear.range":{"desc":"<p>设置<code class=\"codespan\">scale</code>的值域，可以是坐标，也可以颜色，或者其他的内容</p>\n<p>支持的格式有三种：</p>\n<ul>\n<li>对象类型，通过解析某个数据，来设置<code class=\"codespan\">range</code>的值，具体类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  data: string | IData;\n  field: string | string[];\n  sort?: (datumA: any, datumB: any) =&gt; number\n}\n</code></pre>\n<ul>\n<li>自定义函数类型，具体的类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">(scale: IBaseScale, parameters: any) =&gt; any;\n</code></pre>\n<ul>\n<li>对象类型，通过和坐标系的某个轴进行绑定，来设置<code class=\"codespan\">range</code>的值，这种情况，<code class=\"codespan\">range</code>对应的是坐标系某个轴的坐标范围，具体的配置如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  coordinate: string;\n  dimension: &#39;x&#39; | &#39;y&#39;;\n  isSubshaft?: boolean;\n  reversed?: boolean\n}\n</code></pre>\n<!-- 语法元素 data, DataSpec -->\n"},"linear.nice":{"desc":"<p>对于 scale，计算出优化后的刻度，根据刻度值，来更新<code class=\"codespan\">domain</code>，支持多种值：</p>\n<ul>\n<li><code class=\"codespan\">boolean</code>：<code class=\"codespan\">true</code>表示自动计算，<code class=\"codespan\">false</code>表示不进行优化</li>\n<li><code class=\"codespan\">number</code>：表示优化后的刻度个数</li>\n</ul>\n<!-- 语法元素 data, DataSpec -->\n"},"linear.niceMin":{"desc":"<p>只对<code class=\"codespan\">domain</code>的最小值进行优化，最大值不变，支持多种值：</p>\n<ul>\n<li><code class=\"codespan\">boolean</code>：<code class=\"codespan\">true</code>表示自动计算，<code class=\"codespan\">false</code>表示不进行优化</li>\n<li><code class=\"codespan\">number</code>：表示优化后的刻度个数</li>\n</ul>\n"},"linear.niceMax":{"desc":"<p>只对<code class=\"codespan\">domain</code>的最大值进行优化，最小值不变，支持多种值：</p>\n<ul>\n<li><code class=\"codespan\">boolean</code>：<code class=\"codespan\">true</code>表示自动计算，<code class=\"codespan\">false</code>表示不进行优化</li>\n<li><code class=\"codespan\">number</code>：表示优化后的刻度个数</li>\n</ul>\n<!-- 语法元素 data, DataSpec -->\n"},"linear.zero":{"desc":"<p>对于 scale，根据数据计算出一个原始的值域，也就是<code class=\"codespan\">domain</code>，然后在如下两种情况下，更新<code class=\"codespan\">domain</code>的值：</p>\n<ul>\n<li>如果最小值大于<code class=\"codespan\">0</code>，将<code class=\"codespan\">domain</code>的最小值设置为<code class=\"codespan\">0</code></li>\n<li>如果最大值小于<code class=\"codespan\">0</code>，将<code class=\"codespan\">domain</code>的最大值设置为<code class=\"codespan\">0</code></li>\n</ul>\n<p>当用户非常关心<code class=\"codespan\">0</code>这个基准值的时候，可以设置为<code class=\"codespan\">true</code>，默认为<code class=\"codespan\">false</code>。</p>\n"},"linear.min":{"desc":"<p>根据数据计算出一个原始的值域，也就是<code class=\"codespan\">domain</code>，如果最小值大于用户配置的<code class=\"codespan\">min</code>，将<code class=\"codespan\">domain</code>的最小值设置为<code class=\"codespan\">min</code></p>\n"},"linear.max":{"desc":"<p>根据数据计算出一个原始的值域，也就是<code class=\"codespan\">domain</code>，如果最大值大于用户配置的<code class=\"codespan\">max</code>，将<code class=\"codespan\">domain</code>的最大值设置为<code class=\"codespan\">max</code></p>\n"},"linear.roundRange":{"desc":"<p>是否对值域自动取整</p>\n"},"linear.config":{"desc":"<p><code class=\"codespan\">scale</code>的配置项</p>\n"},"linear.config.clamp":{"desc":"<p>clamp 的值域</p>\n"},"linear.config.interpolate":{"desc":"<p>差值函数</p>\n"},"log.type":{"desc":"<p>设置刻度类型为 <code class=\"codespan\">log</code></p>\n"},"log.log":{"desc":"<p><code class=\"codespan\">log</code>函数的底数，注意一定要是大于 0 的正数，默认值为 10；</p>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">number</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(scale: IBaseScale, parameters: any) =&gt; number;\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 scale 语法元素依赖的其他语法元素</p>\n<!-- 语法元素 data, DataSpec -->\n"},"log.domain":{"desc":"<p>设置<code class=\"codespan\">scale</code>的定义域，支持两种格式的设置：</p>\n<ul>\n<li>对象类型，具体类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  data: string | IData;\n  field: string | string[];\n  sort?: (datumA: any, datumB: any) =&gt; number\n}\n</code></pre>\n<ul>\n<li>自定义函数类型，具体的类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">(scale: IBaseScale, parameters: any) =&gt; any;\n</code></pre>\n<!-- 语法元素 data, DataSpec -->\n"},"log.range":{"desc":"<p>设置<code class=\"codespan\">scale</code>的值域，可以是坐标，也可以颜色，或者其他的内容</p>\n<p>支持的格式有三种：</p>\n<ul>\n<li>对象类型，通过解析某个数据，来设置<code class=\"codespan\">range</code>的值，具体类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  data: string | IData;\n  field: string | string[];\n  sort?: (datumA: any, datumB: any) =&gt; number\n}\n</code></pre>\n<ul>\n<li>自定义函数类型，具体的类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">(scale: IBaseScale, parameters: any) =&gt; any;\n</code></pre>\n<ul>\n<li>对象类型，通过和坐标系的某个轴进行绑定，来设置<code class=\"codespan\">range</code>的值，这种情况，<code class=\"codespan\">range</code>对应的是坐标系某个轴的坐标范围，具体的配置如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  coordinate: string;\n  dimension: &#39;x&#39; | &#39;y&#39;;\n  isSubshaft?: boolean;\n  reversed?: boolean\n}\n</code></pre>\n<!-- 语法元素 data, DataSpec -->\n"},"log.nice":{"desc":"<p>对于 scale，计算出优化后的刻度，根据刻度值，来更新<code class=\"codespan\">domain</code>，支持多种值：</p>\n<ul>\n<li><code class=\"codespan\">boolean</code>：<code class=\"codespan\">true</code>表示自动计算，<code class=\"codespan\">false</code>表示不进行优化</li>\n<li><code class=\"codespan\">number</code>：表示优化后的刻度个数</li>\n</ul>\n<!-- 语法元素 data, DataSpec -->\n"},"log.zero":{"desc":"<p>对于 scale，根据数据计算出一个原始的值域，也就是<code class=\"codespan\">domain</code>，然后在如下两种情况下，更新<code class=\"codespan\">domain</code>的值：</p>\n<ul>\n<li>如果最小值大于<code class=\"codespan\">0</code>，将<code class=\"codespan\">domain</code>的最小值设置为<code class=\"codespan\">0</code></li>\n<li>如果最大值小于<code class=\"codespan\">0</code>，将<code class=\"codespan\">domain</code>的最大值设置为<code class=\"codespan\">0</code></li>\n</ul>\n<p>当用户非常关心<code class=\"codespan\">0</code>这个基准值的时候，可以设置为<code class=\"codespan\">true</code>，默认为<code class=\"codespan\">false</code>。</p>\n"},"log.min":{"desc":"<p>根据数据计算出一个原始的值域，也就是<code class=\"codespan\">domain</code>，如果最小值大于用户配置的<code class=\"codespan\">min</code>，将<code class=\"codespan\">domain</code>的最小值设置为<code class=\"codespan\">min</code></p>\n"},"log.max":{"desc":"<p>根据数据计算出一个原始的值域，也就是<code class=\"codespan\">domain</code>，如果最大值大于用户配置的<code class=\"codespan\">max</code>，将<code class=\"codespan\">domain</code>的最大值设置为<code class=\"codespan\">max</code></p>\n"},"log.roundRange":{"desc":"<p>是否对值域自动取整</p>\n"},"log.config":{"desc":"<p><code class=\"codespan\">scale</code>的配置项</p>\n"},"log.config.clamp":{"desc":"<p>clamp 的值域</p>\n"},"log.config.interpolate":{"desc":"<p>差值函数</p>\n"},"pow.type":{"desc":"<p>设置刻度类型为 <code class=\"codespan\">pow</code></p>\n"},"pow.exponent":{"desc":"<p>设置指数函数的指数</p>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">number</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(scale: IBaseScale, parameters: any) =&gt; number;\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 scale 语法元素依赖的其他语法元素</p>\n<!-- 语法元素 data, DataSpec -->\n"},"pow.domain":{"desc":"<p>设置<code class=\"codespan\">scale</code>的定义域，支持两种格式的设置：</p>\n<ul>\n<li>对象类型，具体类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  data: string | IData;\n  field: string | string[];\n  sort?: (datumA: any, datumB: any) =&gt; number\n}\n</code></pre>\n<ul>\n<li>自定义函数类型，具体的类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">(scale: IBaseScale, parameters: any) =&gt; any;\n</code></pre>\n<!-- 语法元素 data, DataSpec -->\n"},"pow.range":{"desc":"<p>设置<code class=\"codespan\">scale</code>的值域，可以是坐标，也可以颜色，或者其他的内容</p>\n<p>支持的格式有三种：</p>\n<ul>\n<li>对象类型，通过解析某个数据，来设置<code class=\"codespan\">range</code>的值，具体类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  data: string | IData;\n  field: string | string[];\n  sort?: (datumA: any, datumB: any) =&gt; number\n}\n</code></pre>\n<ul>\n<li>自定义函数类型，具体的类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">(scale: IBaseScale, parameters: any) =&gt; any;\n</code></pre>\n<ul>\n<li>对象类型，通过和坐标系的某个轴进行绑定，来设置<code class=\"codespan\">range</code>的值，这种情况，<code class=\"codespan\">range</code>对应的是坐标系某个轴的坐标范围，具体的配置如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  coordinate: string;\n  dimension: &#39;x&#39; | &#39;y&#39;;\n  isSubshaft?: boolean;\n  reversed?: boolean\n}\n</code></pre>\n<!-- 语法元素 data, DataSpec -->\n"},"pow.nice":{"desc":"<p>对于 scale，计算出优化后的刻度，根据刻度值，来更新<code class=\"codespan\">domain</code>，支持多种值：</p>\n<ul>\n<li><code class=\"codespan\">boolean</code>：<code class=\"codespan\">true</code>表示自动计算，<code class=\"codespan\">false</code>表示不进行优化</li>\n<li><code class=\"codespan\">number</code>：表示优化后的刻度个数</li>\n</ul>\n<!-- 语法元素 data, DataSpec -->\n"},"pow.niceMin":{"desc":"<p>只对<code class=\"codespan\">domain</code>的最小值进行优化，最大值不变，支持多种值：</p>\n<ul>\n<li><code class=\"codespan\">boolean</code>：<code class=\"codespan\">true</code>表示自动计算，<code class=\"codespan\">false</code>表示不进行优化</li>\n<li><code class=\"codespan\">number</code>：表示优化后的刻度个数</li>\n</ul>\n"},"pow.niceMax":{"desc":"<p>只对<code class=\"codespan\">domain</code>的最大值进行优化，最小值不变，支持多种值：</p>\n<ul>\n<li><code class=\"codespan\">boolean</code>：<code class=\"codespan\">true</code>表示自动计算，<code class=\"codespan\">false</code>表示不进行优化</li>\n<li><code class=\"codespan\">number</code>：表示优化后的刻度个数</li>\n</ul>\n<!-- 语法元素 data, DataSpec -->\n"},"pow.zero":{"desc":"<p>对于 scale，根据数据计算出一个原始的值域，也就是<code class=\"codespan\">domain</code>，然后在如下两种情况下，更新<code class=\"codespan\">domain</code>的值：</p>\n<ul>\n<li>如果最小值大于<code class=\"codespan\">0</code>，将<code class=\"codespan\">domain</code>的最小值设置为<code class=\"codespan\">0</code></li>\n<li>如果最大值小于<code class=\"codespan\">0</code>，将<code class=\"codespan\">domain</code>的最大值设置为<code class=\"codespan\">0</code></li>\n</ul>\n<p>当用户非常关心<code class=\"codespan\">0</code>这个基准值的时候，可以设置为<code class=\"codespan\">true</code>，默认为<code class=\"codespan\">false</code>。</p>\n"},"pow.min":{"desc":"<p>根据数据计算出一个原始的值域，也就是<code class=\"codespan\">domain</code>，如果最小值大于用户配置的<code class=\"codespan\">min</code>，将<code class=\"codespan\">domain</code>的最小值设置为<code class=\"codespan\">min</code></p>\n"},"pow.max":{"desc":"<p>根据数据计算出一个原始的值域，也就是<code class=\"codespan\">domain</code>，如果最大值大于用户配置的<code class=\"codespan\">max</code>，将<code class=\"codespan\">domain</code>的最大值设置为<code class=\"codespan\">max</code></p>\n"},"pow.roundRange":{"desc":"<p>是否对值域自动取整</p>\n"},"pow.config":{"desc":"<p><code class=\"codespan\">scale</code>的配置项</p>\n"},"pow.config.clamp":{"desc":"<p>clamp 的值域</p>\n"},"pow.config.interpolate":{"desc":"<p>差值函数</p>\n"},"sqrt.type":{"desc":"<p>设置刻度类型为 <code class=\"codespan\">sqrt</code></p>\n<!-- 语法元素 data, DataSpec -->\n"},"sqrt.domain":{"desc":"<p>设置<code class=\"codespan\">scale</code>的定义域，支持两种格式的设置：</p>\n<ul>\n<li>对象类型，具体类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  data: string | IData;\n  field: string | string[];\n  sort?: (datumA: any, datumB: any) =&gt; number\n}\n</code></pre>\n<ul>\n<li>自定义函数类型，具体的类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">(scale: IBaseScale, parameters: any) =&gt; any;\n</code></pre>\n<!-- 语法元素 data, DataSpec -->\n"},"sqrt.range":{"desc":"<p>设置<code class=\"codespan\">scale</code>的值域，可以是坐标，也可以颜色，或者其他的内容</p>\n<p>支持的格式有三种：</p>\n<ul>\n<li>对象类型，通过解析某个数据，来设置<code class=\"codespan\">range</code>的值，具体类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  data: string | IData;\n  field: string | string[];\n  sort?: (datumA: any, datumB: any) =&gt; number\n}\n</code></pre>\n<ul>\n<li>自定义函数类型，具体的类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">(scale: IBaseScale, parameters: any) =&gt; any;\n</code></pre>\n<ul>\n<li>对象类型，通过和坐标系的某个轴进行绑定，来设置<code class=\"codespan\">range</code>的值，这种情况，<code class=\"codespan\">range</code>对应的是坐标系某个轴的坐标范围，具体的配置如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  coordinate: string;\n  dimension: &#39;x&#39; | &#39;y&#39;;\n  isSubshaft?: boolean;\n  reversed?: boolean\n}\n</code></pre>\n<!-- 语法元素 data, DataSpec -->\n"},"sqrt.nice":{"desc":"<p>对于 scale，计算出优化后的刻度，根据刻度值，来更新<code class=\"codespan\">domain</code>，支持多种值：</p>\n<ul>\n<li><code class=\"codespan\">boolean</code>：<code class=\"codespan\">true</code>表示自动计算，<code class=\"codespan\">false</code>表示不进行优化</li>\n<li><code class=\"codespan\">number</code>：表示优化后的刻度个数</li>\n</ul>\n<!-- 语法元素 data, DataSpec -->\n"},"sqrt.niceMin":{"desc":"<p>只对<code class=\"codespan\">domain</code>的最小值进行优化，最大值不变，支持多种值：</p>\n<ul>\n<li><code class=\"codespan\">boolean</code>：<code class=\"codespan\">true</code>表示自动计算，<code class=\"codespan\">false</code>表示不进行优化</li>\n<li><code class=\"codespan\">number</code>：表示优化后的刻度个数</li>\n</ul>\n"},"sqrt.niceMax":{"desc":"<p>只对<code class=\"codespan\">domain</code>的最大值进行优化，最小值不变，支持多种值：</p>\n<ul>\n<li><code class=\"codespan\">boolean</code>：<code class=\"codespan\">true</code>表示自动计算，<code class=\"codespan\">false</code>表示不进行优化</li>\n<li><code class=\"codespan\">number</code>：表示优化后的刻度个数</li>\n</ul>\n<!-- 语法元素 data, DataSpec -->\n"},"sqrt.zero":{"desc":"<p>对于 scale，根据数据计算出一个原始的值域，也就是<code class=\"codespan\">domain</code>，然后在如下两种情况下，更新<code class=\"codespan\">domain</code>的值：</p>\n<ul>\n<li>如果最小值大于<code class=\"codespan\">0</code>，将<code class=\"codespan\">domain</code>的最小值设置为<code class=\"codespan\">0</code></li>\n<li>如果最大值小于<code class=\"codespan\">0</code>，将<code class=\"codespan\">domain</code>的最大值设置为<code class=\"codespan\">0</code></li>\n</ul>\n<p>当用户非常关心<code class=\"codespan\">0</code>这个基准值的时候，可以设置为<code class=\"codespan\">true</code>，默认为<code class=\"codespan\">false</code>。</p>\n"},"sqrt.min":{"desc":"<p>根据数据计算出一个原始的值域，也就是<code class=\"codespan\">domain</code>，如果最小值大于用户配置的<code class=\"codespan\">min</code>，将<code class=\"codespan\">domain</code>的最小值设置为<code class=\"codespan\">min</code></p>\n"},"sqrt.max":{"desc":"<p>根据数据计算出一个原始的值域，也就是<code class=\"codespan\">domain</code>，如果最大值大于用户配置的<code class=\"codespan\">max</code>，将<code class=\"codespan\">domain</code>的最大值设置为<code class=\"codespan\">max</code></p>\n"},"sqrt.roundRange":{"desc":"<p>是否对值域自动取整</p>\n"},"sqrt.config":{"desc":"<p><code class=\"codespan\">scale</code>的配置项</p>\n"},"sqrt.config.clamp":{"desc":"<p>clamp 的值域</p>\n"},"sqrt.config.interpolate":{"desc":"<p>差值函数</p>\n"},"symlog.type":{"desc":"<p>设置刻度类型为 <code class=\"codespan\">symlog</code></p>\n"},"symlog.constant":{"desc":"<p>当数据小于 0 的时候，<code class=\"codespan\">scale()</code>结果的返回值设置为这个值</p>\n<p>支持两种格式的设置方式</p>\n<ul>\n<li><code class=\"codespan\">number</code> 类型</li>\n<li><code class=\"codespan\">function</code> 类型，通过自定义函数计算结果，函数的 ts 类型定义为：</li>\n</ul>\n<pre><code>(scale: IBaseScale, parameters: any) =&gt; number;\n</code></pre><p>其中 <code class=\"codespan\">parameters</code> 为该 scale 语法元素依赖的其他语法元素</p>\n<!-- 语法元素 data, DataSpec -->\n"},"symlog.domain":{"desc":"<p>设置<code class=\"codespan\">scale</code>的定义域，支持两种格式的设置：</p>\n<ul>\n<li>对象类型，具体类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  data: string | IData;\n  field: string | string[];\n  sort?: (datumA: any, datumB: any) =&gt; number\n}\n</code></pre>\n<ul>\n<li>自定义函数类型，具体的类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">(scale: IBaseScale, parameters: any) =&gt; any;\n</code></pre>\n<!-- 语法元素 data, DataSpec -->\n"},"symlog.range":{"desc":"<p>设置<code class=\"codespan\">scale</code>的值域，可以是坐标，也可以颜色，或者其他的内容</p>\n<p>支持的格式有三种：</p>\n<ul>\n<li>对象类型，通过解析某个数据，来设置<code class=\"codespan\">range</code>的值，具体类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  data: string | IData;\n  field: string | string[];\n  sort?: (datumA: any, datumB: any) =&gt; number\n}\n</code></pre>\n<ul>\n<li>自定义函数类型，具体的类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">(scale: IBaseScale, parameters: any) =&gt; any;\n</code></pre>\n<ul>\n<li>对象类型，通过和坐标系的某个轴进行绑定，来设置<code class=\"codespan\">range</code>的值，这种情况，<code class=\"codespan\">range</code>对应的是坐标系某个轴的坐标范围，具体的配置如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  coordinate: string;\n  dimension: &#39;x&#39; | &#39;y&#39;;\n  isSubshaft?: boolean;\n  reversed?: boolean\n}\n</code></pre>\n<!-- 语法元素 data, DataSpec -->\n"},"symlog.nice":{"desc":"<p>对于 scale，计算出优化后的刻度，根据刻度值，来更新<code class=\"codespan\">domain</code>，支持多种值：</p>\n<ul>\n<li><code class=\"codespan\">boolean</code>：<code class=\"codespan\">true</code>表示自动计算，<code class=\"codespan\">false</code>表示不进行优化</li>\n<li><code class=\"codespan\">number</code>：表示优化后的刻度个数</li>\n</ul>\n<!-- 语法元素 data, DataSpec -->\n"},"symlog.niceMin":{"desc":"<p>只对<code class=\"codespan\">domain</code>的最小值进行优化，最大值不变，支持多种值：</p>\n<ul>\n<li><code class=\"codespan\">boolean</code>：<code class=\"codespan\">true</code>表示自动计算，<code class=\"codespan\">false</code>表示不进行优化</li>\n<li><code class=\"codespan\">number</code>：表示优化后的刻度个数</li>\n</ul>\n"},"symlog.niceMax":{"desc":"<p>只对<code class=\"codespan\">domain</code>的最大值进行优化，最小值不变，支持多种值：</p>\n<ul>\n<li><code class=\"codespan\">boolean</code>：<code class=\"codespan\">true</code>表示自动计算，<code class=\"codespan\">false</code>表示不进行优化</li>\n<li><code class=\"codespan\">number</code>：表示优化后的刻度个数</li>\n</ul>\n<!-- 语法元素 data, DataSpec -->\n"},"symlog.zero":{"desc":"<p>对于 scale，根据数据计算出一个原始的值域，也就是<code class=\"codespan\">domain</code>，然后在如下两种情况下，更新<code class=\"codespan\">domain</code>的值：</p>\n<ul>\n<li>如果最小值大于<code class=\"codespan\">0</code>，将<code class=\"codespan\">domain</code>的最小值设置为<code class=\"codespan\">0</code></li>\n<li>如果最大值小于<code class=\"codespan\">0</code>，将<code class=\"codespan\">domain</code>的最大值设置为<code class=\"codespan\">0</code></li>\n</ul>\n<p>当用户非常关心<code class=\"codespan\">0</code>这个基准值的时候，可以设置为<code class=\"codespan\">true</code>，默认为<code class=\"codespan\">false</code>。</p>\n"},"symlog.min":{"desc":"<p>根据数据计算出一个原始的值域，也就是<code class=\"codespan\">domain</code>，如果最小值大于用户配置的<code class=\"codespan\">min</code>，将<code class=\"codespan\">domain</code>的最小值设置为<code class=\"codespan\">min</code></p>\n"},"symlog.max":{"desc":"<p>根据数据计算出一个原始的值域，也就是<code class=\"codespan\">domain</code>，如果最大值大于用户配置的<code class=\"codespan\">max</code>，将<code class=\"codespan\">domain</code>的最大值设置为<code class=\"codespan\">max</code></p>\n"},"symlog.roundRange":{"desc":"<p>是否对值域自动取整</p>\n"},"symlog.config":{"desc":"<p><code class=\"codespan\">scale</code>的配置项</p>\n"},"symlog.config.clamp":{"desc":"<p>clamp 的值域</p>\n"},"symlog.config.interpolate":{"desc":"<p>差值函数</p>\n"},"time.type":{"desc":"<p>设置刻度类型为 <code class=\"codespan\">time</code></p>\n<!-- 语法元素 data, DataSpec -->\n"},"time.domain":{"desc":"<p>设置<code class=\"codespan\">scale</code>的定义域，支持两种格式的设置：</p>\n<ul>\n<li>对象类型，具体类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  data: string | IData;\n  field: string | string[];\n  sort?: (datumA: any, datumB: any) =&gt; number\n}\n</code></pre>\n<ul>\n<li>自定义函数类型，具体的类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">(scale: IBaseScale, parameters: any) =&gt; any;\n</code></pre>\n<!-- 语法元素 data, DataSpec -->\n"},"time.range":{"desc":"<p>设置<code class=\"codespan\">scale</code>的值域，可以是坐标，也可以颜色，或者其他的内容</p>\n<p>支持的格式有三种：</p>\n<ul>\n<li>对象类型，通过解析某个数据，来设置<code class=\"codespan\">range</code>的值，具体类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  data: string | IData;\n  field: string | string[];\n  sort?: (datumA: any, datumB: any) =&gt; number\n}\n</code></pre>\n<ul>\n<li>自定义函数类型，具体的类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">(scale: IBaseScale, parameters: any) =&gt; any;\n</code></pre>\n<ul>\n<li>对象类型，通过和坐标系的某个轴进行绑定，来设置<code class=\"codespan\">range</code>的值，这种情况，<code class=\"codespan\">range</code>对应的是坐标系某个轴的坐标范围，具体的配置如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  coordinate: string;\n  dimension: &#39;x&#39; | &#39;y&#39;;\n  isSubshaft?: boolean;\n  reversed?: boolean\n}\n</code></pre>\n<!-- 语法元素 data, DataSpec -->\n"},"time.nice":{"desc":"<p>对于 scale，计算出优化后的刻度，根据刻度值，来更新<code class=\"codespan\">domain</code>，支持多种值：</p>\n<ul>\n<li><code class=\"codespan\">boolean</code>：<code class=\"codespan\">true</code>表示自动计算，<code class=\"codespan\">false</code>表示不进行优化</li>\n<li><code class=\"codespan\">number</code>：表示优化后的刻度个数</li>\n</ul>\n<!-- 语法元素 data, DataSpec -->\n"},"time.zero":{"desc":"<p>对于 scale，根据数据计算出一个原始的值域，也就是<code class=\"codespan\">domain</code>，然后在如下两种情况下，更新<code class=\"codespan\">domain</code>的值：</p>\n<ul>\n<li>如果最小值大于<code class=\"codespan\">0</code>，将<code class=\"codespan\">domain</code>的最小值设置为<code class=\"codespan\">0</code></li>\n<li>如果最大值小于<code class=\"codespan\">0</code>，将<code class=\"codespan\">domain</code>的最大值设置为<code class=\"codespan\">0</code></li>\n</ul>\n<p>当用户非常关心<code class=\"codespan\">0</code>这个基准值的时候，可以设置为<code class=\"codespan\">true</code>，默认为<code class=\"codespan\">false</code>。</p>\n"},"time.min":{"desc":"<p>根据数据计算出一个原始的值域，也就是<code class=\"codespan\">domain</code>，如果最小值大于用户配置的<code class=\"codespan\">min</code>，将<code class=\"codespan\">domain</code>的最小值设置为<code class=\"codespan\">min</code></p>\n"},"time.max":{"desc":"<p>根据数据计算出一个原始的值域，也就是<code class=\"codespan\">domain</code>，如果最大值大于用户配置的<code class=\"codespan\">max</code>，将<code class=\"codespan\">domain</code>的最大值设置为<code class=\"codespan\">max</code></p>\n"},"time.roundRange":{"desc":"<p>是否对值域自动取整</p>\n"},"time.config":{"desc":"<p><code class=\"codespan\">scale</code>的配置项</p>\n"},"time.config.clamp":{"desc":"<p>clamp 的值域</p>\n"},"time.config.interpolate":{"desc":"<p>差值函数</p>\n"},"utc.type":{"desc":"<p>设置刻度类型为 <code class=\"codespan\">utc</code></p>\n<!-- 语法元素 data, DataSpec -->\n"},"utc.domain":{"desc":"<p>设置<code class=\"codespan\">scale</code>的定义域，支持两种格式的设置：</p>\n<ul>\n<li>对象类型，具体类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  data: string | IData;\n  field: string | string[];\n  sort?: (datumA: any, datumB: any) =&gt; number\n}\n</code></pre>\n<ul>\n<li>自定义函数类型，具体的类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">(scale: IBaseScale, parameters: any) =&gt; any;\n</code></pre>\n<!-- 语法元素 data, DataSpec -->\n"},"utc.range":{"desc":"<p>设置<code class=\"codespan\">scale</code>的值域，可以是坐标，也可以颜色，或者其他的内容</p>\n<p>支持的格式有三种：</p>\n<ul>\n<li>对象类型，通过解析某个数据，来设置<code class=\"codespan\">range</code>的值，具体类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  data: string | IData;\n  field: string | string[];\n  sort?: (datumA: any, datumB: any) =&gt; number\n}\n</code></pre>\n<ul>\n<li>自定义函数类型，具体的类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">(scale: IBaseScale, parameters: any) =&gt; any;\n</code></pre>\n<ul>\n<li>对象类型，通过和坐标系的某个轴进行绑定，来设置<code class=\"codespan\">range</code>的值，这种情况，<code class=\"codespan\">range</code>对应的是坐标系某个轴的坐标范围，具体的配置如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  coordinate: string;\n  dimension: &#39;x&#39; | &#39;y&#39;;\n  isSubshaft?: boolean;\n  reversed?: boolean\n}\n</code></pre>\n<!-- 语法元素 data, DataSpec -->\n"},"utc.nice":{"desc":"<p>对于 scale，计算出优化后的刻度，根据刻度值，来更新<code class=\"codespan\">domain</code>，支持多种值：</p>\n<ul>\n<li><code class=\"codespan\">boolean</code>：<code class=\"codespan\">true</code>表示自动计算，<code class=\"codespan\">false</code>表示不进行优化</li>\n<li><code class=\"codespan\">number</code>：表示优化后的刻度个数</li>\n</ul>\n<!-- 语法元素 data, DataSpec -->\n"},"utc.zero":{"desc":"<p>对于 scale，根据数据计算出一个原始的值域，也就是<code class=\"codespan\">domain</code>，然后在如下两种情况下，更新<code class=\"codespan\">domain</code>的值：</p>\n<ul>\n<li>如果最小值大于<code class=\"codespan\">0</code>，将<code class=\"codespan\">domain</code>的最小值设置为<code class=\"codespan\">0</code></li>\n<li>如果最大值小于<code class=\"codespan\">0</code>，将<code class=\"codespan\">domain</code>的最大值设置为<code class=\"codespan\">0</code></li>\n</ul>\n<p>当用户非常关心<code class=\"codespan\">0</code>这个基准值的时候，可以设置为<code class=\"codespan\">true</code>，默认为<code class=\"codespan\">false</code>。</p>\n"},"utc.min":{"desc":"<p>根据数据计算出一个原始的值域，也就是<code class=\"codespan\">domain</code>，如果最小值大于用户配置的<code class=\"codespan\">min</code>，将<code class=\"codespan\">domain</code>的最小值设置为<code class=\"codespan\">min</code></p>\n"},"utc.max":{"desc":"<p>根据数据计算出一个原始的值域，也就是<code class=\"codespan\">domain</code>，如果最大值大于用户配置的<code class=\"codespan\">max</code>，将<code class=\"codespan\">domain</code>的最大值设置为<code class=\"codespan\">max</code></p>\n"},"utc.roundRange":{"desc":"<p>是否对值域自动取整</p>\n"},"utc.config":{"desc":"<p><code class=\"codespan\">scale</code>的配置项</p>\n"},"utc.config.clamp":{"desc":"<p>clamp 的值域</p>\n"},"utc.config.interpolate":{"desc":"<p>差值函数</p>\n"},"quantile.type":{"desc":"<p>设置刻度类型为 <code class=\"codespan\">quantile</code></p>\n<!-- 语法元素 data, DataSpec -->\n"},"quantile.domain":{"desc":"<p>设置<code class=\"codespan\">scale</code>的定义域，支持两种格式的设置：</p>\n<ul>\n<li>对象类型，具体类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  data: string | IData;\n  field: string | string[];\n  sort?: (datumA: any, datumB: any) =&gt; number\n}\n</code></pre>\n<ul>\n<li>自定义函数类型，具体的类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">(scale: IBaseScale, parameters: any) =&gt; any;\n</code></pre>\n<!-- 语法元素 data, DataSpec -->\n"},"quantile.range":{"desc":"<p>设置<code class=\"codespan\">scale</code>的值域，可以是坐标，也可以颜色，或者其他的内容</p>\n<p>支持的格式有三种：</p>\n<ul>\n<li>对象类型，通过解析某个数据，来设置<code class=\"codespan\">range</code>的值，具体类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  data: string | IData;\n  field: string | string[];\n  sort?: (datumA: any, datumB: any) =&gt; number\n}\n</code></pre>\n<ul>\n<li>自定义函数类型，具体的类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">(scale: IBaseScale, parameters: any) =&gt; any;\n</code></pre>\n<ul>\n<li>对象类型，通过和坐标系的某个轴进行绑定，来设置<code class=\"codespan\">range</code>的值，这种情况，<code class=\"codespan\">range</code>对应的是坐标系某个轴的坐标范围，具体的配置如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  coordinate: string;\n  dimension: &#39;x&#39; | &#39;y&#39;;\n  isSubshaft?: boolean;\n  reversed?: boolean\n}\n</code></pre>\n"},"quantize.type":{"desc":"<p>设置刻度类型为 <code class=\"codespan\">quantize</code></p>\n<!-- 语法元素 data, DataSpec -->\n"},"quantize.domain":{"desc":"<p>设置<code class=\"codespan\">scale</code>的定义域，支持两种格式的设置：</p>\n<ul>\n<li>对象类型，具体类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  data: string | IData;\n  field: string | string[];\n  sort?: (datumA: any, datumB: any) =&gt; number\n}\n</code></pre>\n<ul>\n<li>自定义函数类型，具体的类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">(scale: IBaseScale, parameters: any) =&gt; any;\n</code></pre>\n<!-- 语法元素 data, DataSpec -->\n"},"quantize.range":{"desc":"<p>设置<code class=\"codespan\">scale</code>的值域，可以是坐标，也可以颜色，或者其他的内容</p>\n<p>支持的格式有三种：</p>\n<ul>\n<li>对象类型，通过解析某个数据，来设置<code class=\"codespan\">range</code>的值，具体类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  data: string | IData;\n  field: string | string[];\n  sort?: (datumA: any, datumB: any) =&gt; number\n}\n</code></pre>\n<ul>\n<li>自定义函数类型，具体的类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">(scale: IBaseScale, parameters: any) =&gt; any;\n</code></pre>\n<ul>\n<li>对象类型，通过和坐标系的某个轴进行绑定，来设置<code class=\"codespan\">range</code>的值，这种情况，<code class=\"codespan\">range</code>对应的是坐标系某个轴的坐标范围，具体的配置如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  coordinate: string;\n  dimension: &#39;x&#39; | &#39;y&#39;;\n  isSubshaft?: boolean;\n  reversed?: boolean\n}\n</code></pre>\n<!-- 语法元素 data, DataSpec -->\n"},"quantize.nice":{"desc":"<p>对于 scale，计算出优化后的刻度，根据刻度值，来更新<code class=\"codespan\">domain</code>，支持多种值：</p>\n<ul>\n<li><code class=\"codespan\">boolean</code>：<code class=\"codespan\">true</code>表示自动计算，<code class=\"codespan\">false</code>表示不进行优化</li>\n<li><code class=\"codespan\">number</code>：表示优化后的刻度个数</li>\n</ul>\n<!-- 语法元素 data, DataSpec -->\n"},"quantize.niceMin":{"desc":"<p>只对<code class=\"codespan\">domain</code>的最小值进行优化，最大值不变，支持多种值：</p>\n<ul>\n<li><code class=\"codespan\">boolean</code>：<code class=\"codespan\">true</code>表示自动计算，<code class=\"codespan\">false</code>表示不进行优化</li>\n<li><code class=\"codespan\">number</code>：表示优化后的刻度个数</li>\n</ul>\n"},"quantize.niceMax":{"desc":"<p>只对<code class=\"codespan\">domain</code>的最大值进行优化，最小值不变，支持多种值：</p>\n<ul>\n<li><code class=\"codespan\">boolean</code>：<code class=\"codespan\">true</code>表示自动计算，<code class=\"codespan\">false</code>表示不进行优化</li>\n<li><code class=\"codespan\">number</code>：表示优化后的刻度个数</li>\n</ul>\n<!-- 语法元素 data, DataSpec -->\n"},"quantize.zero":{"desc":"<p>对于 scale，根据数据计算出一个原始的值域，也就是<code class=\"codespan\">domain</code>，然后在如下两种情况下，更新<code class=\"codespan\">domain</code>的值：</p>\n<ul>\n<li>如果最小值大于<code class=\"codespan\">0</code>，将<code class=\"codespan\">domain</code>的最小值设置为<code class=\"codespan\">0</code></li>\n<li>如果最大值小于<code class=\"codespan\">0</code>，将<code class=\"codespan\">domain</code>的最大值设置为<code class=\"codespan\">0</code></li>\n</ul>\n<p>当用户非常关心<code class=\"codespan\">0</code>这个基准值的时候，可以设置为<code class=\"codespan\">true</code>，默认为<code class=\"codespan\">false</code>。</p>\n"},"quantize.min":{"desc":"<p>根据数据计算出一个原始的值域，也就是<code class=\"codespan\">domain</code>，如果最小值大于用户配置的<code class=\"codespan\">min</code>，将<code class=\"codespan\">domain</code>的最小值设置为<code class=\"codespan\">min</code></p>\n"},"quantize.max":{"desc":"<p>根据数据计算出一个原始的值域，也就是<code class=\"codespan\">domain</code>，如果最大值大于用户配置的<code class=\"codespan\">max</code>，将<code class=\"codespan\">domain</code>的最大值设置为<code class=\"codespan\">max</code></p>\n"},"threshold.type":{"desc":"<p>设置刻度类型为 <code class=\"codespan\">threshold</code></p>\n<!-- 语法元素 data, DataSpec -->\n"},"threshold.domain":{"desc":"<p>设置<code class=\"codespan\">scale</code>的定义域，支持两种格式的设置：</p>\n<ul>\n<li>对象类型，具体类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  data: string | IData;\n  field: string | string[];\n  sort?: (datumA: any, datumB: any) =&gt; number\n}\n</code></pre>\n<ul>\n<li>自定义函数类型，具体的类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">(scale: IBaseScale, parameters: any) =&gt; any;\n</code></pre>\n<!-- 语法元素 data, DataSpec -->\n"},"threshold.range":{"desc":"<p>设置<code class=\"codespan\">scale</code>的值域，可以是坐标，也可以颜色，或者其他的内容</p>\n<p>支持的格式有三种：</p>\n<ul>\n<li>对象类型，通过解析某个数据，来设置<code class=\"codespan\">range</code>的值，具体类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  data: string | IData;\n  field: string | string[];\n  sort?: (datumA: any, datumB: any) =&gt; number\n}\n</code></pre>\n<ul>\n<li>自定义函数类型，具体的类型定义如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">(scale: IBaseScale, parameters: any) =&gt; any;\n</code></pre>\n<ul>\n<li>对象类型，通过和坐标系的某个轴进行绑定，来设置<code class=\"codespan\">range</code>的值，这种情况，<code class=\"codespan\">range</code>对应的是坐标系某个轴的坐标范围，具体的配置如下：</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  coordinate: string;\n  dimension: &#39;x&#39; | &#39;y&#39;;\n  isSubshaft?: boolean;\n  reversed?: boolean\n}\n</code></pre>\n"}}