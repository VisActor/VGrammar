{"type":{"desc":"<p>事件选择器对应的字体串，支持 5 种解析规则：</p>\n<ul>\n<li><ol>\n<li><code class=\"codespan\">mousedown</code> 最简单的事件名称，会在整个 view 上监听对应的事件</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li><code class=\"codespan\">rect:mousedown</code> 监听所有类型为<code class=\"codespan\">rect</code>的 mark，任意图形元素对应的<code class=\"codespan\">mousedown</code>事件</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li><code class=\"codespan\">window:mousemove</code> 监听页面全局的的<code class=\"codespan\">mousemove</code>事件</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li><code class=\"codespan\">#foo:mousedown</code> 监听<code class=\"codespan\">id</code>为<code class=\"codespan\">foo</code>的 mark，所有的图形元素对应的<code class=\"codespan\">mousedown</code>事件</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li><code class=\"codespan\">@foo:mousedown</code> 监听<code class=\"codespan\">name</code>为<code class=\"codespan\">foo</code>的 mark 下，所有的图形元素对应的<code class=\"codespan\">mousedown</code>事件</li>\n</ol>\n</li>\n</ul>\n<p>图形元素支持的事件类型如下：</p>\n<ul>\n<li><p>鼠标事件</p>\n<ul>\n<li><code class=\"codespan\">pointerdown</code></li>\n<li><code class=\"codespan\">pointerup</code></li>\n<li><code class=\"codespan\">pointerupoutside</code> 指针抬起与按下的图形不同时触发</li>\n<li><code class=\"codespan\">pointertap</code></li>\n<li><code class=\"codespan\">pointerover</code></li>\n<li><code class=\"codespan\">pointerenter</code></li>\n<li><code class=\"codespan\">pointerleave</code></li>\n<li><code class=\"codespan\">pointerout</code></li>\n<li><code class=\"codespan\">mousedown</code></li>\n<li><code class=\"codespan\">mouseup</code></li>\n<li><code class=\"codespan\">dblclick</code> 双击</li>\n<li><code class=\"codespan\">mousemove</code></li>\n<li><code class=\"codespan\">mouseover</code></li>\n<li><code class=\"codespan\">mouseout</code></li>\n<li><code class=\"codespan\">mouseenter</code> 不会冒泡</li>\n<li><code class=\"codespan\">mouseleave</code> 不会冒泡</li>\n</ul>\n</li>\n<li><p>右键相关事件</p>\n<ul>\n<li><code class=\"codespan\">rightdown</code></li>\n<li><code class=\"codespan\">rightup</code></li>\n<li><code class=\"codespan\">rightupoutside</code></li>\n<li><code class=\"codespan\">click</code></li>\n</ul>\n</li>\n<li><p>滚轮事件</p>\n<ul>\n<li><code class=\"codespan\">wheel</code></li>\n</ul>\n</li>\n<li><p>触摸屏相关事件</p>\n<ul>\n<li><code class=\"codespan\">tap</code></li>\n<li><code class=\"codespan\">touchstart</code></li>\n<li><code class=\"codespan\">touchend</code></li>\n<li><code class=\"codespan\">touchendoutside</code></li>\n<li><code class=\"codespan\">touchmove</code></li>\n<li><p><code class=\"codespan\">touchcancel</code></p>\n</li>\n<li><p><code class=\"codespan\">dragstart</code></p>\n</li>\n<li><code class=\"codespan\">drag</code></li>\n<li><code class=\"codespan\">dragenter</code></li>\n<li><code class=\"codespan\">dragleave</code></li>\n<li><code class=\"codespan\">dragover</code></li>\n<li><code class=\"codespan\">dragend</code></li>\n<li><code class=\"codespan\">drop</code></li>\n</ul>\n</li>\n<li><p>手势相关事件</p>\n<ul>\n<li><code class=\"codespan\">pan</code></li>\n<li><code class=\"codespan\">panstart</code></li>\n<li><code class=\"codespan\">panend</code></li>\n<li><code class=\"codespan\">press</code></li>\n<li><code class=\"codespan\">pressup</code></li>\n<li><code class=\"codespan\">pressend</code></li>\n<li><code class=\"codespan\">pinch</code></li>\n<li><code class=\"codespan\">pinchstart</code></li>\n<li><code class=\"codespan\">pinchend</code></li>\n<li><code class=\"codespan\">swipe</code></li>\n</ul>\n</li>\n<li><p>dom 原生事件</p>\n<ul>\n<li><code class=\"codespan\">resize</code> 注意，图形元素不支持该事件，只支持<code class=\"codespan\">window:resize</code>事件绑定</li>\n</ul>\n</li>\n</ul>\n"},"filter":{"desc":"<p>  过滤函数，接受事件对象作为参数，如果返回值为<code class=\"codespan\">true</code>，则执行相应的回调函数或者<code class=\"codespan\">signal</code>更新逻辑；否则，不执行；</p>\n"},"throttle":{"desc":"<p>  设置节流的时长，单位为<code class=\"codespan\">ms</code>；如果设置为 0 则不节流；如果设置的值为合理的正数，则会给事件的回调函数包裹上 <code class=\"codespan\">throttle</code>方法，达到节流的效果；</p>\n"},"debounce":{"desc":"<p>  设置防抖的时长，单位为<code class=\"codespan\">ms</code>；如果设置的值为 0，则不防抖；如果设置的值为合理的正数，则会给事件的回调函数包裹上 <code class=\"codespan\">deboundce</code>方法，达到防抖的的效果；</p>\n"},"consume":{"desc":"<p>  阻止事件的执行和传播；如果值为<code class=\"codespan\">true</code>，会在执行为事件的回调函数或者更新行为后，调用<code class=\"codespan\">stopPropagation()</code>，阻止事件的传播；</p>\n"},"callback":{"desc":"<p>  事件的回调函数，格式如：</p>\n<pre><code>  (context: EventCallbackContext, params?: any) =&gt; any;\n</code></pre>"},"dependency":{"desc":"<p>  申明依赖的语法元素，如<code class=\"codespan\">signal</code>、<code class=\"codespan\">scale</code>等</p>\n"},"target":{"desc":"<p>  设置事件更新的对象，支持两种类型：</p>\n<ul>\n<li><code class=\"codespan\">string</code> 类型： 需要更新的<code class=\"codespan\">signal</code>对应的 id</li>\n<li><p><code class=\"codespan\">array</code> 类型：事件需要触发多个<code class=\"codespan\">signal</code>的更新的时候，可以使用这种类型的配置，具体的类型格式为：</p>\n<pre><code class=\"lang-ts\">Array&lt;{\ntarget: string;\ncallback: (context: EventCallbackContext, params?: any) =&gt; any;\n}&gt;;\n</code></pre>\n</li>\n</ul>\n"}}