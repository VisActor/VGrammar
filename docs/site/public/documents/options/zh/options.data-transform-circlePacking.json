{"type":{"desc":"<p>将数据变换类型设置为 <code class=\"codespan\">circlePacking</code>，用于计算<code class=\"codespan\">circlePacking</code>布局</p>\n"},"nodeSort":{"desc":"<p>设置节点的排序，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">boolean</code> 类型： 值为 <code class=\"codespan\">false</code> 时，不进行排序；否则，使用默认的排序方式，即按照节点的 <code class=\"codespan\">value</code> 从大到小排序；</li>\n<li><code class=\"codespan\">Function</code> 类型：自定义排序函数，接收两个节点数据，返回一个数字，对应的类型定义为：</li>\n</ul>\n<pre><code class=\"lang-ts\">(a: CirclePackingNodeElement, b: CirclePackingNodeElement) =&gt; number;\n</code></pre>\n"},"padding":{"desc":"<p>类型：<code class=\"codespan\">number\\|number[]</code>\n是否必传： 否</p>\n<p>设置圆之间的间距，支持两种格式：</p>\n<ul>\n<li><code class=\"codespan\">number</code> 给所有层级的圆都设置统一的 padding</li>\n<li><code class=\"codespan\">number[]</code> 给每个层级的圆设置不同的 padding</li>\n</ul>\n"},"setRadius":{"desc":"<p>自定义设置每个节点的半径，函数接收一个节点数据，返回一个半径值，对应的类型定义为：</p>\n<pre><code class=\"lang-ts\">(node: CirclePackingNodeElement) =&gt; number;\n</code></pre>\n<p>默认值为：</p>\n<pre><code class=\"lang-ts\">(node: CirclePackingNodeElement) =&gt; {\n  return Math.sqrt(node.value);\n};\n</code></pre>\n"},"nodeKey":{"desc":"<p>类型：<code class=\"codespan\">string|number</code></p>\n<p>设置节点的全局唯一 key 对应的字段，如果不设置，内部会根据层级等信息自动生成</p>\n"},"includeRoot":{"desc":"<p>是否包含根节点</p>\n"}}