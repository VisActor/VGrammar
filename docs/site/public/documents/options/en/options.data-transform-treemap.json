{"type":{"desc":"<p>Set the data conversion type to <code class=\"codespan\">treemap</code> and calculate the treemap layout</p>\n"},"gapWidth":{"desc":"<p>Set the gap between two nodes with the same depth, supporting two formats of configuration</p>\n<ul>\n<li><ol>\n<li>number type: Set the gap for nodes at all levels to the specified value</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>number[] array type: <code class=\"codespan\">number[i]</code> indicates the gap between nodes with <code class=\"codespan\">depth = i</code></li>\n</ol>\n</li>\n</ul>\n"},"padding":{"desc":"<p>Type: <code class=\"codespan\">number | number[]</code></p>\n<p>Set the padding, supporting two formats:</p>\n<ul>\n<li>number: Set padding for each level</li>\n<li><code class=\"codespan\">number[]</code>: number[i] represents the padding of the node with depth = i</li>\n</ul>\n"},"aspectRatio":{"desc":"<p>Set the aspect ratio, the default value is <code class=\"codespan\">(1 + Math.sqrt(5)) / 2</code>. It only takes effect when <code class=\"codespan\">splitType</code> is set to <code class=\"codespan\">squarify</code>, other partition algorithms do not care about this parameter.</p>\n"},"labelPadding":{"desc":"<p>For non-leaf nodes, set the padding of the label. When and only when there is enough position available, the space for displaying the label will be reserved;\nOptional values:</p>\n<ul>\n<li><code class=\"codespan\">number</code>: Set the padding of the label for all levels</li>\n<li><code class=\"codespan\">number[]</code>: number[i] represents the padding of the label for the node with depth = i</li>\n</ul>\n"},"labelPosition":{"desc":"<p>For non-leaf nodes, set the label position, optional values:</p>\n<ul>\n<li><code class=\"codespan\">&#39;top&#39;</code> Top</li>\n<li><code class=\"codespan\">&#39;bottom&#39;</code> Bottom</li>\n<li><code class=\"codespan\">&#39;left&#39;</code> Left</li>\n<li><code class=\"codespan\">&#39;right&#39;</code> Right</li>\n</ul>\n<p>The configuration will be taken into account, and the space in the corresponding direction will be reserved before calculating the division of child nodes.</p>\n"},"splitType":{"desc":"<p>The algorithm type for partitioning rectangles, optional values:</p>\n<ul>\n<li><code class=\"codespan\">&#39;binary&#39;</code> Binary method</li>\n<li><code class=\"codespan\">&#39;squarify&#39;</code> Squarify algorithm</li>\n<li><code class=\"codespan\">&#39;slice&#39;</code> Slice algorithm, partition along the horizontal direction</li>\n<li><code class=\"codespan\">&#39;dice&#39;</code> Dice algorithm, partition along the vertical direction</li>\n<li><code class=\"codespan\">&#39;slice-dice&#39;</code> Slice-dice algorithm, alternate horizontal direction and vertical direction partitioning</li>\n</ul>\n"},"nodeKey":{"desc":"<p>Type: <code class=\"codespan\">string|number</code>\nSet the field corresponding to the globally unique key of the node. If not set, the internal algorithm will generate it based on the hierarchy information.</p>\n"},"maxDepth":{"desc":"<p>Set the maximum depth. When the depth of the node is greater than maxDepth, the layout of the next level will not be calculated. This configuration can be left unset.</p>\n"},"minVisibleArea":{"desc":"<p>Set the minimum visible area. When the node&#39;s area is smaller than minVisibleArea, the layout of the next level will not be calculated. This configuration can be left unset.</p>\n"},"minChildrenVisibleArea":{"desc":"<p>Set the minimum visible area for child nodes. When the node&#39;s area is smaller than <code class=\"codespan\">minChildrenVisibleArea</code>, this child node will be hidden. This configuration can be left unset.\nWhen the value is of array type, <code class=\"codespan\">minChildrenVisibleArea[i]</code> represents the minimum visible area of child nodes for the node with <code class=\"codespan\">depth = i</code>.</p>\n"},"minChildrenVisibleSize":{"desc":"<p>Set the minimum visible size for child nodes. When the width or height of the node is smaller than <code class=\"codespan\">minChildrenVisibleSize</code>, this child node will be hidden. This configuration can be left unset.\nWhen the value is of array type, <code class=\"codespan\">minChildrenVisibleSize[i]</code> represents the minimum visible size of child nodes for the node with <code class=\"codespan\">depth = i</code>.</p>\n"}}