{"type":{"desc":"<p>The font string corresponding to the event selector, supporting 5 parsing rules:</p>\n<ul>\n<li><ol>\n<li><code class=\"codespan\">mousedown</code> The simplest event name, which will listen for the corresponding event on the entire view</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li><code class=\"codespan\">rect:mousedown</code> Listens to the <code class=\"codespan\">mousedown</code> event corresponding to any graphic element of all marks of type <code class=\"codespan\">rect</code></li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li><code class=\"codespan\">window:mousemove</code> Listens to the global <code class=\"codespan\">mousemove</code> event of the page</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li><code class=\"codespan\">#foo:mousedown</code> Listens to the <code class=\"codespan\">mousedown</code> event corresponding to all graphic elements of the mark with <code class=\"codespan\">id</code> of <code class=\"codespan\">foo</code></li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li><code class=\"codespan\">@foo:mousedown</code> Listens to the <code class=\"codespan\">mousedown</code> event corresponding to all graphic elements under the mark with <code class=\"codespan\">name</code> of <code class=\"codespan\">foo</code></li>\n</ol>\n</li>\n</ul>\n<p>The event types supported by graphic elements are as follows:</p>\n<ul>\n<li><p>Mouse events</p>\n<ul>\n<li><code class=\"codespan\">pointerdown</code></li>\n<li><code class=\"codespan\">pointerup</code></li>\n<li><code class=\"codespan\">pointerupoutside</code> Triggered when the pointer is lifted and the shape is different from the pressed one</li>\n<li><code class=\"codespan\">pointertap</code></li>\n<li><code class=\"codespan\">pointerover</code></li>\n<li><code class=\"codespan\">pointerenter</code></li>\n<li><code class=\"codespan\">pointerleave</code></li>\n<li><code class=\"codespan\">pointerout</code></li>\n<li><code class=\"codespan\">mousedown</code></li>\n<li><code class=\"codespan\">mouseup</code></li>\n<li><code class=\"codespan\">dblclick</code> Double-click</li>\n<li><code class=\"codespan\">mousemove</code></li>\n<li><code class=\"codespan\">mouseover</code></li>\n<li><code class=\"codespan\">mouseout</code></li>\n<li><code class=\"codespan\">mouseenter</code> No propagation</li>\n<li><code class=\"codespan\">mouseleave</code> No propagation</li>\n</ul>\n</li>\n<li><p>Right-click related events</p>\n<ul>\n<li><code class=\"codespan\">rightdown</code></li>\n<li><code class=\"codespan\">rightup</code></li>\n<li><code class=\"codespan\">rightupoutside</code></li>\n<li><code class=\"codespan\">click</code></li>\n</ul>\n</li>\n<li><p>Wheel events</p>\n<ul>\n<li><code class=\"codespan\">wheel</code></li>\n</ul>\n</li>\n<li><p>Touch screen related events</p>\n<ul>\n<li><code class=\"codespan\">tap</code></li>\n<li><code class=\"codespan\">touchstart</code></li>\n<li><code class=\"codespan\">touchend</code></li>\n<li><code class=\"codespan\">touchendoutside</code></li>\n<li><code class=\"codespan\">touchmove</code></li>\n<li><p><code class=\"codespan\">touchcancel</code></p>\n</li>\n<li><p><code class=\"codespan\">dragstart</code></p>\n</li>\n<li><code class=\"codespan\">drag</code></li>\n<li><code class=\"codespan\">dragenter</code></li>\n<li><code class=\"codespan\">dragleave</code></li>\n<li><code class=\"codespan\">dragover</code></li>\n<li><code class=\"codespan\">dragend</code></li>\n<li><code class=\"codespan\">drop</code></li>\n</ul>\n</li>\n<li><p>Gesture related events</p>\n<ul>\n<li><code class=\"codespan\">pan</code></li>\n<li><code class=\"codespan\">panstart</code></li>\n<li><code class=\"codespan\">panend</code></li>\n<li><code class=\"codespan\">press</code></li>\n<li><code class=\"codespan\">pressup</code></li>\n<li><code class=\"codespan\">pressend</code></li>\n<li><code class=\"codespan\">pinch</code></li>\n<li><code class=\"codespan\">pinchstart</code></li>\n<li><code class=\"codespan\">pinchend</code></li>\n<li><code class=\"codespan\">swipe</code></li>\n</ul>\n</li>\n<li><p>Native DOM events</p>\n<ul>\n<li><code class=\"codespan\">resize</code> Note that graphic elements do not support this event, only <code class=\"codespan\">window:resize</code> event binding is supported</li>\n</ul>\n</li>\n</ul>\n"},"filter":{"desc":"<p>The filter function accepts the event object as a parameter. If the return value is <code class=\"codespan\">true</code>, the corresponding callback function or <code class=\"codespan\">signal</code> update logic is executed; otherwise, it is not executed;</p>\n"},"throttle":{"desc":"<p>Sets the throttling duration in <code class=\"codespan\">ms</code>; if set to 0, no throttling; if set to a reasonable positive number, the event callback function will be wrapped with the <code class=\"codespan\">throttle</code> method, achieving the effect of throttling;</p>\n"},"debounce":{"desc":"<p>Sets the debounce duration in <code class=\"codespan\">ms</code>; if set to 0, no debounce; if set to a reasonable positive number, the event callback function will be wrapped with the <code class=\"codespan\">deboundce</code> method, achieving the effect of debounce;</p>\n"},"consume":{"desc":"<p>Prevents the execution and propagation of events; if set to <code class=\"codespan\">true</code>, <code class=\"codespan\">stopPropagation()</code> will be called after executing the callback function or update behavior of the event, preventing event propagation;</p>\n"},"callback":{"desc":"<p>Event callback function with the format:</p>\n<pre><code>(context: EventCallbackContext, params?: any) =&gt; any;\n</code></pre>"},"dependency":{"desc":"<p>Declare dependent syntax elements, such as <code class=\"codespan\">signal</code>- and <code class=\"codespan\">scale</code>-related</p>\n"},"target":{"desc":"<p>Sets the object to be updated by the event, supporting two types:</p>\n<ul>\n<li><code class=\"codespan\">string</code> type: The corresponding id of the <code class=\"codespan\">signal</code> to be updated</li>\n<li><p><code class=\"codespan\">array</code> type: When the event needs to trigger updates for multiple signals, this type of configuration can be used. The specific format is:</p>\n<pre><code class=\"lang-ts\">Array&lt;{\ntarget: string;\ncallback: (context: EventCallbackContext, params?: any) =&gt; any;\n}&gt;;\n</code></pre>\n</li>\n</ul>\n"}}