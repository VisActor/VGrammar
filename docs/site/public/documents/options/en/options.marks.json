{"id":{"desc":"<p>The id of the mark, which can be used for reference in other elements</p>\n"},"name":{"desc":"<p>The name of the mark, which can be used for querying the mark</p>\n"},"dependency":{"desc":"<p>Type that can be passed: (IGrammarBase[] | IGrammarBase | string[] | string)</p>\n<p>The other elements that the current mark depends on, can be the id of the element, or the element itself</p>\n"},"rect":{"desc":"<p><strong> Rectangle Element </strong></p>\n"},"rect.type":{"desc":"<p>Set the element type to <code class=\"codespan\">rect</code></p>\n"},"rect.encode":{"desc":"<p>Set the visual channel encoding of the graphics elements, supporting three data change states by default:</p>\n<ul>\n<li><code class=\"codespan\">enter</code> newly added data items</li>\n<li><code class=\"codespan\">update</code> data items have been updated</li>\n<li><code class=\"codespan\">exit</code> data items are deleted</li>\n</ul>\n<p>Note that the data state here is automatically generated based on the <code class=\"codespan\">mark</code>&#39;s <code class=\"codespan\">key</code>. We will calculate the unique identifier for the data bound to the <code class=\"codespan\">mark</code> based on the <code class=\"codespan\">key</code> configuration. After the data is updated, if the corresponding unique identifier no longer exists, the state is <code class=\"codespan\">exit</code>; if it exists, it is <code class=\"codespan\">update</code>. If the previous data does not exist for the unique identifier, the data item&#39;s state is <code class=\"codespan\">enter</code>.</p>\n<p>Supports one interaction state by default:</p>\n<ul>\n<li><code class=\"codespan\">hover</code> when the mouse hovers over a specific shape, set the corresponding visual channel encoding for the shape</li>\n</ul>\n"},"rect.encode.enter":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data initialization state. Note that it will not be executed again when the data is updated.</p>\n"},"rect.encode.enter.width":{"desc":"<p>The width of the shape</p>\n"},"rect.encode.enter.height":{"desc":"<p>The height of the shape</p>\n"},"rect.encode.enter.borderRadius":{"desc":"<p>Set the border radius, default is 0, support two types of setting:</p>\n<ul>\n<li><code class=\"codespan\">number</code>: Set the same border radius for all four corners</li>\n<li><code class=\"codespan\">number[]</code>: Set different border radius for each corner<ul>\n<li>When the array length is <code class=\"codespan\">1</code>, set the same border radius for all four corners</li>\n<li>When the array length is <code class=\"codespan\">2</code> or <code class=\"codespan\">3</code>, set border radius of <strong>top-left</strong> and <strong>bottom-right</strong> corners to <code class=\"codespan\">borderRadius[0]</code>, and border radius of <strong>top-right</strong> and <strong>bottom-left</strong> corners to <code class=\"codespan\">borderRadius[1]</code></li>\n<li>When the array length is <code class=\"codespan\">4</code> or more, set different border radius for each corner</li>\n</ul>\n</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"rect.encode.enter.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"rect.encode.enter.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"rect.encode.enter.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"rect.encode.enter.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"rect.encode.enter.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"rect.encode.enter.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"rect.encode.enter.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"rect.encode.enter.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"rect.encode.enter.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"rect.encode.enter.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"rect.encode.enter.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"rect.encode.enter.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"rect.encode.enter.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"rect.encode.enter.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"rect.encode.enter.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"rect.encode.enter.outerBorder":{"desc":"<p>Outer border</p>\n"},"rect.encode.enter.innerBorder":{"desc":"<p>Inner border</p>\n"},"rect.encode.enter.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"rect.encode.enter.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"rect.encode.enter.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"rect.encode.enter.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"rect.encode.enter.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"rect.encode.enter.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"rect.encode.enter.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"rect.encode.enter.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"rect.encode.enter.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"rect.encode.enter.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"rect.encode.enter.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"rect.encode.enter.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"rect.encode.enter.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"rect.encode.enter.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"rect.encode.enter.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"rect.encode.enter.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"rect.encode.enter.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"rect.encode.enter.texture":{"desc":"<p>The texture of the graphic</p>\n"},"rect.encode.enter.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"rect.encode.enter.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"rect.encode.enter.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"rect.encode.enter.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"rect.encode.enter.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"rect.encode.update":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data update state.</p>\n"},"rect.encode.update.width":{"desc":"<p>The width of the shape</p>\n"},"rect.encode.update.height":{"desc":"<p>The height of the shape</p>\n"},"rect.encode.update.borderRadius":{"desc":"<p>Set the border radius, default is 0, support two types of setting:</p>\n<ul>\n<li><code class=\"codespan\">number</code>: Set the same border radius for all four corners</li>\n<li><code class=\"codespan\">number[]</code>: Set different border radius for each corner<ul>\n<li>When the array length is <code class=\"codespan\">1</code>, set the same border radius for all four corners</li>\n<li>When the array length is <code class=\"codespan\">2</code> or <code class=\"codespan\">3</code>, set border radius of <strong>top-left</strong> and <strong>bottom-right</strong> corners to <code class=\"codespan\">borderRadius[0]</code>, and border radius of <strong>top-right</strong> and <strong>bottom-left</strong> corners to <code class=\"codespan\">borderRadius[1]</code></li>\n<li>When the array length is <code class=\"codespan\">4</code> or more, set different border radius for each corner</li>\n</ul>\n</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"rect.encode.update.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"rect.encode.update.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"rect.encode.update.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"rect.encode.update.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"rect.encode.update.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"rect.encode.update.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"rect.encode.update.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"rect.encode.update.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"rect.encode.update.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"rect.encode.update.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"rect.encode.update.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"rect.encode.update.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"rect.encode.update.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"rect.encode.update.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"rect.encode.update.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"rect.encode.update.outerBorder":{"desc":"<p>Outer border</p>\n"},"rect.encode.update.innerBorder":{"desc":"<p>Inner border</p>\n"},"rect.encode.update.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"rect.encode.update.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"rect.encode.update.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"rect.encode.update.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"rect.encode.update.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"rect.encode.update.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"rect.encode.update.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"rect.encode.update.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"rect.encode.update.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"rect.encode.update.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"rect.encode.update.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"rect.encode.update.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"rect.encode.update.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"rect.encode.update.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"rect.encode.update.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"rect.encode.update.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"rect.encode.update.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"rect.encode.update.texture":{"desc":"<p>The texture of the graphic</p>\n"},"rect.encode.update.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"rect.encode.update.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"rect.encode.update.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"rect.encode.update.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"rect.encode.update.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"rect.encode.exit":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data deletion state.</p>\n"},"rect.encode.exit.width":{"desc":"<p>The width of the shape</p>\n"},"rect.encode.exit.height":{"desc":"<p>The height of the shape</p>\n"},"rect.encode.exit.borderRadius":{"desc":"<p>Set the border radius, default is 0, support two types of setting:</p>\n<ul>\n<li><code class=\"codespan\">number</code>: Set the same border radius for all four corners</li>\n<li><code class=\"codespan\">number[]</code>: Set different border radius for each corner<ul>\n<li>When the array length is <code class=\"codespan\">1</code>, set the same border radius for all four corners</li>\n<li>When the array length is <code class=\"codespan\">2</code> or <code class=\"codespan\">3</code>, set border radius of <strong>top-left</strong> and <strong>bottom-right</strong> corners to <code class=\"codespan\">borderRadius[0]</code>, and border radius of <strong>top-right</strong> and <strong>bottom-left</strong> corners to <code class=\"codespan\">borderRadius[1]</code></li>\n<li>When the array length is <code class=\"codespan\">4</code> or more, set different border radius for each corner</li>\n</ul>\n</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"rect.encode.exit.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"rect.encode.exit.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"rect.encode.exit.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"rect.encode.exit.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"rect.encode.exit.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"rect.encode.exit.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"rect.encode.exit.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"rect.encode.exit.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"rect.encode.exit.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"rect.encode.exit.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"rect.encode.exit.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"rect.encode.exit.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"rect.encode.exit.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"rect.encode.exit.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"rect.encode.exit.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"rect.encode.exit.outerBorder":{"desc":"<p>Outer border</p>\n"},"rect.encode.exit.innerBorder":{"desc":"<p>Inner border</p>\n"},"rect.encode.exit.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"rect.encode.exit.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"rect.encode.exit.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"rect.encode.exit.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"rect.encode.exit.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"rect.encode.exit.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"rect.encode.exit.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"rect.encode.exit.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"rect.encode.exit.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"rect.encode.exit.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"rect.encode.exit.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"rect.encode.exit.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"rect.encode.exit.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"rect.encode.exit.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"rect.encode.exit.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"rect.encode.exit.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"rect.encode.exit.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"rect.encode.exit.texture":{"desc":"<p>The texture of the graphic</p>\n"},"rect.encode.exit.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"rect.encode.exit.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"rect.encode.exit.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"rect.encode.exit.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"rect.encode.exit.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"rect.encode.hover":{"desc":"<p>Set the visual channel mapping corresponding to the graphics elements when in the <code class=\"codespan\">hover</code> state.</p>\n"},"rect.encode.hover.width":{"desc":"<p>The width of the shape</p>\n"},"rect.encode.hover.height":{"desc":"<p>The height of the shape</p>\n"},"rect.encode.hover.borderRadius":{"desc":"<p>Set the border radius, default is 0, support two types of setting:</p>\n<ul>\n<li><code class=\"codespan\">number</code>: Set the same border radius for all four corners</li>\n<li><code class=\"codespan\">number[]</code>: Set different border radius for each corner<ul>\n<li>When the array length is <code class=\"codespan\">1</code>, set the same border radius for all four corners</li>\n<li>When the array length is <code class=\"codespan\">2</code> or <code class=\"codespan\">3</code>, set border radius of <strong>top-left</strong> and <strong>bottom-right</strong> corners to <code class=\"codespan\">borderRadius[0]</code>, and border radius of <strong>top-right</strong> and <strong>bottom-left</strong> corners to <code class=\"codespan\">borderRadius[1]</code></li>\n<li>When the array length is <code class=\"codespan\">4</code> or more, set different border radius for each corner</li>\n</ul>\n</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"rect.encode.hover.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"rect.encode.hover.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"rect.encode.hover.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"rect.encode.hover.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"rect.encode.hover.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"rect.encode.hover.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"rect.encode.hover.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"rect.encode.hover.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"rect.encode.hover.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"rect.encode.hover.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"rect.encode.hover.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"rect.encode.hover.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"rect.encode.hover.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"rect.encode.hover.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"rect.encode.hover.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"rect.encode.hover.outerBorder":{"desc":"<p>Outer border</p>\n"},"rect.encode.hover.innerBorder":{"desc":"<p>Inner border</p>\n"},"rect.encode.hover.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"rect.encode.hover.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"rect.encode.hover.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"rect.encode.hover.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"rect.encode.hover.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"rect.encode.hover.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"rect.encode.hover.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"rect.encode.hover.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"rect.encode.hover.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"rect.encode.hover.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"rect.encode.hover.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"rect.encode.hover.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"rect.encode.hover.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"rect.encode.hover.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"rect.encode.hover.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"rect.encode.hover.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"rect.encode.hover.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"rect.encode.hover.texture":{"desc":"<p>The texture of the graphic</p>\n"},"rect.encode.hover.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"rect.encode.hover.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"rect.encode.hover.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"rect.encode.hover.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"rect.encode.hover.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"rect.animationState":{"desc":"<p>Type: <code class=\"codespan\">MarkFunctionType</code>\nRequired: No\nanimation attributes</p>\n"},"rect.animation":{"desc":"<p>Supports setting various state corresponding animations, data-driven animation states have three types:</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>Interaction-triggered state changes are configured through a unified interaction animation, with the configuration key being <code class=\"codespan\">state</code></p>\n"},"rect.animation.type":{"desc":"<p>Animation execution type, specifying a specific built-in animation execution effect</p>\n<p>Universal built-in animation types include:</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: Fade in and out animations</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: Scaling animations</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: Move in and out animations</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: Rotation animations</li>\n<li><code class=\"codespan\">update</code>: Update animations</li>\n</ul>\n<p>rect primitive additional supported animation types include:</p>\n<ul>\n<li><code class=\"codespan\">growHeightIn</code>/<code class=\"codespan\">growHeightOut</code>: Height growing animation</li>\n<li><code class=\"codespan\">growWidthIn</code>/<code class=\"codespan\">growWidthOut</code>: Width growing animation</li>\n<li><code class=\"codespan\">growCenterIn</code>/<code class=\"codespan\">growCenterOut</code>: Center growing animation</li>\n</ul>\n"},"rect.animation.channel":{"desc":"<p>Visual channels before and after the animation is executed, conflicts with <code class=\"codespan\">type</code> configuration</p>\n"},"rect.animation.custom":{"desc":"<p>Custom animation, if custom animation configuration is set, it will replace the default visual channel interpolation logic</p>\n"},"rect.animation.customParameters":{"desc":"<p>Custom animation parameters</p>\n"},"rect.animation.easing":{"desc":"<p>Animation easing, default is <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"rect.animation.delay":{"desc":"<p>Animation execution delay time, default is 0</p>\n"},"rect.animation.duration":{"desc":"<p>Animation execution duration, default is 1000ms</p>\n"},"rect.animation.oneByOne":{"desc":"<p>Animation execution delay time in sequence. If set to <code class=\"codespan\">true</code>, the next element&#39;s animation will be executed after the previous element&#39;s animation is completed. The default is <code class=\"codespan\">false</code>.</p>\n"},"rect.animation.startTime":{"desc":"<p>Initial time of animation execution, which will not be repeatedly applied in loop animation, default is 0</p>\n"},"rect.animation.totalTime":{"desc":"<p>Maximum time of animation execution, the animation will be terminated if it reaches the set time</p>\n"},"rect.animation.loop":{"desc":"<p>Number of animation loops, if set to <code class=\"codespan\">true</code>, it will loop infinitely</p>\n"},"rect.animation.options":{"desc":"<p>Additional parameters set for specific animation types execution</p>\n"},"rect.animation.controlOptions":{"desc":"<p>Control parameters for animation execution logic:</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: Whether to immediately terminate its animation when the animation state changes</li>\n<li><code class=\"codespan\">immediatelyApply</code>: Whether to immediately apply the initial visual channel of the animation</li>\n</ul>\n"},"rect.zIndex":{"desc":"<p>Set the zIndex of the container shape (group) corresponding to the <code class=\"codespan\">mark</code> graphic primitive</p>\n"},"rect.interactive":{"desc":"<p>Type: <code class=\"codespan\">boolean</code>\nRequired: No</p>\n"},"rect.context":{"desc":"<p>Set the context parameters of the graphic primitive</p>\n"},"rect.setCustomizedShape":{"desc":"<p>Set the callback function of custom shape. The corresponding ts type is as follows:</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>Where <code class=\"codespan\">ICustomPath2D</code> is a utility class provided by VRender for drawing custom paths.</p>\n"},"rect.support3d":{"desc":"<p>Whether to support 3d mode when the canvas is set to 3d view.</p>\n"},"rect.group":{"desc":"<p>Set the parent graphic primitive. Supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> The id of the corresponding parent graphic primitive</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> The corresponding grammar element of the parent graphic primitive, generally used in API call scenarios.</li>\n</ul>\n<p>If not set, it will be attached to the root node of the canvas by default.</p>\n"},"rect.from":{"desc":"<p>ts type definition is:</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>Declare the data on which the graphic primitive depends through the <code class=\"codespan\">data</code> attribute.</p>\n"},"rect.key":{"desc":"<p>Set the unique identifier for the graphic primitive data element, which is used to calculate the data state of the graphic element. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the <code class=\"codespan\">key</code></li>\n</ul>\n"},"rect.sort":{"desc":"<p>Sort all graphic elements in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"rect.groupBy":{"desc":"<p>Set the grouping attribute, the corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the grouping <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the grouping <code class=\"codespan\">key</code></li>\n</ul>\n"},"rect.groupSort":{"desc":"<p>Sort the groups in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"rect.coordinate":{"desc":"<p>Set the id or graphic element corresponding to the associated coordinate system of this graphic primitive</p>\n"},"rect.state":{"desc":"<p>Set the state values ​​of all graphical elements of the current graphic primitive, supporting three formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the state of the graphic, for example, <code class=\"codespan\">{ state: &#39;selected&#39;}</code> sets the state of all graphics to <code class=\"codespan\">&#39;selected&#39;</code>, usually in this case, the <code class=\"codespan\">encode</code> also sets the graphic channel mapping corresponding to the <code class=\"codespan\">&#39;selected&#39;</code> state</li>\n<li><code class=\"codespan\">string[]</code> Set multiple states for the graphic, you can configure <code class=\"codespan\">stateSort</code> to influence the order of executing the graphic channel mapping corresponding to the state</li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the state value, and the return parameter is <code class=\"codespan\">string | string[]</code>, the corresponding ts type definition is:</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"rect.stateSort":{"desc":"<p>Set the sorting function of the state values ​​of all graphics elements of the current graphic primitive, which will affect the order of the graphic channel mapping corresponding to the state. The result of the graphic channel mapping executed earlier may be covered by subsequent states. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"rect.transform":{"desc":"<p>Set the corresponding transformation of the graphic primitive. All data transformations can be configured on the graphic primitive and are used for the <code class=\"codespan\">join data</code> execution transformation;\nAnother type of transformation is the transformation executed by graphical elements, such as <code class=\"codespan\">dodge</code>;\nThe general type definition is as follows:</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>The parameters supported by each transformation are different</p>\n"},"rect.layout":{"desc":"<p>Set the layout parameters of the graphic primitive. There are two roles when the graphic primitive participates in the layout:</p>\n<ul>\n<li>&#39;container&#39; Container graphic primitive, usually <code class=\"codespan\">group</code> graphic primitive</li>\n<li>&#39;item&#39; layout child element, as a child node of the container graphic primitive</li>\n</ul>\n<p>Please note that we only support one layer of layout. If it is a multi-layer nested layout, it is recommended to use a custom layout scheme for implementation;</p>\n<p>Now support two content layouts: <code class=\"codespan\">grid</code> layout and <code class=\"codespan\">relative</code> layout, the related type definition is as follows</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>If you want to set a custom layout scheme, <code class=\"codespan\">layout</code> also supports setting callback functions directly. The definition of the callback function is as follows:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"rect.layout.display":{"desc":"<p>The container graphic primitive sets the layout type and supports two configurations:</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> Relative layout</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> Grid layout</li>\n</ul>\n"},"rect.layout.callback":{"desc":"<p>Customize the callback function for this graphic primitive, the ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"rect.layout.skipBeforeLayouted":{"desc":"<p>Skip the execution stage before the layout is completed</p>\n"},"rect.layout.updateViewSignals":{"desc":"<p>Whether to update the default view signals, that is: <code class=\"codespan\">padding</code>, <code class=\"codespan\">viewWidth</code> and <code class=\"codespan\">viewHeight</code></p>\n<p>This property can only be set on a container graphic primitive with <code class=\"codespan\">&#39;relative&#39;</code> layout.</p>\n"},"rect.layout.maxChildWidth":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum width of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the width of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"rect.layout.maxChildHeight":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum height of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the height of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"rect.layout.position":{"desc":"<p>Set the position of the child graphic primitive of the relative layout. The supported settings are:</p>\n<ul>\n<li>&#39;top&#39; Relative to the top of the parent graphic primitive</li>\n<li>&#39;bottom&#39; Relative to the bottom of the parent graphic primitive</li>\n<li>&#39;left&#39; Relative to the left side of the parent graphic primitive</li>\n<li>&#39;right&#39; Relative to the right side of the parent graphic primitive</li>\n<li>&#39;content&#39; Relative to the center of the parent graphic primitive, that is, the content area</li>\n<li>&#39;auto&#39; When the graphic primitive sets the coordinate system, the position relative to the parent graphic primitive is automatically calculated according to the associated <code class=\"codespan\">scale</code></li>\n</ul>\n"},"rect.layout.padding":{"desc":"<p>The inner padding of Child graphic primitive, in px unit, with the default padding of 0 for all directions. Accepts numerical values, numerical arrays, and objects for settings.</p>\n<p>Example of usage:</p>\n<pre><code class=\"lang-ts\">// Numerical type, set the padding to 5\npadding: 5;\n// Numerical array, set the top and bottom padding to 5, and the left and right padding to 10, similar to the CSS box model\npadding: [5, 10];\n// Numerical array, set the padding for all four directions separately\npadding: [\n  5, // Top\n  10, // Right\n  5, // Bottom\n  10 // Left\n];\n// Object type\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"rect.layout.gridTemplateRows":{"desc":"<p>The parent graphic primitive of the grid layout sets the row height</p>\n"},"rect.layout.gridTemplateColumns":{"desc":"<p>The parent graphic primitive of the grid layout sets the column width</p>\n"},"rect.layout.gridRowGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the row spacing</p>\n"},"rect.layout.gridColumnGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the column spacing</p>\n"},"rect.layout.gridRowStart":{"desc":"<p>The child graphic primitive of the grid layout sets the row start position</p>\n"},"rect.layout.gridRowEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the row end position</p>\n"},"rect.layout.gridColumnStart":{"desc":"<p>The child graphic primitive of the grid layout sets the column start position</p>\n"},"rect.layout.gridColumnEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the column end position</p>\n"},"rect.large":{"desc":"<p>Whether to enable large data rendering mode</p>\n"},"rect.largeThreshold":{"desc":"<p>The threshold for enabling large data rendering optimization, corresponding to the length of data</p>\n"},"rect.progressiveStep":{"desc":"<p>The step length for enabling progressive rendering, corresponding to the length of data in each shard</p>\n"},"rect.progressiveThreshold":{"desc":"<p>The threshold for enabling progressive rendering, corresponding to the length of single series data</p>\n"},"rect.morph":{"desc":"<p>Whether to enable global transition morph animations for the current graphic element</p>\n"},"rect.morphKey":{"desc":"<p>Used to match graphic elements for global transition morph animations, graphic elements with the same <code class=\"codespan\">morphKey</code> will undergo morph animations</p>\n"},"rect.morphElementKey":{"desc":"<p>For the matched graphic elements before and after, use this configuration to match the graphic element; if not declared, we will read the <code class=\"codespan\">key</code> configuration by default to match the graphic element for morph animations;\nSupports one-to-one, one-to-many, and many-to-one graphic morph animations by default</p>\n"},"arc":{"desc":"<p><strong> arc element </strong></p>\n"},"arc.type":{"desc":"<p>Set the element type to <code class=\"codespan\">arc</code></p>\n"},"arc.encode":{"desc":"<p>Set the visual channel encoding of the graphics elements, supporting three data change states by default:</p>\n<ul>\n<li><code class=\"codespan\">enter</code> newly added data items</li>\n<li><code class=\"codespan\">update</code> data items have been updated</li>\n<li><code class=\"codespan\">exit</code> data items are deleted</li>\n</ul>\n<p>Note that the data state here is automatically generated based on the <code class=\"codespan\">mark</code>&#39;s <code class=\"codespan\">key</code>. We will calculate the unique identifier for the data bound to the <code class=\"codespan\">mark</code> based on the <code class=\"codespan\">key</code> configuration. After the data is updated, if the corresponding unique identifier no longer exists, the state is <code class=\"codespan\">exit</code>; if it exists, it is <code class=\"codespan\">update</code>. If the previous data does not exist for the unique identifier, the data item&#39;s state is <code class=\"codespan\">enter</code>.</p>\n<p>Supports one interaction state by default:</p>\n<ul>\n<li><code class=\"codespan\">hover</code> when the mouse hovers over a specific shape, set the corresponding visual channel encoding for the shape</li>\n</ul>\n"},"arc.encode.enter":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data initialization state. Note that it will not be executed again when the data is updated.</p>\n"},"arc.encode.enter.innerRadius":{"desc":"<p>Inner radius</p>\n"},"arc.encode.enter.outerRadius":{"desc":"<p>Outer radius</p>\n"},"arc.encode.enter.startAngle":{"desc":"<p>The starting angle of the arc;\nSpecified in radians, 0 represents the 12 o&#39;clock direction and the clockwise direction is positive.\nIf <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code>, a complete sector or ring will be drawn</p>\n"},"arc.encode.enter.endAngle":{"desc":"<p>The ending angle of the arc;\nSpecified in radians, 0 represents the 12 o&#39;clock direction and the clockwise direction is positive.\nIf <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code>, a complete sector or ring will be drawn</p>\n"},"arc.encode.enter.padAngle":{"desc":"<p>Gap angle; the gap angle is converted into a fixed linear distance between two adjacent arcs, defined as <code class=\"codespan\">padRadius * | padAngle |</code></p>\n<p>This distance is equal at the beginning and end of the arc;\nThe gap angle should generally only be applied to annular sectors (i.e. when the inner radius is greater than 0)</p>\n"},"arc.encode.enter.padRadius":{"desc":"<p>Used in conjunction with <code class=\"codespan\">padAngle</code></p>\n"},"arc.encode.enter.cap":{"desc":"<p>Corresponds to the lineCap attribute of the line segment, lineCap represents how the line segment is drawn at the end, supporting two types of settings</p>\n<ul>\n<li><p><code class=\"codespan\">boolean</code>: <code class=\"codespan\">cap: true</code> means to add an angle at the starting position of the arc line, and the angle is <code class=\"codespan\">| outerRadius - innerRadius | / outerRadius</code></p>\n</li>\n<li><p><code class=\"codespan\">[boolean, boolean]</code>: set different end drawing strategies for the head and tail</p>\n</li>\n</ul>\n"},"arc.encode.enter.forceShowCap":{"desc":"<p>When cap = true and gradient fill is used, automatically implement conical gradient, which is the circular gradient</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"arc.encode.enter.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"arc.encode.enter.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"arc.encode.enter.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"arc.encode.enter.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"arc.encode.enter.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"arc.encode.enter.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"arc.encode.enter.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"arc.encode.enter.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"arc.encode.enter.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"arc.encode.enter.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"arc.encode.enter.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"arc.encode.enter.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"arc.encode.enter.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"arc.encode.enter.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"arc.encode.enter.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"arc.encode.enter.outerBorder":{"desc":"<p>Outer border</p>\n"},"arc.encode.enter.innerBorder":{"desc":"<p>Inner border</p>\n"},"arc.encode.enter.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"arc.encode.enter.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"arc.encode.enter.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"arc.encode.enter.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"arc.encode.enter.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"arc.encode.enter.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"arc.encode.enter.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"arc.encode.enter.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"arc.encode.enter.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"arc.encode.enter.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"arc.encode.enter.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"arc.encode.enter.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"arc.encode.enter.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"arc.encode.enter.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"arc.encode.enter.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"arc.encode.enter.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"arc.encode.enter.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"arc.encode.enter.texture":{"desc":"<p>The texture of the graphic</p>\n"},"arc.encode.enter.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"arc.encode.enter.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"arc.encode.enter.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"arc.encode.enter.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"arc.encode.enter.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"arc.encode.update":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data update state.</p>\n"},"arc.encode.update.innerRadius":{"desc":"<p>Inner radius</p>\n"},"arc.encode.update.outerRadius":{"desc":"<p>Outer radius</p>\n"},"arc.encode.update.startAngle":{"desc":"<p>The starting angle of the arc;\nSpecified in radians, 0 represents the 12 o&#39;clock direction and the clockwise direction is positive.\nIf <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code>, a complete sector or ring will be drawn</p>\n"},"arc.encode.update.endAngle":{"desc":"<p>The ending angle of the arc;\nSpecified in radians, 0 represents the 12 o&#39;clock direction and the clockwise direction is positive.\nIf <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code>, a complete sector or ring will be drawn</p>\n"},"arc.encode.update.padAngle":{"desc":"<p>Gap angle; the gap angle is converted into a fixed linear distance between two adjacent arcs, defined as <code class=\"codespan\">padRadius * | padAngle |</code></p>\n<p>This distance is equal at the beginning and end of the arc;\nThe gap angle should generally only be applied to annular sectors (i.e. when the inner radius is greater than 0)</p>\n"},"arc.encode.update.padRadius":{"desc":"<p>Used in conjunction with <code class=\"codespan\">padAngle</code></p>\n"},"arc.encode.update.cap":{"desc":"<p>Corresponds to the lineCap attribute of the line segment, lineCap represents how the line segment is drawn at the end, supporting two types of settings</p>\n<ul>\n<li><p><code class=\"codespan\">boolean</code>: <code class=\"codespan\">cap: true</code> means to add an angle at the starting position of the arc line, and the angle is <code class=\"codespan\">| outerRadius - innerRadius | / outerRadius</code></p>\n</li>\n<li><p><code class=\"codespan\">[boolean, boolean]</code>: set different end drawing strategies for the head and tail</p>\n</li>\n</ul>\n"},"arc.encode.update.forceShowCap":{"desc":"<p>When cap = true and gradient fill is used, automatically implement conical gradient, which is the circular gradient</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"arc.encode.update.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"arc.encode.update.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"arc.encode.update.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"arc.encode.update.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"arc.encode.update.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"arc.encode.update.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"arc.encode.update.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"arc.encode.update.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"arc.encode.update.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"arc.encode.update.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"arc.encode.update.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"arc.encode.update.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"arc.encode.update.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"arc.encode.update.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"arc.encode.update.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"arc.encode.update.outerBorder":{"desc":"<p>Outer border</p>\n"},"arc.encode.update.innerBorder":{"desc":"<p>Inner border</p>\n"},"arc.encode.update.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"arc.encode.update.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"arc.encode.update.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"arc.encode.update.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"arc.encode.update.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"arc.encode.update.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"arc.encode.update.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"arc.encode.update.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"arc.encode.update.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"arc.encode.update.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"arc.encode.update.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"arc.encode.update.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"arc.encode.update.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"arc.encode.update.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"arc.encode.update.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"arc.encode.update.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"arc.encode.update.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"arc.encode.update.texture":{"desc":"<p>The texture of the graphic</p>\n"},"arc.encode.update.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"arc.encode.update.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"arc.encode.update.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"arc.encode.update.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"arc.encode.update.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"arc.encode.exit":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data deletion state.</p>\n"},"arc.encode.exit.innerRadius":{"desc":"<p>Inner radius</p>\n"},"arc.encode.exit.outerRadius":{"desc":"<p>Outer radius</p>\n"},"arc.encode.exit.startAngle":{"desc":"<p>The starting angle of the arc;\nSpecified in radians, 0 represents the 12 o&#39;clock direction and the clockwise direction is positive.\nIf <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code>, a complete sector or ring will be drawn</p>\n"},"arc.encode.exit.endAngle":{"desc":"<p>The ending angle of the arc;\nSpecified in radians, 0 represents the 12 o&#39;clock direction and the clockwise direction is positive.\nIf <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code>, a complete sector or ring will be drawn</p>\n"},"arc.encode.exit.padAngle":{"desc":"<p>Gap angle; the gap angle is converted into a fixed linear distance between two adjacent arcs, defined as <code class=\"codespan\">padRadius * | padAngle |</code></p>\n<p>This distance is equal at the beginning and end of the arc;\nThe gap angle should generally only be applied to annular sectors (i.e. when the inner radius is greater than 0)</p>\n"},"arc.encode.exit.padRadius":{"desc":"<p>Used in conjunction with <code class=\"codespan\">padAngle</code></p>\n"},"arc.encode.exit.cap":{"desc":"<p>Corresponds to the lineCap attribute of the line segment, lineCap represents how the line segment is drawn at the end, supporting two types of settings</p>\n<ul>\n<li><p><code class=\"codespan\">boolean</code>: <code class=\"codespan\">cap: true</code> means to add an angle at the starting position of the arc line, and the angle is <code class=\"codespan\">| outerRadius - innerRadius | / outerRadius</code></p>\n</li>\n<li><p><code class=\"codespan\">[boolean, boolean]</code>: set different end drawing strategies for the head and tail</p>\n</li>\n</ul>\n"},"arc.encode.exit.forceShowCap":{"desc":"<p>When cap = true and gradient fill is used, automatically implement conical gradient, which is the circular gradient</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"arc.encode.exit.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"arc.encode.exit.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"arc.encode.exit.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"arc.encode.exit.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"arc.encode.exit.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"arc.encode.exit.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"arc.encode.exit.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"arc.encode.exit.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"arc.encode.exit.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"arc.encode.exit.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"arc.encode.exit.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"arc.encode.exit.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"arc.encode.exit.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"arc.encode.exit.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"arc.encode.exit.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"arc.encode.exit.outerBorder":{"desc":"<p>Outer border</p>\n"},"arc.encode.exit.innerBorder":{"desc":"<p>Inner border</p>\n"},"arc.encode.exit.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"arc.encode.exit.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"arc.encode.exit.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"arc.encode.exit.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"arc.encode.exit.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"arc.encode.exit.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"arc.encode.exit.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"arc.encode.exit.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"arc.encode.exit.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"arc.encode.exit.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"arc.encode.exit.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"arc.encode.exit.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"arc.encode.exit.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"arc.encode.exit.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"arc.encode.exit.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"arc.encode.exit.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"arc.encode.exit.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"arc.encode.exit.texture":{"desc":"<p>The texture of the graphic</p>\n"},"arc.encode.exit.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"arc.encode.exit.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"arc.encode.exit.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"arc.encode.exit.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"arc.encode.exit.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"arc.encode.hover":{"desc":"<p>Set the visual channel mapping corresponding to the graphics elements when in the <code class=\"codespan\">hover</code> state.</p>\n"},"arc.encode.hover.innerRadius":{"desc":"<p>Inner radius</p>\n"},"arc.encode.hover.outerRadius":{"desc":"<p>Outer radius</p>\n"},"arc.encode.hover.startAngle":{"desc":"<p>The starting angle of the arc;\nSpecified in radians, 0 represents the 12 o&#39;clock direction and the clockwise direction is positive.\nIf <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code>, a complete sector or ring will be drawn</p>\n"},"arc.encode.hover.endAngle":{"desc":"<p>The ending angle of the arc;\nSpecified in radians, 0 represents the 12 o&#39;clock direction and the clockwise direction is positive.\nIf <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code>, a complete sector or ring will be drawn</p>\n"},"arc.encode.hover.padAngle":{"desc":"<p>Gap angle; the gap angle is converted into a fixed linear distance between two adjacent arcs, defined as <code class=\"codespan\">padRadius * | padAngle |</code></p>\n<p>This distance is equal at the beginning and end of the arc;\nThe gap angle should generally only be applied to annular sectors (i.e. when the inner radius is greater than 0)</p>\n"},"arc.encode.hover.padRadius":{"desc":"<p>Used in conjunction with <code class=\"codespan\">padAngle</code></p>\n"},"arc.encode.hover.cap":{"desc":"<p>Corresponds to the lineCap attribute of the line segment, lineCap represents how the line segment is drawn at the end, supporting two types of settings</p>\n<ul>\n<li><p><code class=\"codespan\">boolean</code>: <code class=\"codespan\">cap: true</code> means to add an angle at the starting position of the arc line, and the angle is <code class=\"codespan\">| outerRadius - innerRadius | / outerRadius</code></p>\n</li>\n<li><p><code class=\"codespan\">[boolean, boolean]</code>: set different end drawing strategies for the head and tail</p>\n</li>\n</ul>\n"},"arc.encode.hover.forceShowCap":{"desc":"<p>When cap = true and gradient fill is used, automatically implement conical gradient, which is the circular gradient</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"arc.encode.hover.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"arc.encode.hover.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"arc.encode.hover.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"arc.encode.hover.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"arc.encode.hover.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"arc.encode.hover.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"arc.encode.hover.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"arc.encode.hover.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"arc.encode.hover.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"arc.encode.hover.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"arc.encode.hover.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"arc.encode.hover.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"arc.encode.hover.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"arc.encode.hover.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"arc.encode.hover.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"arc.encode.hover.outerBorder":{"desc":"<p>Outer border</p>\n"},"arc.encode.hover.innerBorder":{"desc":"<p>Inner border</p>\n"},"arc.encode.hover.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"arc.encode.hover.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"arc.encode.hover.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"arc.encode.hover.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"arc.encode.hover.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"arc.encode.hover.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"arc.encode.hover.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"arc.encode.hover.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"arc.encode.hover.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"arc.encode.hover.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"arc.encode.hover.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"arc.encode.hover.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"arc.encode.hover.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"arc.encode.hover.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"arc.encode.hover.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"arc.encode.hover.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"arc.encode.hover.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"arc.encode.hover.texture":{"desc":"<p>The texture of the graphic</p>\n"},"arc.encode.hover.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"arc.encode.hover.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"arc.encode.hover.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"arc.encode.hover.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"arc.encode.hover.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"arc.animationState":{"desc":"<p>Type: <code class=\"codespan\">MarkFunctionType</code>\nRequired: No\nanimation attributes</p>\n"},"arc.animation":{"desc":"<p>Supports setting various state corresponding animations, data-driven animation states have three types:</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>Interaction-triggered state changes are configured through a unified interaction animation, with the configuration key being <code class=\"codespan\">state</code></p>\n"},"arc.animation.type":{"desc":"<p>Animation execution type, specifying a specific built-in animation execution effect</p>\n<p>Universal built-in animation types include:</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: Fade in and out animations</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: Scaling animations</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: Move in and out animations</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: Rotation animations</li>\n<li><code class=\"codespan\">update</code>: Update animations</li>\n</ul>\n<p>arc primitive additional supported animation types include:</p>\n<ul>\n<li><code class=\"codespan\">growRadiusIn</code>/<code class=\"codespan\">growRadiusOut</code>: Radius growing animation</li>\n<li><code class=\"codespan\">growAngleIn</code>/<code class=\"codespan\">growAngleOut</code>: Angle growing animation</li>\n</ul>\n"},"arc.animation.channel":{"desc":"<p>Visual channels before and after the animation is executed, conflicts with <code class=\"codespan\">type</code> configuration</p>\n"},"arc.animation.custom":{"desc":"<p>Custom animation, if custom animation configuration is set, it will replace the default visual channel interpolation logic</p>\n"},"arc.animation.customParameters":{"desc":"<p>Custom animation parameters</p>\n"},"arc.animation.easing":{"desc":"<p>Animation easing, default is <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"arc.animation.delay":{"desc":"<p>Animation execution delay time, default is 0</p>\n"},"arc.animation.duration":{"desc":"<p>Animation execution duration, default is 1000ms</p>\n"},"arc.animation.oneByOne":{"desc":"<p>Animation execution delay time in sequence. If set to <code class=\"codespan\">true</code>, the next element&#39;s animation will be executed after the previous element&#39;s animation is completed. The default is <code class=\"codespan\">false</code>.</p>\n"},"arc.animation.startTime":{"desc":"<p>Initial time of animation execution, which will not be repeatedly applied in loop animation, default is 0</p>\n"},"arc.animation.totalTime":{"desc":"<p>Maximum time of animation execution, the animation will be terminated if it reaches the set time</p>\n"},"arc.animation.loop":{"desc":"<p>Number of animation loops, if set to <code class=\"codespan\">true</code>, it will loop infinitely</p>\n"},"arc.animation.options":{"desc":"<p>Additional parameters set for specific animation types execution</p>\n"},"arc.animation.controlOptions":{"desc":"<p>Control parameters for animation execution logic:</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: Whether to immediately terminate its animation when the animation state changes</li>\n<li><code class=\"codespan\">immediatelyApply</code>: Whether to immediately apply the initial visual channel of the animation</li>\n</ul>\n"},"arc.zIndex":{"desc":"<p>Set the zIndex of the container shape (group) corresponding to the <code class=\"codespan\">mark</code> graphic primitive</p>\n"},"arc.interactive":{"desc":"<p>Type: <code class=\"codespan\">boolean</code>\nRequired: No</p>\n"},"arc.context":{"desc":"<p>Set the context parameters of the graphic primitive</p>\n"},"arc.setCustomizedShape":{"desc":"<p>Set the callback function of custom shape. The corresponding ts type is as follows:</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>Where <code class=\"codespan\">ICustomPath2D</code> is a utility class provided by VRender for drawing custom paths.</p>\n"},"arc.support3d":{"desc":"<p>Whether to support 3d mode when the canvas is set to 3d view.</p>\n"},"arc.group":{"desc":"<p>Set the parent graphic primitive. Supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> The id of the corresponding parent graphic primitive</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> The corresponding grammar element of the parent graphic primitive, generally used in API call scenarios.</li>\n</ul>\n<p>If not set, it will be attached to the root node of the canvas by default.</p>\n"},"arc.from":{"desc":"<p>ts type definition is:</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>Declare the data on which the graphic primitive depends through the <code class=\"codespan\">data</code> attribute.</p>\n"},"arc.key":{"desc":"<p>Set the unique identifier for the graphic primitive data element, which is used to calculate the data state of the graphic element. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the <code class=\"codespan\">key</code></li>\n</ul>\n"},"arc.sort":{"desc":"<p>Sort all graphic elements in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"arc.groupBy":{"desc":"<p>Set the grouping attribute, the corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the grouping <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the grouping <code class=\"codespan\">key</code></li>\n</ul>\n"},"arc.groupSort":{"desc":"<p>Sort the groups in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"arc.coordinate":{"desc":"<p>Set the id or graphic element corresponding to the associated coordinate system of this graphic primitive</p>\n"},"arc.state":{"desc":"<p>Set the state values ​​of all graphical elements of the current graphic primitive, supporting three formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the state of the graphic, for example, <code class=\"codespan\">{ state: &#39;selected&#39;}</code> sets the state of all graphics to <code class=\"codespan\">&#39;selected&#39;</code>, usually in this case, the <code class=\"codespan\">encode</code> also sets the graphic channel mapping corresponding to the <code class=\"codespan\">&#39;selected&#39;</code> state</li>\n<li><code class=\"codespan\">string[]</code> Set multiple states for the graphic, you can configure <code class=\"codespan\">stateSort</code> to influence the order of executing the graphic channel mapping corresponding to the state</li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the state value, and the return parameter is <code class=\"codespan\">string | string[]</code>, the corresponding ts type definition is:</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"arc.stateSort":{"desc":"<p>Set the sorting function of the state values ​​of all graphics elements of the current graphic primitive, which will affect the order of the graphic channel mapping corresponding to the state. The result of the graphic channel mapping executed earlier may be covered by subsequent states. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"arc.transform":{"desc":"<p>Set the corresponding transformation of the graphic primitive. All data transformations can be configured on the graphic primitive and are used for the <code class=\"codespan\">join data</code> execution transformation;\nAnother type of transformation is the transformation executed by graphical elements, such as <code class=\"codespan\">dodge</code>;\nThe general type definition is as follows:</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>The parameters supported by each transformation are different</p>\n"},"arc.layout":{"desc":"<p>Set the layout parameters of the graphic primitive. There are two roles when the graphic primitive participates in the layout:</p>\n<ul>\n<li>&#39;container&#39; Container graphic primitive, usually <code class=\"codespan\">group</code> graphic primitive</li>\n<li>&#39;item&#39; layout child element, as a child node of the container graphic primitive</li>\n</ul>\n<p>Please note that we only support one layer of layout. If it is a multi-layer nested layout, it is recommended to use a custom layout scheme for implementation;</p>\n<p>Now support two content layouts: <code class=\"codespan\">grid</code> layout and <code class=\"codespan\">relative</code> layout, the related type definition is as follows</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>If you want to set a custom layout scheme, <code class=\"codespan\">layout</code> also supports setting callback functions directly. The definition of the callback function is as follows:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"arc.layout.display":{"desc":"<p>The container graphic primitive sets the layout type and supports two configurations:</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> Relative layout</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> Grid layout</li>\n</ul>\n"},"arc.layout.callback":{"desc":"<p>Customize the callback function for this graphic primitive, the ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"arc.layout.skipBeforeLayouted":{"desc":"<p>Skip the execution stage before the layout is completed</p>\n"},"arc.layout.updateViewSignals":{"desc":"<p>Whether to update the default view signals, that is: <code class=\"codespan\">padding</code>, <code class=\"codespan\">viewWidth</code> and <code class=\"codespan\">viewHeight</code></p>\n<p>This property can only be set on a container graphic primitive with <code class=\"codespan\">&#39;relative&#39;</code> layout.</p>\n"},"arc.layout.maxChildWidth":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum width of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the width of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"arc.layout.maxChildHeight":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum height of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the height of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"arc.layout.position":{"desc":"<p>Set the position of the child graphic primitive of the relative layout. The supported settings are:</p>\n<ul>\n<li>&#39;top&#39; Relative to the top of the parent graphic primitive</li>\n<li>&#39;bottom&#39; Relative to the bottom of the parent graphic primitive</li>\n<li>&#39;left&#39; Relative to the left side of the parent graphic primitive</li>\n<li>&#39;right&#39; Relative to the right side of the parent graphic primitive</li>\n<li>&#39;content&#39; Relative to the center of the parent graphic primitive, that is, the content area</li>\n<li>&#39;auto&#39; When the graphic primitive sets the coordinate system, the position relative to the parent graphic primitive is automatically calculated according to the associated <code class=\"codespan\">scale</code></li>\n</ul>\n"},"arc.layout.padding":{"desc":"<p>The inner padding of Child graphic primitive, in px unit, with the default padding of 0 for all directions. Accepts numerical values, numerical arrays, and objects for settings.</p>\n<p>Example of usage:</p>\n<pre><code class=\"lang-ts\">// Numerical type, set the padding to 5\npadding: 5;\n// Numerical array, set the top and bottom padding to 5, and the left and right padding to 10, similar to the CSS box model\npadding: [5, 10];\n// Numerical array, set the padding for all four directions separately\npadding: [\n  5, // Top\n  10, // Right\n  5, // Bottom\n  10 // Left\n];\n// Object type\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"arc.layout.gridTemplateRows":{"desc":"<p>The parent graphic primitive of the grid layout sets the row height</p>\n"},"arc.layout.gridTemplateColumns":{"desc":"<p>The parent graphic primitive of the grid layout sets the column width</p>\n"},"arc.layout.gridRowGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the row spacing</p>\n"},"arc.layout.gridColumnGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the column spacing</p>\n"},"arc.layout.gridRowStart":{"desc":"<p>The child graphic primitive of the grid layout sets the row start position</p>\n"},"arc.layout.gridRowEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the row end position</p>\n"},"arc.layout.gridColumnStart":{"desc":"<p>The child graphic primitive of the grid layout sets the column start position</p>\n"},"arc.layout.gridColumnEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the column end position</p>\n"},"arc.large":{"desc":"<p>Whether to enable large data rendering mode</p>\n"},"arc.largeThreshold":{"desc":"<p>The threshold for enabling large data rendering optimization, corresponding to the length of data</p>\n"},"arc.progressiveStep":{"desc":"<p>The step length for enabling progressive rendering, corresponding to the length of data in each shard</p>\n"},"arc.progressiveThreshold":{"desc":"<p>The threshold for enabling progressive rendering, corresponding to the length of single series data</p>\n"},"arc.morph":{"desc":"<p>Whether to enable global transition morph animations for the current graphic element</p>\n"},"arc.morphKey":{"desc":"<p>Used to match graphic elements for global transition morph animations, graphic elements with the same <code class=\"codespan\">morphKey</code> will undergo morph animations</p>\n"},"arc.morphElementKey":{"desc":"<p>For the matched graphic elements before and after, use this configuration to match the graphic element; if not declared, we will read the <code class=\"codespan\">key</code> configuration by default to match the graphic element for morph animations;\nSupports one-to-one, one-to-many, and many-to-one graphic morph animations by default</p>\n"},"symbol":{"desc":"<p><strong>Symbol Element</strong></p>\n"},"symbol.type":{"desc":"<p>Sets the element type as <code class=\"codespan\">symbol</code>.</p>\n"},"symbol.encode":{"desc":"<p>Set the visual channel encoding of the graphics elements, supporting three data change states by default:</p>\n<ul>\n<li><code class=\"codespan\">enter</code> newly added data items</li>\n<li><code class=\"codespan\">update</code> data items have been updated</li>\n<li><code class=\"codespan\">exit</code> data items are deleted</li>\n</ul>\n<p>Note that the data state here is automatically generated based on the <code class=\"codespan\">mark</code>&#39;s <code class=\"codespan\">key</code>. We will calculate the unique identifier for the data bound to the <code class=\"codespan\">mark</code> based on the <code class=\"codespan\">key</code> configuration. After the data is updated, if the corresponding unique identifier no longer exists, the state is <code class=\"codespan\">exit</code>; if it exists, it is <code class=\"codespan\">update</code>. If the previous data does not exist for the unique identifier, the data item&#39;s state is <code class=\"codespan\">enter</code>.</p>\n<p>Supports one interaction state by default:</p>\n<ul>\n<li><code class=\"codespan\">hover</code> when the mouse hovers over a specific shape, set the corresponding visual channel encoding for the shape</li>\n</ul>\n"},"symbol.encode.enter":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data initialization state. Note that it will not be executed again when the data is updated.</p>\n"},"symbol.encode.enter.symbolType":{"desc":"<p>Set the type, support for passing in built-in types, or you can set it to a custom path. The built-in types include:</p>\n<ul>\n<li>&#39;circle&#39;</li>\n<li>&#39;cross&#39;</li>\n<li>&#39;diamond&#39;</li>\n<li>&#39;square&#39;</li>\n<li>&#39;arrow&#39;</li>\n<li>&#39;arrow2Left&#39;</li>\n<li>&#39;arrow2Right&#39;</li>\n<li>&#39;wedge&#39;</li>\n<li>&#39;thinTriangle&#39;</li>\n<li>&#39;triangle&#39;</li>\n<li>&#39;triangleUp&#39;</li>\n<li>&#39;triangleDown&#39;</li>\n<li>&#39;triangleRight&#39;</li>\n<li>&#39;triangleLeft&#39;</li>\n<li>&#39;stroke&#39;</li>\n<li>&#39;star&#39;</li>\n<li>&#39;wye&#39;</li>\n<li>&#39;rect&#39;</li>\n</ul>\n"},"symbol.encode.enter.size":{"desc":"<p>Set the diameter of the circumscribed circle of the <code class=\"codespan\">symbol</code>, supporting two formats of settings</p>\n<ul>\n<li><code class=\"codespan\">number</code> Circumscribed circle diameter</li>\n<li><code class=\"codespan\">[number, number]</code> When <code class=\"codespan\">symbolType: &#39;rect&#39;</code>, set the width and height</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"symbol.encode.enter.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"symbol.encode.enter.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"symbol.encode.enter.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"symbol.encode.enter.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"symbol.encode.enter.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"symbol.encode.enter.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"symbol.encode.enter.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"symbol.encode.enter.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"symbol.encode.enter.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"symbol.encode.enter.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"symbol.encode.enter.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"symbol.encode.enter.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"symbol.encode.enter.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"symbol.encode.enter.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"symbol.encode.enter.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"symbol.encode.enter.outerBorder":{"desc":"<p>Outer border</p>\n"},"symbol.encode.enter.innerBorder":{"desc":"<p>Inner border</p>\n"},"symbol.encode.enter.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"symbol.encode.enter.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"symbol.encode.enter.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"symbol.encode.enter.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"symbol.encode.enter.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"symbol.encode.enter.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"symbol.encode.enter.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"symbol.encode.enter.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"symbol.encode.enter.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"symbol.encode.enter.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"symbol.encode.enter.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"symbol.encode.enter.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"symbol.encode.enter.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"symbol.encode.enter.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"symbol.encode.enter.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"symbol.encode.enter.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"symbol.encode.enter.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"symbol.encode.enter.texture":{"desc":"<p>The texture of the graphic</p>\n"},"symbol.encode.enter.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"symbol.encode.enter.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"symbol.encode.enter.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"symbol.encode.enter.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"symbol.encode.enter.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"symbol.encode.update":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data update state.</p>\n"},"symbol.encode.update.symbolType":{"desc":"<p>Set the type, support for passing in built-in types, or you can set it to a custom path. The built-in types include:</p>\n<ul>\n<li>&#39;circle&#39;</li>\n<li>&#39;cross&#39;</li>\n<li>&#39;diamond&#39;</li>\n<li>&#39;square&#39;</li>\n<li>&#39;arrow&#39;</li>\n<li>&#39;arrow2Left&#39;</li>\n<li>&#39;arrow2Right&#39;</li>\n<li>&#39;wedge&#39;</li>\n<li>&#39;thinTriangle&#39;</li>\n<li>&#39;triangle&#39;</li>\n<li>&#39;triangleUp&#39;</li>\n<li>&#39;triangleDown&#39;</li>\n<li>&#39;triangleRight&#39;</li>\n<li>&#39;triangleLeft&#39;</li>\n<li>&#39;stroke&#39;</li>\n<li>&#39;star&#39;</li>\n<li>&#39;wye&#39;</li>\n<li>&#39;rect&#39;</li>\n</ul>\n"},"symbol.encode.update.size":{"desc":"<p>Set the diameter of the circumscribed circle of the <code class=\"codespan\">symbol</code>, supporting two formats of settings</p>\n<ul>\n<li><code class=\"codespan\">number</code> Circumscribed circle diameter</li>\n<li><code class=\"codespan\">[number, number]</code> When <code class=\"codespan\">symbolType: &#39;rect&#39;</code>, set the width and height</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"symbol.encode.update.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"symbol.encode.update.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"symbol.encode.update.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"symbol.encode.update.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"symbol.encode.update.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"symbol.encode.update.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"symbol.encode.update.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"symbol.encode.update.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"symbol.encode.update.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"symbol.encode.update.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"symbol.encode.update.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"symbol.encode.update.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"symbol.encode.update.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"symbol.encode.update.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"symbol.encode.update.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"symbol.encode.update.outerBorder":{"desc":"<p>Outer border</p>\n"},"symbol.encode.update.innerBorder":{"desc":"<p>Inner border</p>\n"},"symbol.encode.update.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"symbol.encode.update.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"symbol.encode.update.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"symbol.encode.update.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"symbol.encode.update.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"symbol.encode.update.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"symbol.encode.update.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"symbol.encode.update.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"symbol.encode.update.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"symbol.encode.update.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"symbol.encode.update.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"symbol.encode.update.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"symbol.encode.update.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"symbol.encode.update.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"symbol.encode.update.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"symbol.encode.update.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"symbol.encode.update.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"symbol.encode.update.texture":{"desc":"<p>The texture of the graphic</p>\n"},"symbol.encode.update.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"symbol.encode.update.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"symbol.encode.update.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"symbol.encode.update.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"symbol.encode.update.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"symbol.encode.exit":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data deletion state.</p>\n"},"symbol.encode.exit.symbolType":{"desc":"<p>Set the type, support for passing in built-in types, or you can set it to a custom path. The built-in types include:</p>\n<ul>\n<li>&#39;circle&#39;</li>\n<li>&#39;cross&#39;</li>\n<li>&#39;diamond&#39;</li>\n<li>&#39;square&#39;</li>\n<li>&#39;arrow&#39;</li>\n<li>&#39;arrow2Left&#39;</li>\n<li>&#39;arrow2Right&#39;</li>\n<li>&#39;wedge&#39;</li>\n<li>&#39;thinTriangle&#39;</li>\n<li>&#39;triangle&#39;</li>\n<li>&#39;triangleUp&#39;</li>\n<li>&#39;triangleDown&#39;</li>\n<li>&#39;triangleRight&#39;</li>\n<li>&#39;triangleLeft&#39;</li>\n<li>&#39;stroke&#39;</li>\n<li>&#39;star&#39;</li>\n<li>&#39;wye&#39;</li>\n<li>&#39;rect&#39;</li>\n</ul>\n"},"symbol.encode.exit.size":{"desc":"<p>Set the diameter of the circumscribed circle of the <code class=\"codespan\">symbol</code>, supporting two formats of settings</p>\n<ul>\n<li><code class=\"codespan\">number</code> Circumscribed circle diameter</li>\n<li><code class=\"codespan\">[number, number]</code> When <code class=\"codespan\">symbolType: &#39;rect&#39;</code>, set the width and height</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"symbol.encode.exit.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"symbol.encode.exit.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"symbol.encode.exit.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"symbol.encode.exit.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"symbol.encode.exit.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"symbol.encode.exit.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"symbol.encode.exit.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"symbol.encode.exit.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"symbol.encode.exit.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"symbol.encode.exit.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"symbol.encode.exit.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"symbol.encode.exit.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"symbol.encode.exit.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"symbol.encode.exit.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"symbol.encode.exit.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"symbol.encode.exit.outerBorder":{"desc":"<p>Outer border</p>\n"},"symbol.encode.exit.innerBorder":{"desc":"<p>Inner border</p>\n"},"symbol.encode.exit.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"symbol.encode.exit.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"symbol.encode.exit.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"symbol.encode.exit.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"symbol.encode.exit.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"symbol.encode.exit.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"symbol.encode.exit.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"symbol.encode.exit.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"symbol.encode.exit.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"symbol.encode.exit.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"symbol.encode.exit.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"symbol.encode.exit.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"symbol.encode.exit.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"symbol.encode.exit.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"symbol.encode.exit.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"symbol.encode.exit.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"symbol.encode.exit.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"symbol.encode.exit.texture":{"desc":"<p>The texture of the graphic</p>\n"},"symbol.encode.exit.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"symbol.encode.exit.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"symbol.encode.exit.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"symbol.encode.exit.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"symbol.encode.exit.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"symbol.encode.hover":{"desc":"<p>Set the visual channel mapping corresponding to the graphics elements when in the <code class=\"codespan\">hover</code> state.</p>\n"},"symbol.encode.hover.symbolType":{"desc":"<p>Set the type, support for passing in built-in types, or you can set it to a custom path. The built-in types include:</p>\n<ul>\n<li>&#39;circle&#39;</li>\n<li>&#39;cross&#39;</li>\n<li>&#39;diamond&#39;</li>\n<li>&#39;square&#39;</li>\n<li>&#39;arrow&#39;</li>\n<li>&#39;arrow2Left&#39;</li>\n<li>&#39;arrow2Right&#39;</li>\n<li>&#39;wedge&#39;</li>\n<li>&#39;thinTriangle&#39;</li>\n<li>&#39;triangle&#39;</li>\n<li>&#39;triangleUp&#39;</li>\n<li>&#39;triangleDown&#39;</li>\n<li>&#39;triangleRight&#39;</li>\n<li>&#39;triangleLeft&#39;</li>\n<li>&#39;stroke&#39;</li>\n<li>&#39;star&#39;</li>\n<li>&#39;wye&#39;</li>\n<li>&#39;rect&#39;</li>\n</ul>\n"},"symbol.encode.hover.size":{"desc":"<p>Set the diameter of the circumscribed circle of the <code class=\"codespan\">symbol</code>, supporting two formats of settings</p>\n<ul>\n<li><code class=\"codespan\">number</code> Circumscribed circle diameter</li>\n<li><code class=\"codespan\">[number, number]</code> When <code class=\"codespan\">symbolType: &#39;rect&#39;</code>, set the width and height</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"symbol.encode.hover.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"symbol.encode.hover.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"symbol.encode.hover.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"symbol.encode.hover.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"symbol.encode.hover.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"symbol.encode.hover.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"symbol.encode.hover.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"symbol.encode.hover.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"symbol.encode.hover.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"symbol.encode.hover.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"symbol.encode.hover.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"symbol.encode.hover.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"symbol.encode.hover.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"symbol.encode.hover.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"symbol.encode.hover.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"symbol.encode.hover.outerBorder":{"desc":"<p>Outer border</p>\n"},"symbol.encode.hover.innerBorder":{"desc":"<p>Inner border</p>\n"},"symbol.encode.hover.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"symbol.encode.hover.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"symbol.encode.hover.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"symbol.encode.hover.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"symbol.encode.hover.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"symbol.encode.hover.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"symbol.encode.hover.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"symbol.encode.hover.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"symbol.encode.hover.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"symbol.encode.hover.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"symbol.encode.hover.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"symbol.encode.hover.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"symbol.encode.hover.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"symbol.encode.hover.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"symbol.encode.hover.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"symbol.encode.hover.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"symbol.encode.hover.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"symbol.encode.hover.texture":{"desc":"<p>The texture of the graphic</p>\n"},"symbol.encode.hover.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"symbol.encode.hover.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"symbol.encode.hover.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"symbol.encode.hover.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"symbol.encode.hover.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"symbol.animationState":{"desc":"<p>Type: <code class=\"codespan\">MarkFunctionType</code>\nRequired: No\nanimation attributes</p>\n"},"symbol.animation":{"desc":"<p>Supports setting various state corresponding animations, data-driven animation states have three types:</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>Interaction-triggered state changes are configured through a unified interaction animation, with the configuration key being <code class=\"codespan\">state</code></p>\n"},"symbol.animation.type":{"desc":"<p>Animation execution type, specifying a specific built-in animation execution effect</p>\n<p>Universal built-in animation types include:</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: Fade in and out animations</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: Scaling animations</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: Move in and out animations</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: Rotation animations</li>\n<li><code class=\"codespan\">update</code>: Update animations</li>\n</ul>\n"},"symbol.animation.channel":{"desc":"<p>Visual channels before and after the animation is executed, conflicts with <code class=\"codespan\">type</code> configuration</p>\n"},"symbol.animation.custom":{"desc":"<p>Custom animation, if custom animation configuration is set, it will replace the default visual channel interpolation logic</p>\n"},"symbol.animation.customParameters":{"desc":"<p>Custom animation parameters</p>\n"},"symbol.animation.easing":{"desc":"<p>Animation easing, default is <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"symbol.animation.delay":{"desc":"<p>Animation execution delay time, default is 0</p>\n"},"symbol.animation.duration":{"desc":"<p>Animation execution duration, default is 1000ms</p>\n"},"symbol.animation.oneByOne":{"desc":"<p>Animation execution delay time in sequence. If set to <code class=\"codespan\">true</code>, the next element&#39;s animation will be executed after the previous element&#39;s animation is completed. The default is <code class=\"codespan\">false</code>.</p>\n"},"symbol.animation.startTime":{"desc":"<p>Initial time of animation execution, which will not be repeatedly applied in loop animation, default is 0</p>\n"},"symbol.animation.totalTime":{"desc":"<p>Maximum time of animation execution, the animation will be terminated if it reaches the set time</p>\n"},"symbol.animation.loop":{"desc":"<p>Number of animation loops, if set to <code class=\"codespan\">true</code>, it will loop infinitely</p>\n"},"symbol.animation.options":{"desc":"<p>Additional parameters set for specific animation types execution</p>\n"},"symbol.animation.controlOptions":{"desc":"<p>Control parameters for animation execution logic:</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: Whether to immediately terminate its animation when the animation state changes</li>\n<li><code class=\"codespan\">immediatelyApply</code>: Whether to immediately apply the initial visual channel of the animation</li>\n</ul>\n"},"symbol.zIndex":{"desc":"<p>Set the zIndex of the container shape (group) corresponding to the <code class=\"codespan\">mark</code> graphic primitive</p>\n"},"symbol.interactive":{"desc":"<p>Type: <code class=\"codespan\">boolean</code>\nRequired: No</p>\n"},"symbol.context":{"desc":"<p>Set the context parameters of the graphic primitive</p>\n"},"symbol.setCustomizedShape":{"desc":"<p>Set the callback function of custom shape. The corresponding ts type is as follows:</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>Where <code class=\"codespan\">ICustomPath2D</code> is a utility class provided by VRender for drawing custom paths.</p>\n"},"symbol.support3d":{"desc":"<p>Whether to support 3d mode when the canvas is set to 3d view.</p>\n"},"symbol.group":{"desc":"<p>Set the parent graphic primitive. Supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> The id of the corresponding parent graphic primitive</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> The corresponding grammar element of the parent graphic primitive, generally used in API call scenarios.</li>\n</ul>\n<p>If not set, it will be attached to the root node of the canvas by default.</p>\n"},"symbol.from":{"desc":"<p>ts type definition is:</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>Declare the data on which the graphic primitive depends through the <code class=\"codespan\">data</code> attribute.</p>\n"},"symbol.key":{"desc":"<p>Set the unique identifier for the graphic primitive data element, which is used to calculate the data state of the graphic element. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the <code class=\"codespan\">key</code></li>\n</ul>\n"},"symbol.sort":{"desc":"<p>Sort all graphic elements in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"symbol.groupBy":{"desc":"<p>Set the grouping attribute, the corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the grouping <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the grouping <code class=\"codespan\">key</code></li>\n</ul>\n"},"symbol.groupSort":{"desc":"<p>Sort the groups in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"symbol.coordinate":{"desc":"<p>Set the id or graphic element corresponding to the associated coordinate system of this graphic primitive</p>\n"},"symbol.state":{"desc":"<p>Set the state values ​​of all graphical elements of the current graphic primitive, supporting three formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the state of the graphic, for example, <code class=\"codespan\">{ state: &#39;selected&#39;}</code> sets the state of all graphics to <code class=\"codespan\">&#39;selected&#39;</code>, usually in this case, the <code class=\"codespan\">encode</code> also sets the graphic channel mapping corresponding to the <code class=\"codespan\">&#39;selected&#39;</code> state</li>\n<li><code class=\"codespan\">string[]</code> Set multiple states for the graphic, you can configure <code class=\"codespan\">stateSort</code> to influence the order of executing the graphic channel mapping corresponding to the state</li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the state value, and the return parameter is <code class=\"codespan\">string | string[]</code>, the corresponding ts type definition is:</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"symbol.stateSort":{"desc":"<p>Set the sorting function of the state values ​​of all graphics elements of the current graphic primitive, which will affect the order of the graphic channel mapping corresponding to the state. The result of the graphic channel mapping executed earlier may be covered by subsequent states. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"symbol.transform":{"desc":"<p>Set the corresponding transformation of the graphic primitive. All data transformations can be configured on the graphic primitive and are used for the <code class=\"codespan\">join data</code> execution transformation;\nAnother type of transformation is the transformation executed by graphical elements, such as <code class=\"codespan\">dodge</code>;\nThe general type definition is as follows:</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>The parameters supported by each transformation are different</p>\n"},"symbol.layout":{"desc":"<p>Set the layout parameters of the graphic primitive. There are two roles when the graphic primitive participates in the layout:</p>\n<ul>\n<li>&#39;container&#39; Container graphic primitive, usually <code class=\"codespan\">group</code> graphic primitive</li>\n<li>&#39;item&#39; layout child element, as a child node of the container graphic primitive</li>\n</ul>\n<p>Please note that we only support one layer of layout. If it is a multi-layer nested layout, it is recommended to use a custom layout scheme for implementation;</p>\n<p>Now support two content layouts: <code class=\"codespan\">grid</code> layout and <code class=\"codespan\">relative</code> layout, the related type definition is as follows</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>If you want to set a custom layout scheme, <code class=\"codespan\">layout</code> also supports setting callback functions directly. The definition of the callback function is as follows:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"symbol.layout.display":{"desc":"<p>The container graphic primitive sets the layout type and supports two configurations:</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> Relative layout</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> Grid layout</li>\n</ul>\n"},"symbol.layout.callback":{"desc":"<p>Customize the callback function for this graphic primitive, the ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"symbol.layout.skipBeforeLayouted":{"desc":"<p>Skip the execution stage before the layout is completed</p>\n"},"symbol.layout.updateViewSignals":{"desc":"<p>Whether to update the default view signals, that is: <code class=\"codespan\">padding</code>, <code class=\"codespan\">viewWidth</code> and <code class=\"codespan\">viewHeight</code></p>\n<p>This property can only be set on a container graphic primitive with <code class=\"codespan\">&#39;relative&#39;</code> layout.</p>\n"},"symbol.layout.maxChildWidth":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum width of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the width of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"symbol.layout.maxChildHeight":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum height of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the height of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"symbol.layout.position":{"desc":"<p>Set the position of the child graphic primitive of the relative layout. The supported settings are:</p>\n<ul>\n<li>&#39;top&#39; Relative to the top of the parent graphic primitive</li>\n<li>&#39;bottom&#39; Relative to the bottom of the parent graphic primitive</li>\n<li>&#39;left&#39; Relative to the left side of the parent graphic primitive</li>\n<li>&#39;right&#39; Relative to the right side of the parent graphic primitive</li>\n<li>&#39;content&#39; Relative to the center of the parent graphic primitive, that is, the content area</li>\n<li>&#39;auto&#39; When the graphic primitive sets the coordinate system, the position relative to the parent graphic primitive is automatically calculated according to the associated <code class=\"codespan\">scale</code></li>\n</ul>\n"},"symbol.layout.padding":{"desc":"<p>The inner padding of Child graphic primitive, in px unit, with the default padding of 0 for all directions. Accepts numerical values, numerical arrays, and objects for settings.</p>\n<p>Example of usage:</p>\n<pre><code class=\"lang-ts\">// Numerical type, set the padding to 5\npadding: 5;\n// Numerical array, set the top and bottom padding to 5, and the left and right padding to 10, similar to the CSS box model\npadding: [5, 10];\n// Numerical array, set the padding for all four directions separately\npadding: [\n  5, // Top\n  10, // Right\n  5, // Bottom\n  10 // Left\n];\n// Object type\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"symbol.layout.gridTemplateRows":{"desc":"<p>The parent graphic primitive of the grid layout sets the row height</p>\n"},"symbol.layout.gridTemplateColumns":{"desc":"<p>The parent graphic primitive of the grid layout sets the column width</p>\n"},"symbol.layout.gridRowGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the row spacing</p>\n"},"symbol.layout.gridColumnGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the column spacing</p>\n"},"symbol.layout.gridRowStart":{"desc":"<p>The child graphic primitive of the grid layout sets the row start position</p>\n"},"symbol.layout.gridRowEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the row end position</p>\n"},"symbol.layout.gridColumnStart":{"desc":"<p>The child graphic primitive of the grid layout sets the column start position</p>\n"},"symbol.layout.gridColumnEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the column end position</p>\n"},"symbol.large":{"desc":"<p>Whether to enable large data rendering mode</p>\n"},"symbol.largeThreshold":{"desc":"<p>The threshold for enabling large data rendering optimization, corresponding to the length of data</p>\n"},"symbol.progressiveStep":{"desc":"<p>The step length for enabling progressive rendering, corresponding to the length of data in each shard</p>\n"},"symbol.progressiveThreshold":{"desc":"<p>The threshold for enabling progressive rendering, corresponding to the length of single series data</p>\n"},"symbol.morph":{"desc":"<p>Whether to enable global transition morph animations for the current graphic element</p>\n"},"symbol.morphKey":{"desc":"<p>Used to match graphic elements for global transition morph animations, graphic elements with the same <code class=\"codespan\">morphKey</code> will undergo morph animations</p>\n"},"symbol.morphElementKey":{"desc":"<p>For the matched graphic elements before and after, use this configuration to match the graphic element; if not declared, we will read the <code class=\"codespan\">key</code> configuration by default to match the graphic element for morph animations;\nSupports one-to-one, one-to-many, and many-to-one graphic morph animations by default</p>\n"},"circle":{"desc":"<p><strong> circle graphic element </strong></p>\n"},"circle.type":{"desc":"<p>Set the graphic element type to <code class=\"codespan\">circle</code></p>\n"},"circle.encode":{"desc":"<p>Set the visual channel encoding of the graphics elements, supporting three data change states by default:</p>\n<ul>\n<li><code class=\"codespan\">enter</code> newly added data items</li>\n<li><code class=\"codespan\">update</code> data items have been updated</li>\n<li><code class=\"codespan\">exit</code> data items are deleted</li>\n</ul>\n<p>Note that the data state here is automatically generated based on the <code class=\"codespan\">mark</code>&#39;s <code class=\"codespan\">key</code>. We will calculate the unique identifier for the data bound to the <code class=\"codespan\">mark</code> based on the <code class=\"codespan\">key</code> configuration. After the data is updated, if the corresponding unique identifier no longer exists, the state is <code class=\"codespan\">exit</code>; if it exists, it is <code class=\"codespan\">update</code>. If the previous data does not exist for the unique identifier, the data item&#39;s state is <code class=\"codespan\">enter</code>.</p>\n<p>Supports one interaction state by default:</p>\n<ul>\n<li><code class=\"codespan\">hover</code> when the mouse hovers over a specific shape, set the corresponding visual channel encoding for the shape</li>\n</ul>\n"},"circle.encode.enter":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data initialization state. Note that it will not be executed again when the data is updated.</p>\n"},"circle.encode.enter.radius":{"desc":"<p>The radius of the circle</p>\n"},"circle.encode.enter.startAngle":{"desc":"<p>The starting angle of the circle;\nSpecified in radians, 0 represents the 12 o&#39;clock direction and the clockwise direction is positive.\nIf <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code>, a complete circle will be drawn, by default it is a full circle</p>\n"},"circle.encode.enter.endAngle":{"desc":"<p>The ending angle of the circle;\nSpecified in radians, 0 represents the 12 o&#39;clock direction and the clockwise direction is positive.\nIf <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code>, a complete circle will be drawn, by default it is a full circle</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"circle.encode.enter.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"circle.encode.enter.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"circle.encode.enter.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"circle.encode.enter.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"circle.encode.enter.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"circle.encode.enter.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"circle.encode.enter.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"circle.encode.enter.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"circle.encode.enter.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"circle.encode.enter.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"circle.encode.enter.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"circle.encode.enter.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"circle.encode.enter.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"circle.encode.enter.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"circle.encode.enter.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"circle.encode.enter.outerBorder":{"desc":"<p>Outer border</p>\n"},"circle.encode.enter.innerBorder":{"desc":"<p>Inner border</p>\n"},"circle.encode.enter.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"circle.encode.enter.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"circle.encode.enter.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"circle.encode.enter.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"circle.encode.enter.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"circle.encode.enter.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"circle.encode.enter.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"circle.encode.enter.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"circle.encode.enter.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"circle.encode.enter.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"circle.encode.enter.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"circle.encode.enter.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"circle.encode.enter.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"circle.encode.enter.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"circle.encode.enter.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"circle.encode.enter.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"circle.encode.enter.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"circle.encode.enter.texture":{"desc":"<p>The texture of the graphic</p>\n"},"circle.encode.enter.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"circle.encode.enter.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"circle.encode.enter.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"circle.encode.enter.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"circle.encode.enter.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"circle.encode.update":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data update state.</p>\n"},"circle.encode.update.radius":{"desc":"<p>The radius of the circle</p>\n"},"circle.encode.update.startAngle":{"desc":"<p>The starting angle of the circle;\nSpecified in radians, 0 represents the 12 o&#39;clock direction and the clockwise direction is positive.\nIf <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code>, a complete circle will be drawn, by default it is a full circle</p>\n"},"circle.encode.update.endAngle":{"desc":"<p>The ending angle of the circle;\nSpecified in radians, 0 represents the 12 o&#39;clock direction and the clockwise direction is positive.\nIf <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code>, a complete circle will be drawn, by default it is a full circle</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"circle.encode.update.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"circle.encode.update.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"circle.encode.update.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"circle.encode.update.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"circle.encode.update.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"circle.encode.update.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"circle.encode.update.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"circle.encode.update.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"circle.encode.update.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"circle.encode.update.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"circle.encode.update.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"circle.encode.update.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"circle.encode.update.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"circle.encode.update.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"circle.encode.update.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"circle.encode.update.outerBorder":{"desc":"<p>Outer border</p>\n"},"circle.encode.update.innerBorder":{"desc":"<p>Inner border</p>\n"},"circle.encode.update.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"circle.encode.update.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"circle.encode.update.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"circle.encode.update.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"circle.encode.update.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"circle.encode.update.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"circle.encode.update.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"circle.encode.update.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"circle.encode.update.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"circle.encode.update.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"circle.encode.update.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"circle.encode.update.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"circle.encode.update.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"circle.encode.update.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"circle.encode.update.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"circle.encode.update.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"circle.encode.update.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"circle.encode.update.texture":{"desc":"<p>The texture of the graphic</p>\n"},"circle.encode.update.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"circle.encode.update.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"circle.encode.update.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"circle.encode.update.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"circle.encode.update.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"circle.encode.exit":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data deletion state.</p>\n"},"circle.encode.exit.radius":{"desc":"<p>The radius of the circle</p>\n"},"circle.encode.exit.startAngle":{"desc":"<p>The starting angle of the circle;\nSpecified in radians, 0 represents the 12 o&#39;clock direction and the clockwise direction is positive.\nIf <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code>, a complete circle will be drawn, by default it is a full circle</p>\n"},"circle.encode.exit.endAngle":{"desc":"<p>The ending angle of the circle;\nSpecified in radians, 0 represents the 12 o&#39;clock direction and the clockwise direction is positive.\nIf <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code>, a complete circle will be drawn, by default it is a full circle</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"circle.encode.exit.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"circle.encode.exit.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"circle.encode.exit.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"circle.encode.exit.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"circle.encode.exit.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"circle.encode.exit.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"circle.encode.exit.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"circle.encode.exit.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"circle.encode.exit.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"circle.encode.exit.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"circle.encode.exit.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"circle.encode.exit.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"circle.encode.exit.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"circle.encode.exit.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"circle.encode.exit.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"circle.encode.exit.outerBorder":{"desc":"<p>Outer border</p>\n"},"circle.encode.exit.innerBorder":{"desc":"<p>Inner border</p>\n"},"circle.encode.exit.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"circle.encode.exit.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"circle.encode.exit.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"circle.encode.exit.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"circle.encode.exit.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"circle.encode.exit.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"circle.encode.exit.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"circle.encode.exit.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"circle.encode.exit.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"circle.encode.exit.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"circle.encode.exit.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"circle.encode.exit.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"circle.encode.exit.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"circle.encode.exit.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"circle.encode.exit.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"circle.encode.exit.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"circle.encode.exit.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"circle.encode.exit.texture":{"desc":"<p>The texture of the graphic</p>\n"},"circle.encode.exit.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"circle.encode.exit.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"circle.encode.exit.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"circle.encode.exit.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"circle.encode.exit.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"circle.encode.hover":{"desc":"<p>Set the visual channel mapping corresponding to the graphics elements when in the <code class=\"codespan\">hover</code> state.</p>\n"},"circle.encode.hover.radius":{"desc":"<p>The radius of the circle</p>\n"},"circle.encode.hover.startAngle":{"desc":"<p>The starting angle of the circle;\nSpecified in radians, 0 represents the 12 o&#39;clock direction and the clockwise direction is positive.\nIf <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code>, a complete circle will be drawn, by default it is a full circle</p>\n"},"circle.encode.hover.endAngle":{"desc":"<p>The ending angle of the circle;\nSpecified in radians, 0 represents the 12 o&#39;clock direction and the clockwise direction is positive.\nIf <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code>, a complete circle will be drawn, by default it is a full circle</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"circle.encode.hover.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"circle.encode.hover.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"circle.encode.hover.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"circle.encode.hover.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"circle.encode.hover.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"circle.encode.hover.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"circle.encode.hover.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"circle.encode.hover.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"circle.encode.hover.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"circle.encode.hover.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"circle.encode.hover.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"circle.encode.hover.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"circle.encode.hover.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"circle.encode.hover.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"circle.encode.hover.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"circle.encode.hover.outerBorder":{"desc":"<p>Outer border</p>\n"},"circle.encode.hover.innerBorder":{"desc":"<p>Inner border</p>\n"},"circle.encode.hover.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"circle.encode.hover.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"circle.encode.hover.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"circle.encode.hover.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"circle.encode.hover.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"circle.encode.hover.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"circle.encode.hover.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"circle.encode.hover.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"circle.encode.hover.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"circle.encode.hover.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"circle.encode.hover.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"circle.encode.hover.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"circle.encode.hover.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"circle.encode.hover.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"circle.encode.hover.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"circle.encode.hover.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"circle.encode.hover.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"circle.encode.hover.texture":{"desc":"<p>The texture of the graphic</p>\n"},"circle.encode.hover.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"circle.encode.hover.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"circle.encode.hover.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"circle.encode.hover.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"circle.encode.hover.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"circle.animationState":{"desc":"<p>Type: <code class=\"codespan\">MarkFunctionType</code>\nRequired: No\nanimation attributes</p>\n"},"circle.animation":{"desc":"<p>Supports setting various state corresponding animations, data-driven animation states have three types:</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>Interaction-triggered state changes are configured through a unified interaction animation, with the configuration key being <code class=\"codespan\">state</code></p>\n"},"circle.animation.type":{"desc":"<p>Animation execution type, specifying a specific built-in animation execution effect</p>\n<p>Universal built-in animation types include:</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: Fade in and out animations</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: Scaling animations</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: Move in and out animations</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: Rotation animations</li>\n<li><code class=\"codespan\">update</code>: Update animations</li>\n</ul>\n"},"circle.animation.channel":{"desc":"<p>Visual channels before and after the animation is executed, conflicts with <code class=\"codespan\">type</code> configuration</p>\n"},"circle.animation.custom":{"desc":"<p>Custom animation, if custom animation configuration is set, it will replace the default visual channel interpolation logic</p>\n"},"circle.animation.customParameters":{"desc":"<p>Custom animation parameters</p>\n"},"circle.animation.easing":{"desc":"<p>Animation easing, default is <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"circle.animation.delay":{"desc":"<p>Animation execution delay time, default is 0</p>\n"},"circle.animation.duration":{"desc":"<p>Animation execution duration, default is 1000ms</p>\n"},"circle.animation.oneByOne":{"desc":"<p>Animation execution delay time in sequence. If set to <code class=\"codespan\">true</code>, the next element&#39;s animation will be executed after the previous element&#39;s animation is completed. The default is <code class=\"codespan\">false</code>.</p>\n"},"circle.animation.startTime":{"desc":"<p>Initial time of animation execution, which will not be repeatedly applied in loop animation, default is 0</p>\n"},"circle.animation.totalTime":{"desc":"<p>Maximum time of animation execution, the animation will be terminated if it reaches the set time</p>\n"},"circle.animation.loop":{"desc":"<p>Number of animation loops, if set to <code class=\"codespan\">true</code>, it will loop infinitely</p>\n"},"circle.animation.options":{"desc":"<p>Additional parameters set for specific animation types execution</p>\n"},"circle.animation.controlOptions":{"desc":"<p>Control parameters for animation execution logic:</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: Whether to immediately terminate its animation when the animation state changes</li>\n<li><code class=\"codespan\">immediatelyApply</code>: Whether to immediately apply the initial visual channel of the animation</li>\n</ul>\n"},"circle.zIndex":{"desc":"<p>Set the zIndex of the container shape (group) corresponding to the <code class=\"codespan\">mark</code> graphic primitive</p>\n"},"circle.interactive":{"desc":"<p>Type: <code class=\"codespan\">boolean</code>\nRequired: No</p>\n"},"circle.context":{"desc":"<p>Set the context parameters of the graphic primitive</p>\n"},"circle.setCustomizedShape":{"desc":"<p>Set the callback function of custom shape. The corresponding ts type is as follows:</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>Where <code class=\"codespan\">ICustomPath2D</code> is a utility class provided by VRender for drawing custom paths.</p>\n"},"circle.support3d":{"desc":"<p>Whether to support 3d mode when the canvas is set to 3d view.</p>\n"},"circle.group":{"desc":"<p>Set the parent graphic primitive. Supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> The id of the corresponding parent graphic primitive</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> The corresponding grammar element of the parent graphic primitive, generally used in API call scenarios.</li>\n</ul>\n<p>If not set, it will be attached to the root node of the canvas by default.</p>\n"},"circle.from":{"desc":"<p>ts type definition is:</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>Declare the data on which the graphic primitive depends through the <code class=\"codespan\">data</code> attribute.</p>\n"},"circle.key":{"desc":"<p>Set the unique identifier for the graphic primitive data element, which is used to calculate the data state of the graphic element. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the <code class=\"codespan\">key</code></li>\n</ul>\n"},"circle.sort":{"desc":"<p>Sort all graphic elements in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"circle.groupBy":{"desc":"<p>Set the grouping attribute, the corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the grouping <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the grouping <code class=\"codespan\">key</code></li>\n</ul>\n"},"circle.groupSort":{"desc":"<p>Sort the groups in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"circle.coordinate":{"desc":"<p>Set the id or graphic element corresponding to the associated coordinate system of this graphic primitive</p>\n"},"circle.state":{"desc":"<p>Set the state values ​​of all graphical elements of the current graphic primitive, supporting three formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the state of the graphic, for example, <code class=\"codespan\">{ state: &#39;selected&#39;}</code> sets the state of all graphics to <code class=\"codespan\">&#39;selected&#39;</code>, usually in this case, the <code class=\"codespan\">encode</code> also sets the graphic channel mapping corresponding to the <code class=\"codespan\">&#39;selected&#39;</code> state</li>\n<li><code class=\"codespan\">string[]</code> Set multiple states for the graphic, you can configure <code class=\"codespan\">stateSort</code> to influence the order of executing the graphic channel mapping corresponding to the state</li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the state value, and the return parameter is <code class=\"codespan\">string | string[]</code>, the corresponding ts type definition is:</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"circle.stateSort":{"desc":"<p>Set the sorting function of the state values ​​of all graphics elements of the current graphic primitive, which will affect the order of the graphic channel mapping corresponding to the state. The result of the graphic channel mapping executed earlier may be covered by subsequent states. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"circle.transform":{"desc":"<p>Set the corresponding transformation of the graphic primitive. All data transformations can be configured on the graphic primitive and are used for the <code class=\"codespan\">join data</code> execution transformation;\nAnother type of transformation is the transformation executed by graphical elements, such as <code class=\"codespan\">dodge</code>;\nThe general type definition is as follows:</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>The parameters supported by each transformation are different</p>\n"},"circle.layout":{"desc":"<p>Set the layout parameters of the graphic primitive. There are two roles when the graphic primitive participates in the layout:</p>\n<ul>\n<li>&#39;container&#39; Container graphic primitive, usually <code class=\"codespan\">group</code> graphic primitive</li>\n<li>&#39;item&#39; layout child element, as a child node of the container graphic primitive</li>\n</ul>\n<p>Please note that we only support one layer of layout. If it is a multi-layer nested layout, it is recommended to use a custom layout scheme for implementation;</p>\n<p>Now support two content layouts: <code class=\"codespan\">grid</code> layout and <code class=\"codespan\">relative</code> layout, the related type definition is as follows</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>If you want to set a custom layout scheme, <code class=\"codespan\">layout</code> also supports setting callback functions directly. The definition of the callback function is as follows:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"circle.layout.display":{"desc":"<p>The container graphic primitive sets the layout type and supports two configurations:</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> Relative layout</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> Grid layout</li>\n</ul>\n"},"circle.layout.callback":{"desc":"<p>Customize the callback function for this graphic primitive, the ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"circle.layout.skipBeforeLayouted":{"desc":"<p>Skip the execution stage before the layout is completed</p>\n"},"circle.layout.updateViewSignals":{"desc":"<p>Whether to update the default view signals, that is: <code class=\"codespan\">padding</code>, <code class=\"codespan\">viewWidth</code> and <code class=\"codespan\">viewHeight</code></p>\n<p>This property can only be set on a container graphic primitive with <code class=\"codespan\">&#39;relative&#39;</code> layout.</p>\n"},"circle.layout.maxChildWidth":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum width of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the width of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"circle.layout.maxChildHeight":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum height of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the height of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"circle.layout.position":{"desc":"<p>Set the position of the child graphic primitive of the relative layout. The supported settings are:</p>\n<ul>\n<li>&#39;top&#39; Relative to the top of the parent graphic primitive</li>\n<li>&#39;bottom&#39; Relative to the bottom of the parent graphic primitive</li>\n<li>&#39;left&#39; Relative to the left side of the parent graphic primitive</li>\n<li>&#39;right&#39; Relative to the right side of the parent graphic primitive</li>\n<li>&#39;content&#39; Relative to the center of the parent graphic primitive, that is, the content area</li>\n<li>&#39;auto&#39; When the graphic primitive sets the coordinate system, the position relative to the parent graphic primitive is automatically calculated according to the associated <code class=\"codespan\">scale</code></li>\n</ul>\n"},"circle.layout.padding":{"desc":"<p>The inner padding of Child graphic primitive, in px unit, with the default padding of 0 for all directions. Accepts numerical values, numerical arrays, and objects for settings.</p>\n<p>Example of usage:</p>\n<pre><code class=\"lang-ts\">// Numerical type, set the padding to 5\npadding: 5;\n// Numerical array, set the top and bottom padding to 5, and the left and right padding to 10, similar to the CSS box model\npadding: [5, 10];\n// Numerical array, set the padding for all four directions separately\npadding: [\n  5, // Top\n  10, // Right\n  5, // Bottom\n  10 // Left\n];\n// Object type\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"circle.layout.gridTemplateRows":{"desc":"<p>The parent graphic primitive of the grid layout sets the row height</p>\n"},"circle.layout.gridTemplateColumns":{"desc":"<p>The parent graphic primitive of the grid layout sets the column width</p>\n"},"circle.layout.gridRowGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the row spacing</p>\n"},"circle.layout.gridColumnGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the column spacing</p>\n"},"circle.layout.gridRowStart":{"desc":"<p>The child graphic primitive of the grid layout sets the row start position</p>\n"},"circle.layout.gridRowEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the row end position</p>\n"},"circle.layout.gridColumnStart":{"desc":"<p>The child graphic primitive of the grid layout sets the column start position</p>\n"},"circle.layout.gridColumnEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the column end position</p>\n"},"circle.large":{"desc":"<p>Whether to enable large data rendering mode</p>\n"},"circle.largeThreshold":{"desc":"<p>The threshold for enabling large data rendering optimization, corresponding to the length of data</p>\n"},"circle.progressiveStep":{"desc":"<p>The step length for enabling progressive rendering, corresponding to the length of data in each shard</p>\n"},"circle.progressiveThreshold":{"desc":"<p>The threshold for enabling progressive rendering, corresponding to the length of single series data</p>\n"},"circle.morph":{"desc":"<p>Whether to enable global transition morph animations for the current graphic element</p>\n"},"circle.morphKey":{"desc":"<p>Used to match graphic elements for global transition morph animations, graphic elements with the same <code class=\"codespan\">morphKey</code> will undergo morph animations</p>\n"},"circle.morphElementKey":{"desc":"<p>For the matched graphic elements before and after, use this configuration to match the graphic element; if not declared, we will read the <code class=\"codespan\">key</code> configuration by default to match the graphic element for morph animations;\nSupports one-to-one, one-to-many, and many-to-one graphic morph animations by default</p>\n"},"polygon":{"desc":"<p><strong> polygon mark </strong></p>\n"},"polygon.type":{"desc":"<p>Set the mark type to <code class=\"codespan\">polygon</code></p>\n"},"polygon.encode":{"desc":"<p>Set the visual channel encoding of the graphics elements, supporting three data change states by default:</p>\n<ul>\n<li><code class=\"codespan\">enter</code> newly added data items</li>\n<li><code class=\"codespan\">update</code> data items have been updated</li>\n<li><code class=\"codespan\">exit</code> data items are deleted</li>\n</ul>\n<p>Note that the data state here is automatically generated based on the <code class=\"codespan\">mark</code>&#39;s <code class=\"codespan\">key</code>. We will calculate the unique identifier for the data bound to the <code class=\"codespan\">mark</code> based on the <code class=\"codespan\">key</code> configuration. After the data is updated, if the corresponding unique identifier no longer exists, the state is <code class=\"codespan\">exit</code>; if it exists, it is <code class=\"codespan\">update</code>. If the previous data does not exist for the unique identifier, the data item&#39;s state is <code class=\"codespan\">enter</code>.</p>\n<p>Supports one interaction state by default:</p>\n<ul>\n<li><code class=\"codespan\">hover</code> when the mouse hovers over a specific shape, set the corresponding visual channel encoding for the shape</li>\n</ul>\n"},"polygon.encode.enter":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data initialization state. Note that it will not be executed again when the data is updated.</p>\n"},"polygon.encode.enter.points":{"desc":"<p>Points corresponding to the polygon</p>\n"},"polygon.encode.enter.borderRadius":{"desc":"<p>Set the border radius, default is 0, support two formats:</p>\n<ul>\n<li><code class=\"codespan\">number</code>: Set a uniform border radius for all corners</li>\n<li><code class=\"codespan\">number[]</code>: Set different border radius for each corner separately</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"polygon.encode.enter.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"polygon.encode.enter.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"polygon.encode.enter.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"polygon.encode.enter.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"polygon.encode.enter.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"polygon.encode.enter.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"polygon.encode.enter.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"polygon.encode.enter.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"polygon.encode.enter.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"polygon.encode.enter.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"polygon.encode.enter.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"polygon.encode.enter.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"polygon.encode.enter.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"polygon.encode.enter.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"polygon.encode.enter.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"polygon.encode.enter.outerBorder":{"desc":"<p>Outer border</p>\n"},"polygon.encode.enter.innerBorder":{"desc":"<p>Inner border</p>\n"},"polygon.encode.enter.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"polygon.encode.enter.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"polygon.encode.enter.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"polygon.encode.enter.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"polygon.encode.enter.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"polygon.encode.enter.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"polygon.encode.enter.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"polygon.encode.enter.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"polygon.encode.enter.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"polygon.encode.enter.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"polygon.encode.enter.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"polygon.encode.enter.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"polygon.encode.enter.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"polygon.encode.enter.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"polygon.encode.enter.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"polygon.encode.enter.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"polygon.encode.enter.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"polygon.encode.enter.texture":{"desc":"<p>The texture of the graphic</p>\n"},"polygon.encode.enter.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"polygon.encode.enter.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"polygon.encode.enter.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"polygon.encode.enter.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"polygon.encode.enter.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"polygon.encode.update":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data update state.</p>\n"},"polygon.encode.update.points":{"desc":"<p>Points corresponding to the polygon</p>\n"},"polygon.encode.update.borderRadius":{"desc":"<p>Set the border radius, default is 0, support two formats:</p>\n<ul>\n<li><code class=\"codespan\">number</code>: Set a uniform border radius for all corners</li>\n<li><code class=\"codespan\">number[]</code>: Set different border radius for each corner separately</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"polygon.encode.update.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"polygon.encode.update.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"polygon.encode.update.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"polygon.encode.update.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"polygon.encode.update.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"polygon.encode.update.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"polygon.encode.update.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"polygon.encode.update.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"polygon.encode.update.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"polygon.encode.update.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"polygon.encode.update.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"polygon.encode.update.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"polygon.encode.update.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"polygon.encode.update.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"polygon.encode.update.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"polygon.encode.update.outerBorder":{"desc":"<p>Outer border</p>\n"},"polygon.encode.update.innerBorder":{"desc":"<p>Inner border</p>\n"},"polygon.encode.update.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"polygon.encode.update.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"polygon.encode.update.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"polygon.encode.update.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"polygon.encode.update.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"polygon.encode.update.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"polygon.encode.update.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"polygon.encode.update.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"polygon.encode.update.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"polygon.encode.update.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"polygon.encode.update.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"polygon.encode.update.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"polygon.encode.update.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"polygon.encode.update.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"polygon.encode.update.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"polygon.encode.update.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"polygon.encode.update.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"polygon.encode.update.texture":{"desc":"<p>The texture of the graphic</p>\n"},"polygon.encode.update.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"polygon.encode.update.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"polygon.encode.update.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"polygon.encode.update.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"polygon.encode.update.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"polygon.encode.exit":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data deletion state.</p>\n"},"polygon.encode.exit.points":{"desc":"<p>Points corresponding to the polygon</p>\n"},"polygon.encode.exit.borderRadius":{"desc":"<p>Set the border radius, default is 0, support two formats:</p>\n<ul>\n<li><code class=\"codespan\">number</code>: Set a uniform border radius for all corners</li>\n<li><code class=\"codespan\">number[]</code>: Set different border radius for each corner separately</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"polygon.encode.exit.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"polygon.encode.exit.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"polygon.encode.exit.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"polygon.encode.exit.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"polygon.encode.exit.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"polygon.encode.exit.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"polygon.encode.exit.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"polygon.encode.exit.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"polygon.encode.exit.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"polygon.encode.exit.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"polygon.encode.exit.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"polygon.encode.exit.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"polygon.encode.exit.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"polygon.encode.exit.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"polygon.encode.exit.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"polygon.encode.exit.outerBorder":{"desc":"<p>Outer border</p>\n"},"polygon.encode.exit.innerBorder":{"desc":"<p>Inner border</p>\n"},"polygon.encode.exit.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"polygon.encode.exit.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"polygon.encode.exit.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"polygon.encode.exit.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"polygon.encode.exit.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"polygon.encode.exit.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"polygon.encode.exit.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"polygon.encode.exit.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"polygon.encode.exit.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"polygon.encode.exit.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"polygon.encode.exit.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"polygon.encode.exit.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"polygon.encode.exit.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"polygon.encode.exit.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"polygon.encode.exit.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"polygon.encode.exit.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"polygon.encode.exit.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"polygon.encode.exit.texture":{"desc":"<p>The texture of the graphic</p>\n"},"polygon.encode.exit.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"polygon.encode.exit.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"polygon.encode.exit.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"polygon.encode.exit.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"polygon.encode.exit.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"polygon.encode.hover":{"desc":"<p>Set the visual channel mapping corresponding to the graphics elements when in the <code class=\"codespan\">hover</code> state.</p>\n"},"polygon.encode.hover.points":{"desc":"<p>Points corresponding to the polygon</p>\n"},"polygon.encode.hover.borderRadius":{"desc":"<p>Set the border radius, default is 0, support two formats:</p>\n<ul>\n<li><code class=\"codespan\">number</code>: Set a uniform border radius for all corners</li>\n<li><code class=\"codespan\">number[]</code>: Set different border radius for each corner separately</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"polygon.encode.hover.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"polygon.encode.hover.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"polygon.encode.hover.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"polygon.encode.hover.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"polygon.encode.hover.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"polygon.encode.hover.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"polygon.encode.hover.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"polygon.encode.hover.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"polygon.encode.hover.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"polygon.encode.hover.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"polygon.encode.hover.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"polygon.encode.hover.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"polygon.encode.hover.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"polygon.encode.hover.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"polygon.encode.hover.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"polygon.encode.hover.outerBorder":{"desc":"<p>Outer border</p>\n"},"polygon.encode.hover.innerBorder":{"desc":"<p>Inner border</p>\n"},"polygon.encode.hover.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"polygon.encode.hover.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"polygon.encode.hover.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"polygon.encode.hover.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"polygon.encode.hover.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"polygon.encode.hover.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"polygon.encode.hover.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"polygon.encode.hover.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"polygon.encode.hover.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"polygon.encode.hover.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"polygon.encode.hover.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"polygon.encode.hover.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"polygon.encode.hover.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"polygon.encode.hover.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"polygon.encode.hover.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"polygon.encode.hover.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"polygon.encode.hover.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"polygon.encode.hover.texture":{"desc":"<p>The texture of the graphic</p>\n"},"polygon.encode.hover.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"polygon.encode.hover.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"polygon.encode.hover.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"polygon.encode.hover.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"polygon.encode.hover.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"polygon.animationState":{"desc":"<p>Type: <code class=\"codespan\">MarkFunctionType</code>\nRequired: No\nanimation attributes</p>\n"},"polygon.animation":{"desc":"<p>Supports setting various state corresponding animations, data-driven animation states have three types:</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>Interaction-triggered state changes are configured through a unified interaction animation, with the configuration key being <code class=\"codespan\">state</code></p>\n"},"polygon.animation.type":{"desc":"<p>Animation execution type, specifying a specific built-in animation execution effect</p>\n<p>Universal built-in animation types include:</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: Fade in and out animations</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: Scaling animations</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: Move in and out animations</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: Rotation animations</li>\n<li><code class=\"codespan\">update</code>: Update animations</li>\n</ul>\n<p>polygon primitive additional supported animation types include:</p>\n<ul>\n<li><code class=\"codespan\">growPointsIn</code>/<code class=\"codespan\">growPointsOut</code>: Point growing animation</li>\n</ul>\n"},"polygon.animation.channel":{"desc":"<p>Visual channels before and after the animation is executed, conflicts with <code class=\"codespan\">type</code> configuration</p>\n"},"polygon.animation.custom":{"desc":"<p>Custom animation, if custom animation configuration is set, it will replace the default visual channel interpolation logic</p>\n"},"polygon.animation.customParameters":{"desc":"<p>Custom animation parameters</p>\n"},"polygon.animation.easing":{"desc":"<p>Animation easing, default is <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"polygon.animation.delay":{"desc":"<p>Animation execution delay time, default is 0</p>\n"},"polygon.animation.duration":{"desc":"<p>Animation execution duration, default is 1000ms</p>\n"},"polygon.animation.oneByOne":{"desc":"<p>Animation execution delay time in sequence. If set to <code class=\"codespan\">true</code>, the next element&#39;s animation will be executed after the previous element&#39;s animation is completed. The default is <code class=\"codespan\">false</code>.</p>\n"},"polygon.animation.startTime":{"desc":"<p>Initial time of animation execution, which will not be repeatedly applied in loop animation, default is 0</p>\n"},"polygon.animation.totalTime":{"desc":"<p>Maximum time of animation execution, the animation will be terminated if it reaches the set time</p>\n"},"polygon.animation.loop":{"desc":"<p>Number of animation loops, if set to <code class=\"codespan\">true</code>, it will loop infinitely</p>\n"},"polygon.animation.options":{"desc":"<p>Additional parameters set for specific animation types execution</p>\n"},"polygon.animation.controlOptions":{"desc":"<p>Control parameters for animation execution logic:</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: Whether to immediately terminate its animation when the animation state changes</li>\n<li><code class=\"codespan\">immediatelyApply</code>: Whether to immediately apply the initial visual channel of the animation</li>\n</ul>\n"},"polygon.zIndex":{"desc":"<p>Set the zIndex of the container shape (group) corresponding to the <code class=\"codespan\">mark</code> graphic primitive</p>\n"},"polygon.interactive":{"desc":"<p>Type: <code class=\"codespan\">boolean</code>\nRequired: No</p>\n"},"polygon.context":{"desc":"<p>Set the context parameters of the graphic primitive</p>\n"},"polygon.setCustomizedShape":{"desc":"<p>Set the callback function of custom shape. The corresponding ts type is as follows:</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>Where <code class=\"codespan\">ICustomPath2D</code> is a utility class provided by VRender for drawing custom paths.</p>\n"},"polygon.support3d":{"desc":"<p>Whether to support 3d mode when the canvas is set to 3d view.</p>\n"},"polygon.group":{"desc":"<p>Set the parent graphic primitive. Supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> The id of the corresponding parent graphic primitive</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> The corresponding grammar element of the parent graphic primitive, generally used in API call scenarios.</li>\n</ul>\n<p>If not set, it will be attached to the root node of the canvas by default.</p>\n"},"polygon.from":{"desc":"<p>ts type definition is:</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>Declare the data on which the graphic primitive depends through the <code class=\"codespan\">data</code> attribute.</p>\n"},"polygon.key":{"desc":"<p>Set the unique identifier for the graphic primitive data element, which is used to calculate the data state of the graphic element. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the <code class=\"codespan\">key</code></li>\n</ul>\n"},"polygon.sort":{"desc":"<p>Sort all graphic elements in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"polygon.groupBy":{"desc":"<p>Set the grouping attribute, the corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the grouping <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the grouping <code class=\"codespan\">key</code></li>\n</ul>\n"},"polygon.groupSort":{"desc":"<p>Sort the groups in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"polygon.coordinate":{"desc":"<p>Set the id or graphic element corresponding to the associated coordinate system of this graphic primitive</p>\n"},"polygon.state":{"desc":"<p>Set the state values ​​of all graphical elements of the current graphic primitive, supporting three formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the state of the graphic, for example, <code class=\"codespan\">{ state: &#39;selected&#39;}</code> sets the state of all graphics to <code class=\"codespan\">&#39;selected&#39;</code>, usually in this case, the <code class=\"codespan\">encode</code> also sets the graphic channel mapping corresponding to the <code class=\"codespan\">&#39;selected&#39;</code> state</li>\n<li><code class=\"codespan\">string[]</code> Set multiple states for the graphic, you can configure <code class=\"codespan\">stateSort</code> to influence the order of executing the graphic channel mapping corresponding to the state</li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the state value, and the return parameter is <code class=\"codespan\">string | string[]</code>, the corresponding ts type definition is:</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"polygon.stateSort":{"desc":"<p>Set the sorting function of the state values ​​of all graphics elements of the current graphic primitive, which will affect the order of the graphic channel mapping corresponding to the state. The result of the graphic channel mapping executed earlier may be covered by subsequent states. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"polygon.transform":{"desc":"<p>Set the corresponding transformation of the graphic primitive. All data transformations can be configured on the graphic primitive and are used for the <code class=\"codespan\">join data</code> execution transformation;\nAnother type of transformation is the transformation executed by graphical elements, such as <code class=\"codespan\">dodge</code>;\nThe general type definition is as follows:</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>The parameters supported by each transformation are different</p>\n"},"polygon.layout":{"desc":"<p>Set the layout parameters of the graphic primitive. There are two roles when the graphic primitive participates in the layout:</p>\n<ul>\n<li>&#39;container&#39; Container graphic primitive, usually <code class=\"codespan\">group</code> graphic primitive</li>\n<li>&#39;item&#39; layout child element, as a child node of the container graphic primitive</li>\n</ul>\n<p>Please note that we only support one layer of layout. If it is a multi-layer nested layout, it is recommended to use a custom layout scheme for implementation;</p>\n<p>Now support two content layouts: <code class=\"codespan\">grid</code> layout and <code class=\"codespan\">relative</code> layout, the related type definition is as follows</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>If you want to set a custom layout scheme, <code class=\"codespan\">layout</code> also supports setting callback functions directly. The definition of the callback function is as follows:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"polygon.layout.display":{"desc":"<p>The container graphic primitive sets the layout type and supports two configurations:</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> Relative layout</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> Grid layout</li>\n</ul>\n"},"polygon.layout.callback":{"desc":"<p>Customize the callback function for this graphic primitive, the ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"polygon.layout.skipBeforeLayouted":{"desc":"<p>Skip the execution stage before the layout is completed</p>\n"},"polygon.layout.updateViewSignals":{"desc":"<p>Whether to update the default view signals, that is: <code class=\"codespan\">padding</code>, <code class=\"codespan\">viewWidth</code> and <code class=\"codespan\">viewHeight</code></p>\n<p>This property can only be set on a container graphic primitive with <code class=\"codespan\">&#39;relative&#39;</code> layout.</p>\n"},"polygon.layout.maxChildWidth":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum width of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the width of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"polygon.layout.maxChildHeight":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum height of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the height of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"polygon.layout.position":{"desc":"<p>Set the position of the child graphic primitive of the relative layout. The supported settings are:</p>\n<ul>\n<li>&#39;top&#39; Relative to the top of the parent graphic primitive</li>\n<li>&#39;bottom&#39; Relative to the bottom of the parent graphic primitive</li>\n<li>&#39;left&#39; Relative to the left side of the parent graphic primitive</li>\n<li>&#39;right&#39; Relative to the right side of the parent graphic primitive</li>\n<li>&#39;content&#39; Relative to the center of the parent graphic primitive, that is, the content area</li>\n<li>&#39;auto&#39; When the graphic primitive sets the coordinate system, the position relative to the parent graphic primitive is automatically calculated according to the associated <code class=\"codespan\">scale</code></li>\n</ul>\n"},"polygon.layout.padding":{"desc":"<p>The inner padding of Child graphic primitive, in px unit, with the default padding of 0 for all directions. Accepts numerical values, numerical arrays, and objects for settings.</p>\n<p>Example of usage:</p>\n<pre><code class=\"lang-ts\">// Numerical type, set the padding to 5\npadding: 5;\n// Numerical array, set the top and bottom padding to 5, and the left and right padding to 10, similar to the CSS box model\npadding: [5, 10];\n// Numerical array, set the padding for all four directions separately\npadding: [\n  5, // Top\n  10, // Right\n  5, // Bottom\n  10 // Left\n];\n// Object type\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"polygon.layout.gridTemplateRows":{"desc":"<p>The parent graphic primitive of the grid layout sets the row height</p>\n"},"polygon.layout.gridTemplateColumns":{"desc":"<p>The parent graphic primitive of the grid layout sets the column width</p>\n"},"polygon.layout.gridRowGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the row spacing</p>\n"},"polygon.layout.gridColumnGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the column spacing</p>\n"},"polygon.layout.gridRowStart":{"desc":"<p>The child graphic primitive of the grid layout sets the row start position</p>\n"},"polygon.layout.gridRowEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the row end position</p>\n"},"polygon.layout.gridColumnStart":{"desc":"<p>The child graphic primitive of the grid layout sets the column start position</p>\n"},"polygon.layout.gridColumnEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the column end position</p>\n"},"polygon.large":{"desc":"<p>Whether to enable large data rendering mode</p>\n"},"polygon.largeThreshold":{"desc":"<p>The threshold for enabling large data rendering optimization, corresponding to the length of data</p>\n"},"polygon.progressiveStep":{"desc":"<p>The step length for enabling progressive rendering, corresponding to the length of data in each shard</p>\n"},"polygon.progressiveThreshold":{"desc":"<p>The threshold for enabling progressive rendering, corresponding to the length of single series data</p>\n"},"polygon.morph":{"desc":"<p>Whether to enable global transition morph animations for the current graphic element</p>\n"},"polygon.morphKey":{"desc":"<p>Used to match graphic elements for global transition morph animations, graphic elements with the same <code class=\"codespan\">morphKey</code> will undergo morph animations</p>\n"},"polygon.morphElementKey":{"desc":"<p>For the matched graphic elements before and after, use this configuration to match the graphic element; if not declared, we will read the <code class=\"codespan\">key</code> configuration by default to match the graphic element for morph animations;\nSupports one-to-one, one-to-many, and many-to-one graphic morph animations by default</p>\n"},"shape":{"desc":"<p><strong> shape Primitive </strong></p>\n"},"shape.type":{"desc":"<p>Set the primitive type to <code class=\"codespan\">shape</code></p>\n"},"shape.encode":{"desc":"<p>Set the visual channel encoding of the graphics elements, supporting three data change states by default:</p>\n<ul>\n<li><code class=\"codespan\">enter</code> newly added data items</li>\n<li><code class=\"codespan\">update</code> data items have been updated</li>\n<li><code class=\"codespan\">exit</code> data items are deleted</li>\n</ul>\n<p>Note that the data state here is automatically generated based on the <code class=\"codespan\">mark</code>&#39;s <code class=\"codespan\">key</code>. We will calculate the unique identifier for the data bound to the <code class=\"codespan\">mark</code> based on the <code class=\"codespan\">key</code> configuration. After the data is updated, if the corresponding unique identifier no longer exists, the state is <code class=\"codespan\">exit</code>; if it exists, it is <code class=\"codespan\">update</code>. If the previous data does not exist for the unique identifier, the data item&#39;s state is <code class=\"codespan\">enter</code>.</p>\n<p>Supports one interaction state by default:</p>\n<ul>\n<li><code class=\"codespan\">hover</code> when the mouse hovers over a specific shape, set the corresponding visual channel encoding for the shape</li>\n</ul>\n"},"shape.encode.enter":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data initialization state. Note that it will not be executed again when the data is updated.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"shape.encode.enter.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"shape.encode.enter.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"shape.encode.enter.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"shape.encode.enter.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"shape.encode.enter.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"shape.encode.enter.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"shape.encode.enter.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"shape.encode.enter.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"shape.encode.enter.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"shape.encode.enter.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"shape.encode.enter.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"shape.encode.enter.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"shape.encode.enter.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"shape.encode.enter.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"shape.encode.enter.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"shape.encode.enter.outerBorder":{"desc":"<p>Outer border</p>\n"},"shape.encode.enter.innerBorder":{"desc":"<p>Inner border</p>\n"},"shape.encode.enter.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"shape.encode.enter.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"shape.encode.enter.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"shape.encode.enter.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"shape.encode.enter.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"shape.encode.enter.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"shape.encode.enter.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"shape.encode.enter.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"shape.encode.enter.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"shape.encode.enter.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"shape.encode.enter.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"shape.encode.enter.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"shape.encode.enter.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"shape.encode.enter.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"shape.encode.enter.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"shape.encode.enter.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"shape.encode.enter.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"shape.encode.enter.texture":{"desc":"<p>The texture of the graphic</p>\n"},"shape.encode.enter.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"shape.encode.enter.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"shape.encode.enter.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"shape.encode.enter.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"shape.encode.enter.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"shape.encode.update":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data update state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"shape.encode.update.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"shape.encode.update.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"shape.encode.update.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"shape.encode.update.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"shape.encode.update.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"shape.encode.update.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"shape.encode.update.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"shape.encode.update.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"shape.encode.update.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"shape.encode.update.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"shape.encode.update.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"shape.encode.update.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"shape.encode.update.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"shape.encode.update.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"shape.encode.update.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"shape.encode.update.outerBorder":{"desc":"<p>Outer border</p>\n"},"shape.encode.update.innerBorder":{"desc":"<p>Inner border</p>\n"},"shape.encode.update.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"shape.encode.update.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"shape.encode.update.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"shape.encode.update.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"shape.encode.update.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"shape.encode.update.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"shape.encode.update.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"shape.encode.update.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"shape.encode.update.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"shape.encode.update.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"shape.encode.update.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"shape.encode.update.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"shape.encode.update.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"shape.encode.update.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"shape.encode.update.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"shape.encode.update.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"shape.encode.update.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"shape.encode.update.texture":{"desc":"<p>The texture of the graphic</p>\n"},"shape.encode.update.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"shape.encode.update.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"shape.encode.update.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"shape.encode.update.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"shape.encode.update.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"shape.encode.exit":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data deletion state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"shape.encode.exit.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"shape.encode.exit.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"shape.encode.exit.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"shape.encode.exit.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"shape.encode.exit.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"shape.encode.exit.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"shape.encode.exit.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"shape.encode.exit.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"shape.encode.exit.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"shape.encode.exit.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"shape.encode.exit.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"shape.encode.exit.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"shape.encode.exit.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"shape.encode.exit.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"shape.encode.exit.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"shape.encode.exit.outerBorder":{"desc":"<p>Outer border</p>\n"},"shape.encode.exit.innerBorder":{"desc":"<p>Inner border</p>\n"},"shape.encode.exit.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"shape.encode.exit.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"shape.encode.exit.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"shape.encode.exit.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"shape.encode.exit.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"shape.encode.exit.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"shape.encode.exit.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"shape.encode.exit.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"shape.encode.exit.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"shape.encode.exit.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"shape.encode.exit.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"shape.encode.exit.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"shape.encode.exit.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"shape.encode.exit.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"shape.encode.exit.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"shape.encode.exit.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"shape.encode.exit.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"shape.encode.exit.texture":{"desc":"<p>The texture of the graphic</p>\n"},"shape.encode.exit.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"shape.encode.exit.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"shape.encode.exit.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"shape.encode.exit.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"shape.encode.exit.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"shape.encode.hover":{"desc":"<p>Set the visual channel mapping corresponding to the graphics elements when in the <code class=\"codespan\">hover</code> state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"shape.encode.hover.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"shape.encode.hover.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"shape.encode.hover.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"shape.encode.hover.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"shape.encode.hover.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"shape.encode.hover.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"shape.encode.hover.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"shape.encode.hover.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"shape.encode.hover.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"shape.encode.hover.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"shape.encode.hover.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"shape.encode.hover.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"shape.encode.hover.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"shape.encode.hover.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"shape.encode.hover.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"shape.encode.hover.outerBorder":{"desc":"<p>Outer border</p>\n"},"shape.encode.hover.innerBorder":{"desc":"<p>Inner border</p>\n"},"shape.encode.hover.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"shape.encode.hover.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"shape.encode.hover.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"shape.encode.hover.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"shape.encode.hover.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"shape.encode.hover.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"shape.encode.hover.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"shape.encode.hover.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"shape.encode.hover.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"shape.encode.hover.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"shape.encode.hover.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"shape.encode.hover.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"shape.encode.hover.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"shape.encode.hover.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"shape.encode.hover.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"shape.encode.hover.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"shape.encode.hover.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"shape.encode.hover.texture":{"desc":"<p>The texture of the graphic</p>\n"},"shape.encode.hover.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"shape.encode.hover.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"shape.encode.hover.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"shape.encode.hover.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"shape.encode.hover.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"shape.animationState":{"desc":"<p>Type: <code class=\"codespan\">MarkFunctionType</code>\nRequired: No\nanimation attributes</p>\n"},"shape.animation":{"desc":"<p>Supports setting various state corresponding animations, data-driven animation states have three types:</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>Interaction-triggered state changes are configured through a unified interaction animation, with the configuration key being <code class=\"codespan\">state</code></p>\n"},"shape.animation.type":{"desc":"<p>Animation execution type, specifying a specific built-in animation execution effect</p>\n<p>Universal built-in animation types include:</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: Fade in and out animations</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: Scaling animations</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: Move in and out animations</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: Rotation animations</li>\n<li><code class=\"codespan\">update</code>: Update animations</li>\n</ul>\n"},"shape.animation.channel":{"desc":"<p>Visual channels before and after the animation is executed, conflicts with <code class=\"codespan\">type</code> configuration</p>\n"},"shape.animation.custom":{"desc":"<p>Custom animation, if custom animation configuration is set, it will replace the default visual channel interpolation logic</p>\n"},"shape.animation.customParameters":{"desc":"<p>Custom animation parameters</p>\n"},"shape.animation.easing":{"desc":"<p>Animation easing, default is <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"shape.animation.delay":{"desc":"<p>Animation execution delay time, default is 0</p>\n"},"shape.animation.duration":{"desc":"<p>Animation execution duration, default is 1000ms</p>\n"},"shape.animation.oneByOne":{"desc":"<p>Animation execution delay time in sequence. If set to <code class=\"codespan\">true</code>, the next element&#39;s animation will be executed after the previous element&#39;s animation is completed. The default is <code class=\"codespan\">false</code>.</p>\n"},"shape.animation.startTime":{"desc":"<p>Initial time of animation execution, which will not be repeatedly applied in loop animation, default is 0</p>\n"},"shape.animation.totalTime":{"desc":"<p>Maximum time of animation execution, the animation will be terminated if it reaches the set time</p>\n"},"shape.animation.loop":{"desc":"<p>Number of animation loops, if set to <code class=\"codespan\">true</code>, it will loop infinitely</p>\n"},"shape.animation.options":{"desc":"<p>Additional parameters set for specific animation types execution</p>\n"},"shape.animation.controlOptions":{"desc":"<p>Control parameters for animation execution logic:</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: Whether to immediately terminate its animation when the animation state changes</li>\n<li><code class=\"codespan\">immediatelyApply</code>: Whether to immediately apply the initial visual channel of the animation</li>\n</ul>\n"},"shape.zIndex":{"desc":"<p>Set the zIndex of the container shape (group) corresponding to the <code class=\"codespan\">mark</code> graphic primitive</p>\n"},"shape.interactive":{"desc":"<p>Type: <code class=\"codespan\">boolean</code>\nRequired: No</p>\n"},"shape.context":{"desc":"<p>Set the context parameters of the graphic primitive</p>\n"},"shape.setCustomizedShape":{"desc":"<p>Set the callback function of custom shape. The corresponding ts type is as follows:</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>Where <code class=\"codespan\">ICustomPath2D</code> is a utility class provided by VRender for drawing custom paths.</p>\n"},"shape.support3d":{"desc":"<p>Whether to support 3d mode when the canvas is set to 3d view.</p>\n"},"shape.group":{"desc":"<p>Set the parent graphic primitive. Supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> The id of the corresponding parent graphic primitive</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> The corresponding grammar element of the parent graphic primitive, generally used in API call scenarios.</li>\n</ul>\n<p>If not set, it will be attached to the root node of the canvas by default.</p>\n"},"shape.from":{"desc":"<p>ts type definition is:</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>Declare the data on which the graphic primitive depends through the <code class=\"codespan\">data</code> attribute.</p>\n"},"shape.key":{"desc":"<p>Set the unique identifier for the graphic primitive data element, which is used to calculate the data state of the graphic element. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the <code class=\"codespan\">key</code></li>\n</ul>\n"},"shape.sort":{"desc":"<p>Sort all graphic elements in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"shape.groupBy":{"desc":"<p>Set the grouping attribute, the corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the grouping <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the grouping <code class=\"codespan\">key</code></li>\n</ul>\n"},"shape.groupSort":{"desc":"<p>Sort the groups in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"shape.coordinate":{"desc":"<p>Set the id or graphic element corresponding to the associated coordinate system of this graphic primitive</p>\n"},"shape.state":{"desc":"<p>Set the state values ​​of all graphical elements of the current graphic primitive, supporting three formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the state of the graphic, for example, <code class=\"codespan\">{ state: &#39;selected&#39;}</code> sets the state of all graphics to <code class=\"codespan\">&#39;selected&#39;</code>, usually in this case, the <code class=\"codespan\">encode</code> also sets the graphic channel mapping corresponding to the <code class=\"codespan\">&#39;selected&#39;</code> state</li>\n<li><code class=\"codespan\">string[]</code> Set multiple states for the graphic, you can configure <code class=\"codespan\">stateSort</code> to influence the order of executing the graphic channel mapping corresponding to the state</li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the state value, and the return parameter is <code class=\"codespan\">string | string[]</code>, the corresponding ts type definition is:</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"shape.stateSort":{"desc":"<p>Set the sorting function of the state values ​​of all graphics elements of the current graphic primitive, which will affect the order of the graphic channel mapping corresponding to the state. The result of the graphic channel mapping executed earlier may be covered by subsequent states. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"shape.transform":{"desc":"<p>Set the corresponding transformation of the graphic primitive. All data transformations can be configured on the graphic primitive and are used for the <code class=\"codespan\">join data</code> execution transformation;\nAnother type of transformation is the transformation executed by graphical elements, such as <code class=\"codespan\">dodge</code>;\nThe general type definition is as follows:</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>The parameters supported by each transformation are different</p>\n"},"shape.layout":{"desc":"<p>Set the layout parameters of the graphic primitive. There are two roles when the graphic primitive participates in the layout:</p>\n<ul>\n<li>&#39;container&#39; Container graphic primitive, usually <code class=\"codespan\">group</code> graphic primitive</li>\n<li>&#39;item&#39; layout child element, as a child node of the container graphic primitive</li>\n</ul>\n<p>Please note that we only support one layer of layout. If it is a multi-layer nested layout, it is recommended to use a custom layout scheme for implementation;</p>\n<p>Now support two content layouts: <code class=\"codespan\">grid</code> layout and <code class=\"codespan\">relative</code> layout, the related type definition is as follows</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>If you want to set a custom layout scheme, <code class=\"codespan\">layout</code> also supports setting callback functions directly. The definition of the callback function is as follows:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"shape.layout.display":{"desc":"<p>The container graphic primitive sets the layout type and supports two configurations:</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> Relative layout</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> Grid layout</li>\n</ul>\n"},"shape.layout.callback":{"desc":"<p>Customize the callback function for this graphic primitive, the ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"shape.layout.skipBeforeLayouted":{"desc":"<p>Skip the execution stage before the layout is completed</p>\n"},"shape.layout.updateViewSignals":{"desc":"<p>Whether to update the default view signals, that is: <code class=\"codespan\">padding</code>, <code class=\"codespan\">viewWidth</code> and <code class=\"codespan\">viewHeight</code></p>\n<p>This property can only be set on a container graphic primitive with <code class=\"codespan\">&#39;relative&#39;</code> layout.</p>\n"},"shape.layout.maxChildWidth":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum width of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the width of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"shape.layout.maxChildHeight":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum height of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the height of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"shape.layout.position":{"desc":"<p>Set the position of the child graphic primitive of the relative layout. The supported settings are:</p>\n<ul>\n<li>&#39;top&#39; Relative to the top of the parent graphic primitive</li>\n<li>&#39;bottom&#39; Relative to the bottom of the parent graphic primitive</li>\n<li>&#39;left&#39; Relative to the left side of the parent graphic primitive</li>\n<li>&#39;right&#39; Relative to the right side of the parent graphic primitive</li>\n<li>&#39;content&#39; Relative to the center of the parent graphic primitive, that is, the content area</li>\n<li>&#39;auto&#39; When the graphic primitive sets the coordinate system, the position relative to the parent graphic primitive is automatically calculated according to the associated <code class=\"codespan\">scale</code></li>\n</ul>\n"},"shape.layout.padding":{"desc":"<p>The inner padding of Child graphic primitive, in px unit, with the default padding of 0 for all directions. Accepts numerical values, numerical arrays, and objects for settings.</p>\n<p>Example of usage:</p>\n<pre><code class=\"lang-ts\">// Numerical type, set the padding to 5\npadding: 5;\n// Numerical array, set the top and bottom padding to 5, and the left and right padding to 10, similar to the CSS box model\npadding: [5, 10];\n// Numerical array, set the padding for all four directions separately\npadding: [\n  5, // Top\n  10, // Right\n  5, // Bottom\n  10 // Left\n];\n// Object type\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"shape.layout.gridTemplateRows":{"desc":"<p>The parent graphic primitive of the grid layout sets the row height</p>\n"},"shape.layout.gridTemplateColumns":{"desc":"<p>The parent graphic primitive of the grid layout sets the column width</p>\n"},"shape.layout.gridRowGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the row spacing</p>\n"},"shape.layout.gridColumnGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the column spacing</p>\n"},"shape.layout.gridRowStart":{"desc":"<p>The child graphic primitive of the grid layout sets the row start position</p>\n"},"shape.layout.gridRowEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the row end position</p>\n"},"shape.layout.gridColumnStart":{"desc":"<p>The child graphic primitive of the grid layout sets the column start position</p>\n"},"shape.layout.gridColumnEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the column end position</p>\n"},"shape.large":{"desc":"<p>Whether to enable large data rendering mode</p>\n"},"shape.largeThreshold":{"desc":"<p>The threshold for enabling large data rendering optimization, corresponding to the length of data</p>\n"},"shape.progressiveStep":{"desc":"<p>The step length for enabling progressive rendering, corresponding to the length of data in each shard</p>\n"},"shape.progressiveThreshold":{"desc":"<p>The threshold for enabling progressive rendering, corresponding to the length of single series data</p>\n"},"shape.morph":{"desc":"<p>Whether to enable global transition morph animations for the current graphic element</p>\n"},"shape.morphKey":{"desc":"<p>Used to match graphic elements for global transition morph animations, graphic elements with the same <code class=\"codespan\">morphKey</code> will undergo morph animations</p>\n"},"shape.morphElementKey":{"desc":"<p>For the matched graphic elements before and after, use this configuration to match the graphic element; if not declared, we will read the <code class=\"codespan\">key</code> configuration by default to match the graphic element for morph animations;\nSupports one-to-one, one-to-many, and many-to-one graphic morph animations by default</p>\n"},"path":{"desc":"<p><strong> Path element </strong></p>\n"},"path.type":{"desc":"<p>Set the element type to <code class=\"codespan\">path</code></p>\n"},"path.encode":{"desc":"<p>Set the visual channel encoding of the graphics elements, supporting three data change states by default:</p>\n<ul>\n<li><code class=\"codespan\">enter</code> newly added data items</li>\n<li><code class=\"codespan\">update</code> data items have been updated</li>\n<li><code class=\"codespan\">exit</code> data items are deleted</li>\n</ul>\n<p>Note that the data state here is automatically generated based on the <code class=\"codespan\">mark</code>&#39;s <code class=\"codespan\">key</code>. We will calculate the unique identifier for the data bound to the <code class=\"codespan\">mark</code> based on the <code class=\"codespan\">key</code> configuration. After the data is updated, if the corresponding unique identifier no longer exists, the state is <code class=\"codespan\">exit</code>; if it exists, it is <code class=\"codespan\">update</code>. If the previous data does not exist for the unique identifier, the data item&#39;s state is <code class=\"codespan\">enter</code>.</p>\n<p>Supports one interaction state by default:</p>\n<ul>\n<li><code class=\"codespan\">hover</code> when the mouse hovers over a specific shape, set the corresponding visual channel encoding for the shape</li>\n</ul>\n"},"path.encode.enter":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data initialization state. Note that it will not be executed again when the data is updated.</p>\n"},"path.encode.enter.path":{"desc":"<p>Set the path, support two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Path string</li>\n<li><code class=\"codespan\">&#39;ICustomPath2D&#39;</code> A utility class provided by VRrender for setting custom paths, returning the corresponding instance</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"path.encode.enter.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"path.encode.enter.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"path.encode.enter.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"path.encode.enter.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"path.encode.enter.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"path.encode.enter.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"path.encode.enter.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"path.encode.enter.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"path.encode.enter.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"path.encode.enter.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"path.encode.enter.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"path.encode.enter.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"path.encode.enter.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"path.encode.enter.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"path.encode.enter.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"path.encode.enter.outerBorder":{"desc":"<p>Outer border</p>\n"},"path.encode.enter.innerBorder":{"desc":"<p>Inner border</p>\n"},"path.encode.enter.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"path.encode.enter.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"path.encode.enter.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"path.encode.enter.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"path.encode.enter.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"path.encode.enter.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"path.encode.enter.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"path.encode.enter.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"path.encode.enter.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"path.encode.enter.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"path.encode.enter.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"path.encode.enter.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"path.encode.enter.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"path.encode.enter.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"path.encode.enter.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"path.encode.enter.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"path.encode.enter.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"path.encode.enter.texture":{"desc":"<p>The texture of the graphic</p>\n"},"path.encode.enter.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"path.encode.enter.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"path.encode.enter.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"path.encode.enter.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"path.encode.enter.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"path.encode.update":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data update state.</p>\n"},"path.encode.update.path":{"desc":"<p>Set the path, support two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Path string</li>\n<li><code class=\"codespan\">&#39;ICustomPath2D&#39;</code> A utility class provided by VRrender for setting custom paths, returning the corresponding instance</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"path.encode.update.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"path.encode.update.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"path.encode.update.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"path.encode.update.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"path.encode.update.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"path.encode.update.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"path.encode.update.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"path.encode.update.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"path.encode.update.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"path.encode.update.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"path.encode.update.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"path.encode.update.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"path.encode.update.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"path.encode.update.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"path.encode.update.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"path.encode.update.outerBorder":{"desc":"<p>Outer border</p>\n"},"path.encode.update.innerBorder":{"desc":"<p>Inner border</p>\n"},"path.encode.update.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"path.encode.update.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"path.encode.update.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"path.encode.update.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"path.encode.update.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"path.encode.update.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"path.encode.update.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"path.encode.update.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"path.encode.update.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"path.encode.update.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"path.encode.update.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"path.encode.update.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"path.encode.update.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"path.encode.update.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"path.encode.update.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"path.encode.update.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"path.encode.update.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"path.encode.update.texture":{"desc":"<p>The texture of the graphic</p>\n"},"path.encode.update.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"path.encode.update.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"path.encode.update.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"path.encode.update.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"path.encode.update.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"path.encode.exit":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data deletion state.</p>\n"},"path.encode.exit.path":{"desc":"<p>Set the path, support two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Path string</li>\n<li><code class=\"codespan\">&#39;ICustomPath2D&#39;</code> A utility class provided by VRrender for setting custom paths, returning the corresponding instance</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"path.encode.exit.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"path.encode.exit.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"path.encode.exit.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"path.encode.exit.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"path.encode.exit.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"path.encode.exit.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"path.encode.exit.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"path.encode.exit.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"path.encode.exit.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"path.encode.exit.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"path.encode.exit.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"path.encode.exit.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"path.encode.exit.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"path.encode.exit.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"path.encode.exit.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"path.encode.exit.outerBorder":{"desc":"<p>Outer border</p>\n"},"path.encode.exit.innerBorder":{"desc":"<p>Inner border</p>\n"},"path.encode.exit.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"path.encode.exit.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"path.encode.exit.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"path.encode.exit.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"path.encode.exit.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"path.encode.exit.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"path.encode.exit.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"path.encode.exit.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"path.encode.exit.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"path.encode.exit.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"path.encode.exit.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"path.encode.exit.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"path.encode.exit.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"path.encode.exit.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"path.encode.exit.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"path.encode.exit.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"path.encode.exit.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"path.encode.exit.texture":{"desc":"<p>The texture of the graphic</p>\n"},"path.encode.exit.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"path.encode.exit.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"path.encode.exit.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"path.encode.exit.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"path.encode.exit.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"path.encode.hover":{"desc":"<p>Set the visual channel mapping corresponding to the graphics elements when in the <code class=\"codespan\">hover</code> state.</p>\n"},"path.encode.hover.path":{"desc":"<p>Set the path, support two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Path string</li>\n<li><code class=\"codespan\">&#39;ICustomPath2D&#39;</code> A utility class provided by VRrender for setting custom paths, returning the corresponding instance</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"path.encode.hover.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"path.encode.hover.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"path.encode.hover.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"path.encode.hover.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"path.encode.hover.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"path.encode.hover.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"path.encode.hover.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"path.encode.hover.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"path.encode.hover.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"path.encode.hover.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"path.encode.hover.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"path.encode.hover.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"path.encode.hover.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"path.encode.hover.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"path.encode.hover.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"path.encode.hover.outerBorder":{"desc":"<p>Outer border</p>\n"},"path.encode.hover.innerBorder":{"desc":"<p>Inner border</p>\n"},"path.encode.hover.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"path.encode.hover.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"path.encode.hover.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"path.encode.hover.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"path.encode.hover.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"path.encode.hover.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"path.encode.hover.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"path.encode.hover.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"path.encode.hover.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"path.encode.hover.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"path.encode.hover.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"path.encode.hover.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"path.encode.hover.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"path.encode.hover.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"path.encode.hover.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"path.encode.hover.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"path.encode.hover.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"path.encode.hover.texture":{"desc":"<p>The texture of the graphic</p>\n"},"path.encode.hover.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"path.encode.hover.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"path.encode.hover.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"path.encode.hover.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"path.encode.hover.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"path.animationState":{"desc":"<p>Type: <code class=\"codespan\">MarkFunctionType</code>\nRequired: No\nanimation attributes</p>\n"},"path.animation":{"desc":"<p>Supports setting various state corresponding animations, data-driven animation states have three types:</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>Interaction-triggered state changes are configured through a unified interaction animation, with the configuration key being <code class=\"codespan\">state</code></p>\n"},"path.animation.type":{"desc":"<p>Animation execution type, specifying a specific built-in animation execution effect</p>\n<p>Universal built-in animation types include:</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: Fade in and out animations</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: Scaling animations</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: Move in and out animations</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: Rotation animations</li>\n<li><code class=\"codespan\">update</code>: Update animations</li>\n</ul>\n"},"path.animation.channel":{"desc":"<p>Visual channels before and after the animation is executed, conflicts with <code class=\"codespan\">type</code> configuration</p>\n"},"path.animation.custom":{"desc":"<p>Custom animation, if custom animation configuration is set, it will replace the default visual channel interpolation logic</p>\n"},"path.animation.customParameters":{"desc":"<p>Custom animation parameters</p>\n"},"path.animation.easing":{"desc":"<p>Animation easing, default is <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"path.animation.delay":{"desc":"<p>Animation execution delay time, default is 0</p>\n"},"path.animation.duration":{"desc":"<p>Animation execution duration, default is 1000ms</p>\n"},"path.animation.oneByOne":{"desc":"<p>Animation execution delay time in sequence. If set to <code class=\"codespan\">true</code>, the next element&#39;s animation will be executed after the previous element&#39;s animation is completed. The default is <code class=\"codespan\">false</code>.</p>\n"},"path.animation.startTime":{"desc":"<p>Initial time of animation execution, which will not be repeatedly applied in loop animation, default is 0</p>\n"},"path.animation.totalTime":{"desc":"<p>Maximum time of animation execution, the animation will be terminated if it reaches the set time</p>\n"},"path.animation.loop":{"desc":"<p>Number of animation loops, if set to <code class=\"codespan\">true</code>, it will loop infinitely</p>\n"},"path.animation.options":{"desc":"<p>Additional parameters set for specific animation types execution</p>\n"},"path.animation.controlOptions":{"desc":"<p>Control parameters for animation execution logic:</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: Whether to immediately terminate its animation when the animation state changes</li>\n<li><code class=\"codespan\">immediatelyApply</code>: Whether to immediately apply the initial visual channel of the animation</li>\n</ul>\n"},"path.zIndex":{"desc":"<p>Set the zIndex of the container shape (group) corresponding to the <code class=\"codespan\">mark</code> graphic primitive</p>\n"},"path.interactive":{"desc":"<p>Type: <code class=\"codespan\">boolean</code>\nRequired: No</p>\n"},"path.context":{"desc":"<p>Set the context parameters of the graphic primitive</p>\n"},"path.setCustomizedShape":{"desc":"<p>Set the callback function of custom shape. The corresponding ts type is as follows:</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>Where <code class=\"codespan\">ICustomPath2D</code> is a utility class provided by VRender for drawing custom paths.</p>\n"},"path.support3d":{"desc":"<p>Whether to support 3d mode when the canvas is set to 3d view.</p>\n"},"path.group":{"desc":"<p>Set the parent graphic primitive. Supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> The id of the corresponding parent graphic primitive</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> The corresponding grammar element of the parent graphic primitive, generally used in API call scenarios.</li>\n</ul>\n<p>If not set, it will be attached to the root node of the canvas by default.</p>\n"},"path.from":{"desc":"<p>ts type definition is:</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>Declare the data on which the graphic primitive depends through the <code class=\"codespan\">data</code> attribute.</p>\n"},"path.key":{"desc":"<p>Set the unique identifier for the graphic primitive data element, which is used to calculate the data state of the graphic element. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the <code class=\"codespan\">key</code></li>\n</ul>\n"},"path.sort":{"desc":"<p>Sort all graphic elements in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"path.groupBy":{"desc":"<p>Set the grouping attribute, the corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the grouping <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the grouping <code class=\"codespan\">key</code></li>\n</ul>\n"},"path.groupSort":{"desc":"<p>Sort the groups in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"path.coordinate":{"desc":"<p>Set the id or graphic element corresponding to the associated coordinate system of this graphic primitive</p>\n"},"path.state":{"desc":"<p>Set the state values ​​of all graphical elements of the current graphic primitive, supporting three formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the state of the graphic, for example, <code class=\"codespan\">{ state: &#39;selected&#39;}</code> sets the state of all graphics to <code class=\"codespan\">&#39;selected&#39;</code>, usually in this case, the <code class=\"codespan\">encode</code> also sets the graphic channel mapping corresponding to the <code class=\"codespan\">&#39;selected&#39;</code> state</li>\n<li><code class=\"codespan\">string[]</code> Set multiple states for the graphic, you can configure <code class=\"codespan\">stateSort</code> to influence the order of executing the graphic channel mapping corresponding to the state</li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the state value, and the return parameter is <code class=\"codespan\">string | string[]</code>, the corresponding ts type definition is:</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"path.stateSort":{"desc":"<p>Set the sorting function of the state values ​​of all graphics elements of the current graphic primitive, which will affect the order of the graphic channel mapping corresponding to the state. The result of the graphic channel mapping executed earlier may be covered by subsequent states. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"path.transform":{"desc":"<p>Set the corresponding transformation of the graphic primitive. All data transformations can be configured on the graphic primitive and are used for the <code class=\"codespan\">join data</code> execution transformation;\nAnother type of transformation is the transformation executed by graphical elements, such as <code class=\"codespan\">dodge</code>;\nThe general type definition is as follows:</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>The parameters supported by each transformation are different</p>\n"},"path.layout":{"desc":"<p>Set the layout parameters of the graphic primitive. There are two roles when the graphic primitive participates in the layout:</p>\n<ul>\n<li>&#39;container&#39; Container graphic primitive, usually <code class=\"codespan\">group</code> graphic primitive</li>\n<li>&#39;item&#39; layout child element, as a child node of the container graphic primitive</li>\n</ul>\n<p>Please note that we only support one layer of layout. If it is a multi-layer nested layout, it is recommended to use a custom layout scheme for implementation;</p>\n<p>Now support two content layouts: <code class=\"codespan\">grid</code> layout and <code class=\"codespan\">relative</code> layout, the related type definition is as follows</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>If you want to set a custom layout scheme, <code class=\"codespan\">layout</code> also supports setting callback functions directly. The definition of the callback function is as follows:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"path.layout.display":{"desc":"<p>The container graphic primitive sets the layout type and supports two configurations:</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> Relative layout</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> Grid layout</li>\n</ul>\n"},"path.layout.callback":{"desc":"<p>Customize the callback function for this graphic primitive, the ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"path.layout.skipBeforeLayouted":{"desc":"<p>Skip the execution stage before the layout is completed</p>\n"},"path.layout.updateViewSignals":{"desc":"<p>Whether to update the default view signals, that is: <code class=\"codespan\">padding</code>, <code class=\"codespan\">viewWidth</code> and <code class=\"codespan\">viewHeight</code></p>\n<p>This property can only be set on a container graphic primitive with <code class=\"codespan\">&#39;relative&#39;</code> layout.</p>\n"},"path.layout.maxChildWidth":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum width of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the width of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"path.layout.maxChildHeight":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum height of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the height of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"path.layout.position":{"desc":"<p>Set the position of the child graphic primitive of the relative layout. The supported settings are:</p>\n<ul>\n<li>&#39;top&#39; Relative to the top of the parent graphic primitive</li>\n<li>&#39;bottom&#39; Relative to the bottom of the parent graphic primitive</li>\n<li>&#39;left&#39; Relative to the left side of the parent graphic primitive</li>\n<li>&#39;right&#39; Relative to the right side of the parent graphic primitive</li>\n<li>&#39;content&#39; Relative to the center of the parent graphic primitive, that is, the content area</li>\n<li>&#39;auto&#39; When the graphic primitive sets the coordinate system, the position relative to the parent graphic primitive is automatically calculated according to the associated <code class=\"codespan\">scale</code></li>\n</ul>\n"},"path.layout.padding":{"desc":"<p>The inner padding of Child graphic primitive, in px unit, with the default padding of 0 for all directions. Accepts numerical values, numerical arrays, and objects for settings.</p>\n<p>Example of usage:</p>\n<pre><code class=\"lang-ts\">// Numerical type, set the padding to 5\npadding: 5;\n// Numerical array, set the top and bottom padding to 5, and the left and right padding to 10, similar to the CSS box model\npadding: [5, 10];\n// Numerical array, set the padding for all four directions separately\npadding: [\n  5, // Top\n  10, // Right\n  5, // Bottom\n  10 // Left\n];\n// Object type\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"path.layout.gridTemplateRows":{"desc":"<p>The parent graphic primitive of the grid layout sets the row height</p>\n"},"path.layout.gridTemplateColumns":{"desc":"<p>The parent graphic primitive of the grid layout sets the column width</p>\n"},"path.layout.gridRowGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the row spacing</p>\n"},"path.layout.gridColumnGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the column spacing</p>\n"},"path.layout.gridRowStart":{"desc":"<p>The child graphic primitive of the grid layout sets the row start position</p>\n"},"path.layout.gridRowEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the row end position</p>\n"},"path.layout.gridColumnStart":{"desc":"<p>The child graphic primitive of the grid layout sets the column start position</p>\n"},"path.layout.gridColumnEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the column end position</p>\n"},"path.large":{"desc":"<p>Whether to enable large data rendering mode</p>\n"},"path.largeThreshold":{"desc":"<p>The threshold for enabling large data rendering optimization, corresponding to the length of data</p>\n"},"path.progressiveStep":{"desc":"<p>The step length for enabling progressive rendering, corresponding to the length of data in each shard</p>\n"},"path.progressiveThreshold":{"desc":"<p>The threshold for enabling progressive rendering, corresponding to the length of single series data</p>\n"},"path.morph":{"desc":"<p>Whether to enable global transition morph animations for the current graphic element</p>\n"},"path.morphKey":{"desc":"<p>Used to match graphic elements for global transition morph animations, graphic elements with the same <code class=\"codespan\">morphKey</code> will undergo morph animations</p>\n"},"path.morphElementKey":{"desc":"<p>For the matched graphic elements before and after, use this configuration to match the graphic element; if not declared, we will read the <code class=\"codespan\">key</code> configuration by default to match the graphic element for morph animations;\nSupports one-to-one, one-to-many, and many-to-one graphic morph animations by default</p>\n"},"area":{"desc":"<p><strong> area mark </strong></p>\n"},"area.type":{"desc":"<p>Set the mark type to <code class=\"codespan\">area</code></p>\n"},"area.encode":{"desc":"<p>Set the visual channel encoding of the graphics elements, supporting three data change states by default:</p>\n<ul>\n<li><code class=\"codespan\">enter</code> newly added data items</li>\n<li><code class=\"codespan\">update</code> data items have been updated</li>\n<li><code class=\"codespan\">exit</code> data items are deleted</li>\n</ul>\n<p>Note that the data state here is automatically generated based on the <code class=\"codespan\">mark</code>&#39;s <code class=\"codespan\">key</code>. We will calculate the unique identifier for the data bound to the <code class=\"codespan\">mark</code> based on the <code class=\"codespan\">key</code> configuration. After the data is updated, if the corresponding unique identifier no longer exists, the state is <code class=\"codespan\">exit</code>; if it exists, it is <code class=\"codespan\">update</code>. If the previous data does not exist for the unique identifier, the data item&#39;s state is <code class=\"codespan\">enter</code>.</p>\n<p>Supports one interaction state by default:</p>\n<ul>\n<li><code class=\"codespan\">hover</code> when the mouse hovers over a specific shape, set the corresponding visual channel encoding for the shape</li>\n</ul>\n"},"area.encode.enter":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data initialization state. Note that it will not be executed again when the data is updated.</p>\n"},"area.encode.enter.enableSegments":{"desc":"<p>Whether to enable segmented style; because parsing segmented style requires a certain amount of performance consumption, this function will only be turned on when the style of all points is detected to be different</p>\n"},"area.encode.enter.curveType":{"desc":"<p>The type of line, supporting the following options：</p>\n<ul>\n<li>&#39;basis&#39;</li>\n<li>&#39;basisClosed&#39;</li>\n<li>&#39;basisOpen&#39;</li>\n<li>&#39;bundle&#39;</li>\n<li>&#39;cardinal&#39;</li>\n<li>&#39;cardinalClosed&#39;</li>\n<li>&#39;cardinalOpen&#39;</li>\n<li>&#39;stepBefore&#39;</li>\n<li>&#39;stepAfter&#39;</li>\n<li>&#39;catmullRom&#39;</li>\n<li>&#39;catmullRomClosed&#39;</li>\n<li>&#39;catmullRomOpen&#39;</li>\n<li>&#39;linear&#39;</li>\n<li>&#39;linearClosed&#39;</li>\n<li>&#39;monotoneX&#39;</li>\n<li>&#39;monotoneY&#39;</li>\n<li>&#39;natural&#39;</li>\n<li>&#39;radial&#39;</li>\n<li>&#39;step&#39;</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"area.encode.enter.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"area.encode.enter.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"area.encode.enter.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"area.encode.enter.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"area.encode.enter.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"area.encode.enter.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"area.encode.enter.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"area.encode.enter.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"area.encode.enter.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"area.encode.enter.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"area.encode.enter.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"area.encode.enter.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"area.encode.enter.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"area.encode.enter.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"area.encode.enter.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"area.encode.enter.outerBorder":{"desc":"<p>Outer border</p>\n"},"area.encode.enter.innerBorder":{"desc":"<p>Inner border</p>\n"},"area.encode.enter.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"area.encode.enter.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"area.encode.enter.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"area.encode.enter.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"area.encode.enter.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"area.encode.enter.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"area.encode.enter.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"area.encode.enter.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"area.encode.enter.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"area.encode.enter.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"area.encode.enter.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"area.encode.enter.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"area.encode.enter.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"area.encode.enter.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"area.encode.enter.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"area.encode.enter.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"area.encode.enter.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"area.encode.enter.texture":{"desc":"<p>The texture of the graphic</p>\n"},"area.encode.enter.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"area.encode.enter.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"area.encode.enter.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"area.encode.enter.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"area.encode.enter.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"area.encode.update":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data update state.</p>\n"},"area.encode.update.enableSegments":{"desc":"<p>Whether to enable segmented style; because parsing segmented style requires a certain amount of performance consumption, this function will only be turned on when the style of all points is detected to be different</p>\n"},"area.encode.update.curveType":{"desc":"<p>The type of line, supporting the following options：</p>\n<ul>\n<li>&#39;basis&#39;</li>\n<li>&#39;basisClosed&#39;</li>\n<li>&#39;basisOpen&#39;</li>\n<li>&#39;bundle&#39;</li>\n<li>&#39;cardinal&#39;</li>\n<li>&#39;cardinalClosed&#39;</li>\n<li>&#39;cardinalOpen&#39;</li>\n<li>&#39;stepBefore&#39;</li>\n<li>&#39;stepAfter&#39;</li>\n<li>&#39;catmullRom&#39;</li>\n<li>&#39;catmullRomClosed&#39;</li>\n<li>&#39;catmullRomOpen&#39;</li>\n<li>&#39;linear&#39;</li>\n<li>&#39;linearClosed&#39;</li>\n<li>&#39;monotoneX&#39;</li>\n<li>&#39;monotoneY&#39;</li>\n<li>&#39;natural&#39;</li>\n<li>&#39;radial&#39;</li>\n<li>&#39;step&#39;</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"area.encode.update.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"area.encode.update.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"area.encode.update.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"area.encode.update.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"area.encode.update.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"area.encode.update.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"area.encode.update.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"area.encode.update.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"area.encode.update.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"area.encode.update.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"area.encode.update.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"area.encode.update.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"area.encode.update.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"area.encode.update.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"area.encode.update.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"area.encode.update.outerBorder":{"desc":"<p>Outer border</p>\n"},"area.encode.update.innerBorder":{"desc":"<p>Inner border</p>\n"},"area.encode.update.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"area.encode.update.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"area.encode.update.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"area.encode.update.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"area.encode.update.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"area.encode.update.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"area.encode.update.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"area.encode.update.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"area.encode.update.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"area.encode.update.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"area.encode.update.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"area.encode.update.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"area.encode.update.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"area.encode.update.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"area.encode.update.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"area.encode.update.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"area.encode.update.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"area.encode.update.texture":{"desc":"<p>The texture of the graphic</p>\n"},"area.encode.update.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"area.encode.update.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"area.encode.update.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"area.encode.update.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"area.encode.update.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"area.encode.exit":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data deletion state.</p>\n"},"area.encode.exit.enableSegments":{"desc":"<p>Whether to enable segmented style; because parsing segmented style requires a certain amount of performance consumption, this function will only be turned on when the style of all points is detected to be different</p>\n"},"area.encode.exit.curveType":{"desc":"<p>The type of line, supporting the following options：</p>\n<ul>\n<li>&#39;basis&#39;</li>\n<li>&#39;basisClosed&#39;</li>\n<li>&#39;basisOpen&#39;</li>\n<li>&#39;bundle&#39;</li>\n<li>&#39;cardinal&#39;</li>\n<li>&#39;cardinalClosed&#39;</li>\n<li>&#39;cardinalOpen&#39;</li>\n<li>&#39;stepBefore&#39;</li>\n<li>&#39;stepAfter&#39;</li>\n<li>&#39;catmullRom&#39;</li>\n<li>&#39;catmullRomClosed&#39;</li>\n<li>&#39;catmullRomOpen&#39;</li>\n<li>&#39;linear&#39;</li>\n<li>&#39;linearClosed&#39;</li>\n<li>&#39;monotoneX&#39;</li>\n<li>&#39;monotoneY&#39;</li>\n<li>&#39;natural&#39;</li>\n<li>&#39;radial&#39;</li>\n<li>&#39;step&#39;</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"area.encode.exit.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"area.encode.exit.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"area.encode.exit.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"area.encode.exit.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"area.encode.exit.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"area.encode.exit.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"area.encode.exit.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"area.encode.exit.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"area.encode.exit.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"area.encode.exit.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"area.encode.exit.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"area.encode.exit.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"area.encode.exit.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"area.encode.exit.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"area.encode.exit.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"area.encode.exit.outerBorder":{"desc":"<p>Outer border</p>\n"},"area.encode.exit.innerBorder":{"desc":"<p>Inner border</p>\n"},"area.encode.exit.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"area.encode.exit.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"area.encode.exit.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"area.encode.exit.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"area.encode.exit.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"area.encode.exit.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"area.encode.exit.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"area.encode.exit.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"area.encode.exit.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"area.encode.exit.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"area.encode.exit.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"area.encode.exit.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"area.encode.exit.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"area.encode.exit.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"area.encode.exit.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"area.encode.exit.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"area.encode.exit.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"area.encode.exit.texture":{"desc":"<p>The texture of the graphic</p>\n"},"area.encode.exit.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"area.encode.exit.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"area.encode.exit.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"area.encode.exit.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"area.encode.exit.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"area.encode.hover":{"desc":"<p>Set the visual channel mapping corresponding to the graphics elements when in the <code class=\"codespan\">hover</code> state.</p>\n"},"area.encode.hover.enableSegments":{"desc":"<p>Whether to enable segmented style; because parsing segmented style requires a certain amount of performance consumption, this function will only be turned on when the style of all points is detected to be different</p>\n"},"area.encode.hover.curveType":{"desc":"<p>The type of line, supporting the following options：</p>\n<ul>\n<li>&#39;basis&#39;</li>\n<li>&#39;basisClosed&#39;</li>\n<li>&#39;basisOpen&#39;</li>\n<li>&#39;bundle&#39;</li>\n<li>&#39;cardinal&#39;</li>\n<li>&#39;cardinalClosed&#39;</li>\n<li>&#39;cardinalOpen&#39;</li>\n<li>&#39;stepBefore&#39;</li>\n<li>&#39;stepAfter&#39;</li>\n<li>&#39;catmullRom&#39;</li>\n<li>&#39;catmullRomClosed&#39;</li>\n<li>&#39;catmullRomOpen&#39;</li>\n<li>&#39;linear&#39;</li>\n<li>&#39;linearClosed&#39;</li>\n<li>&#39;monotoneX&#39;</li>\n<li>&#39;monotoneY&#39;</li>\n<li>&#39;natural&#39;</li>\n<li>&#39;radial&#39;</li>\n<li>&#39;step&#39;</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"area.encode.hover.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"area.encode.hover.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"area.encode.hover.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"area.encode.hover.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"area.encode.hover.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"area.encode.hover.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"area.encode.hover.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"area.encode.hover.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"area.encode.hover.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"area.encode.hover.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"area.encode.hover.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"area.encode.hover.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"area.encode.hover.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"area.encode.hover.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"area.encode.hover.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"area.encode.hover.outerBorder":{"desc":"<p>Outer border</p>\n"},"area.encode.hover.innerBorder":{"desc":"<p>Inner border</p>\n"},"area.encode.hover.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"area.encode.hover.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"area.encode.hover.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"area.encode.hover.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"area.encode.hover.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"area.encode.hover.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"area.encode.hover.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"area.encode.hover.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"area.encode.hover.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"area.encode.hover.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"area.encode.hover.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"area.encode.hover.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"area.encode.hover.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"area.encode.hover.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"area.encode.hover.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"area.encode.hover.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"area.encode.hover.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"area.encode.hover.texture":{"desc":"<p>The texture of the graphic</p>\n"},"area.encode.hover.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"area.encode.hover.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"area.encode.hover.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"area.encode.hover.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"area.encode.hover.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"area.animationState":{"desc":"<p>Type: <code class=\"codespan\">MarkFunctionType</code>\nRequired: No\nanimation attributes</p>\n"},"area.animation":{"desc":"<p>Supports setting various state corresponding animations, data-driven animation states have three types:</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>Interaction-triggered state changes are configured through a unified interaction animation, with the configuration key being <code class=\"codespan\">state</code></p>\n"},"area.animation.type":{"desc":"<p>Animation execution type, specifying a specific built-in animation execution effect</p>\n<p>Universal built-in animation types include:</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: Fade in and out animations</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: Scaling animations</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: Move in and out animations</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: Rotation animations</li>\n<li><code class=\"codespan\">update</code>: Update animations</li>\n</ul>\n<p>area primitive additional supported animation types include:</p>\n<ul>\n<li><code class=\"codespan\">growPointsIn</code>/<code class=\"codespan\">growPointsOut</code>: Point growing animation</li>\n<li><code class=\"codespan\">growPointsXIn</code>/<code class=\"codespan\">growPointsXOut</code>: X direction point growing animation</li>\n<li><code class=\"codespan\">growPointsYIn</code>/<code class=\"codespan\">growPointsYOut</code>: Y direction point growing animation</li>\n<li><code class=\"codespan\">clipIn</code>/<code class=\"codespan\">clipOut</code>: Clipping animation</li>\n</ul>\n"},"area.animation.channel":{"desc":"<p>Visual channels before and after the animation is executed, conflicts with <code class=\"codespan\">type</code> configuration</p>\n"},"area.animation.custom":{"desc":"<p>Custom animation, if custom animation configuration is set, it will replace the default visual channel interpolation logic</p>\n"},"area.animation.customParameters":{"desc":"<p>Custom animation parameters</p>\n"},"area.animation.easing":{"desc":"<p>Animation easing, default is <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"area.animation.delay":{"desc":"<p>Animation execution delay time, default is 0</p>\n"},"area.animation.duration":{"desc":"<p>Animation execution duration, default is 1000ms</p>\n"},"area.animation.oneByOne":{"desc":"<p>Animation execution delay time in sequence. If set to <code class=\"codespan\">true</code>, the next element&#39;s animation will be executed after the previous element&#39;s animation is completed. The default is <code class=\"codespan\">false</code>.</p>\n"},"area.animation.startTime":{"desc":"<p>Initial time of animation execution, which will not be repeatedly applied in loop animation, default is 0</p>\n"},"area.animation.totalTime":{"desc":"<p>Maximum time of animation execution, the animation will be terminated if it reaches the set time</p>\n"},"area.animation.loop":{"desc":"<p>Number of animation loops, if set to <code class=\"codespan\">true</code>, it will loop infinitely</p>\n"},"area.animation.options":{"desc":"<p>Additional parameters set for specific animation types execution</p>\n"},"area.animation.controlOptions":{"desc":"<p>Control parameters for animation execution logic:</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: Whether to immediately terminate its animation when the animation state changes</li>\n<li><code class=\"codespan\">immediatelyApply</code>: Whether to immediately apply the initial visual channel of the animation</li>\n</ul>\n"},"area.zIndex":{"desc":"<p>Set the zIndex of the container shape (group) corresponding to the <code class=\"codespan\">mark</code> graphic primitive</p>\n"},"area.interactive":{"desc":"<p>Type: <code class=\"codespan\">boolean</code>\nRequired: No</p>\n"},"area.context":{"desc":"<p>Set the context parameters of the graphic primitive</p>\n"},"area.setCustomizedShape":{"desc":"<p>Set the callback function of custom shape. The corresponding ts type is as follows:</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>Where <code class=\"codespan\">ICustomPath2D</code> is a utility class provided by VRender for drawing custom paths.</p>\n"},"area.support3d":{"desc":"<p>Whether to support 3d mode when the canvas is set to 3d view.</p>\n"},"area.group":{"desc":"<p>Set the parent graphic primitive. Supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> The id of the corresponding parent graphic primitive</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> The corresponding grammar element of the parent graphic primitive, generally used in API call scenarios.</li>\n</ul>\n<p>If not set, it will be attached to the root node of the canvas by default.</p>\n"},"area.from":{"desc":"<p>ts type definition is:</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>Declare the data on which the graphic primitive depends through the <code class=\"codespan\">data</code> attribute.</p>\n"},"area.key":{"desc":"<p>Set the unique identifier for the graphic primitive data element, which is used to calculate the data state of the graphic element. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the <code class=\"codespan\">key</code></li>\n</ul>\n"},"area.sort":{"desc":"<p>Sort all graphic elements in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"area.groupBy":{"desc":"<p>Set the grouping attribute, the corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the grouping <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the grouping <code class=\"codespan\">key</code></li>\n</ul>\n"},"area.groupSort":{"desc":"<p>Sort the groups in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"area.coordinate":{"desc":"<p>Set the id or graphic element corresponding to the associated coordinate system of this graphic primitive</p>\n"},"area.state":{"desc":"<p>Set the state values ​​of all graphical elements of the current graphic primitive, supporting three formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the state of the graphic, for example, <code class=\"codespan\">{ state: &#39;selected&#39;}</code> sets the state of all graphics to <code class=\"codespan\">&#39;selected&#39;</code>, usually in this case, the <code class=\"codespan\">encode</code> also sets the graphic channel mapping corresponding to the <code class=\"codespan\">&#39;selected&#39;</code> state</li>\n<li><code class=\"codespan\">string[]</code> Set multiple states for the graphic, you can configure <code class=\"codespan\">stateSort</code> to influence the order of executing the graphic channel mapping corresponding to the state</li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the state value, and the return parameter is <code class=\"codespan\">string | string[]</code>, the corresponding ts type definition is:</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"area.stateSort":{"desc":"<p>Set the sorting function of the state values ​​of all graphics elements of the current graphic primitive, which will affect the order of the graphic channel mapping corresponding to the state. The result of the graphic channel mapping executed earlier may be covered by subsequent states. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"area.transform":{"desc":"<p>Set the corresponding transformation of the graphic primitive. All data transformations can be configured on the graphic primitive and are used for the <code class=\"codespan\">join data</code> execution transformation;\nAnother type of transformation is the transformation executed by graphical elements, such as <code class=\"codespan\">dodge</code>;\nThe general type definition is as follows:</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>The parameters supported by each transformation are different</p>\n"},"area.layout":{"desc":"<p>Set the layout parameters of the graphic primitive. There are two roles when the graphic primitive participates in the layout:</p>\n<ul>\n<li>&#39;container&#39; Container graphic primitive, usually <code class=\"codespan\">group</code> graphic primitive</li>\n<li>&#39;item&#39; layout child element, as a child node of the container graphic primitive</li>\n</ul>\n<p>Please note that we only support one layer of layout. If it is a multi-layer nested layout, it is recommended to use a custom layout scheme for implementation;</p>\n<p>Now support two content layouts: <code class=\"codespan\">grid</code> layout and <code class=\"codespan\">relative</code> layout, the related type definition is as follows</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>If you want to set a custom layout scheme, <code class=\"codespan\">layout</code> also supports setting callback functions directly. The definition of the callback function is as follows:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"area.layout.display":{"desc":"<p>The container graphic primitive sets the layout type and supports two configurations:</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> Relative layout</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> Grid layout</li>\n</ul>\n"},"area.layout.callback":{"desc":"<p>Customize the callback function for this graphic primitive, the ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"area.layout.skipBeforeLayouted":{"desc":"<p>Skip the execution stage before the layout is completed</p>\n"},"area.layout.updateViewSignals":{"desc":"<p>Whether to update the default view signals, that is: <code class=\"codespan\">padding</code>, <code class=\"codespan\">viewWidth</code> and <code class=\"codespan\">viewHeight</code></p>\n<p>This property can only be set on a container graphic primitive with <code class=\"codespan\">&#39;relative&#39;</code> layout.</p>\n"},"area.layout.maxChildWidth":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum width of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the width of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"area.layout.maxChildHeight":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum height of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the height of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"area.layout.position":{"desc":"<p>Set the position of the child graphic primitive of the relative layout. The supported settings are:</p>\n<ul>\n<li>&#39;top&#39; Relative to the top of the parent graphic primitive</li>\n<li>&#39;bottom&#39; Relative to the bottom of the parent graphic primitive</li>\n<li>&#39;left&#39; Relative to the left side of the parent graphic primitive</li>\n<li>&#39;right&#39; Relative to the right side of the parent graphic primitive</li>\n<li>&#39;content&#39; Relative to the center of the parent graphic primitive, that is, the content area</li>\n<li>&#39;auto&#39; When the graphic primitive sets the coordinate system, the position relative to the parent graphic primitive is automatically calculated according to the associated <code class=\"codespan\">scale</code></li>\n</ul>\n"},"area.layout.padding":{"desc":"<p>The inner padding of Child graphic primitive, in px unit, with the default padding of 0 for all directions. Accepts numerical values, numerical arrays, and objects for settings.</p>\n<p>Example of usage:</p>\n<pre><code class=\"lang-ts\">// Numerical type, set the padding to 5\npadding: 5;\n// Numerical array, set the top and bottom padding to 5, and the left and right padding to 10, similar to the CSS box model\npadding: [5, 10];\n// Numerical array, set the padding for all four directions separately\npadding: [\n  5, // Top\n  10, // Right\n  5, // Bottom\n  10 // Left\n];\n// Object type\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"area.layout.gridTemplateRows":{"desc":"<p>The parent graphic primitive of the grid layout sets the row height</p>\n"},"area.layout.gridTemplateColumns":{"desc":"<p>The parent graphic primitive of the grid layout sets the column width</p>\n"},"area.layout.gridRowGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the row spacing</p>\n"},"area.layout.gridColumnGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the column spacing</p>\n"},"area.layout.gridRowStart":{"desc":"<p>The child graphic primitive of the grid layout sets the row start position</p>\n"},"area.layout.gridRowEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the row end position</p>\n"},"area.layout.gridColumnStart":{"desc":"<p>The child graphic primitive of the grid layout sets the column start position</p>\n"},"area.layout.gridColumnEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the column end position</p>\n"},"area.large":{"desc":"<p>Whether to enable large data rendering mode</p>\n"},"area.largeThreshold":{"desc":"<p>The threshold for enabling large data rendering optimization, corresponding to the length of data</p>\n"},"area.progressiveStep":{"desc":"<p>The step length for enabling progressive rendering, corresponding to the length of data in each shard</p>\n"},"area.progressiveThreshold":{"desc":"<p>The threshold for enabling progressive rendering, corresponding to the length of single series data</p>\n"},"area.morph":{"desc":"<p>Whether to enable global transition morph animations for the current graphic element</p>\n"},"area.morphKey":{"desc":"<p>Used to match graphic elements for global transition morph animations, graphic elements with the same <code class=\"codespan\">morphKey</code> will undergo morph animations</p>\n"},"area.morphElementKey":{"desc":"<p>For the matched graphic elements before and after, use this configuration to match the graphic element; if not declared, we will read the <code class=\"codespan\">key</code> configuration by default to match the graphic element for morph animations;\nSupports one-to-one, one-to-many, and many-to-one graphic morph animations by default</p>\n<!-- Graphic element line -->\n<p>Line graphic element</p>\n"},"line":{"desc":"<p><strong> Line graphic element </strong> Test it out</p>\n"},"line.type":{"desc":"<p>Set to line graphic element type</p>\n"},"line.encode":{"desc":"<p>Set the visual channel encoding of the graphics elements, supporting three data change states by default:</p>\n<ul>\n<li><code class=\"codespan\">enter</code> newly added data items</li>\n<li><code class=\"codespan\">update</code> data items have been updated</li>\n<li><code class=\"codespan\">exit</code> data items are deleted</li>\n</ul>\n<p>Note that the data state here is automatically generated based on the <code class=\"codespan\">mark</code>&#39;s <code class=\"codespan\">key</code>. We will calculate the unique identifier for the data bound to the <code class=\"codespan\">mark</code> based on the <code class=\"codespan\">key</code> configuration. After the data is updated, if the corresponding unique identifier no longer exists, the state is <code class=\"codespan\">exit</code>; if it exists, it is <code class=\"codespan\">update</code>. If the previous data does not exist for the unique identifier, the data item&#39;s state is <code class=\"codespan\">enter</code>.</p>\n<p>Supports one interaction state by default:</p>\n<ul>\n<li><code class=\"codespan\">hover</code> when the mouse hovers over a specific shape, set the corresponding visual channel encoding for the shape</li>\n</ul>\n"},"line.encode.enter":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data initialization state. Note that it will not be executed again when the data is updated.</p>\n"},"line.encode.enter.enableSegments":{"desc":"<p>Whether to enable segmented style; because parsing segmented style requires a certain amount of performance consumption, this function will only be turned on when the style of all points is detected to be different</p>\n"},"line.encode.enter.curveType":{"desc":"<p>The type of line, supporting the following options：</p>\n<ul>\n<li>&#39;basis&#39;</li>\n<li>&#39;basisClosed&#39;</li>\n<li>&#39;basisOpen&#39;</li>\n<li>&#39;bundle&#39;</li>\n<li>&#39;cardinal&#39;</li>\n<li>&#39;cardinalClosed&#39;</li>\n<li>&#39;cardinalOpen&#39;</li>\n<li>&#39;stepBefore&#39;</li>\n<li>&#39;stepAfter&#39;</li>\n<li>&#39;catmullRom&#39;</li>\n<li>&#39;catmullRomClosed&#39;</li>\n<li>&#39;catmullRomOpen&#39;</li>\n<li>&#39;linear&#39;</li>\n<li>&#39;linearClosed&#39;</li>\n<li>&#39;monotoneX&#39;</li>\n<li>&#39;monotoneY&#39;</li>\n<li>&#39;natural&#39;</li>\n<li>&#39;radial&#39;</li>\n<li>&#39;step&#39;</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"line.encode.enter.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"line.encode.enter.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"line.encode.enter.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"line.encode.enter.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"line.encode.enter.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"line.encode.enter.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"line.encode.enter.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"line.encode.enter.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"line.encode.enter.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"line.encode.enter.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"line.encode.enter.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"line.encode.enter.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"line.encode.enter.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"line.encode.enter.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"line.encode.enter.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"line.encode.enter.outerBorder":{"desc":"<p>Outer border</p>\n"},"line.encode.enter.innerBorder":{"desc":"<p>Inner border</p>\n"},"line.encode.enter.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"line.encode.enter.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"line.encode.enter.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"line.encode.enter.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"line.encode.enter.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"line.encode.enter.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"line.encode.enter.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"line.encode.enter.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"line.encode.enter.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"line.encode.enter.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"line.encode.enter.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"line.encode.enter.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"line.encode.enter.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"line.encode.enter.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"line.encode.enter.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"line.encode.enter.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"line.encode.enter.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"line.encode.enter.texture":{"desc":"<p>The texture of the graphic</p>\n"},"line.encode.enter.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"line.encode.enter.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"line.encode.enter.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"line.encode.enter.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"line.encode.enter.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"line.encode.update":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data update state.</p>\n"},"line.encode.update.enableSegments":{"desc":"<p>Whether to enable segmented style; because parsing segmented style requires a certain amount of performance consumption, this function will only be turned on when the style of all points is detected to be different</p>\n"},"line.encode.update.curveType":{"desc":"<p>The type of line, supporting the following options：</p>\n<ul>\n<li>&#39;basis&#39;</li>\n<li>&#39;basisClosed&#39;</li>\n<li>&#39;basisOpen&#39;</li>\n<li>&#39;bundle&#39;</li>\n<li>&#39;cardinal&#39;</li>\n<li>&#39;cardinalClosed&#39;</li>\n<li>&#39;cardinalOpen&#39;</li>\n<li>&#39;stepBefore&#39;</li>\n<li>&#39;stepAfter&#39;</li>\n<li>&#39;catmullRom&#39;</li>\n<li>&#39;catmullRomClosed&#39;</li>\n<li>&#39;catmullRomOpen&#39;</li>\n<li>&#39;linear&#39;</li>\n<li>&#39;linearClosed&#39;</li>\n<li>&#39;monotoneX&#39;</li>\n<li>&#39;monotoneY&#39;</li>\n<li>&#39;natural&#39;</li>\n<li>&#39;radial&#39;</li>\n<li>&#39;step&#39;</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"line.encode.update.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"line.encode.update.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"line.encode.update.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"line.encode.update.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"line.encode.update.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"line.encode.update.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"line.encode.update.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"line.encode.update.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"line.encode.update.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"line.encode.update.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"line.encode.update.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"line.encode.update.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"line.encode.update.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"line.encode.update.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"line.encode.update.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"line.encode.update.outerBorder":{"desc":"<p>Outer border</p>\n"},"line.encode.update.innerBorder":{"desc":"<p>Inner border</p>\n"},"line.encode.update.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"line.encode.update.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"line.encode.update.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"line.encode.update.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"line.encode.update.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"line.encode.update.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"line.encode.update.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"line.encode.update.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"line.encode.update.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"line.encode.update.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"line.encode.update.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"line.encode.update.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"line.encode.update.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"line.encode.update.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"line.encode.update.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"line.encode.update.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"line.encode.update.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"line.encode.update.texture":{"desc":"<p>The texture of the graphic</p>\n"},"line.encode.update.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"line.encode.update.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"line.encode.update.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"line.encode.update.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"line.encode.update.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"line.encode.exit":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data deletion state.</p>\n"},"line.encode.exit.enableSegments":{"desc":"<p>Whether to enable segmented style; because parsing segmented style requires a certain amount of performance consumption, this function will only be turned on when the style of all points is detected to be different</p>\n"},"line.encode.exit.curveType":{"desc":"<p>The type of line, supporting the following options：</p>\n<ul>\n<li>&#39;basis&#39;</li>\n<li>&#39;basisClosed&#39;</li>\n<li>&#39;basisOpen&#39;</li>\n<li>&#39;bundle&#39;</li>\n<li>&#39;cardinal&#39;</li>\n<li>&#39;cardinalClosed&#39;</li>\n<li>&#39;cardinalOpen&#39;</li>\n<li>&#39;stepBefore&#39;</li>\n<li>&#39;stepAfter&#39;</li>\n<li>&#39;catmullRom&#39;</li>\n<li>&#39;catmullRomClosed&#39;</li>\n<li>&#39;catmullRomOpen&#39;</li>\n<li>&#39;linear&#39;</li>\n<li>&#39;linearClosed&#39;</li>\n<li>&#39;monotoneX&#39;</li>\n<li>&#39;monotoneY&#39;</li>\n<li>&#39;natural&#39;</li>\n<li>&#39;radial&#39;</li>\n<li>&#39;step&#39;</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"line.encode.exit.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"line.encode.exit.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"line.encode.exit.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"line.encode.exit.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"line.encode.exit.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"line.encode.exit.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"line.encode.exit.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"line.encode.exit.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"line.encode.exit.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"line.encode.exit.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"line.encode.exit.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"line.encode.exit.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"line.encode.exit.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"line.encode.exit.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"line.encode.exit.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"line.encode.exit.outerBorder":{"desc":"<p>Outer border</p>\n"},"line.encode.exit.innerBorder":{"desc":"<p>Inner border</p>\n"},"line.encode.exit.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"line.encode.exit.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"line.encode.exit.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"line.encode.exit.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"line.encode.exit.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"line.encode.exit.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"line.encode.exit.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"line.encode.exit.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"line.encode.exit.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"line.encode.exit.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"line.encode.exit.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"line.encode.exit.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"line.encode.exit.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"line.encode.exit.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"line.encode.exit.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"line.encode.exit.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"line.encode.exit.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"line.encode.exit.texture":{"desc":"<p>The texture of the graphic</p>\n"},"line.encode.exit.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"line.encode.exit.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"line.encode.exit.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"line.encode.exit.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"line.encode.exit.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"line.encode.hover":{"desc":"<p>Set the visual channel mapping corresponding to the graphics elements when in the <code class=\"codespan\">hover</code> state.</p>\n"},"line.encode.hover.enableSegments":{"desc":"<p>Whether to enable segmented style; because parsing segmented style requires a certain amount of performance consumption, this function will only be turned on when the style of all points is detected to be different</p>\n"},"line.encode.hover.curveType":{"desc":"<p>The type of line, supporting the following options：</p>\n<ul>\n<li>&#39;basis&#39;</li>\n<li>&#39;basisClosed&#39;</li>\n<li>&#39;basisOpen&#39;</li>\n<li>&#39;bundle&#39;</li>\n<li>&#39;cardinal&#39;</li>\n<li>&#39;cardinalClosed&#39;</li>\n<li>&#39;cardinalOpen&#39;</li>\n<li>&#39;stepBefore&#39;</li>\n<li>&#39;stepAfter&#39;</li>\n<li>&#39;catmullRom&#39;</li>\n<li>&#39;catmullRomClosed&#39;</li>\n<li>&#39;catmullRomOpen&#39;</li>\n<li>&#39;linear&#39;</li>\n<li>&#39;linearClosed&#39;</li>\n<li>&#39;monotoneX&#39;</li>\n<li>&#39;monotoneY&#39;</li>\n<li>&#39;natural&#39;</li>\n<li>&#39;radial&#39;</li>\n<li>&#39;step&#39;</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"line.encode.hover.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"line.encode.hover.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"line.encode.hover.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"line.encode.hover.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"line.encode.hover.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"line.encode.hover.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"line.encode.hover.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"line.encode.hover.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"line.encode.hover.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"line.encode.hover.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"line.encode.hover.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"line.encode.hover.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"line.encode.hover.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"line.encode.hover.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"line.encode.hover.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"line.encode.hover.outerBorder":{"desc":"<p>Outer border</p>\n"},"line.encode.hover.innerBorder":{"desc":"<p>Inner border</p>\n"},"line.encode.hover.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"line.encode.hover.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"line.encode.hover.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"line.encode.hover.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"line.encode.hover.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"line.encode.hover.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"line.encode.hover.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"line.encode.hover.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"line.encode.hover.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"line.encode.hover.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"line.encode.hover.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"line.encode.hover.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"line.encode.hover.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"line.encode.hover.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"line.encode.hover.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"line.encode.hover.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"line.encode.hover.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"line.encode.hover.texture":{"desc":"<p>The texture of the graphic</p>\n"},"line.encode.hover.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"line.encode.hover.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"line.encode.hover.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"line.encode.hover.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"line.encode.hover.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"line.animationState":{"desc":"<p>Type: <code class=\"codespan\">MarkFunctionType</code>\nRequired: No\nanimation attributes</p>\n"},"line.animation":{"desc":"<p>Supports setting various state corresponding animations, data-driven animation states have three types:</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>Interaction-triggered state changes are configured through a unified interaction animation, with the configuration key being <code class=\"codespan\">state</code></p>\n"},"line.animation.type":{"desc":"<p>Animation execution type, specifying a specific built-in animation execution effect</p>\n<p>Universal built-in animation types include:</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: Fade in and out animations</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: Scaling animations</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: Move in and out animations</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: Rotation animations</li>\n<li><code class=\"codespan\">update</code>: Update animations</li>\n</ul>\n<p>line primitive additional supported animation types include:</p>\n<ul>\n<li><code class=\"codespan\">growPointsIn</code>/<code class=\"codespan\">growPointsOut</code>: Point growing animation</li>\n<li><code class=\"codespan\">growPointsXIn</code>/<code class=\"codespan\">growPointsXOut</code>: X direction point growing animation</li>\n<li><code class=\"codespan\">growPointsYIn</code>/<code class=\"codespan\">growPointsYOut</code>: Y direction point growing animation</li>\n<li><code class=\"codespan\">clipIn</code>/<code class=\"codespan\">clipOut</code>: Clipping animation</li>\n</ul>\n"},"line.animation.channel":{"desc":"<p>Visual channels before and after the animation is executed, conflicts with <code class=\"codespan\">type</code> configuration</p>\n"},"line.animation.custom":{"desc":"<p>Custom animation, if custom animation configuration is set, it will replace the default visual channel interpolation logic</p>\n"},"line.animation.customParameters":{"desc":"<p>Custom animation parameters</p>\n"},"line.animation.easing":{"desc":"<p>Animation easing, default is <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"line.animation.delay":{"desc":"<p>Animation execution delay time, default is 0</p>\n"},"line.animation.duration":{"desc":"<p>Animation execution duration, default is 1000ms</p>\n"},"line.animation.oneByOne":{"desc":"<p>Animation execution delay time in sequence. If set to <code class=\"codespan\">true</code>, the next element&#39;s animation will be executed after the previous element&#39;s animation is completed. The default is <code class=\"codespan\">false</code>.</p>\n"},"line.animation.startTime":{"desc":"<p>Initial time of animation execution, which will not be repeatedly applied in loop animation, default is 0</p>\n"},"line.animation.totalTime":{"desc":"<p>Maximum time of animation execution, the animation will be terminated if it reaches the set time</p>\n"},"line.animation.loop":{"desc":"<p>Number of animation loops, if set to <code class=\"codespan\">true</code>, it will loop infinitely</p>\n"},"line.animation.options":{"desc":"<p>Additional parameters set for specific animation types execution</p>\n"},"line.animation.controlOptions":{"desc":"<p>Control parameters for animation execution logic:</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: Whether to immediately terminate its animation when the animation state changes</li>\n<li><code class=\"codespan\">immediatelyApply</code>: Whether to immediately apply the initial visual channel of the animation</li>\n</ul>\n"},"line.zIndex":{"desc":"<p>Set the zIndex of the container shape (group) corresponding to the <code class=\"codespan\">mark</code> graphic primitive</p>\n"},"line.interactive":{"desc":"<p>Type: <code class=\"codespan\">boolean</code>\nRequired: No</p>\n"},"line.context":{"desc":"<p>Set the context parameters of the graphic primitive</p>\n"},"line.setCustomizedShape":{"desc":"<p>Set the callback function of custom shape. The corresponding ts type is as follows:</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>Where <code class=\"codespan\">ICustomPath2D</code> is a utility class provided by VRender for drawing custom paths.</p>\n"},"line.support3d":{"desc":"<p>Whether to support 3d mode when the canvas is set to 3d view.</p>\n"},"line.group":{"desc":"<p>Set the parent graphic primitive. Supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> The id of the corresponding parent graphic primitive</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> The corresponding grammar element of the parent graphic primitive, generally used in API call scenarios.</li>\n</ul>\n<p>If not set, it will be attached to the root node of the canvas by default.</p>\n"},"line.from":{"desc":"<p>ts type definition is:</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>Declare the data on which the graphic primitive depends through the <code class=\"codespan\">data</code> attribute.</p>\n"},"line.key":{"desc":"<p>Set the unique identifier for the graphic primitive data element, which is used to calculate the data state of the graphic element. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the <code class=\"codespan\">key</code></li>\n</ul>\n"},"line.sort":{"desc":"<p>Sort all graphic elements in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"line.groupBy":{"desc":"<p>Set the grouping attribute, the corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the grouping <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the grouping <code class=\"codespan\">key</code></li>\n</ul>\n"},"line.groupSort":{"desc":"<p>Sort the groups in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"line.coordinate":{"desc":"<p>Set the id or graphic element corresponding to the associated coordinate system of this graphic primitive</p>\n"},"line.state":{"desc":"<p>Set the state values ​​of all graphical elements of the current graphic primitive, supporting three formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the state of the graphic, for example, <code class=\"codespan\">{ state: &#39;selected&#39;}</code> sets the state of all graphics to <code class=\"codespan\">&#39;selected&#39;</code>, usually in this case, the <code class=\"codespan\">encode</code> also sets the graphic channel mapping corresponding to the <code class=\"codespan\">&#39;selected&#39;</code> state</li>\n<li><code class=\"codespan\">string[]</code> Set multiple states for the graphic, you can configure <code class=\"codespan\">stateSort</code> to influence the order of executing the graphic channel mapping corresponding to the state</li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the state value, and the return parameter is <code class=\"codespan\">string | string[]</code>, the corresponding ts type definition is:</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"line.stateSort":{"desc":"<p>Set the sorting function of the state values ​​of all graphics elements of the current graphic primitive, which will affect the order of the graphic channel mapping corresponding to the state. The result of the graphic channel mapping executed earlier may be covered by subsequent states. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"line.transform":{"desc":"<p>Set the corresponding transformation of the graphic primitive. All data transformations can be configured on the graphic primitive and are used for the <code class=\"codespan\">join data</code> execution transformation;\nAnother type of transformation is the transformation executed by graphical elements, such as <code class=\"codespan\">dodge</code>;\nThe general type definition is as follows:</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>The parameters supported by each transformation are different</p>\n"},"line.layout":{"desc":"<p>Set the layout parameters of the graphic primitive. There are two roles when the graphic primitive participates in the layout:</p>\n<ul>\n<li>&#39;container&#39; Container graphic primitive, usually <code class=\"codespan\">group</code> graphic primitive</li>\n<li>&#39;item&#39; layout child element, as a child node of the container graphic primitive</li>\n</ul>\n<p>Please note that we only support one layer of layout. If it is a multi-layer nested layout, it is recommended to use a custom layout scheme for implementation;</p>\n<p>Now support two content layouts: <code class=\"codespan\">grid</code> layout and <code class=\"codespan\">relative</code> layout, the related type definition is as follows</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>If you want to set a custom layout scheme, <code class=\"codespan\">layout</code> also supports setting callback functions directly. The definition of the callback function is as follows:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"line.layout.display":{"desc":"<p>The container graphic primitive sets the layout type and supports two configurations:</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> Relative layout</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> Grid layout</li>\n</ul>\n"},"line.layout.callback":{"desc":"<p>Customize the callback function for this graphic primitive, the ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"line.layout.skipBeforeLayouted":{"desc":"<p>Skip the execution stage before the layout is completed</p>\n"},"line.layout.updateViewSignals":{"desc":"<p>Whether to update the default view signals, that is: <code class=\"codespan\">padding</code>, <code class=\"codespan\">viewWidth</code> and <code class=\"codespan\">viewHeight</code></p>\n<p>This property can only be set on a container graphic primitive with <code class=\"codespan\">&#39;relative&#39;</code> layout.</p>\n"},"line.layout.maxChildWidth":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum width of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the width of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"line.layout.maxChildHeight":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum height of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the height of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"line.layout.position":{"desc":"<p>Set the position of the child graphic primitive of the relative layout. The supported settings are:</p>\n<ul>\n<li>&#39;top&#39; Relative to the top of the parent graphic primitive</li>\n<li>&#39;bottom&#39; Relative to the bottom of the parent graphic primitive</li>\n<li>&#39;left&#39; Relative to the left side of the parent graphic primitive</li>\n<li>&#39;right&#39; Relative to the right side of the parent graphic primitive</li>\n<li>&#39;content&#39; Relative to the center of the parent graphic primitive, that is, the content area</li>\n<li>&#39;auto&#39; When the graphic primitive sets the coordinate system, the position relative to the parent graphic primitive is automatically calculated according to the associated <code class=\"codespan\">scale</code></li>\n</ul>\n"},"line.layout.padding":{"desc":"<p>The inner padding of Child graphic primitive, in px unit, with the default padding of 0 for all directions. Accepts numerical values, numerical arrays, and objects for settings.</p>\n<p>Example of usage:</p>\n<pre><code class=\"lang-ts\">// Numerical type, set the padding to 5\npadding: 5;\n// Numerical array, set the top and bottom padding to 5, and the left and right padding to 10, similar to the CSS box model\npadding: [5, 10];\n// Numerical array, set the padding for all four directions separately\npadding: [\n  5, // Top\n  10, // Right\n  5, // Bottom\n  10 // Left\n];\n// Object type\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"line.layout.gridTemplateRows":{"desc":"<p>The parent graphic primitive of the grid layout sets the row height</p>\n"},"line.layout.gridTemplateColumns":{"desc":"<p>The parent graphic primitive of the grid layout sets the column width</p>\n"},"line.layout.gridRowGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the row spacing</p>\n"},"line.layout.gridColumnGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the column spacing</p>\n"},"line.layout.gridRowStart":{"desc":"<p>The child graphic primitive of the grid layout sets the row start position</p>\n"},"line.layout.gridRowEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the row end position</p>\n"},"line.layout.gridColumnStart":{"desc":"<p>The child graphic primitive of the grid layout sets the column start position</p>\n"},"line.layout.gridColumnEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the column end position</p>\n"},"line.large":{"desc":"<p>Whether to enable large data rendering mode</p>\n"},"line.largeThreshold":{"desc":"<p>The threshold for enabling large data rendering optimization, corresponding to the length of data</p>\n"},"line.progressiveStep":{"desc":"<p>The step length for enabling progressive rendering, corresponding to the length of data in each shard</p>\n"},"line.progressiveThreshold":{"desc":"<p>The threshold for enabling progressive rendering, corresponding to the length of single series data</p>\n"},"line.morph":{"desc":"<p>Whether to enable global transition morph animations for the current graphic element</p>\n"},"line.morphKey":{"desc":"<p>Used to match graphic elements for global transition morph animations, graphic elements with the same <code class=\"codespan\">morphKey</code> will undergo morph animations</p>\n"},"line.morphElementKey":{"desc":"<p>For the matched graphic elements before and after, use this configuration to match the graphic element; if not declared, we will read the <code class=\"codespan\">key</code> configuration by default to match the graphic element for morph animations;\nSupports one-to-one, one-to-many, and many-to-one graphic morph animations by default</p>\n"},"rule":{"desc":"<p><strong> Rule geom </strong></p>\n"},"rule.type":{"desc":"<p>Set the geom type to <code class=\"codespan\">rule</code></p>\n"},"rule.encode":{"desc":"<p>Set the visual channel encoding of the graphics elements, supporting three data change states by default:</p>\n<ul>\n<li><code class=\"codespan\">enter</code> newly added data items</li>\n<li><code class=\"codespan\">update</code> data items have been updated</li>\n<li><code class=\"codespan\">exit</code> data items are deleted</li>\n</ul>\n<p>Note that the data state here is automatically generated based on the <code class=\"codespan\">mark</code>&#39;s <code class=\"codespan\">key</code>. We will calculate the unique identifier for the data bound to the <code class=\"codespan\">mark</code> based on the <code class=\"codespan\">key</code> configuration. After the data is updated, if the corresponding unique identifier no longer exists, the state is <code class=\"codespan\">exit</code>; if it exists, it is <code class=\"codespan\">update</code>. If the previous data does not exist for the unique identifier, the data item&#39;s state is <code class=\"codespan\">enter</code>.</p>\n<p>Supports one interaction state by default:</p>\n<ul>\n<li><code class=\"codespan\">hover</code> when the mouse hovers over a specific shape, set the corresponding visual channel encoding for the shape</li>\n</ul>\n"},"rule.encode.enter":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data initialization state. Note that it will not be executed again when the data is updated.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"rule.encode.enter.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"rule.encode.enter.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"rule.encode.enter.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"rule.encode.enter.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"rule.encode.enter.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"rule.encode.enter.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"rule.encode.enter.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"rule.encode.enter.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"rule.encode.enter.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"rule.encode.enter.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"rule.encode.enter.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"rule.encode.enter.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"rule.encode.enter.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"rule.encode.enter.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"rule.encode.enter.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"rule.encode.enter.outerBorder":{"desc":"<p>Outer border</p>\n"},"rule.encode.enter.innerBorder":{"desc":"<p>Inner border</p>\n"},"rule.encode.enter.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"rule.encode.enter.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"rule.encode.enter.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"rule.encode.enter.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"rule.encode.enter.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"rule.encode.enter.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"rule.encode.enter.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"rule.encode.enter.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"rule.encode.enter.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"rule.encode.enter.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"rule.encode.enter.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"rule.encode.enter.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"rule.encode.enter.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"rule.encode.enter.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"rule.encode.enter.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"rule.encode.enter.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"rule.encode.enter.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"rule.encode.enter.texture":{"desc":"<p>The texture of the graphic</p>\n"},"rule.encode.enter.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"rule.encode.enter.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"rule.encode.enter.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"rule.encode.enter.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"rule.encode.enter.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"rule.encode.update":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data update state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"rule.encode.update.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"rule.encode.update.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"rule.encode.update.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"rule.encode.update.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"rule.encode.update.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"rule.encode.update.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"rule.encode.update.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"rule.encode.update.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"rule.encode.update.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"rule.encode.update.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"rule.encode.update.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"rule.encode.update.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"rule.encode.update.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"rule.encode.update.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"rule.encode.update.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"rule.encode.update.outerBorder":{"desc":"<p>Outer border</p>\n"},"rule.encode.update.innerBorder":{"desc":"<p>Inner border</p>\n"},"rule.encode.update.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"rule.encode.update.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"rule.encode.update.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"rule.encode.update.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"rule.encode.update.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"rule.encode.update.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"rule.encode.update.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"rule.encode.update.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"rule.encode.update.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"rule.encode.update.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"rule.encode.update.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"rule.encode.update.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"rule.encode.update.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"rule.encode.update.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"rule.encode.update.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"rule.encode.update.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"rule.encode.update.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"rule.encode.update.texture":{"desc":"<p>The texture of the graphic</p>\n"},"rule.encode.update.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"rule.encode.update.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"rule.encode.update.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"rule.encode.update.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"rule.encode.update.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"rule.encode.exit":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data deletion state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"rule.encode.exit.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"rule.encode.exit.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"rule.encode.exit.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"rule.encode.exit.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"rule.encode.exit.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"rule.encode.exit.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"rule.encode.exit.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"rule.encode.exit.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"rule.encode.exit.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"rule.encode.exit.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"rule.encode.exit.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"rule.encode.exit.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"rule.encode.exit.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"rule.encode.exit.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"rule.encode.exit.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"rule.encode.exit.outerBorder":{"desc":"<p>Outer border</p>\n"},"rule.encode.exit.innerBorder":{"desc":"<p>Inner border</p>\n"},"rule.encode.exit.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"rule.encode.exit.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"rule.encode.exit.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"rule.encode.exit.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"rule.encode.exit.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"rule.encode.exit.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"rule.encode.exit.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"rule.encode.exit.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"rule.encode.exit.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"rule.encode.exit.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"rule.encode.exit.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"rule.encode.exit.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"rule.encode.exit.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"rule.encode.exit.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"rule.encode.exit.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"rule.encode.exit.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"rule.encode.exit.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"rule.encode.exit.texture":{"desc":"<p>The texture of the graphic</p>\n"},"rule.encode.exit.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"rule.encode.exit.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"rule.encode.exit.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"rule.encode.exit.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"rule.encode.exit.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"rule.encode.hover":{"desc":"<p>Set the visual channel mapping corresponding to the graphics elements when in the <code class=\"codespan\">hover</code> state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"rule.encode.hover.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"rule.encode.hover.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"rule.encode.hover.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"rule.encode.hover.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"rule.encode.hover.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"rule.encode.hover.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"rule.encode.hover.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"rule.encode.hover.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"rule.encode.hover.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"rule.encode.hover.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"rule.encode.hover.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"rule.encode.hover.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"rule.encode.hover.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"rule.encode.hover.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"rule.encode.hover.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"rule.encode.hover.outerBorder":{"desc":"<p>Outer border</p>\n"},"rule.encode.hover.innerBorder":{"desc":"<p>Inner border</p>\n"},"rule.encode.hover.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"rule.encode.hover.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"rule.encode.hover.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"rule.encode.hover.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"rule.encode.hover.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"rule.encode.hover.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"rule.encode.hover.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"rule.encode.hover.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"rule.encode.hover.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"rule.encode.hover.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"rule.encode.hover.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"rule.encode.hover.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"rule.encode.hover.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"rule.encode.hover.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"rule.encode.hover.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"rule.encode.hover.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"rule.encode.hover.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"rule.encode.hover.texture":{"desc":"<p>The texture of the graphic</p>\n"},"rule.encode.hover.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"rule.encode.hover.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"rule.encode.hover.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"rule.encode.hover.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"rule.encode.hover.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"rule.animationState":{"desc":"<p>Type: <code class=\"codespan\">MarkFunctionType</code>\nRequired: No\nanimation attributes</p>\n"},"rule.animation":{"desc":"<p>Supports setting various state corresponding animations, data-driven animation states have three types:</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>Interaction-triggered state changes are configured through a unified interaction animation, with the configuration key being <code class=\"codespan\">state</code></p>\n"},"rule.animation.type":{"desc":"<p>Animation execution type, specifying a specific built-in animation execution effect</p>\n<p>Universal built-in animation types include:</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: Fade in and out animations</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: Scaling animations</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: Move in and out animations</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: Rotation animations</li>\n<li><code class=\"codespan\">update</code>: Update animations</li>\n</ul>\n"},"rule.animation.channel":{"desc":"<p>Visual channels before and after the animation is executed, conflicts with <code class=\"codespan\">type</code> configuration</p>\n"},"rule.animation.custom":{"desc":"<p>Custom animation, if custom animation configuration is set, it will replace the default visual channel interpolation logic</p>\n"},"rule.animation.customParameters":{"desc":"<p>Custom animation parameters</p>\n"},"rule.animation.easing":{"desc":"<p>Animation easing, default is <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"rule.animation.delay":{"desc":"<p>Animation execution delay time, default is 0</p>\n"},"rule.animation.duration":{"desc":"<p>Animation execution duration, default is 1000ms</p>\n"},"rule.animation.oneByOne":{"desc":"<p>Animation execution delay time in sequence. If set to <code class=\"codespan\">true</code>, the next element&#39;s animation will be executed after the previous element&#39;s animation is completed. The default is <code class=\"codespan\">false</code>.</p>\n"},"rule.animation.startTime":{"desc":"<p>Initial time of animation execution, which will not be repeatedly applied in loop animation, default is 0</p>\n"},"rule.animation.totalTime":{"desc":"<p>Maximum time of animation execution, the animation will be terminated if it reaches the set time</p>\n"},"rule.animation.loop":{"desc":"<p>Number of animation loops, if set to <code class=\"codespan\">true</code>, it will loop infinitely</p>\n"},"rule.animation.options":{"desc":"<p>Additional parameters set for specific animation types execution</p>\n"},"rule.animation.controlOptions":{"desc":"<p>Control parameters for animation execution logic:</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: Whether to immediately terminate its animation when the animation state changes</li>\n<li><code class=\"codespan\">immediatelyApply</code>: Whether to immediately apply the initial visual channel of the animation</li>\n</ul>\n"},"rule.zIndex":{"desc":"<p>Set the zIndex of the container shape (group) corresponding to the <code class=\"codespan\">mark</code> graphic primitive</p>\n"},"rule.interactive":{"desc":"<p>Type: <code class=\"codespan\">boolean</code>\nRequired: No</p>\n"},"rule.context":{"desc":"<p>Set the context parameters of the graphic primitive</p>\n"},"rule.setCustomizedShape":{"desc":"<p>Set the callback function of custom shape. The corresponding ts type is as follows:</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>Where <code class=\"codespan\">ICustomPath2D</code> is a utility class provided by VRender for drawing custom paths.</p>\n"},"rule.support3d":{"desc":"<p>Whether to support 3d mode when the canvas is set to 3d view.</p>\n"},"rule.group":{"desc":"<p>Set the parent graphic primitive. Supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> The id of the corresponding parent graphic primitive</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> The corresponding grammar element of the parent graphic primitive, generally used in API call scenarios.</li>\n</ul>\n<p>If not set, it will be attached to the root node of the canvas by default.</p>\n"},"rule.from":{"desc":"<p>ts type definition is:</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>Declare the data on which the graphic primitive depends through the <code class=\"codespan\">data</code> attribute.</p>\n"},"rule.key":{"desc":"<p>Set the unique identifier for the graphic primitive data element, which is used to calculate the data state of the graphic element. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the <code class=\"codespan\">key</code></li>\n</ul>\n"},"rule.sort":{"desc":"<p>Sort all graphic elements in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"rule.groupBy":{"desc":"<p>Set the grouping attribute, the corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the grouping <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the grouping <code class=\"codespan\">key</code></li>\n</ul>\n"},"rule.groupSort":{"desc":"<p>Sort the groups in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"rule.coordinate":{"desc":"<p>Set the id or graphic element corresponding to the associated coordinate system of this graphic primitive</p>\n"},"rule.state":{"desc":"<p>Set the state values ​​of all graphical elements of the current graphic primitive, supporting three formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the state of the graphic, for example, <code class=\"codespan\">{ state: &#39;selected&#39;}</code> sets the state of all graphics to <code class=\"codespan\">&#39;selected&#39;</code>, usually in this case, the <code class=\"codespan\">encode</code> also sets the graphic channel mapping corresponding to the <code class=\"codespan\">&#39;selected&#39;</code> state</li>\n<li><code class=\"codespan\">string[]</code> Set multiple states for the graphic, you can configure <code class=\"codespan\">stateSort</code> to influence the order of executing the graphic channel mapping corresponding to the state</li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the state value, and the return parameter is <code class=\"codespan\">string | string[]</code>, the corresponding ts type definition is:</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"rule.stateSort":{"desc":"<p>Set the sorting function of the state values ​​of all graphics elements of the current graphic primitive, which will affect the order of the graphic channel mapping corresponding to the state. The result of the graphic channel mapping executed earlier may be covered by subsequent states. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"rule.transform":{"desc":"<p>Set the corresponding transformation of the graphic primitive. All data transformations can be configured on the graphic primitive and are used for the <code class=\"codespan\">join data</code> execution transformation;\nAnother type of transformation is the transformation executed by graphical elements, such as <code class=\"codespan\">dodge</code>;\nThe general type definition is as follows:</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>The parameters supported by each transformation are different</p>\n"},"rule.layout":{"desc":"<p>Set the layout parameters of the graphic primitive. There are two roles when the graphic primitive participates in the layout:</p>\n<ul>\n<li>&#39;container&#39; Container graphic primitive, usually <code class=\"codespan\">group</code> graphic primitive</li>\n<li>&#39;item&#39; layout child element, as a child node of the container graphic primitive</li>\n</ul>\n<p>Please note that we only support one layer of layout. If it is a multi-layer nested layout, it is recommended to use a custom layout scheme for implementation;</p>\n<p>Now support two content layouts: <code class=\"codespan\">grid</code> layout and <code class=\"codespan\">relative</code> layout, the related type definition is as follows</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>If you want to set a custom layout scheme, <code class=\"codespan\">layout</code> also supports setting callback functions directly. The definition of the callback function is as follows:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"rule.layout.display":{"desc":"<p>The container graphic primitive sets the layout type and supports two configurations:</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> Relative layout</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> Grid layout</li>\n</ul>\n"},"rule.layout.callback":{"desc":"<p>Customize the callback function for this graphic primitive, the ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"rule.layout.skipBeforeLayouted":{"desc":"<p>Skip the execution stage before the layout is completed</p>\n"},"rule.layout.updateViewSignals":{"desc":"<p>Whether to update the default view signals, that is: <code class=\"codespan\">padding</code>, <code class=\"codespan\">viewWidth</code> and <code class=\"codespan\">viewHeight</code></p>\n<p>This property can only be set on a container graphic primitive with <code class=\"codespan\">&#39;relative&#39;</code> layout.</p>\n"},"rule.layout.maxChildWidth":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum width of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the width of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"rule.layout.maxChildHeight":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum height of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the height of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"rule.layout.position":{"desc":"<p>Set the position of the child graphic primitive of the relative layout. The supported settings are:</p>\n<ul>\n<li>&#39;top&#39; Relative to the top of the parent graphic primitive</li>\n<li>&#39;bottom&#39; Relative to the bottom of the parent graphic primitive</li>\n<li>&#39;left&#39; Relative to the left side of the parent graphic primitive</li>\n<li>&#39;right&#39; Relative to the right side of the parent graphic primitive</li>\n<li>&#39;content&#39; Relative to the center of the parent graphic primitive, that is, the content area</li>\n<li>&#39;auto&#39; When the graphic primitive sets the coordinate system, the position relative to the parent graphic primitive is automatically calculated according to the associated <code class=\"codespan\">scale</code></li>\n</ul>\n"},"rule.layout.padding":{"desc":"<p>The inner padding of Child graphic primitive, in px unit, with the default padding of 0 for all directions. Accepts numerical values, numerical arrays, and objects for settings.</p>\n<p>Example of usage:</p>\n<pre><code class=\"lang-ts\">// Numerical type, set the padding to 5\npadding: 5;\n// Numerical array, set the top and bottom padding to 5, and the left and right padding to 10, similar to the CSS box model\npadding: [5, 10];\n// Numerical array, set the padding for all four directions separately\npadding: [\n  5, // Top\n  10, // Right\n  5, // Bottom\n  10 // Left\n];\n// Object type\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"rule.layout.gridTemplateRows":{"desc":"<p>The parent graphic primitive of the grid layout sets the row height</p>\n"},"rule.layout.gridTemplateColumns":{"desc":"<p>The parent graphic primitive of the grid layout sets the column width</p>\n"},"rule.layout.gridRowGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the row spacing</p>\n"},"rule.layout.gridColumnGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the column spacing</p>\n"},"rule.layout.gridRowStart":{"desc":"<p>The child graphic primitive of the grid layout sets the row start position</p>\n"},"rule.layout.gridRowEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the row end position</p>\n"},"rule.layout.gridColumnStart":{"desc":"<p>The child graphic primitive of the grid layout sets the column start position</p>\n"},"rule.layout.gridColumnEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the column end position</p>\n"},"rule.large":{"desc":"<p>Whether to enable large data rendering mode</p>\n"},"rule.largeThreshold":{"desc":"<p>The threshold for enabling large data rendering optimization, corresponding to the length of data</p>\n"},"rule.progressiveStep":{"desc":"<p>The step length for enabling progressive rendering, corresponding to the length of data in each shard</p>\n"},"rule.progressiveThreshold":{"desc":"<p>The threshold for enabling progressive rendering, corresponding to the length of single series data</p>\n"},"rule.morph":{"desc":"<p>Whether to enable global transition morph animations for the current graphic element</p>\n"},"rule.morphKey":{"desc":"<p>Used to match graphic elements for global transition morph animations, graphic elements with the same <code class=\"codespan\">morphKey</code> will undergo morph animations</p>\n"},"rule.morphElementKey":{"desc":"<p>For the matched graphic elements before and after, use this configuration to match the graphic element; if not declared, we will read the <code class=\"codespan\">key</code> configuration by default to match the graphic element for morph animations;\nSupports one-to-one, one-to-many, and many-to-one graphic morph animations by default</p>\n"},"image":{"desc":"<p><strong>Image mark</strong></p>\n"},"image.type":{"desc":"<p>Set the mark type to <code class=\"codespan\">image</code></p>\n"},"image.encode":{"desc":"<p>Set the visual channel encoding of the graphics elements, supporting three data change states by default:</p>\n<ul>\n<li><code class=\"codespan\">enter</code> newly added data items</li>\n<li><code class=\"codespan\">update</code> data items have been updated</li>\n<li><code class=\"codespan\">exit</code> data items are deleted</li>\n</ul>\n<p>Note that the data state here is automatically generated based on the <code class=\"codespan\">mark</code>&#39;s <code class=\"codespan\">key</code>. We will calculate the unique identifier for the data bound to the <code class=\"codespan\">mark</code> based on the <code class=\"codespan\">key</code> configuration. After the data is updated, if the corresponding unique identifier no longer exists, the state is <code class=\"codespan\">exit</code>; if it exists, it is <code class=\"codespan\">update</code>. If the previous data does not exist for the unique identifier, the data item&#39;s state is <code class=\"codespan\">enter</code>.</p>\n<p>Supports one interaction state by default:</p>\n<ul>\n<li><code class=\"codespan\">hover</code> when the mouse hovers over a specific shape, set the corresponding visual channel encoding for the shape</li>\n</ul>\n"},"image.encode.enter":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data initialization state. Note that it will not be executed again when the data is updated.</p>\n"},"image.encode.enter.width":{"desc":"<p>The width of the shape</p>\n"},"image.encode.enter.height":{"desc":"<p>The height of the shape</p>\n"},"image.encode.enter.repeatX":{"desc":"<p>The type of repetition in the x direction, optional values are:</p>\n<ul>\n<li><code class=\"codespan\">&#39;no-repeat&#39;</code> No-repeat</li>\n<li><code class=\"codespan\">&#39;repeat&#39;</code> Repeat</li>\n<li><code class=\"codespan\">&#39;stretch&#39;</code> Stretch</li>\n</ul>\n"},"image.encode.enter.repeatY":{"desc":"<p>The type of repetition in the y direction, optional values are:</p>\n<ul>\n<li><code class=\"codespan\">&#39;no-repeat&#39;</code> No-repeat</li>\n<li><code class=\"codespan\">&#39;repeat&#39;</code> Repeat</li>\n<li><code class=\"codespan\">&#39;stretch&#39;</code> Stretch</li>\n</ul>\n"},"image.encode.enter.image":{"desc":"<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"image.encode.enter.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"image.encode.enter.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"image.encode.enter.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"image.encode.enter.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"image.encode.enter.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"image.encode.enter.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"image.encode.enter.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"image.encode.enter.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"image.encode.enter.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"image.encode.enter.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"image.encode.enter.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"image.encode.enter.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"image.encode.enter.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"image.encode.enter.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"image.encode.enter.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"image.encode.enter.outerBorder":{"desc":"<p>Outer border</p>\n"},"image.encode.enter.innerBorder":{"desc":"<p>Inner border</p>\n"},"image.encode.enter.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"image.encode.enter.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"image.encode.enter.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"image.encode.enter.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"image.encode.enter.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"image.encode.enter.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"image.encode.enter.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"image.encode.enter.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"image.encode.enter.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"image.encode.enter.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"image.encode.enter.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"image.encode.enter.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"image.encode.enter.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"image.encode.enter.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"image.encode.enter.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"image.encode.enter.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"image.encode.enter.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"image.encode.enter.texture":{"desc":"<p>The texture of the graphic</p>\n"},"image.encode.enter.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"image.encode.enter.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"image.encode.enter.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"image.encode.enter.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"image.encode.enter.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"image.encode.update":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data update state.</p>\n"},"image.encode.update.width":{"desc":"<p>The width of the shape</p>\n"},"image.encode.update.height":{"desc":"<p>The height of the shape</p>\n"},"image.encode.update.repeatX":{"desc":"<p>The type of repetition in the x direction, optional values are:</p>\n<ul>\n<li><code class=\"codespan\">&#39;no-repeat&#39;</code> No-repeat</li>\n<li><code class=\"codespan\">&#39;repeat&#39;</code> Repeat</li>\n<li><code class=\"codespan\">&#39;stretch&#39;</code> Stretch</li>\n</ul>\n"},"image.encode.update.repeatY":{"desc":"<p>The type of repetition in the y direction, optional values are:</p>\n<ul>\n<li><code class=\"codespan\">&#39;no-repeat&#39;</code> No-repeat</li>\n<li><code class=\"codespan\">&#39;repeat&#39;</code> Repeat</li>\n<li><code class=\"codespan\">&#39;stretch&#39;</code> Stretch</li>\n</ul>\n"},"image.encode.update.image":{"desc":"<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"image.encode.update.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"image.encode.update.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"image.encode.update.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"image.encode.update.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"image.encode.update.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"image.encode.update.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"image.encode.update.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"image.encode.update.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"image.encode.update.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"image.encode.update.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"image.encode.update.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"image.encode.update.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"image.encode.update.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"image.encode.update.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"image.encode.update.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"image.encode.update.outerBorder":{"desc":"<p>Outer border</p>\n"},"image.encode.update.innerBorder":{"desc":"<p>Inner border</p>\n"},"image.encode.update.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"image.encode.update.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"image.encode.update.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"image.encode.update.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"image.encode.update.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"image.encode.update.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"image.encode.update.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"image.encode.update.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"image.encode.update.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"image.encode.update.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"image.encode.update.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"image.encode.update.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"image.encode.update.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"image.encode.update.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"image.encode.update.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"image.encode.update.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"image.encode.update.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"image.encode.update.texture":{"desc":"<p>The texture of the graphic</p>\n"},"image.encode.update.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"image.encode.update.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"image.encode.update.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"image.encode.update.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"image.encode.update.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"image.encode.exit":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data deletion state.</p>\n"},"image.encode.exit.width":{"desc":"<p>The width of the shape</p>\n"},"image.encode.exit.height":{"desc":"<p>The height of the shape</p>\n"},"image.encode.exit.repeatX":{"desc":"<p>The type of repetition in the x direction, optional values are:</p>\n<ul>\n<li><code class=\"codespan\">&#39;no-repeat&#39;</code> No-repeat</li>\n<li><code class=\"codespan\">&#39;repeat&#39;</code> Repeat</li>\n<li><code class=\"codespan\">&#39;stretch&#39;</code> Stretch</li>\n</ul>\n"},"image.encode.exit.repeatY":{"desc":"<p>The type of repetition in the y direction, optional values are:</p>\n<ul>\n<li><code class=\"codespan\">&#39;no-repeat&#39;</code> No-repeat</li>\n<li><code class=\"codespan\">&#39;repeat&#39;</code> Repeat</li>\n<li><code class=\"codespan\">&#39;stretch&#39;</code> Stretch</li>\n</ul>\n"},"image.encode.exit.image":{"desc":"<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"image.encode.exit.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"image.encode.exit.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"image.encode.exit.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"image.encode.exit.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"image.encode.exit.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"image.encode.exit.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"image.encode.exit.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"image.encode.exit.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"image.encode.exit.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"image.encode.exit.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"image.encode.exit.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"image.encode.exit.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"image.encode.exit.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"image.encode.exit.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"image.encode.exit.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"image.encode.exit.outerBorder":{"desc":"<p>Outer border</p>\n"},"image.encode.exit.innerBorder":{"desc":"<p>Inner border</p>\n"},"image.encode.exit.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"image.encode.exit.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"image.encode.exit.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"image.encode.exit.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"image.encode.exit.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"image.encode.exit.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"image.encode.exit.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"image.encode.exit.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"image.encode.exit.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"image.encode.exit.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"image.encode.exit.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"image.encode.exit.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"image.encode.exit.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"image.encode.exit.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"image.encode.exit.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"image.encode.exit.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"image.encode.exit.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"image.encode.exit.texture":{"desc":"<p>The texture of the graphic</p>\n"},"image.encode.exit.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"image.encode.exit.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"image.encode.exit.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"image.encode.exit.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"image.encode.exit.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"image.encode.hover":{"desc":"<p>Set the visual channel mapping corresponding to the graphics elements when in the <code class=\"codespan\">hover</code> state.</p>\n"},"image.encode.hover.width":{"desc":"<p>The width of the shape</p>\n"},"image.encode.hover.height":{"desc":"<p>The height of the shape</p>\n"},"image.encode.hover.repeatX":{"desc":"<p>The type of repetition in the x direction, optional values are:</p>\n<ul>\n<li><code class=\"codespan\">&#39;no-repeat&#39;</code> No-repeat</li>\n<li><code class=\"codespan\">&#39;repeat&#39;</code> Repeat</li>\n<li><code class=\"codespan\">&#39;stretch&#39;</code> Stretch</li>\n</ul>\n"},"image.encode.hover.repeatY":{"desc":"<p>The type of repetition in the y direction, optional values are:</p>\n<ul>\n<li><code class=\"codespan\">&#39;no-repeat&#39;</code> No-repeat</li>\n<li><code class=\"codespan\">&#39;repeat&#39;</code> Repeat</li>\n<li><code class=\"codespan\">&#39;stretch&#39;</code> Stretch</li>\n</ul>\n"},"image.encode.hover.image":{"desc":"<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"image.encode.hover.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"image.encode.hover.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"image.encode.hover.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"image.encode.hover.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"image.encode.hover.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"image.encode.hover.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"image.encode.hover.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"image.encode.hover.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"image.encode.hover.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"image.encode.hover.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"image.encode.hover.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"image.encode.hover.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"image.encode.hover.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"image.encode.hover.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"image.encode.hover.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"image.encode.hover.outerBorder":{"desc":"<p>Outer border</p>\n"},"image.encode.hover.innerBorder":{"desc":"<p>Inner border</p>\n"},"image.encode.hover.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"image.encode.hover.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"image.encode.hover.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"image.encode.hover.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"image.encode.hover.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"image.encode.hover.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"image.encode.hover.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"image.encode.hover.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"image.encode.hover.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"image.encode.hover.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"image.encode.hover.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"image.encode.hover.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"image.encode.hover.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"image.encode.hover.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"image.encode.hover.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"image.encode.hover.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"image.encode.hover.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"image.encode.hover.texture":{"desc":"<p>The texture of the graphic</p>\n"},"image.encode.hover.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"image.encode.hover.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"image.encode.hover.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"image.encode.hover.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"image.encode.hover.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"image.animationState":{"desc":"<p>Type: <code class=\"codespan\">MarkFunctionType</code>\nRequired: No\nanimation attributes</p>\n"},"image.animation":{"desc":"<p>Supports setting various state corresponding animations, data-driven animation states have three types:</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>Interaction-triggered state changes are configured through a unified interaction animation, with the configuration key being <code class=\"codespan\">state</code></p>\n"},"image.animation.type":{"desc":"<p>Animation execution type, specifying a specific built-in animation execution effect</p>\n<p>Universal built-in animation types include:</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: Fade in and out animations</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: Scaling animations</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: Move in and out animations</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: Rotation animations</li>\n<li><code class=\"codespan\">update</code>: Update animations</li>\n</ul>\n"},"image.animation.channel":{"desc":"<p>Visual channels before and after the animation is executed, conflicts with <code class=\"codespan\">type</code> configuration</p>\n"},"image.animation.custom":{"desc":"<p>Custom animation, if custom animation configuration is set, it will replace the default visual channel interpolation logic</p>\n"},"image.animation.customParameters":{"desc":"<p>Custom animation parameters</p>\n"},"image.animation.easing":{"desc":"<p>Animation easing, default is <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"image.animation.delay":{"desc":"<p>Animation execution delay time, default is 0</p>\n"},"image.animation.duration":{"desc":"<p>Animation execution duration, default is 1000ms</p>\n"},"image.animation.oneByOne":{"desc":"<p>Animation execution delay time in sequence. If set to <code class=\"codespan\">true</code>, the next element&#39;s animation will be executed after the previous element&#39;s animation is completed. The default is <code class=\"codespan\">false</code>.</p>\n"},"image.animation.startTime":{"desc":"<p>Initial time of animation execution, which will not be repeatedly applied in loop animation, default is 0</p>\n"},"image.animation.totalTime":{"desc":"<p>Maximum time of animation execution, the animation will be terminated if it reaches the set time</p>\n"},"image.animation.loop":{"desc":"<p>Number of animation loops, if set to <code class=\"codespan\">true</code>, it will loop infinitely</p>\n"},"image.animation.options":{"desc":"<p>Additional parameters set for specific animation types execution</p>\n"},"image.animation.controlOptions":{"desc":"<p>Control parameters for animation execution logic:</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: Whether to immediately terminate its animation when the animation state changes</li>\n<li><code class=\"codespan\">immediatelyApply</code>: Whether to immediately apply the initial visual channel of the animation</li>\n</ul>\n"},"image.zIndex":{"desc":"<p>Set the zIndex of the container shape (group) corresponding to the <code class=\"codespan\">mark</code> graphic primitive</p>\n"},"image.interactive":{"desc":"<p>Type: <code class=\"codespan\">boolean</code>\nRequired: No</p>\n"},"image.context":{"desc":"<p>Set the context parameters of the graphic primitive</p>\n"},"image.setCustomizedShape":{"desc":"<p>Set the callback function of custom shape. The corresponding ts type is as follows:</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>Where <code class=\"codespan\">ICustomPath2D</code> is a utility class provided by VRender for drawing custom paths.</p>\n"},"image.support3d":{"desc":"<p>Whether to support 3d mode when the canvas is set to 3d view.</p>\n"},"image.group":{"desc":"<p>Set the parent graphic primitive. Supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> The id of the corresponding parent graphic primitive</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> The corresponding grammar element of the parent graphic primitive, generally used in API call scenarios.</li>\n</ul>\n<p>If not set, it will be attached to the root node of the canvas by default.</p>\n"},"image.from":{"desc":"<p>ts type definition is:</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>Declare the data on which the graphic primitive depends through the <code class=\"codespan\">data</code> attribute.</p>\n"},"image.key":{"desc":"<p>Set the unique identifier for the graphic primitive data element, which is used to calculate the data state of the graphic element. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the <code class=\"codespan\">key</code></li>\n</ul>\n"},"image.sort":{"desc":"<p>Sort all graphic elements in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"image.groupBy":{"desc":"<p>Set the grouping attribute, the corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the grouping <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the grouping <code class=\"codespan\">key</code></li>\n</ul>\n"},"image.groupSort":{"desc":"<p>Sort the groups in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"image.coordinate":{"desc":"<p>Set the id or graphic element corresponding to the associated coordinate system of this graphic primitive</p>\n"},"image.state":{"desc":"<p>Set the state values ​​of all graphical elements of the current graphic primitive, supporting three formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the state of the graphic, for example, <code class=\"codespan\">{ state: &#39;selected&#39;}</code> sets the state of all graphics to <code class=\"codespan\">&#39;selected&#39;</code>, usually in this case, the <code class=\"codespan\">encode</code> also sets the graphic channel mapping corresponding to the <code class=\"codespan\">&#39;selected&#39;</code> state</li>\n<li><code class=\"codespan\">string[]</code> Set multiple states for the graphic, you can configure <code class=\"codespan\">stateSort</code> to influence the order of executing the graphic channel mapping corresponding to the state</li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the state value, and the return parameter is <code class=\"codespan\">string | string[]</code>, the corresponding ts type definition is:</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"image.stateSort":{"desc":"<p>Set the sorting function of the state values ​​of all graphics elements of the current graphic primitive, which will affect the order of the graphic channel mapping corresponding to the state. The result of the graphic channel mapping executed earlier may be covered by subsequent states. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"image.transform":{"desc":"<p>Set the corresponding transformation of the graphic primitive. All data transformations can be configured on the graphic primitive and are used for the <code class=\"codespan\">join data</code> execution transformation;\nAnother type of transformation is the transformation executed by graphical elements, such as <code class=\"codespan\">dodge</code>;\nThe general type definition is as follows:</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>The parameters supported by each transformation are different</p>\n"},"image.layout":{"desc":"<p>Set the layout parameters of the graphic primitive. There are two roles when the graphic primitive participates in the layout:</p>\n<ul>\n<li>&#39;container&#39; Container graphic primitive, usually <code class=\"codespan\">group</code> graphic primitive</li>\n<li>&#39;item&#39; layout child element, as a child node of the container graphic primitive</li>\n</ul>\n<p>Please note that we only support one layer of layout. If it is a multi-layer nested layout, it is recommended to use a custom layout scheme for implementation;</p>\n<p>Now support two content layouts: <code class=\"codespan\">grid</code> layout and <code class=\"codespan\">relative</code> layout, the related type definition is as follows</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>If you want to set a custom layout scheme, <code class=\"codespan\">layout</code> also supports setting callback functions directly. The definition of the callback function is as follows:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"image.layout.display":{"desc":"<p>The container graphic primitive sets the layout type and supports two configurations:</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> Relative layout</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> Grid layout</li>\n</ul>\n"},"image.layout.callback":{"desc":"<p>Customize the callback function for this graphic primitive, the ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"image.layout.skipBeforeLayouted":{"desc":"<p>Skip the execution stage before the layout is completed</p>\n"},"image.layout.updateViewSignals":{"desc":"<p>Whether to update the default view signals, that is: <code class=\"codespan\">padding</code>, <code class=\"codespan\">viewWidth</code> and <code class=\"codespan\">viewHeight</code></p>\n<p>This property can only be set on a container graphic primitive with <code class=\"codespan\">&#39;relative&#39;</code> layout.</p>\n"},"image.layout.maxChildWidth":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum width of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the width of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"image.layout.maxChildHeight":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum height of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the height of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"image.layout.position":{"desc":"<p>Set the position of the child graphic primitive of the relative layout. The supported settings are:</p>\n<ul>\n<li>&#39;top&#39; Relative to the top of the parent graphic primitive</li>\n<li>&#39;bottom&#39; Relative to the bottom of the parent graphic primitive</li>\n<li>&#39;left&#39; Relative to the left side of the parent graphic primitive</li>\n<li>&#39;right&#39; Relative to the right side of the parent graphic primitive</li>\n<li>&#39;content&#39; Relative to the center of the parent graphic primitive, that is, the content area</li>\n<li>&#39;auto&#39; When the graphic primitive sets the coordinate system, the position relative to the parent graphic primitive is automatically calculated according to the associated <code class=\"codespan\">scale</code></li>\n</ul>\n"},"image.layout.padding":{"desc":"<p>The inner padding of Child graphic primitive, in px unit, with the default padding of 0 for all directions. Accepts numerical values, numerical arrays, and objects for settings.</p>\n<p>Example of usage:</p>\n<pre><code class=\"lang-ts\">// Numerical type, set the padding to 5\npadding: 5;\n// Numerical array, set the top and bottom padding to 5, and the left and right padding to 10, similar to the CSS box model\npadding: [5, 10];\n// Numerical array, set the padding for all four directions separately\npadding: [\n  5, // Top\n  10, // Right\n  5, // Bottom\n  10 // Left\n];\n// Object type\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"image.layout.gridTemplateRows":{"desc":"<p>The parent graphic primitive of the grid layout sets the row height</p>\n"},"image.layout.gridTemplateColumns":{"desc":"<p>The parent graphic primitive of the grid layout sets the column width</p>\n"},"image.layout.gridRowGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the row spacing</p>\n"},"image.layout.gridColumnGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the column spacing</p>\n"},"image.layout.gridRowStart":{"desc":"<p>The child graphic primitive of the grid layout sets the row start position</p>\n"},"image.layout.gridRowEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the row end position</p>\n"},"image.layout.gridColumnStart":{"desc":"<p>The child graphic primitive of the grid layout sets the column start position</p>\n"},"image.layout.gridColumnEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the column end position</p>\n"},"image.large":{"desc":"<p>Whether to enable large data rendering mode</p>\n"},"image.largeThreshold":{"desc":"<p>The threshold for enabling large data rendering optimization, corresponding to the length of data</p>\n"},"image.progressiveStep":{"desc":"<p>The step length for enabling progressive rendering, corresponding to the length of data in each shard</p>\n"},"image.progressiveThreshold":{"desc":"<p>The threshold for enabling progressive rendering, corresponding to the length of single series data</p>\n"},"image.morph":{"desc":"<p>Whether to enable global transition morph animations for the current graphic element</p>\n"},"image.morphKey":{"desc":"<p>Used to match graphic elements for global transition morph animations, graphic elements with the same <code class=\"codespan\">morphKey</code> will undergo morph animations</p>\n"},"image.morphElementKey":{"desc":"<p>For the matched graphic elements before and after, use this configuration to match the graphic element; if not declared, we will read the <code class=\"codespan\">key</code> configuration by default to match the graphic element for morph animations;\nSupports one-to-one, one-to-many, and many-to-one graphic morph animations by default</p>\n"},"richtext":{"desc":"<p><strong> Richtext Graphic Element </strong></p>\n"},"richtext.type":{"desc":"<p>Set the graphic element type to <code class=\"codespan\">richtext</code></p>\n"},"richtext.encode":{"desc":"<p>Set the visual channel encoding of the graphics elements, supporting three data change states by default:</p>\n<ul>\n<li><code class=\"codespan\">enter</code> newly added data items</li>\n<li><code class=\"codespan\">update</code> data items have been updated</li>\n<li><code class=\"codespan\">exit</code> data items are deleted</li>\n</ul>\n<p>Note that the data state here is automatically generated based on the <code class=\"codespan\">mark</code>&#39;s <code class=\"codespan\">key</code>. We will calculate the unique identifier for the data bound to the <code class=\"codespan\">mark</code> based on the <code class=\"codespan\">key</code> configuration. After the data is updated, if the corresponding unique identifier no longer exists, the state is <code class=\"codespan\">exit</code>; if it exists, it is <code class=\"codespan\">update</code>. If the previous data does not exist for the unique identifier, the data item&#39;s state is <code class=\"codespan\">enter</code>.</p>\n<p>Supports one interaction state by default:</p>\n<ul>\n<li><code class=\"codespan\">hover</code> when the mouse hovers over a specific shape, set the corresponding visual channel encoding for the shape</li>\n</ul>\n"},"richtext.encode.enter":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data initialization state. Note that it will not be executed again when the data is updated.</p>\n"},"richtext.encode.enter.width":{"desc":"<p>The width of the graphic element</p>\n"},"richtext.encode.enter.height":{"desc":"<p>The height of the graphic element</p>\n"},"richtext.encode.enter.textConfig":{"desc":"<p>Set the style for the subtext, type is <code class=\"codespan\">IRichTextCharacter[]</code>, the specific definition is as follows:</p>\n<pre><code class=\"lang-ts\">type IRichTextBasicCharacter = {\n  lineHeight?: number;\n  textAlign?: CanvasTextAlign; // left, right, center\n  textBaseline?: CanvasTextBaseline;\n  direction?: RichTextLayoutDirectionType;\n};\n\ntype IRichTextParagraphCharacter = IRichTextBasicCharacter &amp; {\n  text: string;\n  fontSize?: number;\n  fontFamily?: string;\n  fill?: boolean;\n  stroke?: boolean;\n  fillColor?: IColor;\n  strokeColor?: IColor;\n  fontWeight?: string;\n  // lineHeight?: number;\n  fontStyle?: RichTextFontStyle; // normal, italic, oblique\n  textDecoration?: RichTextTextDecoration; // none, underline, line-through\n  // textAlign?: RichTextTextAlign; // left, right, center\n  script?: RichTextScript; // normal, sub, super\n  underline?: boolean;\n  lineThrough?: boolean;\n  // direction?: RichTextLayoutDirectionType;\n};\n\ntype IRichTextImageCharacter = IRichTextBasicCharacter &amp; {\n  // 图片基础属性\n  image: string | HTMLImageElement | HTMLCanvasElement;\n  width: number;\n  height: number;\n\n  // hover相关属性\n  // backgroundShow?: boolean; // 是否显示background\n  backgroundShowMode?: &#39;always&#39; | &#39;hover&#39;;\n  backgroundFill?: boolean;\n  backgroundFillColor?: IColor; // 背景矩形填充颜色\n  backgroundFillOpacity?: number; // 背景矩形填充透明度\n  backgroundStroke?: boolean;\n  backgroundStrokeColor?: IColor; // 背景矩形边框颜色\n  backgroundStrokeOpacity?: number; // 背景矩形边框透明度\n  backgroundRadius?: number; // 背景矩形圆角\n  // background size 同时控制了该icon的响应范围\n  backgroundWidth?: number;\n  backgroundHeight?: number;\n\n  // 唯一标识符\n  id?: string;\n\n  // lineHeight?: number;\n  // textAlign?: RichTextTextAlign; // left, right, center\n  // direction?: RichTextLayoutDirectionType;\n  margin?: number | number[];\n\n  funcType?: string;\n  hoverImage?: string | HTMLImageElement | HTMLCanvasElement;\n};\n\ntype IRichTextCharacter = IRichTextParagraphCharacter | IRichTextImageCharacter;\n</code></pre>\n"},"richtext.encode.enter.ellipsis":{"desc":"<p>Abbreviation-related configuration when the text is too long, supporting two types of configuration:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Enable automatic ellipsis and set the ellipsis symbol</li>\n<li><code class=\"codespan\">&#39;boolean&#39;</code> Whether to enable automatic ellipsis, the default ellipsis symbol is <code class=\"codespan\">&#39;...&#39;</code></li>\n</ul>\n"},"richtext.encode.enter.wordBreak":{"desc":"<p>Text break setting, supports two configuration values:</p>\n<ul>\n<li><code class=\"codespan\">&#39;break-word&#39;</code></li>\n<li><code class=\"codespan\">&#39;break-all&#39;</code></li>\n</ul>\n"},"richtext.encode.enter.verticalDirection":{"desc":"<p>Value direction alignment method, supports configuration:</p>\n<ul>\n<li><code class=\"codespan\">&#39;top&#39;</code></li>\n<li><code class=\"codespan\">&#39;middle&#39;</code></li>\n<li><code class=\"codespan\">&#39;bottom&#39;</code></li>\n</ul>\n"},"richtext.encode.enter.layoutDirection":{"desc":"<p>Layout direction, supports configuration:</p>\n<ul>\n<li><code class=\"codespan\">&#39;horizontal&#39;</code></li>\n<li><code class=\"codespan\">&#39;vertical&#39;</code></li>\n</ul>\n"},"richtext.encode.enter.singleLine":{"desc":"<p>Whether to display in a single line</p>\n"},"richtext.encode.enter.maxHeight":{"desc":"<p>Maximum height</p>\n"},"richtext.encode.enter.maxWidth":{"desc":"<p>Maximum width</p>\n"},"richtext.encode.enter.textAlign":{"desc":"<p>Text alignment method, supports configuration:</p>\n<ul>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;center&#39;</li>\n</ul>\n"},"richtext.encode.enter.textBaseline":{"desc":"<p>Text vertical alignment line, supports configuration:</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;middle&#39;</li>\n<li>&#39;bottom&#39;</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"richtext.encode.enter.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"richtext.encode.enter.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"richtext.encode.enter.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"richtext.encode.enter.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"richtext.encode.enter.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"richtext.encode.enter.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"richtext.encode.enter.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"richtext.encode.enter.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"richtext.encode.enter.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"richtext.encode.enter.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"richtext.encode.enter.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"richtext.encode.enter.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"richtext.encode.enter.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"richtext.encode.enter.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"richtext.encode.enter.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"richtext.encode.enter.outerBorder":{"desc":"<p>Outer border</p>\n"},"richtext.encode.enter.innerBorder":{"desc":"<p>Inner border</p>\n"},"richtext.encode.enter.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"richtext.encode.enter.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"richtext.encode.enter.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"richtext.encode.enter.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"richtext.encode.enter.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"richtext.encode.enter.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"richtext.encode.enter.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"richtext.encode.enter.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"richtext.encode.enter.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"richtext.encode.enter.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"richtext.encode.enter.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"richtext.encode.enter.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"richtext.encode.enter.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"richtext.encode.enter.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"richtext.encode.enter.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"richtext.encode.enter.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"richtext.encode.enter.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"richtext.encode.enter.texture":{"desc":"<p>The texture of the graphic</p>\n"},"richtext.encode.enter.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"richtext.encode.enter.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"richtext.encode.enter.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"richtext.encode.enter.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"richtext.encode.enter.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"richtext.encode.update":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data update state.</p>\n"},"richtext.encode.update.width":{"desc":"<p>The width of the graphic element</p>\n"},"richtext.encode.update.height":{"desc":"<p>The height of the graphic element</p>\n"},"richtext.encode.update.textConfig":{"desc":"<p>Set the style for the subtext, type is <code class=\"codespan\">IRichTextCharacter[]</code>, the specific definition is as follows:</p>\n<pre><code class=\"lang-ts\">type IRichTextBasicCharacter = {\n  lineHeight?: number;\n  textAlign?: CanvasTextAlign; // left, right, center\n  textBaseline?: CanvasTextBaseline;\n  direction?: RichTextLayoutDirectionType;\n};\n\ntype IRichTextParagraphCharacter = IRichTextBasicCharacter &amp; {\n  text: string;\n  fontSize?: number;\n  fontFamily?: string;\n  fill?: boolean;\n  stroke?: boolean;\n  fillColor?: IColor;\n  strokeColor?: IColor;\n  fontWeight?: string;\n  // lineHeight?: number;\n  fontStyle?: RichTextFontStyle; // normal, italic, oblique\n  textDecoration?: RichTextTextDecoration; // none, underline, line-through\n  // textAlign?: RichTextTextAlign; // left, right, center\n  script?: RichTextScript; // normal, sub, super\n  underline?: boolean;\n  lineThrough?: boolean;\n  // direction?: RichTextLayoutDirectionType;\n};\n\ntype IRichTextImageCharacter = IRichTextBasicCharacter &amp; {\n  // 图片基础属性\n  image: string | HTMLImageElement | HTMLCanvasElement;\n  width: number;\n  height: number;\n\n  // hover相关属性\n  // backgroundShow?: boolean; // 是否显示background\n  backgroundShowMode?: &#39;always&#39; | &#39;hover&#39;;\n  backgroundFill?: boolean;\n  backgroundFillColor?: IColor; // 背景矩形填充颜色\n  backgroundFillOpacity?: number; // 背景矩形填充透明度\n  backgroundStroke?: boolean;\n  backgroundStrokeColor?: IColor; // 背景矩形边框颜色\n  backgroundStrokeOpacity?: number; // 背景矩形边框透明度\n  backgroundRadius?: number; // 背景矩形圆角\n  // background size 同时控制了该icon的响应范围\n  backgroundWidth?: number;\n  backgroundHeight?: number;\n\n  // 唯一标识符\n  id?: string;\n\n  // lineHeight?: number;\n  // textAlign?: RichTextTextAlign; // left, right, center\n  // direction?: RichTextLayoutDirectionType;\n  margin?: number | number[];\n\n  funcType?: string;\n  hoverImage?: string | HTMLImageElement | HTMLCanvasElement;\n};\n\ntype IRichTextCharacter = IRichTextParagraphCharacter | IRichTextImageCharacter;\n</code></pre>\n"},"richtext.encode.update.ellipsis":{"desc":"<p>Abbreviation-related configuration when the text is too long, supporting two types of configuration:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Enable automatic ellipsis and set the ellipsis symbol</li>\n<li><code class=\"codespan\">&#39;boolean&#39;</code> Whether to enable automatic ellipsis, the default ellipsis symbol is <code class=\"codespan\">&#39;...&#39;</code></li>\n</ul>\n"},"richtext.encode.update.wordBreak":{"desc":"<p>Text break setting, supports two configuration values:</p>\n<ul>\n<li><code class=\"codespan\">&#39;break-word&#39;</code></li>\n<li><code class=\"codespan\">&#39;break-all&#39;</code></li>\n</ul>\n"},"richtext.encode.update.verticalDirection":{"desc":"<p>Value direction alignment method, supports configuration:</p>\n<ul>\n<li><code class=\"codespan\">&#39;top&#39;</code></li>\n<li><code class=\"codespan\">&#39;middle&#39;</code></li>\n<li><code class=\"codespan\">&#39;bottom&#39;</code></li>\n</ul>\n"},"richtext.encode.update.layoutDirection":{"desc":"<p>Layout direction, supports configuration:</p>\n<ul>\n<li><code class=\"codespan\">&#39;horizontal&#39;</code></li>\n<li><code class=\"codespan\">&#39;vertical&#39;</code></li>\n</ul>\n"},"richtext.encode.update.singleLine":{"desc":"<p>Whether to display in a single line</p>\n"},"richtext.encode.update.maxHeight":{"desc":"<p>Maximum height</p>\n"},"richtext.encode.update.maxWidth":{"desc":"<p>Maximum width</p>\n"},"richtext.encode.update.textAlign":{"desc":"<p>Text alignment method, supports configuration:</p>\n<ul>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;center&#39;</li>\n</ul>\n"},"richtext.encode.update.textBaseline":{"desc":"<p>Text vertical alignment line, supports configuration:</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;middle&#39;</li>\n<li>&#39;bottom&#39;</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"richtext.encode.update.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"richtext.encode.update.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"richtext.encode.update.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"richtext.encode.update.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"richtext.encode.update.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"richtext.encode.update.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"richtext.encode.update.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"richtext.encode.update.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"richtext.encode.update.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"richtext.encode.update.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"richtext.encode.update.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"richtext.encode.update.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"richtext.encode.update.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"richtext.encode.update.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"richtext.encode.update.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"richtext.encode.update.outerBorder":{"desc":"<p>Outer border</p>\n"},"richtext.encode.update.innerBorder":{"desc":"<p>Inner border</p>\n"},"richtext.encode.update.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"richtext.encode.update.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"richtext.encode.update.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"richtext.encode.update.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"richtext.encode.update.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"richtext.encode.update.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"richtext.encode.update.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"richtext.encode.update.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"richtext.encode.update.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"richtext.encode.update.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"richtext.encode.update.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"richtext.encode.update.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"richtext.encode.update.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"richtext.encode.update.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"richtext.encode.update.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"richtext.encode.update.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"richtext.encode.update.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"richtext.encode.update.texture":{"desc":"<p>The texture of the graphic</p>\n"},"richtext.encode.update.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"richtext.encode.update.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"richtext.encode.update.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"richtext.encode.update.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"richtext.encode.update.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"richtext.encode.exit":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data deletion state.</p>\n"},"richtext.encode.exit.width":{"desc":"<p>The width of the graphic element</p>\n"},"richtext.encode.exit.height":{"desc":"<p>The height of the graphic element</p>\n"},"richtext.encode.exit.textConfig":{"desc":"<p>Set the style for the subtext, type is <code class=\"codespan\">IRichTextCharacter[]</code>, the specific definition is as follows:</p>\n<pre><code class=\"lang-ts\">type IRichTextBasicCharacter = {\n  lineHeight?: number;\n  textAlign?: CanvasTextAlign; // left, right, center\n  textBaseline?: CanvasTextBaseline;\n  direction?: RichTextLayoutDirectionType;\n};\n\ntype IRichTextParagraphCharacter = IRichTextBasicCharacter &amp; {\n  text: string;\n  fontSize?: number;\n  fontFamily?: string;\n  fill?: boolean;\n  stroke?: boolean;\n  fillColor?: IColor;\n  strokeColor?: IColor;\n  fontWeight?: string;\n  // lineHeight?: number;\n  fontStyle?: RichTextFontStyle; // normal, italic, oblique\n  textDecoration?: RichTextTextDecoration; // none, underline, line-through\n  // textAlign?: RichTextTextAlign; // left, right, center\n  script?: RichTextScript; // normal, sub, super\n  underline?: boolean;\n  lineThrough?: boolean;\n  // direction?: RichTextLayoutDirectionType;\n};\n\ntype IRichTextImageCharacter = IRichTextBasicCharacter &amp; {\n  // 图片基础属性\n  image: string | HTMLImageElement | HTMLCanvasElement;\n  width: number;\n  height: number;\n\n  // hover相关属性\n  // backgroundShow?: boolean; // 是否显示background\n  backgroundShowMode?: &#39;always&#39; | &#39;hover&#39;;\n  backgroundFill?: boolean;\n  backgroundFillColor?: IColor; // 背景矩形填充颜色\n  backgroundFillOpacity?: number; // 背景矩形填充透明度\n  backgroundStroke?: boolean;\n  backgroundStrokeColor?: IColor; // 背景矩形边框颜色\n  backgroundStrokeOpacity?: number; // 背景矩形边框透明度\n  backgroundRadius?: number; // 背景矩形圆角\n  // background size 同时控制了该icon的响应范围\n  backgroundWidth?: number;\n  backgroundHeight?: number;\n\n  // 唯一标识符\n  id?: string;\n\n  // lineHeight?: number;\n  // textAlign?: RichTextTextAlign; // left, right, center\n  // direction?: RichTextLayoutDirectionType;\n  margin?: number | number[];\n\n  funcType?: string;\n  hoverImage?: string | HTMLImageElement | HTMLCanvasElement;\n};\n\ntype IRichTextCharacter = IRichTextParagraphCharacter | IRichTextImageCharacter;\n</code></pre>\n"},"richtext.encode.exit.ellipsis":{"desc":"<p>Abbreviation-related configuration when the text is too long, supporting two types of configuration:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Enable automatic ellipsis and set the ellipsis symbol</li>\n<li><code class=\"codespan\">&#39;boolean&#39;</code> Whether to enable automatic ellipsis, the default ellipsis symbol is <code class=\"codespan\">&#39;...&#39;</code></li>\n</ul>\n"},"richtext.encode.exit.wordBreak":{"desc":"<p>Text break setting, supports two configuration values:</p>\n<ul>\n<li><code class=\"codespan\">&#39;break-word&#39;</code></li>\n<li><code class=\"codespan\">&#39;break-all&#39;</code></li>\n</ul>\n"},"richtext.encode.exit.verticalDirection":{"desc":"<p>Value direction alignment method, supports configuration:</p>\n<ul>\n<li><code class=\"codespan\">&#39;top&#39;</code></li>\n<li><code class=\"codespan\">&#39;middle&#39;</code></li>\n<li><code class=\"codespan\">&#39;bottom&#39;</code></li>\n</ul>\n"},"richtext.encode.exit.layoutDirection":{"desc":"<p>Layout direction, supports configuration:</p>\n<ul>\n<li><code class=\"codespan\">&#39;horizontal&#39;</code></li>\n<li><code class=\"codespan\">&#39;vertical&#39;</code></li>\n</ul>\n"},"richtext.encode.exit.singleLine":{"desc":"<p>Whether to display in a single line</p>\n"},"richtext.encode.exit.maxHeight":{"desc":"<p>Maximum height</p>\n"},"richtext.encode.exit.maxWidth":{"desc":"<p>Maximum width</p>\n"},"richtext.encode.exit.textAlign":{"desc":"<p>Text alignment method, supports configuration:</p>\n<ul>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;center&#39;</li>\n</ul>\n"},"richtext.encode.exit.textBaseline":{"desc":"<p>Text vertical alignment line, supports configuration:</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;middle&#39;</li>\n<li>&#39;bottom&#39;</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"richtext.encode.exit.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"richtext.encode.exit.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"richtext.encode.exit.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"richtext.encode.exit.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"richtext.encode.exit.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"richtext.encode.exit.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"richtext.encode.exit.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"richtext.encode.exit.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"richtext.encode.exit.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"richtext.encode.exit.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"richtext.encode.exit.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"richtext.encode.exit.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"richtext.encode.exit.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"richtext.encode.exit.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"richtext.encode.exit.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"richtext.encode.exit.outerBorder":{"desc":"<p>Outer border</p>\n"},"richtext.encode.exit.innerBorder":{"desc":"<p>Inner border</p>\n"},"richtext.encode.exit.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"richtext.encode.exit.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"richtext.encode.exit.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"richtext.encode.exit.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"richtext.encode.exit.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"richtext.encode.exit.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"richtext.encode.exit.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"richtext.encode.exit.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"richtext.encode.exit.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"richtext.encode.exit.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"richtext.encode.exit.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"richtext.encode.exit.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"richtext.encode.exit.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"richtext.encode.exit.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"richtext.encode.exit.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"richtext.encode.exit.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"richtext.encode.exit.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"richtext.encode.exit.texture":{"desc":"<p>The texture of the graphic</p>\n"},"richtext.encode.exit.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"richtext.encode.exit.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"richtext.encode.exit.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"richtext.encode.exit.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"richtext.encode.exit.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"richtext.encode.hover":{"desc":"<p>Set the visual channel mapping corresponding to the graphics elements when in the <code class=\"codespan\">hover</code> state.</p>\n"},"richtext.encode.hover.width":{"desc":"<p>The width of the graphic element</p>\n"},"richtext.encode.hover.height":{"desc":"<p>The height of the graphic element</p>\n"},"richtext.encode.hover.textConfig":{"desc":"<p>Set the style for the subtext, type is <code class=\"codespan\">IRichTextCharacter[]</code>, the specific definition is as follows:</p>\n<pre><code class=\"lang-ts\">type IRichTextBasicCharacter = {\n  lineHeight?: number;\n  textAlign?: CanvasTextAlign; // left, right, center\n  textBaseline?: CanvasTextBaseline;\n  direction?: RichTextLayoutDirectionType;\n};\n\ntype IRichTextParagraphCharacter = IRichTextBasicCharacter &amp; {\n  text: string;\n  fontSize?: number;\n  fontFamily?: string;\n  fill?: boolean;\n  stroke?: boolean;\n  fillColor?: IColor;\n  strokeColor?: IColor;\n  fontWeight?: string;\n  // lineHeight?: number;\n  fontStyle?: RichTextFontStyle; // normal, italic, oblique\n  textDecoration?: RichTextTextDecoration; // none, underline, line-through\n  // textAlign?: RichTextTextAlign; // left, right, center\n  script?: RichTextScript; // normal, sub, super\n  underline?: boolean;\n  lineThrough?: boolean;\n  // direction?: RichTextLayoutDirectionType;\n};\n\ntype IRichTextImageCharacter = IRichTextBasicCharacter &amp; {\n  // 图片基础属性\n  image: string | HTMLImageElement | HTMLCanvasElement;\n  width: number;\n  height: number;\n\n  // hover相关属性\n  // backgroundShow?: boolean; // 是否显示background\n  backgroundShowMode?: &#39;always&#39; | &#39;hover&#39;;\n  backgroundFill?: boolean;\n  backgroundFillColor?: IColor; // 背景矩形填充颜色\n  backgroundFillOpacity?: number; // 背景矩形填充透明度\n  backgroundStroke?: boolean;\n  backgroundStrokeColor?: IColor; // 背景矩形边框颜色\n  backgroundStrokeOpacity?: number; // 背景矩形边框透明度\n  backgroundRadius?: number; // 背景矩形圆角\n  // background size 同时控制了该icon的响应范围\n  backgroundWidth?: number;\n  backgroundHeight?: number;\n\n  // 唯一标识符\n  id?: string;\n\n  // lineHeight?: number;\n  // textAlign?: RichTextTextAlign; // left, right, center\n  // direction?: RichTextLayoutDirectionType;\n  margin?: number | number[];\n\n  funcType?: string;\n  hoverImage?: string | HTMLImageElement | HTMLCanvasElement;\n};\n\ntype IRichTextCharacter = IRichTextParagraphCharacter | IRichTextImageCharacter;\n</code></pre>\n"},"richtext.encode.hover.ellipsis":{"desc":"<p>Abbreviation-related configuration when the text is too long, supporting two types of configuration:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Enable automatic ellipsis and set the ellipsis symbol</li>\n<li><code class=\"codespan\">&#39;boolean&#39;</code> Whether to enable automatic ellipsis, the default ellipsis symbol is <code class=\"codespan\">&#39;...&#39;</code></li>\n</ul>\n"},"richtext.encode.hover.wordBreak":{"desc":"<p>Text break setting, supports two configuration values:</p>\n<ul>\n<li><code class=\"codespan\">&#39;break-word&#39;</code></li>\n<li><code class=\"codespan\">&#39;break-all&#39;</code></li>\n</ul>\n"},"richtext.encode.hover.verticalDirection":{"desc":"<p>Value direction alignment method, supports configuration:</p>\n<ul>\n<li><code class=\"codespan\">&#39;top&#39;</code></li>\n<li><code class=\"codespan\">&#39;middle&#39;</code></li>\n<li><code class=\"codespan\">&#39;bottom&#39;</code></li>\n</ul>\n"},"richtext.encode.hover.layoutDirection":{"desc":"<p>Layout direction, supports configuration:</p>\n<ul>\n<li><code class=\"codespan\">&#39;horizontal&#39;</code></li>\n<li><code class=\"codespan\">&#39;vertical&#39;</code></li>\n</ul>\n"},"richtext.encode.hover.singleLine":{"desc":"<p>Whether to display in a single line</p>\n"},"richtext.encode.hover.maxHeight":{"desc":"<p>Maximum height</p>\n"},"richtext.encode.hover.maxWidth":{"desc":"<p>Maximum width</p>\n"},"richtext.encode.hover.textAlign":{"desc":"<p>Text alignment method, supports configuration:</p>\n<ul>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;center&#39;</li>\n</ul>\n"},"richtext.encode.hover.textBaseline":{"desc":"<p>Text vertical alignment line, supports configuration:</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;middle&#39;</li>\n<li>&#39;bottom&#39;</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"richtext.encode.hover.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"richtext.encode.hover.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"richtext.encode.hover.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"richtext.encode.hover.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"richtext.encode.hover.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"richtext.encode.hover.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"richtext.encode.hover.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"richtext.encode.hover.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"richtext.encode.hover.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"richtext.encode.hover.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"richtext.encode.hover.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"richtext.encode.hover.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"richtext.encode.hover.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"richtext.encode.hover.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"richtext.encode.hover.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"richtext.encode.hover.outerBorder":{"desc":"<p>Outer border</p>\n"},"richtext.encode.hover.innerBorder":{"desc":"<p>Inner border</p>\n"},"richtext.encode.hover.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"richtext.encode.hover.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"richtext.encode.hover.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"richtext.encode.hover.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"richtext.encode.hover.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"richtext.encode.hover.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"richtext.encode.hover.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"richtext.encode.hover.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"richtext.encode.hover.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"richtext.encode.hover.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"richtext.encode.hover.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"richtext.encode.hover.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"richtext.encode.hover.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"richtext.encode.hover.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"richtext.encode.hover.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"richtext.encode.hover.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"richtext.encode.hover.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"richtext.encode.hover.texture":{"desc":"<p>The texture of the graphic</p>\n"},"richtext.encode.hover.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"richtext.encode.hover.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"richtext.encode.hover.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"richtext.encode.hover.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"richtext.encode.hover.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"richtext.animationState":{"desc":"<p>Type: <code class=\"codespan\">MarkFunctionType</code>\nRequired: No\nanimation attributes</p>\n"},"richtext.animation":{"desc":"<p>Supports setting various state corresponding animations, data-driven animation states have three types:</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>Interaction-triggered state changes are configured through a unified interaction animation, with the configuration key being <code class=\"codespan\">state</code></p>\n"},"richtext.animation.type":{"desc":"<p>Animation execution type, specifying a specific built-in animation execution effect</p>\n<p>Universal built-in animation types include:</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: Fade in and out animations</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: Scaling animations</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: Move in and out animations</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: Rotation animations</li>\n<li><code class=\"codespan\">update</code>: Update animations</li>\n</ul>\n"},"richtext.animation.channel":{"desc":"<p>Visual channels before and after the animation is executed, conflicts with <code class=\"codespan\">type</code> configuration</p>\n"},"richtext.animation.custom":{"desc":"<p>Custom animation, if custom animation configuration is set, it will replace the default visual channel interpolation logic</p>\n"},"richtext.animation.customParameters":{"desc":"<p>Custom animation parameters</p>\n"},"richtext.animation.easing":{"desc":"<p>Animation easing, default is <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"richtext.animation.delay":{"desc":"<p>Animation execution delay time, default is 0</p>\n"},"richtext.animation.duration":{"desc":"<p>Animation execution duration, default is 1000ms</p>\n"},"richtext.animation.oneByOne":{"desc":"<p>Animation execution delay time in sequence. If set to <code class=\"codespan\">true</code>, the next element&#39;s animation will be executed after the previous element&#39;s animation is completed. The default is <code class=\"codespan\">false</code>.</p>\n"},"richtext.animation.startTime":{"desc":"<p>Initial time of animation execution, which will not be repeatedly applied in loop animation, default is 0</p>\n"},"richtext.animation.totalTime":{"desc":"<p>Maximum time of animation execution, the animation will be terminated if it reaches the set time</p>\n"},"richtext.animation.loop":{"desc":"<p>Number of animation loops, if set to <code class=\"codespan\">true</code>, it will loop infinitely</p>\n"},"richtext.animation.options":{"desc":"<p>Additional parameters set for specific animation types execution</p>\n"},"richtext.animation.controlOptions":{"desc":"<p>Control parameters for animation execution logic:</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: Whether to immediately terminate its animation when the animation state changes</li>\n<li><code class=\"codespan\">immediatelyApply</code>: Whether to immediately apply the initial visual channel of the animation</li>\n</ul>\n"},"richtext.zIndex":{"desc":"<p>Set the zIndex of the container shape (group) corresponding to the <code class=\"codespan\">mark</code> graphic primitive</p>\n"},"richtext.interactive":{"desc":"<p>Type: <code class=\"codespan\">boolean</code>\nRequired: No</p>\n"},"richtext.context":{"desc":"<p>Set the context parameters of the graphic primitive</p>\n"},"richtext.setCustomizedShape":{"desc":"<p>Set the callback function of custom shape. The corresponding ts type is as follows:</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>Where <code class=\"codespan\">ICustomPath2D</code> is a utility class provided by VRender for drawing custom paths.</p>\n"},"richtext.support3d":{"desc":"<p>Whether to support 3d mode when the canvas is set to 3d view.</p>\n"},"richtext.group":{"desc":"<p>Set the parent graphic primitive. Supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> The id of the corresponding parent graphic primitive</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> The corresponding grammar element of the parent graphic primitive, generally used in API call scenarios.</li>\n</ul>\n<p>If not set, it will be attached to the root node of the canvas by default.</p>\n"},"richtext.from":{"desc":"<p>ts type definition is:</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>Declare the data on which the graphic primitive depends through the <code class=\"codespan\">data</code> attribute.</p>\n"},"richtext.key":{"desc":"<p>Set the unique identifier for the graphic primitive data element, which is used to calculate the data state of the graphic element. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the <code class=\"codespan\">key</code></li>\n</ul>\n"},"richtext.sort":{"desc":"<p>Sort all graphic elements in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"richtext.groupBy":{"desc":"<p>Set the grouping attribute, the corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the grouping <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the grouping <code class=\"codespan\">key</code></li>\n</ul>\n"},"richtext.groupSort":{"desc":"<p>Sort the groups in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"richtext.coordinate":{"desc":"<p>Set the id or graphic element corresponding to the associated coordinate system of this graphic primitive</p>\n"},"richtext.state":{"desc":"<p>Set the state values ​​of all graphical elements of the current graphic primitive, supporting three formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the state of the graphic, for example, <code class=\"codespan\">{ state: &#39;selected&#39;}</code> sets the state of all graphics to <code class=\"codespan\">&#39;selected&#39;</code>, usually in this case, the <code class=\"codespan\">encode</code> also sets the graphic channel mapping corresponding to the <code class=\"codespan\">&#39;selected&#39;</code> state</li>\n<li><code class=\"codespan\">string[]</code> Set multiple states for the graphic, you can configure <code class=\"codespan\">stateSort</code> to influence the order of executing the graphic channel mapping corresponding to the state</li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the state value, and the return parameter is <code class=\"codespan\">string | string[]</code>, the corresponding ts type definition is:</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"richtext.stateSort":{"desc":"<p>Set the sorting function of the state values ​​of all graphics elements of the current graphic primitive, which will affect the order of the graphic channel mapping corresponding to the state. The result of the graphic channel mapping executed earlier may be covered by subsequent states. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"richtext.transform":{"desc":"<p>Set the corresponding transformation of the graphic primitive. All data transformations can be configured on the graphic primitive and are used for the <code class=\"codespan\">join data</code> execution transformation;\nAnother type of transformation is the transformation executed by graphical elements, such as <code class=\"codespan\">dodge</code>;\nThe general type definition is as follows:</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>The parameters supported by each transformation are different</p>\n"},"richtext.layout":{"desc":"<p>Set the layout parameters of the graphic primitive. There are two roles when the graphic primitive participates in the layout:</p>\n<ul>\n<li>&#39;container&#39; Container graphic primitive, usually <code class=\"codespan\">group</code> graphic primitive</li>\n<li>&#39;item&#39; layout child element, as a child node of the container graphic primitive</li>\n</ul>\n<p>Please note that we only support one layer of layout. If it is a multi-layer nested layout, it is recommended to use a custom layout scheme for implementation;</p>\n<p>Now support two content layouts: <code class=\"codespan\">grid</code> layout and <code class=\"codespan\">relative</code> layout, the related type definition is as follows</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>If you want to set a custom layout scheme, <code class=\"codespan\">layout</code> also supports setting callback functions directly. The definition of the callback function is as follows:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"richtext.layout.display":{"desc":"<p>The container graphic primitive sets the layout type and supports two configurations:</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> Relative layout</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> Grid layout</li>\n</ul>\n"},"richtext.layout.callback":{"desc":"<p>Customize the callback function for this graphic primitive, the ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"richtext.layout.skipBeforeLayouted":{"desc":"<p>Skip the execution stage before the layout is completed</p>\n"},"richtext.layout.updateViewSignals":{"desc":"<p>Whether to update the default view signals, that is: <code class=\"codespan\">padding</code>, <code class=\"codespan\">viewWidth</code> and <code class=\"codespan\">viewHeight</code></p>\n<p>This property can only be set on a container graphic primitive with <code class=\"codespan\">&#39;relative&#39;</code> layout.</p>\n"},"richtext.layout.maxChildWidth":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum width of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the width of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"richtext.layout.maxChildHeight":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum height of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the height of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"richtext.layout.position":{"desc":"<p>Set the position of the child graphic primitive of the relative layout. The supported settings are:</p>\n<ul>\n<li>&#39;top&#39; Relative to the top of the parent graphic primitive</li>\n<li>&#39;bottom&#39; Relative to the bottom of the parent graphic primitive</li>\n<li>&#39;left&#39; Relative to the left side of the parent graphic primitive</li>\n<li>&#39;right&#39; Relative to the right side of the parent graphic primitive</li>\n<li>&#39;content&#39; Relative to the center of the parent graphic primitive, that is, the content area</li>\n<li>&#39;auto&#39; When the graphic primitive sets the coordinate system, the position relative to the parent graphic primitive is automatically calculated according to the associated <code class=\"codespan\">scale</code></li>\n</ul>\n"},"richtext.layout.padding":{"desc":"<p>The inner padding of Child graphic primitive, in px unit, with the default padding of 0 for all directions. Accepts numerical values, numerical arrays, and objects for settings.</p>\n<p>Example of usage:</p>\n<pre><code class=\"lang-ts\">// Numerical type, set the padding to 5\npadding: 5;\n// Numerical array, set the top and bottom padding to 5, and the left and right padding to 10, similar to the CSS box model\npadding: [5, 10];\n// Numerical array, set the padding for all four directions separately\npadding: [\n  5, // Top\n  10, // Right\n  5, // Bottom\n  10 // Left\n];\n// Object type\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"richtext.layout.gridTemplateRows":{"desc":"<p>The parent graphic primitive of the grid layout sets the row height</p>\n"},"richtext.layout.gridTemplateColumns":{"desc":"<p>The parent graphic primitive of the grid layout sets the column width</p>\n"},"richtext.layout.gridRowGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the row spacing</p>\n"},"richtext.layout.gridColumnGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the column spacing</p>\n"},"richtext.layout.gridRowStart":{"desc":"<p>The child graphic primitive of the grid layout sets the row start position</p>\n"},"richtext.layout.gridRowEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the row end position</p>\n"},"richtext.layout.gridColumnStart":{"desc":"<p>The child graphic primitive of the grid layout sets the column start position</p>\n"},"richtext.layout.gridColumnEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the column end position</p>\n"},"richtext.large":{"desc":"<p>Whether to enable large data rendering mode</p>\n"},"richtext.largeThreshold":{"desc":"<p>The threshold for enabling large data rendering optimization, corresponding to the length of data</p>\n"},"richtext.progressiveStep":{"desc":"<p>The step length for enabling progressive rendering, corresponding to the length of data in each shard</p>\n"},"richtext.progressiveThreshold":{"desc":"<p>The threshold for enabling progressive rendering, corresponding to the length of single series data</p>\n"},"richtext.morph":{"desc":"<p>Whether to enable global transition morph animations for the current graphic element</p>\n"},"richtext.morphKey":{"desc":"<p>Used to match graphic elements for global transition morph animations, graphic elements with the same <code class=\"codespan\">morphKey</code> will undergo morph animations</p>\n"},"richtext.morphElementKey":{"desc":"<p>For the matched graphic elements before and after, use this configuration to match the graphic element; if not declared, we will read the <code class=\"codespan\">key</code> configuration by default to match the graphic element for morph animations;\nSupports one-to-one, one-to-many, and many-to-one graphic morph animations by default</p>\n"},"text":{"desc":"<p><strong> text primitive </strong></p>\n"},"text.type":{"desc":"<p>Set the primitive type to <code class=\"codespan\">text</code></p>\n"},"text.encode":{"desc":"<p>Set the visual channel encoding of the graphics elements, supporting three data change states by default:</p>\n<ul>\n<li><code class=\"codespan\">enter</code> newly added data items</li>\n<li><code class=\"codespan\">update</code> data items have been updated</li>\n<li><code class=\"codespan\">exit</code> data items are deleted</li>\n</ul>\n<p>Note that the data state here is automatically generated based on the <code class=\"codespan\">mark</code>&#39;s <code class=\"codespan\">key</code>. We will calculate the unique identifier for the data bound to the <code class=\"codespan\">mark</code> based on the <code class=\"codespan\">key</code> configuration. After the data is updated, if the corresponding unique identifier no longer exists, the state is <code class=\"codespan\">exit</code>; if it exists, it is <code class=\"codespan\">update</code>. If the previous data does not exist for the unique identifier, the data item&#39;s state is <code class=\"codespan\">enter</code>.</p>\n<p>Supports one interaction state by default:</p>\n<ul>\n<li><code class=\"codespan\">hover</code> when the mouse hovers over a specific shape, set the corresponding visual channel encoding for the shape</li>\n</ul>\n"},"text.encode.enter":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data initialization state. Note that it will not be executed again when the data is updated.</p>\n"},"text.encode.enter.text":{"desc":"<p>Text, supports passing in arrays</p>\n"},"text.encode.enter.maxLineWidth":{"desc":"<p>Maximum width, when this value is set, and the automatic ellipsis strategy is enabled, ellipsis symbols will be automatically added</p>\n"},"text.encode.enter.ellipsis":{"desc":"<p>When the text is too long, the ellipsis related configuration, supports two types of configuration:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Enable automatic ellipsis and set the ellipsis symbol</li>\n<li><code class=\"codespan\">&#39;boolean&#39;</code> Whether to enable automatic ellipsis, the default ellipsis symbol is <code class=\"codespan\">&#39;...&#39;</code></li>\n</ul>\n"},"text.encode.enter.textAlign":{"desc":"<p>Text alignment, supports configuration:</p>\n<ul>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;center&#39;</li>\n</ul>\n"},"text.encode.enter.textBaseline":{"desc":"<p>Text vertical alignment line, supports configuration:</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;middle&#39;</li>\n<li>&#39;bottom&#39;</li>\n</ul>\n"},"text.encode.enter.fontSize":{"desc":"<p>Font size, same as <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-size\" target=\"_blank\">CSS font-size</a></p>\n"},"text.encode.enter.fontFamily":{"desc":"<p>Font, same as <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-family\" target=\"_blank\">CSS font-family</a></p>\n"},"text.encode.enter.fontVariant":{"desc":"<p>Same as <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant\" target=\"_blank\">CSS font-variant</a></p>\n"},"text.encode.enter.fontStyle":{"desc":"<p>Font style, same as <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-style\" target=\"_blank\">CSS font-style</a></p>\n"},"text.encode.enter.fontWeight":{"desc":"<p>Font weight, same as <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight\" target=\"_blank\">CSS font-weight</a></p>\n"},"text.encode.enter.lineHeight":{"desc":"<p>Line height</p>\n"},"text.encode.enter.underline":{"desc":"<p>Whether to display underline</p>\n"},"text.encode.enter.lineThrough":{"desc":"<p>Whether to display strikethrough</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"text.encode.enter.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"text.encode.enter.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"text.encode.enter.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"text.encode.enter.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"text.encode.enter.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"text.encode.enter.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"text.encode.enter.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"text.encode.enter.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"text.encode.enter.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"text.encode.enter.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"text.encode.enter.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"text.encode.enter.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"text.encode.enter.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"text.encode.enter.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"text.encode.enter.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"text.encode.enter.outerBorder":{"desc":"<p>Outer border</p>\n"},"text.encode.enter.innerBorder":{"desc":"<p>Inner border</p>\n"},"text.encode.enter.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"text.encode.enter.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"text.encode.enter.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"text.encode.enter.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"text.encode.enter.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"text.encode.enter.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"text.encode.enter.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"text.encode.enter.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"text.encode.enter.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"text.encode.enter.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"text.encode.enter.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"text.encode.enter.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"text.encode.enter.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"text.encode.enter.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"text.encode.enter.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"text.encode.enter.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"text.encode.enter.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"text.encode.enter.texture":{"desc":"<p>The texture of the graphic</p>\n"},"text.encode.enter.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"text.encode.enter.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"text.encode.enter.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"text.encode.enter.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"text.encode.enter.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"text.encode.update":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data update state.</p>\n"},"text.encode.update.text":{"desc":"<p>Text, supports passing in arrays</p>\n"},"text.encode.update.maxLineWidth":{"desc":"<p>Maximum width, when this value is set, and the automatic ellipsis strategy is enabled, ellipsis symbols will be automatically added</p>\n"},"text.encode.update.ellipsis":{"desc":"<p>When the text is too long, the ellipsis related configuration, supports two types of configuration:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Enable automatic ellipsis and set the ellipsis symbol</li>\n<li><code class=\"codespan\">&#39;boolean&#39;</code> Whether to enable automatic ellipsis, the default ellipsis symbol is <code class=\"codespan\">&#39;...&#39;</code></li>\n</ul>\n"},"text.encode.update.textAlign":{"desc":"<p>Text alignment, supports configuration:</p>\n<ul>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;center&#39;</li>\n</ul>\n"},"text.encode.update.textBaseline":{"desc":"<p>Text vertical alignment line, supports configuration:</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;middle&#39;</li>\n<li>&#39;bottom&#39;</li>\n</ul>\n"},"text.encode.update.fontSize":{"desc":"<p>Font size, same as <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-size\" target=\"_blank\">CSS font-size</a></p>\n"},"text.encode.update.fontFamily":{"desc":"<p>Font, same as <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-family\" target=\"_blank\">CSS font-family</a></p>\n"},"text.encode.update.fontVariant":{"desc":"<p>Same as <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant\" target=\"_blank\">CSS font-variant</a></p>\n"},"text.encode.update.fontStyle":{"desc":"<p>Font style, same as <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-style\" target=\"_blank\">CSS font-style</a></p>\n"},"text.encode.update.fontWeight":{"desc":"<p>Font weight, same as <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight\" target=\"_blank\">CSS font-weight</a></p>\n"},"text.encode.update.lineHeight":{"desc":"<p>Line height</p>\n"},"text.encode.update.underline":{"desc":"<p>Whether to display underline</p>\n"},"text.encode.update.lineThrough":{"desc":"<p>Whether to display strikethrough</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"text.encode.update.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"text.encode.update.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"text.encode.update.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"text.encode.update.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"text.encode.update.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"text.encode.update.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"text.encode.update.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"text.encode.update.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"text.encode.update.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"text.encode.update.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"text.encode.update.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"text.encode.update.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"text.encode.update.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"text.encode.update.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"text.encode.update.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"text.encode.update.outerBorder":{"desc":"<p>Outer border</p>\n"},"text.encode.update.innerBorder":{"desc":"<p>Inner border</p>\n"},"text.encode.update.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"text.encode.update.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"text.encode.update.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"text.encode.update.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"text.encode.update.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"text.encode.update.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"text.encode.update.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"text.encode.update.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"text.encode.update.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"text.encode.update.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"text.encode.update.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"text.encode.update.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"text.encode.update.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"text.encode.update.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"text.encode.update.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"text.encode.update.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"text.encode.update.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"text.encode.update.texture":{"desc":"<p>The texture of the graphic</p>\n"},"text.encode.update.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"text.encode.update.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"text.encode.update.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"text.encode.update.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"text.encode.update.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"text.encode.exit":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data deletion state.</p>\n"},"text.encode.exit.text":{"desc":"<p>Text, supports passing in arrays</p>\n"},"text.encode.exit.maxLineWidth":{"desc":"<p>Maximum width, when this value is set, and the automatic ellipsis strategy is enabled, ellipsis symbols will be automatically added</p>\n"},"text.encode.exit.ellipsis":{"desc":"<p>When the text is too long, the ellipsis related configuration, supports two types of configuration:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Enable automatic ellipsis and set the ellipsis symbol</li>\n<li><code class=\"codespan\">&#39;boolean&#39;</code> Whether to enable automatic ellipsis, the default ellipsis symbol is <code class=\"codespan\">&#39;...&#39;</code></li>\n</ul>\n"},"text.encode.exit.textAlign":{"desc":"<p>Text alignment, supports configuration:</p>\n<ul>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;center&#39;</li>\n</ul>\n"},"text.encode.exit.textBaseline":{"desc":"<p>Text vertical alignment line, supports configuration:</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;middle&#39;</li>\n<li>&#39;bottom&#39;</li>\n</ul>\n"},"text.encode.exit.fontSize":{"desc":"<p>Font size, same as <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-size\" target=\"_blank\">CSS font-size</a></p>\n"},"text.encode.exit.fontFamily":{"desc":"<p>Font, same as <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-family\" target=\"_blank\">CSS font-family</a></p>\n"},"text.encode.exit.fontVariant":{"desc":"<p>Same as <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant\" target=\"_blank\">CSS font-variant</a></p>\n"},"text.encode.exit.fontStyle":{"desc":"<p>Font style, same as <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-style\" target=\"_blank\">CSS font-style</a></p>\n"},"text.encode.exit.fontWeight":{"desc":"<p>Font weight, same as <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight\" target=\"_blank\">CSS font-weight</a></p>\n"},"text.encode.exit.lineHeight":{"desc":"<p>Line height</p>\n"},"text.encode.exit.underline":{"desc":"<p>Whether to display underline</p>\n"},"text.encode.exit.lineThrough":{"desc":"<p>Whether to display strikethrough</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"text.encode.exit.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"text.encode.exit.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"text.encode.exit.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"text.encode.exit.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"text.encode.exit.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"text.encode.exit.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"text.encode.exit.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"text.encode.exit.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"text.encode.exit.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"text.encode.exit.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"text.encode.exit.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"text.encode.exit.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"text.encode.exit.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"text.encode.exit.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"text.encode.exit.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"text.encode.exit.outerBorder":{"desc":"<p>Outer border</p>\n"},"text.encode.exit.innerBorder":{"desc":"<p>Inner border</p>\n"},"text.encode.exit.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"text.encode.exit.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"text.encode.exit.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"text.encode.exit.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"text.encode.exit.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"text.encode.exit.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"text.encode.exit.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"text.encode.exit.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"text.encode.exit.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"text.encode.exit.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"text.encode.exit.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"text.encode.exit.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"text.encode.exit.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"text.encode.exit.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"text.encode.exit.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"text.encode.exit.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"text.encode.exit.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"text.encode.exit.texture":{"desc":"<p>The texture of the graphic</p>\n"},"text.encode.exit.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"text.encode.exit.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"text.encode.exit.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"text.encode.exit.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"text.encode.exit.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"text.encode.hover":{"desc":"<p>Set the visual channel mapping corresponding to the graphics elements when in the <code class=\"codespan\">hover</code> state.</p>\n"},"text.encode.hover.text":{"desc":"<p>Text, supports passing in arrays</p>\n"},"text.encode.hover.maxLineWidth":{"desc":"<p>Maximum width, when this value is set, and the automatic ellipsis strategy is enabled, ellipsis symbols will be automatically added</p>\n"},"text.encode.hover.ellipsis":{"desc":"<p>When the text is too long, the ellipsis related configuration, supports two types of configuration:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Enable automatic ellipsis and set the ellipsis symbol</li>\n<li><code class=\"codespan\">&#39;boolean&#39;</code> Whether to enable automatic ellipsis, the default ellipsis symbol is <code class=\"codespan\">&#39;...&#39;</code></li>\n</ul>\n"},"text.encode.hover.textAlign":{"desc":"<p>Text alignment, supports configuration:</p>\n<ul>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;center&#39;</li>\n</ul>\n"},"text.encode.hover.textBaseline":{"desc":"<p>Text vertical alignment line, supports configuration:</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;middle&#39;</li>\n<li>&#39;bottom&#39;</li>\n</ul>\n"},"text.encode.hover.fontSize":{"desc":"<p>Font size, same as <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-size\" target=\"_blank\">CSS font-size</a></p>\n"},"text.encode.hover.fontFamily":{"desc":"<p>Font, same as <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-family\" target=\"_blank\">CSS font-family</a></p>\n"},"text.encode.hover.fontVariant":{"desc":"<p>Same as <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant\" target=\"_blank\">CSS font-variant</a></p>\n"},"text.encode.hover.fontStyle":{"desc":"<p>Font style, same as <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-style\" target=\"_blank\">CSS font-style</a></p>\n"},"text.encode.hover.fontWeight":{"desc":"<p>Font weight, same as <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight\" target=\"_blank\">CSS font-weight</a></p>\n"},"text.encode.hover.lineHeight":{"desc":"<p>Line height</p>\n"},"text.encode.hover.underline":{"desc":"<p>Whether to display underline</p>\n"},"text.encode.hover.lineThrough":{"desc":"<p>Whether to display strikethrough</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"text.encode.hover.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"text.encode.hover.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"text.encode.hover.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"text.encode.hover.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"text.encode.hover.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"text.encode.hover.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"text.encode.hover.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"text.encode.hover.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"text.encode.hover.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"text.encode.hover.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"text.encode.hover.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"text.encode.hover.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"text.encode.hover.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"text.encode.hover.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"text.encode.hover.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"text.encode.hover.outerBorder":{"desc":"<p>Outer border</p>\n"},"text.encode.hover.innerBorder":{"desc":"<p>Inner border</p>\n"},"text.encode.hover.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"text.encode.hover.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"text.encode.hover.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"text.encode.hover.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"text.encode.hover.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"text.encode.hover.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"text.encode.hover.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"text.encode.hover.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"text.encode.hover.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"text.encode.hover.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"text.encode.hover.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"text.encode.hover.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"text.encode.hover.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"text.encode.hover.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"text.encode.hover.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"text.encode.hover.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"text.encode.hover.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"text.encode.hover.texture":{"desc":"<p>The texture of the graphic</p>\n"},"text.encode.hover.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"text.encode.hover.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"text.encode.hover.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"text.encode.hover.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"text.encode.hover.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"text.animationState":{"desc":"<p>Type: <code class=\"codespan\">MarkFunctionType</code>\nRequired: No\nanimation attributes</p>\n"},"text.animation":{"desc":"<p>Supports setting various state corresponding animations, data-driven animation states have three types:</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>Interaction-triggered state changes are configured through a unified interaction animation, with the configuration key being <code class=\"codespan\">state</code></p>\n"},"text.animation.type":{"desc":"<p>Animation execution type, specifying a specific built-in animation execution effect</p>\n<p>Universal built-in animation types include:</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: Fade in and out animations</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: Scaling animations</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: Move in and out animations</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: Rotation animations</li>\n<li><code class=\"codespan\">update</code>: Update animations</li>\n</ul>\n"},"text.animation.channel":{"desc":"<p>Visual channels before and after the animation is executed, conflicts with <code class=\"codespan\">type</code> configuration</p>\n"},"text.animation.custom":{"desc":"<p>Custom animation, if custom animation configuration is set, it will replace the default visual channel interpolation logic</p>\n"},"text.animation.customParameters":{"desc":"<p>Custom animation parameters</p>\n"},"text.animation.easing":{"desc":"<p>Animation easing, default is <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"text.animation.delay":{"desc":"<p>Animation execution delay time, default is 0</p>\n"},"text.animation.duration":{"desc":"<p>Animation execution duration, default is 1000ms</p>\n"},"text.animation.oneByOne":{"desc":"<p>Animation execution delay time in sequence. If set to <code class=\"codespan\">true</code>, the next element&#39;s animation will be executed after the previous element&#39;s animation is completed. The default is <code class=\"codespan\">false</code>.</p>\n"},"text.animation.startTime":{"desc":"<p>Initial time of animation execution, which will not be repeatedly applied in loop animation, default is 0</p>\n"},"text.animation.totalTime":{"desc":"<p>Maximum time of animation execution, the animation will be terminated if it reaches the set time</p>\n"},"text.animation.loop":{"desc":"<p>Number of animation loops, if set to <code class=\"codespan\">true</code>, it will loop infinitely</p>\n"},"text.animation.options":{"desc":"<p>Additional parameters set for specific animation types execution</p>\n"},"text.animation.controlOptions":{"desc":"<p>Control parameters for animation execution logic:</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: Whether to immediately terminate its animation when the animation state changes</li>\n<li><code class=\"codespan\">immediatelyApply</code>: Whether to immediately apply the initial visual channel of the animation</li>\n</ul>\n"},"text.zIndex":{"desc":"<p>Set the zIndex of the container shape (group) corresponding to the <code class=\"codespan\">mark</code> graphic primitive</p>\n"},"text.interactive":{"desc":"<p>Type: <code class=\"codespan\">boolean</code>\nRequired: No</p>\n"},"text.context":{"desc":"<p>Set the context parameters of the graphic primitive</p>\n"},"text.setCustomizedShape":{"desc":"<p>Set the callback function of custom shape. The corresponding ts type is as follows:</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>Where <code class=\"codespan\">ICustomPath2D</code> is a utility class provided by VRender for drawing custom paths.</p>\n"},"text.support3d":{"desc":"<p>Whether to support 3d mode when the canvas is set to 3d view.</p>\n"},"text.group":{"desc":"<p>Set the parent graphic primitive. Supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> The id of the corresponding parent graphic primitive</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> The corresponding grammar element of the parent graphic primitive, generally used in API call scenarios.</li>\n</ul>\n<p>If not set, it will be attached to the root node of the canvas by default.</p>\n"},"text.from":{"desc":"<p>ts type definition is:</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>Declare the data on which the graphic primitive depends through the <code class=\"codespan\">data</code> attribute.</p>\n"},"text.key":{"desc":"<p>Set the unique identifier for the graphic primitive data element, which is used to calculate the data state of the graphic element. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the <code class=\"codespan\">key</code></li>\n</ul>\n"},"text.sort":{"desc":"<p>Sort all graphic elements in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"text.groupBy":{"desc":"<p>Set the grouping attribute, the corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the grouping <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the grouping <code class=\"codespan\">key</code></li>\n</ul>\n"},"text.groupSort":{"desc":"<p>Sort the groups in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"text.coordinate":{"desc":"<p>Set the id or graphic element corresponding to the associated coordinate system of this graphic primitive</p>\n"},"text.state":{"desc":"<p>Set the state values ​​of all graphical elements of the current graphic primitive, supporting three formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the state of the graphic, for example, <code class=\"codespan\">{ state: &#39;selected&#39;}</code> sets the state of all graphics to <code class=\"codespan\">&#39;selected&#39;</code>, usually in this case, the <code class=\"codespan\">encode</code> also sets the graphic channel mapping corresponding to the <code class=\"codespan\">&#39;selected&#39;</code> state</li>\n<li><code class=\"codespan\">string[]</code> Set multiple states for the graphic, you can configure <code class=\"codespan\">stateSort</code> to influence the order of executing the graphic channel mapping corresponding to the state</li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the state value, and the return parameter is <code class=\"codespan\">string | string[]</code>, the corresponding ts type definition is:</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"text.stateSort":{"desc":"<p>Set the sorting function of the state values ​​of all graphics elements of the current graphic primitive, which will affect the order of the graphic channel mapping corresponding to the state. The result of the graphic channel mapping executed earlier may be covered by subsequent states. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"text.transform":{"desc":"<p>Set the corresponding transformation of the graphic primitive. All data transformations can be configured on the graphic primitive and are used for the <code class=\"codespan\">join data</code> execution transformation;\nAnother type of transformation is the transformation executed by graphical elements, such as <code class=\"codespan\">dodge</code>;\nThe general type definition is as follows:</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>The parameters supported by each transformation are different</p>\n"},"text.layout":{"desc":"<p>Set the layout parameters of the graphic primitive. There are two roles when the graphic primitive participates in the layout:</p>\n<ul>\n<li>&#39;container&#39; Container graphic primitive, usually <code class=\"codespan\">group</code> graphic primitive</li>\n<li>&#39;item&#39; layout child element, as a child node of the container graphic primitive</li>\n</ul>\n<p>Please note that we only support one layer of layout. If it is a multi-layer nested layout, it is recommended to use a custom layout scheme for implementation;</p>\n<p>Now support two content layouts: <code class=\"codespan\">grid</code> layout and <code class=\"codespan\">relative</code> layout, the related type definition is as follows</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>If you want to set a custom layout scheme, <code class=\"codespan\">layout</code> also supports setting callback functions directly. The definition of the callback function is as follows:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"text.layout.display":{"desc":"<p>The container graphic primitive sets the layout type and supports two configurations:</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> Relative layout</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> Grid layout</li>\n</ul>\n"},"text.layout.callback":{"desc":"<p>Customize the callback function for this graphic primitive, the ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"text.layout.skipBeforeLayouted":{"desc":"<p>Skip the execution stage before the layout is completed</p>\n"},"text.layout.updateViewSignals":{"desc":"<p>Whether to update the default view signals, that is: <code class=\"codespan\">padding</code>, <code class=\"codespan\">viewWidth</code> and <code class=\"codespan\">viewHeight</code></p>\n<p>This property can only be set on a container graphic primitive with <code class=\"codespan\">&#39;relative&#39;</code> layout.</p>\n"},"text.layout.maxChildWidth":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum width of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the width of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"text.layout.maxChildHeight":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum height of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the height of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"text.layout.position":{"desc":"<p>Set the position of the child graphic primitive of the relative layout. The supported settings are:</p>\n<ul>\n<li>&#39;top&#39; Relative to the top of the parent graphic primitive</li>\n<li>&#39;bottom&#39; Relative to the bottom of the parent graphic primitive</li>\n<li>&#39;left&#39; Relative to the left side of the parent graphic primitive</li>\n<li>&#39;right&#39; Relative to the right side of the parent graphic primitive</li>\n<li>&#39;content&#39; Relative to the center of the parent graphic primitive, that is, the content area</li>\n<li>&#39;auto&#39; When the graphic primitive sets the coordinate system, the position relative to the parent graphic primitive is automatically calculated according to the associated <code class=\"codespan\">scale</code></li>\n</ul>\n"},"text.layout.padding":{"desc":"<p>The inner padding of Child graphic primitive, in px unit, with the default padding of 0 for all directions. Accepts numerical values, numerical arrays, and objects for settings.</p>\n<p>Example of usage:</p>\n<pre><code class=\"lang-ts\">// Numerical type, set the padding to 5\npadding: 5;\n// Numerical array, set the top and bottom padding to 5, and the left and right padding to 10, similar to the CSS box model\npadding: [5, 10];\n// Numerical array, set the padding for all four directions separately\npadding: [\n  5, // Top\n  10, // Right\n  5, // Bottom\n  10 // Left\n];\n// Object type\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"text.layout.gridTemplateRows":{"desc":"<p>The parent graphic primitive of the grid layout sets the row height</p>\n"},"text.layout.gridTemplateColumns":{"desc":"<p>The parent graphic primitive of the grid layout sets the column width</p>\n"},"text.layout.gridRowGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the row spacing</p>\n"},"text.layout.gridColumnGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the column spacing</p>\n"},"text.layout.gridRowStart":{"desc":"<p>The child graphic primitive of the grid layout sets the row start position</p>\n"},"text.layout.gridRowEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the row end position</p>\n"},"text.layout.gridColumnStart":{"desc":"<p>The child graphic primitive of the grid layout sets the column start position</p>\n"},"text.layout.gridColumnEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the column end position</p>\n"},"text.large":{"desc":"<p>Whether to enable large data rendering mode</p>\n"},"text.largeThreshold":{"desc":"<p>The threshold for enabling large data rendering optimization, corresponding to the length of data</p>\n"},"text.progressiveStep":{"desc":"<p>The step length for enabling progressive rendering, corresponding to the length of data in each shard</p>\n"},"text.progressiveThreshold":{"desc":"<p>The threshold for enabling progressive rendering, corresponding to the length of single series data</p>\n"},"text.morph":{"desc":"<p>Whether to enable global transition morph animations for the current graphic element</p>\n"},"text.morphKey":{"desc":"<p>Used to match graphic elements for global transition morph animations, graphic elements with the same <code class=\"codespan\">morphKey</code> will undergo morph animations</p>\n"},"text.morphElementKey":{"desc":"<p>For the matched graphic elements before and after, use this configuration to match the graphic element; if not declared, we will read the <code class=\"codespan\">key</code> configuration by default to match the graphic element for morph animations;\nSupports one-to-one, one-to-many, and many-to-one graphic morph animations by default</p>\n"},"interval":{"desc":"<p><strong> Interval Graphic element </strong></p>\n"},"interval.type":{"desc":"<p>Set the graphic element type to <code class=\"codespan\">interval</code></p>\n"},"interval.encode":{"desc":"<p>Set the visual channel encoding of the graphics elements, supporting three data change states by default:</p>\n<ul>\n<li><code class=\"codespan\">enter</code> newly added data items</li>\n<li><code class=\"codespan\">update</code> data items have been updated</li>\n<li><code class=\"codespan\">exit</code> data items are deleted</li>\n</ul>\n<p>Note that the data state here is automatically generated based on the <code class=\"codespan\">mark</code>&#39;s <code class=\"codespan\">key</code>. We will calculate the unique identifier for the data bound to the <code class=\"codespan\">mark</code> based on the <code class=\"codespan\">key</code> configuration. After the data is updated, if the corresponding unique identifier no longer exists, the state is <code class=\"codespan\">exit</code>; if it exists, it is <code class=\"codespan\">update</code>. If the previous data does not exist for the unique identifier, the data item&#39;s state is <code class=\"codespan\">enter</code>.</p>\n<p>Supports one interaction state by default:</p>\n<ul>\n<li><code class=\"codespan\">hover</code> when the mouse hovers over a specific shape, set the corresponding visual channel encoding for the shape</li>\n</ul>\n"},"interval.encode.enter":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data initialization state. Note that it will not be executed again when the data is updated.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"interval.encode.enter.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"interval.encode.enter.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"interval.encode.enter.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"interval.encode.enter.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"interval.encode.enter.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"interval.encode.enter.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"interval.encode.enter.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"interval.encode.enter.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"interval.encode.enter.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"interval.encode.enter.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"interval.encode.enter.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"interval.encode.enter.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"interval.encode.enter.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"interval.encode.enter.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"interval.encode.enter.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"interval.encode.enter.outerBorder":{"desc":"<p>Outer border</p>\n"},"interval.encode.enter.innerBorder":{"desc":"<p>Inner border</p>\n"},"interval.encode.enter.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"interval.encode.enter.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"interval.encode.enter.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"interval.encode.enter.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"interval.encode.enter.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"interval.encode.enter.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"interval.encode.enter.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"interval.encode.enter.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"interval.encode.enter.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"interval.encode.enter.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"interval.encode.enter.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"interval.encode.enter.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"interval.encode.enter.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"interval.encode.enter.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"interval.encode.enter.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"interval.encode.enter.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"interval.encode.enter.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"interval.encode.enter.texture":{"desc":"<p>The texture of the graphic</p>\n"},"interval.encode.enter.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"interval.encode.enter.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"interval.encode.enter.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"interval.encode.enter.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"interval.encode.enter.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"interval.encode.update":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data update state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"interval.encode.update.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"interval.encode.update.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"interval.encode.update.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"interval.encode.update.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"interval.encode.update.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"interval.encode.update.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"interval.encode.update.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"interval.encode.update.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"interval.encode.update.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"interval.encode.update.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"interval.encode.update.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"interval.encode.update.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"interval.encode.update.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"interval.encode.update.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"interval.encode.update.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"interval.encode.update.outerBorder":{"desc":"<p>Outer border</p>\n"},"interval.encode.update.innerBorder":{"desc":"<p>Inner border</p>\n"},"interval.encode.update.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"interval.encode.update.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"interval.encode.update.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"interval.encode.update.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"interval.encode.update.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"interval.encode.update.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"interval.encode.update.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"interval.encode.update.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"interval.encode.update.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"interval.encode.update.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"interval.encode.update.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"interval.encode.update.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"interval.encode.update.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"interval.encode.update.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"interval.encode.update.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"interval.encode.update.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"interval.encode.update.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"interval.encode.update.texture":{"desc":"<p>The texture of the graphic</p>\n"},"interval.encode.update.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"interval.encode.update.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"interval.encode.update.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"interval.encode.update.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"interval.encode.update.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"interval.encode.exit":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data deletion state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"interval.encode.exit.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"interval.encode.exit.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"interval.encode.exit.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"interval.encode.exit.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"interval.encode.exit.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"interval.encode.exit.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"interval.encode.exit.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"interval.encode.exit.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"interval.encode.exit.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"interval.encode.exit.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"interval.encode.exit.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"interval.encode.exit.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"interval.encode.exit.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"interval.encode.exit.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"interval.encode.exit.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"interval.encode.exit.outerBorder":{"desc":"<p>Outer border</p>\n"},"interval.encode.exit.innerBorder":{"desc":"<p>Inner border</p>\n"},"interval.encode.exit.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"interval.encode.exit.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"interval.encode.exit.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"interval.encode.exit.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"interval.encode.exit.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"interval.encode.exit.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"interval.encode.exit.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"interval.encode.exit.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"interval.encode.exit.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"interval.encode.exit.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"interval.encode.exit.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"interval.encode.exit.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"interval.encode.exit.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"interval.encode.exit.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"interval.encode.exit.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"interval.encode.exit.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"interval.encode.exit.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"interval.encode.exit.texture":{"desc":"<p>The texture of the graphic</p>\n"},"interval.encode.exit.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"interval.encode.exit.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"interval.encode.exit.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"interval.encode.exit.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"interval.encode.exit.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"interval.encode.hover":{"desc":"<p>Set the visual channel mapping corresponding to the graphics elements when in the <code class=\"codespan\">hover</code> state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"interval.encode.hover.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"interval.encode.hover.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"interval.encode.hover.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"interval.encode.hover.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"interval.encode.hover.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"interval.encode.hover.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"interval.encode.hover.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"interval.encode.hover.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"interval.encode.hover.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"interval.encode.hover.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"interval.encode.hover.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"interval.encode.hover.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"interval.encode.hover.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"interval.encode.hover.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"interval.encode.hover.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"interval.encode.hover.outerBorder":{"desc":"<p>Outer border</p>\n"},"interval.encode.hover.innerBorder":{"desc":"<p>Inner border</p>\n"},"interval.encode.hover.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"interval.encode.hover.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"interval.encode.hover.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"interval.encode.hover.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"interval.encode.hover.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"interval.encode.hover.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"interval.encode.hover.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"interval.encode.hover.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"interval.encode.hover.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"interval.encode.hover.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"interval.encode.hover.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"interval.encode.hover.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"interval.encode.hover.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"interval.encode.hover.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"interval.encode.hover.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"interval.encode.hover.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"interval.encode.hover.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"interval.encode.hover.texture":{"desc":"<p>The texture of the graphic</p>\n"},"interval.encode.hover.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"interval.encode.hover.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"interval.encode.hover.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"interval.encode.hover.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"interval.encode.hover.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"interval.animationState":{"desc":"<p>Type: <code class=\"codespan\">MarkFunctionType</code>\nRequired: No\nanimation attributes</p>\n"},"interval.animation":{"desc":"<p>Supports setting various state corresponding animations, data-driven animation states have three types:</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>Interaction-triggered state changes are configured through a unified interaction animation, with the configuration key being <code class=\"codespan\">state</code></p>\n"},"interval.animation.type":{"desc":"<p>Animation execution type, specifying a specific built-in animation execution effect</p>\n<p>Universal built-in animation types include:</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: Fade in and out animations</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: Scaling animations</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: Move in and out animations</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: Rotation animations</li>\n<li><code class=\"codespan\">update</code>: Update animations</li>\n</ul>\n<p>interval primitive additional supported animation types include:</p>\n<ul>\n<li><code class=\"codespan\">growIntervalIn</code>/<code class=\"codespan\">growIntervalOut</code>: Growing animation</li>\n</ul>\n"},"interval.animation.channel":{"desc":"<p>Visual channels before and after the animation is executed, conflicts with <code class=\"codespan\">type</code> configuration</p>\n"},"interval.animation.custom":{"desc":"<p>Custom animation, if custom animation configuration is set, it will replace the default visual channel interpolation logic</p>\n"},"interval.animation.customParameters":{"desc":"<p>Custom animation parameters</p>\n"},"interval.animation.easing":{"desc":"<p>Animation easing, default is <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"interval.animation.delay":{"desc":"<p>Animation execution delay time, default is 0</p>\n"},"interval.animation.duration":{"desc":"<p>Animation execution duration, default is 1000ms</p>\n"},"interval.animation.oneByOne":{"desc":"<p>Animation execution delay time in sequence. If set to <code class=\"codespan\">true</code>, the next element&#39;s animation will be executed after the previous element&#39;s animation is completed. The default is <code class=\"codespan\">false</code>.</p>\n"},"interval.animation.startTime":{"desc":"<p>Initial time of animation execution, which will not be repeatedly applied in loop animation, default is 0</p>\n"},"interval.animation.totalTime":{"desc":"<p>Maximum time of animation execution, the animation will be terminated if it reaches the set time</p>\n"},"interval.animation.loop":{"desc":"<p>Number of animation loops, if set to <code class=\"codespan\">true</code>, it will loop infinitely</p>\n"},"interval.animation.options":{"desc":"<p>Additional parameters set for specific animation types execution</p>\n"},"interval.animation.controlOptions":{"desc":"<p>Control parameters for animation execution logic:</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: Whether to immediately terminate its animation when the animation state changes</li>\n<li><code class=\"codespan\">immediatelyApply</code>: Whether to immediately apply the initial visual channel of the animation</li>\n</ul>\n"},"interval.zIndex":{"desc":"<p>Set the zIndex of the container shape (group) corresponding to the <code class=\"codespan\">mark</code> graphic primitive</p>\n"},"interval.interactive":{"desc":"<p>Type: <code class=\"codespan\">boolean</code>\nRequired: No</p>\n"},"interval.context":{"desc":"<p>Set the context parameters of the graphic primitive</p>\n"},"interval.setCustomizedShape":{"desc":"<p>Set the callback function of custom shape. The corresponding ts type is as follows:</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>Where <code class=\"codespan\">ICustomPath2D</code> is a utility class provided by VRender for drawing custom paths.</p>\n"},"interval.support3d":{"desc":"<p>Whether to support 3d mode when the canvas is set to 3d view.</p>\n"},"interval.group":{"desc":"<p>Set the parent graphic primitive. Supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> The id of the corresponding parent graphic primitive</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> The corresponding grammar element of the parent graphic primitive, generally used in API call scenarios.</li>\n</ul>\n<p>If not set, it will be attached to the root node of the canvas by default.</p>\n"},"interval.from":{"desc":"<p>ts type definition is:</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>Declare the data on which the graphic primitive depends through the <code class=\"codespan\">data</code> attribute.</p>\n"},"interval.key":{"desc":"<p>Set the unique identifier for the graphic primitive data element, which is used to calculate the data state of the graphic element. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the <code class=\"codespan\">key</code></li>\n</ul>\n"},"interval.sort":{"desc":"<p>Sort all graphic elements in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"interval.groupBy":{"desc":"<p>Set the grouping attribute, the corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the grouping <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the grouping <code class=\"codespan\">key</code></li>\n</ul>\n"},"interval.groupSort":{"desc":"<p>Sort the groups in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"interval.coordinate":{"desc":"<p>Set the id or graphic element corresponding to the associated coordinate system of this graphic primitive</p>\n"},"interval.state":{"desc":"<p>Set the state values ​​of all graphical elements of the current graphic primitive, supporting three formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the state of the graphic, for example, <code class=\"codespan\">{ state: &#39;selected&#39;}</code> sets the state of all graphics to <code class=\"codespan\">&#39;selected&#39;</code>, usually in this case, the <code class=\"codespan\">encode</code> also sets the graphic channel mapping corresponding to the <code class=\"codespan\">&#39;selected&#39;</code> state</li>\n<li><code class=\"codespan\">string[]</code> Set multiple states for the graphic, you can configure <code class=\"codespan\">stateSort</code> to influence the order of executing the graphic channel mapping corresponding to the state</li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the state value, and the return parameter is <code class=\"codespan\">string | string[]</code>, the corresponding ts type definition is:</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"interval.stateSort":{"desc":"<p>Set the sorting function of the state values ​​of all graphics elements of the current graphic primitive, which will affect the order of the graphic channel mapping corresponding to the state. The result of the graphic channel mapping executed earlier may be covered by subsequent states. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"interval.transform":{"desc":"<p>Set the corresponding transformation of the graphic primitive. All data transformations can be configured on the graphic primitive and are used for the <code class=\"codespan\">join data</code> execution transformation;\nAnother type of transformation is the transformation executed by graphical elements, such as <code class=\"codespan\">dodge</code>;\nThe general type definition is as follows:</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>The parameters supported by each transformation are different</p>\n"},"interval.layout":{"desc":"<p>Set the layout parameters of the graphic primitive. There are two roles when the graphic primitive participates in the layout:</p>\n<ul>\n<li>&#39;container&#39; Container graphic primitive, usually <code class=\"codespan\">group</code> graphic primitive</li>\n<li>&#39;item&#39; layout child element, as a child node of the container graphic primitive</li>\n</ul>\n<p>Please note that we only support one layer of layout. If it is a multi-layer nested layout, it is recommended to use a custom layout scheme for implementation;</p>\n<p>Now support two content layouts: <code class=\"codespan\">grid</code> layout and <code class=\"codespan\">relative</code> layout, the related type definition is as follows</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>If you want to set a custom layout scheme, <code class=\"codespan\">layout</code> also supports setting callback functions directly. The definition of the callback function is as follows:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"interval.layout.display":{"desc":"<p>The container graphic primitive sets the layout type and supports two configurations:</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> Relative layout</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> Grid layout</li>\n</ul>\n"},"interval.layout.callback":{"desc":"<p>Customize the callback function for this graphic primitive, the ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"interval.layout.skipBeforeLayouted":{"desc":"<p>Skip the execution stage before the layout is completed</p>\n"},"interval.layout.updateViewSignals":{"desc":"<p>Whether to update the default view signals, that is: <code class=\"codespan\">padding</code>, <code class=\"codespan\">viewWidth</code> and <code class=\"codespan\">viewHeight</code></p>\n<p>This property can only be set on a container graphic primitive with <code class=\"codespan\">&#39;relative&#39;</code> layout.</p>\n"},"interval.layout.maxChildWidth":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum width of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the width of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"interval.layout.maxChildHeight":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum height of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the height of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"interval.layout.position":{"desc":"<p>Set the position of the child graphic primitive of the relative layout. The supported settings are:</p>\n<ul>\n<li>&#39;top&#39; Relative to the top of the parent graphic primitive</li>\n<li>&#39;bottom&#39; Relative to the bottom of the parent graphic primitive</li>\n<li>&#39;left&#39; Relative to the left side of the parent graphic primitive</li>\n<li>&#39;right&#39; Relative to the right side of the parent graphic primitive</li>\n<li>&#39;content&#39; Relative to the center of the parent graphic primitive, that is, the content area</li>\n<li>&#39;auto&#39; When the graphic primitive sets the coordinate system, the position relative to the parent graphic primitive is automatically calculated according to the associated <code class=\"codespan\">scale</code></li>\n</ul>\n"},"interval.layout.padding":{"desc":"<p>The inner padding of Child graphic primitive, in px unit, with the default padding of 0 for all directions. Accepts numerical values, numerical arrays, and objects for settings.</p>\n<p>Example of usage:</p>\n<pre><code class=\"lang-ts\">// Numerical type, set the padding to 5\npadding: 5;\n// Numerical array, set the top and bottom padding to 5, and the left and right padding to 10, similar to the CSS box model\npadding: [5, 10];\n// Numerical array, set the padding for all four directions separately\npadding: [\n  5, // Top\n  10, // Right\n  5, // Bottom\n  10 // Left\n];\n// Object type\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"interval.layout.gridTemplateRows":{"desc":"<p>The parent graphic primitive of the grid layout sets the row height</p>\n"},"interval.layout.gridTemplateColumns":{"desc":"<p>The parent graphic primitive of the grid layout sets the column width</p>\n"},"interval.layout.gridRowGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the row spacing</p>\n"},"interval.layout.gridColumnGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the column spacing</p>\n"},"interval.layout.gridRowStart":{"desc":"<p>The child graphic primitive of the grid layout sets the row start position</p>\n"},"interval.layout.gridRowEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the row end position</p>\n"},"interval.layout.gridColumnStart":{"desc":"<p>The child graphic primitive of the grid layout sets the column start position</p>\n"},"interval.layout.gridColumnEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the column end position</p>\n"},"interval.large":{"desc":"<p>Whether to enable large data rendering mode</p>\n"},"interval.largeThreshold":{"desc":"<p>The threshold for enabling large data rendering optimization, corresponding to the length of data</p>\n"},"interval.progressiveStep":{"desc":"<p>The step length for enabling progressive rendering, corresponding to the length of data in each shard</p>\n"},"interval.progressiveThreshold":{"desc":"<p>The threshold for enabling progressive rendering, corresponding to the length of single series data</p>\n"},"interval.morph":{"desc":"<p>Whether to enable global transition morph animations for the current graphic element</p>\n"},"interval.morphKey":{"desc":"<p>Used to match graphic elements for global transition morph animations, graphic elements with the same <code class=\"codespan\">morphKey</code> will undergo morph animations</p>\n"},"interval.morphElementKey":{"desc":"<p>For the matched graphic elements before and after, use this configuration to match the graphic element; if not declared, we will read the <code class=\"codespan\">key</code> configuration by default to match the graphic element for morph animations;\nSupports one-to-one, one-to-many, and many-to-one graphic morph animations by default</p>\n"},"cell":{"desc":"<p><strong> Cell Graphic Element </strong></p>\n"},"cell.type":{"desc":"<p>Set the graphic element type to <code class=\"codespan\">cell</code></p>\n"},"cell.encode":{"desc":"<p>Set the visual channel encoding of the graphics elements, supporting three data change states by default:</p>\n<ul>\n<li><code class=\"codespan\">enter</code> newly added data items</li>\n<li><code class=\"codespan\">update</code> data items have been updated</li>\n<li><code class=\"codespan\">exit</code> data items are deleted</li>\n</ul>\n<p>Note that the data state here is automatically generated based on the <code class=\"codespan\">mark</code>&#39;s <code class=\"codespan\">key</code>. We will calculate the unique identifier for the data bound to the <code class=\"codespan\">mark</code> based on the <code class=\"codespan\">key</code> configuration. After the data is updated, if the corresponding unique identifier no longer exists, the state is <code class=\"codespan\">exit</code>; if it exists, it is <code class=\"codespan\">update</code>. If the previous data does not exist for the unique identifier, the data item&#39;s state is <code class=\"codespan\">enter</code>.</p>\n<p>Supports one interaction state by default:</p>\n<ul>\n<li><code class=\"codespan\">hover</code> when the mouse hovers over a specific shape, set the corresponding visual channel encoding for the shape</li>\n</ul>\n"},"cell.encode.enter":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data initialization state. Note that it will not be executed again when the data is updated.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"cell.encode.enter.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"cell.encode.enter.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"cell.encode.enter.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"cell.encode.enter.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"cell.encode.enter.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"cell.encode.enter.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"cell.encode.enter.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"cell.encode.enter.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"cell.encode.enter.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"cell.encode.enter.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"cell.encode.enter.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"cell.encode.enter.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"cell.encode.enter.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"cell.encode.enter.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"cell.encode.enter.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"cell.encode.enter.outerBorder":{"desc":"<p>Outer border</p>\n"},"cell.encode.enter.innerBorder":{"desc":"<p>Inner border</p>\n"},"cell.encode.enter.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"cell.encode.enter.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"cell.encode.enter.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"cell.encode.enter.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"cell.encode.enter.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"cell.encode.enter.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"cell.encode.enter.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"cell.encode.enter.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"cell.encode.enter.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"cell.encode.enter.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"cell.encode.enter.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"cell.encode.enter.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"cell.encode.enter.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"cell.encode.enter.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"cell.encode.enter.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"cell.encode.enter.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"cell.encode.enter.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"cell.encode.enter.texture":{"desc":"<p>The texture of the graphic</p>\n"},"cell.encode.enter.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"cell.encode.enter.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"cell.encode.enter.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"cell.encode.enter.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"cell.encode.enter.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"cell.encode.update":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data update state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"cell.encode.update.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"cell.encode.update.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"cell.encode.update.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"cell.encode.update.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"cell.encode.update.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"cell.encode.update.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"cell.encode.update.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"cell.encode.update.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"cell.encode.update.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"cell.encode.update.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"cell.encode.update.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"cell.encode.update.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"cell.encode.update.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"cell.encode.update.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"cell.encode.update.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"cell.encode.update.outerBorder":{"desc":"<p>Outer border</p>\n"},"cell.encode.update.innerBorder":{"desc":"<p>Inner border</p>\n"},"cell.encode.update.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"cell.encode.update.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"cell.encode.update.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"cell.encode.update.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"cell.encode.update.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"cell.encode.update.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"cell.encode.update.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"cell.encode.update.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"cell.encode.update.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"cell.encode.update.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"cell.encode.update.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"cell.encode.update.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"cell.encode.update.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"cell.encode.update.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"cell.encode.update.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"cell.encode.update.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"cell.encode.update.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"cell.encode.update.texture":{"desc":"<p>The texture of the graphic</p>\n"},"cell.encode.update.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"cell.encode.update.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"cell.encode.update.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"cell.encode.update.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"cell.encode.update.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"cell.encode.exit":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data deletion state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"cell.encode.exit.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"cell.encode.exit.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"cell.encode.exit.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"cell.encode.exit.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"cell.encode.exit.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"cell.encode.exit.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"cell.encode.exit.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"cell.encode.exit.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"cell.encode.exit.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"cell.encode.exit.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"cell.encode.exit.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"cell.encode.exit.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"cell.encode.exit.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"cell.encode.exit.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"cell.encode.exit.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"cell.encode.exit.outerBorder":{"desc":"<p>Outer border</p>\n"},"cell.encode.exit.innerBorder":{"desc":"<p>Inner border</p>\n"},"cell.encode.exit.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"cell.encode.exit.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"cell.encode.exit.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"cell.encode.exit.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"cell.encode.exit.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"cell.encode.exit.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"cell.encode.exit.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"cell.encode.exit.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"cell.encode.exit.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"cell.encode.exit.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"cell.encode.exit.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"cell.encode.exit.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"cell.encode.exit.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"cell.encode.exit.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"cell.encode.exit.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"cell.encode.exit.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"cell.encode.exit.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"cell.encode.exit.texture":{"desc":"<p>The texture of the graphic</p>\n"},"cell.encode.exit.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"cell.encode.exit.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"cell.encode.exit.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"cell.encode.exit.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"cell.encode.exit.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"cell.encode.hover":{"desc":"<p>Set the visual channel mapping corresponding to the graphics elements when in the <code class=\"codespan\">hover</code> state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"cell.encode.hover.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"cell.encode.hover.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"cell.encode.hover.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"cell.encode.hover.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"cell.encode.hover.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"cell.encode.hover.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"cell.encode.hover.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"cell.encode.hover.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"cell.encode.hover.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"cell.encode.hover.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"cell.encode.hover.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"cell.encode.hover.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"cell.encode.hover.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"cell.encode.hover.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"cell.encode.hover.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"cell.encode.hover.outerBorder":{"desc":"<p>Outer border</p>\n"},"cell.encode.hover.innerBorder":{"desc":"<p>Inner border</p>\n"},"cell.encode.hover.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"cell.encode.hover.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"cell.encode.hover.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"cell.encode.hover.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"cell.encode.hover.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"cell.encode.hover.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"cell.encode.hover.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"cell.encode.hover.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"cell.encode.hover.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"cell.encode.hover.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"cell.encode.hover.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"cell.encode.hover.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"cell.encode.hover.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"cell.encode.hover.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"cell.encode.hover.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"cell.encode.hover.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"cell.encode.hover.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"cell.encode.hover.texture":{"desc":"<p>The texture of the graphic</p>\n"},"cell.encode.hover.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"cell.encode.hover.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"cell.encode.hover.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"cell.encode.hover.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"cell.encode.hover.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"cell.animationState":{"desc":"<p>Type: <code class=\"codespan\">MarkFunctionType</code>\nRequired: No\nanimation attributes</p>\n"},"cell.animation":{"desc":"<p>Supports setting various state corresponding animations, data-driven animation states have three types:</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>Interaction-triggered state changes are configured through a unified interaction animation, with the configuration key being <code class=\"codespan\">state</code></p>\n"},"cell.animation.type":{"desc":"<p>Animation execution type, specifying a specific built-in animation execution effect</p>\n<p>Universal built-in animation types include:</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: Fade in and out animations</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: Scaling animations</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: Move in and out animations</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: Rotation animations</li>\n<li><code class=\"codespan\">update</code>: Update animations</li>\n</ul>\n"},"cell.animation.channel":{"desc":"<p>Visual channels before and after the animation is executed, conflicts with <code class=\"codespan\">type</code> configuration</p>\n"},"cell.animation.custom":{"desc":"<p>Custom animation, if custom animation configuration is set, it will replace the default visual channel interpolation logic</p>\n"},"cell.animation.customParameters":{"desc":"<p>Custom animation parameters</p>\n"},"cell.animation.easing":{"desc":"<p>Animation easing, default is <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"cell.animation.delay":{"desc":"<p>Animation execution delay time, default is 0</p>\n"},"cell.animation.duration":{"desc":"<p>Animation execution duration, default is 1000ms</p>\n"},"cell.animation.oneByOne":{"desc":"<p>Animation execution delay time in sequence. If set to <code class=\"codespan\">true</code>, the next element&#39;s animation will be executed after the previous element&#39;s animation is completed. The default is <code class=\"codespan\">false</code>.</p>\n"},"cell.animation.startTime":{"desc":"<p>Initial time of animation execution, which will not be repeatedly applied in loop animation, default is 0</p>\n"},"cell.animation.totalTime":{"desc":"<p>Maximum time of animation execution, the animation will be terminated if it reaches the set time</p>\n"},"cell.animation.loop":{"desc":"<p>Number of animation loops, if set to <code class=\"codespan\">true</code>, it will loop infinitely</p>\n"},"cell.animation.options":{"desc":"<p>Additional parameters set for specific animation types execution</p>\n"},"cell.animation.controlOptions":{"desc":"<p>Control parameters for animation execution logic:</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: Whether to immediately terminate its animation when the animation state changes</li>\n<li><code class=\"codespan\">immediatelyApply</code>: Whether to immediately apply the initial visual channel of the animation</li>\n</ul>\n"},"cell.zIndex":{"desc":"<p>Set the zIndex of the container shape (group) corresponding to the <code class=\"codespan\">mark</code> graphic primitive</p>\n"},"cell.interactive":{"desc":"<p>Type: <code class=\"codespan\">boolean</code>\nRequired: No</p>\n"},"cell.context":{"desc":"<p>Set the context parameters of the graphic primitive</p>\n"},"cell.setCustomizedShape":{"desc":"<p>Set the callback function of custom shape. The corresponding ts type is as follows:</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>Where <code class=\"codespan\">ICustomPath2D</code> is a utility class provided by VRender for drawing custom paths.</p>\n"},"cell.support3d":{"desc":"<p>Whether to support 3d mode when the canvas is set to 3d view.</p>\n"},"cell.group":{"desc":"<p>Set the parent graphic primitive. Supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> The id of the corresponding parent graphic primitive</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> The corresponding grammar element of the parent graphic primitive, generally used in API call scenarios.</li>\n</ul>\n<p>If not set, it will be attached to the root node of the canvas by default.</p>\n"},"cell.from":{"desc":"<p>ts type definition is:</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>Declare the data on which the graphic primitive depends through the <code class=\"codespan\">data</code> attribute.</p>\n"},"cell.key":{"desc":"<p>Set the unique identifier for the graphic primitive data element, which is used to calculate the data state of the graphic element. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the <code class=\"codespan\">key</code></li>\n</ul>\n"},"cell.sort":{"desc":"<p>Sort all graphic elements in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"cell.groupBy":{"desc":"<p>Set the grouping attribute, the corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the grouping <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the grouping <code class=\"codespan\">key</code></li>\n</ul>\n"},"cell.groupSort":{"desc":"<p>Sort the groups in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"cell.coordinate":{"desc":"<p>Set the id or graphic element corresponding to the associated coordinate system of this graphic primitive</p>\n"},"cell.state":{"desc":"<p>Set the state values ​​of all graphical elements of the current graphic primitive, supporting three formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the state of the graphic, for example, <code class=\"codespan\">{ state: &#39;selected&#39;}</code> sets the state of all graphics to <code class=\"codespan\">&#39;selected&#39;</code>, usually in this case, the <code class=\"codespan\">encode</code> also sets the graphic channel mapping corresponding to the <code class=\"codespan\">&#39;selected&#39;</code> state</li>\n<li><code class=\"codespan\">string[]</code> Set multiple states for the graphic, you can configure <code class=\"codespan\">stateSort</code> to influence the order of executing the graphic channel mapping corresponding to the state</li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the state value, and the return parameter is <code class=\"codespan\">string | string[]</code>, the corresponding ts type definition is:</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"cell.stateSort":{"desc":"<p>Set the sorting function of the state values ​​of all graphics elements of the current graphic primitive, which will affect the order of the graphic channel mapping corresponding to the state. The result of the graphic channel mapping executed earlier may be covered by subsequent states. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"cell.transform":{"desc":"<p>Set the corresponding transformation of the graphic primitive. All data transformations can be configured on the graphic primitive and are used for the <code class=\"codespan\">join data</code> execution transformation;\nAnother type of transformation is the transformation executed by graphical elements, such as <code class=\"codespan\">dodge</code>;\nThe general type definition is as follows:</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>The parameters supported by each transformation are different</p>\n"},"cell.layout":{"desc":"<p>Set the layout parameters of the graphic primitive. There are two roles when the graphic primitive participates in the layout:</p>\n<ul>\n<li>&#39;container&#39; Container graphic primitive, usually <code class=\"codespan\">group</code> graphic primitive</li>\n<li>&#39;item&#39; layout child element, as a child node of the container graphic primitive</li>\n</ul>\n<p>Please note that we only support one layer of layout. If it is a multi-layer nested layout, it is recommended to use a custom layout scheme for implementation;</p>\n<p>Now support two content layouts: <code class=\"codespan\">grid</code> layout and <code class=\"codespan\">relative</code> layout, the related type definition is as follows</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>If you want to set a custom layout scheme, <code class=\"codespan\">layout</code> also supports setting callback functions directly. The definition of the callback function is as follows:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"cell.layout.display":{"desc":"<p>The container graphic primitive sets the layout type and supports two configurations:</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> Relative layout</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> Grid layout</li>\n</ul>\n"},"cell.layout.callback":{"desc":"<p>Customize the callback function for this graphic primitive, the ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"cell.layout.skipBeforeLayouted":{"desc":"<p>Skip the execution stage before the layout is completed</p>\n"},"cell.layout.updateViewSignals":{"desc":"<p>Whether to update the default view signals, that is: <code class=\"codespan\">padding</code>, <code class=\"codespan\">viewWidth</code> and <code class=\"codespan\">viewHeight</code></p>\n<p>This property can only be set on a container graphic primitive with <code class=\"codespan\">&#39;relative&#39;</code> layout.</p>\n"},"cell.layout.maxChildWidth":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum width of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the width of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"cell.layout.maxChildHeight":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum height of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the height of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"cell.layout.position":{"desc":"<p>Set the position of the child graphic primitive of the relative layout. The supported settings are:</p>\n<ul>\n<li>&#39;top&#39; Relative to the top of the parent graphic primitive</li>\n<li>&#39;bottom&#39; Relative to the bottom of the parent graphic primitive</li>\n<li>&#39;left&#39; Relative to the left side of the parent graphic primitive</li>\n<li>&#39;right&#39; Relative to the right side of the parent graphic primitive</li>\n<li>&#39;content&#39; Relative to the center of the parent graphic primitive, that is, the content area</li>\n<li>&#39;auto&#39; When the graphic primitive sets the coordinate system, the position relative to the parent graphic primitive is automatically calculated according to the associated <code class=\"codespan\">scale</code></li>\n</ul>\n"},"cell.layout.padding":{"desc":"<p>The inner padding of Child graphic primitive, in px unit, with the default padding of 0 for all directions. Accepts numerical values, numerical arrays, and objects for settings.</p>\n<p>Example of usage:</p>\n<pre><code class=\"lang-ts\">// Numerical type, set the padding to 5\npadding: 5;\n// Numerical array, set the top and bottom padding to 5, and the left and right padding to 10, similar to the CSS box model\npadding: [5, 10];\n// Numerical array, set the padding for all four directions separately\npadding: [\n  5, // Top\n  10, // Right\n  5, // Bottom\n  10 // Left\n];\n// Object type\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"cell.layout.gridTemplateRows":{"desc":"<p>The parent graphic primitive of the grid layout sets the row height</p>\n"},"cell.layout.gridTemplateColumns":{"desc":"<p>The parent graphic primitive of the grid layout sets the column width</p>\n"},"cell.layout.gridRowGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the row spacing</p>\n"},"cell.layout.gridColumnGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the column spacing</p>\n"},"cell.layout.gridRowStart":{"desc":"<p>The child graphic primitive of the grid layout sets the row start position</p>\n"},"cell.layout.gridRowEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the row end position</p>\n"},"cell.layout.gridColumnStart":{"desc":"<p>The child graphic primitive of the grid layout sets the column start position</p>\n"},"cell.layout.gridColumnEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the column end position</p>\n"},"cell.large":{"desc":"<p>Whether to enable large data rendering mode</p>\n"},"cell.largeThreshold":{"desc":"<p>The threshold for enabling large data rendering optimization, corresponding to the length of data</p>\n"},"cell.progressiveStep":{"desc":"<p>The step length for enabling progressive rendering, corresponding to the length of data in each shard</p>\n"},"cell.progressiveThreshold":{"desc":"<p>The threshold for enabling progressive rendering, corresponding to the length of single series data</p>\n"},"cell.morph":{"desc":"<p>Whether to enable global transition morph animations for the current graphic element</p>\n"},"cell.morphKey":{"desc":"<p>Used to match graphic elements for global transition morph animations, graphic elements with the same <code class=\"codespan\">morphKey</code> will undergo morph animations</p>\n"},"cell.morphElementKey":{"desc":"<p>For the matched graphic elements before and after, use this configuration to match the graphic element; if not declared, we will read the <code class=\"codespan\">key</code> configuration by default to match the graphic element for morph animations;\nSupports one-to-one, one-to-many, and many-to-one graphic morph animations by default</p>\n"},"group":{"desc":"<p><strong> group Mark </strong></p>\n"},"group.type":{"desc":"<p>Set the mark type to <code class=\"codespan\">group</code></p>\n"},"group.clip":{"desc":"<p>Whether the <code class=\"codespan\">group</code> mark clips its child marks</p>\n"},"group.encode":{"desc":"<p>Set the visual channel encoding of the graphics elements, supporting three data change states by default:</p>\n<ul>\n<li><code class=\"codespan\">enter</code> newly added data items</li>\n<li><code class=\"codespan\">update</code> data items have been updated</li>\n<li><code class=\"codespan\">exit</code> data items are deleted</li>\n</ul>\n<p>Note that the data state here is automatically generated based on the <code class=\"codespan\">mark</code>&#39;s <code class=\"codespan\">key</code>. We will calculate the unique identifier for the data bound to the <code class=\"codespan\">mark</code> based on the <code class=\"codespan\">key</code> configuration. After the data is updated, if the corresponding unique identifier no longer exists, the state is <code class=\"codespan\">exit</code>; if it exists, it is <code class=\"codespan\">update</code>. If the previous data does not exist for the unique identifier, the data item&#39;s state is <code class=\"codespan\">enter</code>.</p>\n<p>Supports one interaction state by default:</p>\n<ul>\n<li><code class=\"codespan\">hover</code> when the mouse hovers over a specific shape, set the corresponding visual channel encoding for the shape</li>\n</ul>\n"},"group.encode.enter":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data initialization state. Note that it will not be executed again when the data is updated.</p>\n"},"group.encode.enter.width":{"desc":"<p>The width of the shape</p>\n"},"group.encode.enter.height":{"desc":"<p>The height of the shape</p>\n"},"group.encode.enter.borderRadius":{"desc":"<p>Set the border radius, default is 0, support two types of setting:</p>\n<ul>\n<li><code class=\"codespan\">number</code>: Set the same border radius for all four corners</li>\n<li><code class=\"codespan\">number[]</code>: Set different border radius for each corner<ul>\n<li>When the array length is <code class=\"codespan\">1</code>, set the same border radius for all four corners</li>\n<li>When the array length is <code class=\"codespan\">2</code> or <code class=\"codespan\">3</code>, set border radius of <strong>top-left</strong> and <strong>bottom-right</strong> corners to <code class=\"codespan\">borderRadius[0]</code>, and border radius of <strong>top-right</strong> and <strong>bottom-left</strong> corners to <code class=\"codespan\">borderRadius[1]</code></li>\n<li>When the array length is <code class=\"codespan\">4</code> or more, set different border radius for each corner</li>\n</ul>\n</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"group.encode.enter.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"group.encode.enter.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"group.encode.enter.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"group.encode.enter.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"group.encode.enter.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"group.encode.enter.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"group.encode.enter.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"group.encode.enter.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"group.encode.enter.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"group.encode.enter.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"group.encode.enter.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"group.encode.enter.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"group.encode.enter.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"group.encode.enter.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"group.encode.enter.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"group.encode.enter.outerBorder":{"desc":"<p>Outer border</p>\n"},"group.encode.enter.innerBorder":{"desc":"<p>Inner border</p>\n"},"group.encode.enter.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"group.encode.enter.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"group.encode.enter.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"group.encode.enter.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"group.encode.enter.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"group.encode.enter.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"group.encode.enter.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"group.encode.enter.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"group.encode.enter.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"group.encode.enter.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"group.encode.enter.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"group.encode.enter.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"group.encode.enter.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"group.encode.enter.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"group.encode.enter.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"group.encode.enter.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"group.encode.enter.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"group.encode.enter.texture":{"desc":"<p>The texture of the graphic</p>\n"},"group.encode.enter.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"group.encode.enter.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"group.encode.enter.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"group.encode.enter.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"group.encode.enter.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"group.encode.update":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data update state.</p>\n"},"group.encode.update.width":{"desc":"<p>The width of the shape</p>\n"},"group.encode.update.height":{"desc":"<p>The height of the shape</p>\n"},"group.encode.update.borderRadius":{"desc":"<p>Set the border radius, default is 0, support two types of setting:</p>\n<ul>\n<li><code class=\"codespan\">number</code>: Set the same border radius for all four corners</li>\n<li><code class=\"codespan\">number[]</code>: Set different border radius for each corner<ul>\n<li>When the array length is <code class=\"codespan\">1</code>, set the same border radius for all four corners</li>\n<li>When the array length is <code class=\"codespan\">2</code> or <code class=\"codespan\">3</code>, set border radius of <strong>top-left</strong> and <strong>bottom-right</strong> corners to <code class=\"codespan\">borderRadius[0]</code>, and border radius of <strong>top-right</strong> and <strong>bottom-left</strong> corners to <code class=\"codespan\">borderRadius[1]</code></li>\n<li>When the array length is <code class=\"codespan\">4</code> or more, set different border radius for each corner</li>\n</ul>\n</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"group.encode.update.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"group.encode.update.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"group.encode.update.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"group.encode.update.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"group.encode.update.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"group.encode.update.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"group.encode.update.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"group.encode.update.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"group.encode.update.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"group.encode.update.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"group.encode.update.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"group.encode.update.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"group.encode.update.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"group.encode.update.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"group.encode.update.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"group.encode.update.outerBorder":{"desc":"<p>Outer border</p>\n"},"group.encode.update.innerBorder":{"desc":"<p>Inner border</p>\n"},"group.encode.update.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"group.encode.update.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"group.encode.update.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"group.encode.update.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"group.encode.update.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"group.encode.update.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"group.encode.update.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"group.encode.update.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"group.encode.update.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"group.encode.update.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"group.encode.update.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"group.encode.update.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"group.encode.update.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"group.encode.update.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"group.encode.update.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"group.encode.update.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"group.encode.update.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"group.encode.update.texture":{"desc":"<p>The texture of the graphic</p>\n"},"group.encode.update.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"group.encode.update.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"group.encode.update.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"group.encode.update.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"group.encode.update.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"group.encode.exit":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data deletion state.</p>\n"},"group.encode.exit.width":{"desc":"<p>The width of the shape</p>\n"},"group.encode.exit.height":{"desc":"<p>The height of the shape</p>\n"},"group.encode.exit.borderRadius":{"desc":"<p>Set the border radius, default is 0, support two types of setting:</p>\n<ul>\n<li><code class=\"codespan\">number</code>: Set the same border radius for all four corners</li>\n<li><code class=\"codespan\">number[]</code>: Set different border radius for each corner<ul>\n<li>When the array length is <code class=\"codespan\">1</code>, set the same border radius for all four corners</li>\n<li>When the array length is <code class=\"codespan\">2</code> or <code class=\"codespan\">3</code>, set border radius of <strong>top-left</strong> and <strong>bottom-right</strong> corners to <code class=\"codespan\">borderRadius[0]</code>, and border radius of <strong>top-right</strong> and <strong>bottom-left</strong> corners to <code class=\"codespan\">borderRadius[1]</code></li>\n<li>When the array length is <code class=\"codespan\">4</code> or more, set different border radius for each corner</li>\n</ul>\n</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"group.encode.exit.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"group.encode.exit.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"group.encode.exit.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"group.encode.exit.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"group.encode.exit.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"group.encode.exit.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"group.encode.exit.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"group.encode.exit.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"group.encode.exit.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"group.encode.exit.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"group.encode.exit.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"group.encode.exit.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"group.encode.exit.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"group.encode.exit.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"group.encode.exit.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"group.encode.exit.outerBorder":{"desc":"<p>Outer border</p>\n"},"group.encode.exit.innerBorder":{"desc":"<p>Inner border</p>\n"},"group.encode.exit.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"group.encode.exit.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"group.encode.exit.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"group.encode.exit.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"group.encode.exit.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"group.encode.exit.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"group.encode.exit.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"group.encode.exit.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"group.encode.exit.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"group.encode.exit.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"group.encode.exit.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"group.encode.exit.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"group.encode.exit.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"group.encode.exit.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"group.encode.exit.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"group.encode.exit.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"group.encode.exit.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"group.encode.exit.texture":{"desc":"<p>The texture of the graphic</p>\n"},"group.encode.exit.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"group.encode.exit.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"group.encode.exit.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"group.encode.exit.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"group.encode.exit.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"group.encode.hover":{"desc":"<p>Set the visual channel mapping corresponding to the graphics elements when in the <code class=\"codespan\">hover</code> state.</p>\n"},"group.encode.hover.width":{"desc":"<p>The width of the shape</p>\n"},"group.encode.hover.height":{"desc":"<p>The height of the shape</p>\n"},"group.encode.hover.borderRadius":{"desc":"<p>Set the border radius, default is 0, support two types of setting:</p>\n<ul>\n<li><code class=\"codespan\">number</code>: Set the same border radius for all four corners</li>\n<li><code class=\"codespan\">number[]</code>: Set different border radius for each corner<ul>\n<li>When the array length is <code class=\"codespan\">1</code>, set the same border radius for all four corners</li>\n<li>When the array length is <code class=\"codespan\">2</code> or <code class=\"codespan\">3</code>, set border radius of <strong>top-left</strong> and <strong>bottom-right</strong> corners to <code class=\"codespan\">borderRadius[0]</code>, and border radius of <strong>top-right</strong> and <strong>bottom-left</strong> corners to <code class=\"codespan\">borderRadius[1]</code></li>\n<li>When the array length is <code class=\"codespan\">4</code> or more, set different border radius for each corner</li>\n</ul>\n</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"group.encode.hover.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"group.encode.hover.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"group.encode.hover.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"group.encode.hover.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"group.encode.hover.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"group.encode.hover.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"group.encode.hover.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"group.encode.hover.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"group.encode.hover.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"group.encode.hover.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"group.encode.hover.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"group.encode.hover.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"group.encode.hover.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"group.encode.hover.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"group.encode.hover.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"group.encode.hover.outerBorder":{"desc":"<p>Outer border</p>\n"},"group.encode.hover.innerBorder":{"desc":"<p>Inner border</p>\n"},"group.encode.hover.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"group.encode.hover.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"group.encode.hover.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"group.encode.hover.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"group.encode.hover.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"group.encode.hover.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"group.encode.hover.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"group.encode.hover.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"group.encode.hover.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"group.encode.hover.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"group.encode.hover.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"group.encode.hover.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"group.encode.hover.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"group.encode.hover.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"group.encode.hover.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"group.encode.hover.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"group.encode.hover.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"group.encode.hover.texture":{"desc":"<p>The texture of the graphic</p>\n"},"group.encode.hover.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"group.encode.hover.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"group.encode.hover.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"group.encode.hover.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"group.encode.hover.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"group.animationState":{"desc":"<p>Type: <code class=\"codespan\">MarkFunctionType</code>\nRequired: No\nanimation attributes</p>\n"},"group.animation":{"desc":"<p>Supports setting various state corresponding animations, data-driven animation states have three types:</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>Interaction-triggered state changes are configured through a unified interaction animation, with the configuration key being <code class=\"codespan\">state</code></p>\n"},"group.animation.type":{"desc":"<p>Animation execution type, specifying a specific built-in animation execution effect</p>\n<p>Universal built-in animation types include:</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: Fade in and out animations</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: Scaling animations</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: Move in and out animations</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: Rotation animations</li>\n<li><code class=\"codespan\">update</code>: Update animations</li>\n</ul>\n"},"group.animation.channel":{"desc":"<p>Visual channels before and after the animation is executed, conflicts with <code class=\"codespan\">type</code> configuration</p>\n"},"group.animation.custom":{"desc":"<p>Custom animation, if custom animation configuration is set, it will replace the default visual channel interpolation logic</p>\n"},"group.animation.customParameters":{"desc":"<p>Custom animation parameters</p>\n"},"group.animation.easing":{"desc":"<p>Animation easing, default is <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"group.animation.delay":{"desc":"<p>Animation execution delay time, default is 0</p>\n"},"group.animation.duration":{"desc":"<p>Animation execution duration, default is 1000ms</p>\n"},"group.animation.oneByOne":{"desc":"<p>Animation execution delay time in sequence. If set to <code class=\"codespan\">true</code>, the next element&#39;s animation will be executed after the previous element&#39;s animation is completed. The default is <code class=\"codespan\">false</code>.</p>\n"},"group.animation.startTime":{"desc":"<p>Initial time of animation execution, which will not be repeatedly applied in loop animation, default is 0</p>\n"},"group.animation.totalTime":{"desc":"<p>Maximum time of animation execution, the animation will be terminated if it reaches the set time</p>\n"},"group.animation.loop":{"desc":"<p>Number of animation loops, if set to <code class=\"codespan\">true</code>, it will loop infinitely</p>\n"},"group.animation.options":{"desc":"<p>Additional parameters set for specific animation types execution</p>\n"},"group.animation.controlOptions":{"desc":"<p>Control parameters for animation execution logic:</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: Whether to immediately terminate its animation when the animation state changes</li>\n<li><code class=\"codespan\">immediatelyApply</code>: Whether to immediately apply the initial visual channel of the animation</li>\n</ul>\n"},"group.zIndex":{"desc":"<p>Set the zIndex of the container shape (group) corresponding to the <code class=\"codespan\">mark</code> graphic primitive</p>\n"},"group.interactive":{"desc":"<p>Type: <code class=\"codespan\">boolean</code>\nRequired: No</p>\n"},"group.context":{"desc":"<p>Set the context parameters of the graphic primitive</p>\n"},"group.setCustomizedShape":{"desc":"<p>Set the callback function of custom shape. The corresponding ts type is as follows:</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>Where <code class=\"codespan\">ICustomPath2D</code> is a utility class provided by VRender for drawing custom paths.</p>\n"},"group.support3d":{"desc":"<p>Whether to support 3d mode when the canvas is set to 3d view.</p>\n"},"group.group":{"desc":"<p>Set the parent graphic primitive. Supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> The id of the corresponding parent graphic primitive</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> The corresponding grammar element of the parent graphic primitive, generally used in API call scenarios.</li>\n</ul>\n<p>If not set, it will be attached to the root node of the canvas by default.</p>\n"},"group.from":{"desc":"<p>ts type definition is:</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>Declare the data on which the graphic primitive depends through the <code class=\"codespan\">data</code> attribute.</p>\n"},"group.key":{"desc":"<p>Set the unique identifier for the graphic primitive data element, which is used to calculate the data state of the graphic element. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the <code class=\"codespan\">key</code></li>\n</ul>\n"},"group.sort":{"desc":"<p>Sort all graphic elements in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"group.groupBy":{"desc":"<p>Set the grouping attribute, the corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the grouping <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the grouping <code class=\"codespan\">key</code></li>\n</ul>\n"},"group.groupSort":{"desc":"<p>Sort the groups in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"group.coordinate":{"desc":"<p>Set the id or graphic element corresponding to the associated coordinate system of this graphic primitive</p>\n"},"group.state":{"desc":"<p>Set the state values ​​of all graphical elements of the current graphic primitive, supporting three formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the state of the graphic, for example, <code class=\"codespan\">{ state: &#39;selected&#39;}</code> sets the state of all graphics to <code class=\"codespan\">&#39;selected&#39;</code>, usually in this case, the <code class=\"codespan\">encode</code> also sets the graphic channel mapping corresponding to the <code class=\"codespan\">&#39;selected&#39;</code> state</li>\n<li><code class=\"codespan\">string[]</code> Set multiple states for the graphic, you can configure <code class=\"codespan\">stateSort</code> to influence the order of executing the graphic channel mapping corresponding to the state</li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the state value, and the return parameter is <code class=\"codespan\">string | string[]</code>, the corresponding ts type definition is:</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"group.stateSort":{"desc":"<p>Set the sorting function of the state values ​​of all graphics elements of the current graphic primitive, which will affect the order of the graphic channel mapping corresponding to the state. The result of the graphic channel mapping executed earlier may be covered by subsequent states. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"group.transform":{"desc":"<p>Set the corresponding transformation of the graphic primitive. All data transformations can be configured on the graphic primitive and are used for the <code class=\"codespan\">join data</code> execution transformation;\nAnother type of transformation is the transformation executed by graphical elements, such as <code class=\"codespan\">dodge</code>;\nThe general type definition is as follows:</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>The parameters supported by each transformation are different</p>\n"},"group.layout":{"desc":"<p>Set the layout parameters of the graphic primitive. There are two roles when the graphic primitive participates in the layout:</p>\n<ul>\n<li>&#39;container&#39; Container graphic primitive, usually <code class=\"codespan\">group</code> graphic primitive</li>\n<li>&#39;item&#39; layout child element, as a child node of the container graphic primitive</li>\n</ul>\n<p>Please note that we only support one layer of layout. If it is a multi-layer nested layout, it is recommended to use a custom layout scheme for implementation;</p>\n<p>Now support two content layouts: <code class=\"codespan\">grid</code> layout and <code class=\"codespan\">relative</code> layout, the related type definition is as follows</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>If you want to set a custom layout scheme, <code class=\"codespan\">layout</code> also supports setting callback functions directly. The definition of the callback function is as follows:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"group.layout.display":{"desc":"<p>The container graphic primitive sets the layout type and supports two configurations:</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> Relative layout</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> Grid layout</li>\n</ul>\n"},"group.layout.callback":{"desc":"<p>Customize the callback function for this graphic primitive, the ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"group.layout.skipBeforeLayouted":{"desc":"<p>Skip the execution stage before the layout is completed</p>\n"},"group.layout.updateViewSignals":{"desc":"<p>Whether to update the default view signals, that is: <code class=\"codespan\">padding</code>, <code class=\"codespan\">viewWidth</code> and <code class=\"codespan\">viewHeight</code></p>\n<p>This property can only be set on a container graphic primitive with <code class=\"codespan\">&#39;relative&#39;</code> layout.</p>\n"},"group.layout.maxChildWidth":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum width of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the width of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"group.layout.maxChildHeight":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum height of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the height of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"group.layout.position":{"desc":"<p>Set the position of the child graphic primitive of the relative layout. The supported settings are:</p>\n<ul>\n<li>&#39;top&#39; Relative to the top of the parent graphic primitive</li>\n<li>&#39;bottom&#39; Relative to the bottom of the parent graphic primitive</li>\n<li>&#39;left&#39; Relative to the left side of the parent graphic primitive</li>\n<li>&#39;right&#39; Relative to the right side of the parent graphic primitive</li>\n<li>&#39;content&#39; Relative to the center of the parent graphic primitive, that is, the content area</li>\n<li>&#39;auto&#39; When the graphic primitive sets the coordinate system, the position relative to the parent graphic primitive is automatically calculated according to the associated <code class=\"codespan\">scale</code></li>\n</ul>\n"},"group.layout.padding":{"desc":"<p>The inner padding of Child graphic primitive, in px unit, with the default padding of 0 for all directions. Accepts numerical values, numerical arrays, and objects for settings.</p>\n<p>Example of usage:</p>\n<pre><code class=\"lang-ts\">// Numerical type, set the padding to 5\npadding: 5;\n// Numerical array, set the top and bottom padding to 5, and the left and right padding to 10, similar to the CSS box model\npadding: [5, 10];\n// Numerical array, set the padding for all four directions separately\npadding: [\n  5, // Top\n  10, // Right\n  5, // Bottom\n  10 // Left\n];\n// Object type\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"group.layout.gridTemplateRows":{"desc":"<p>The parent graphic primitive of the grid layout sets the row height</p>\n"},"group.layout.gridTemplateColumns":{"desc":"<p>The parent graphic primitive of the grid layout sets the column width</p>\n"},"group.layout.gridRowGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the row spacing</p>\n"},"group.layout.gridColumnGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the column spacing</p>\n"},"group.layout.gridRowStart":{"desc":"<p>The child graphic primitive of the grid layout sets the row start position</p>\n"},"group.layout.gridRowEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the row end position</p>\n"},"group.layout.gridColumnStart":{"desc":"<p>The child graphic primitive of the grid layout sets the column start position</p>\n"},"group.layout.gridColumnEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the column end position</p>\n"},"group.large":{"desc":"<p>Whether to enable large data rendering mode</p>\n"},"group.largeThreshold":{"desc":"<p>The threshold for enabling large data rendering optimization, corresponding to the length of data</p>\n"},"group.progressiveStep":{"desc":"<p>The step length for enabling progressive rendering, corresponding to the length of data in each shard</p>\n"},"group.progressiveThreshold":{"desc":"<p>The threshold for enabling progressive rendering, corresponding to the length of single series data</p>\n"},"group.morph":{"desc":"<p>Whether to enable global transition morph animations for the current graphic element</p>\n"},"group.morphKey":{"desc":"<p>Used to match graphic elements for global transition morph animations, graphic elements with the same <code class=\"codespan\">morphKey</code> will undergo morph animations</p>\n"},"group.morphElementKey":{"desc":"<p>For the matched graphic elements before and after, use this configuration to match the graphic element; if not declared, we will read the <code class=\"codespan\">key</code> configuration by default to match the graphic element for morph animations;\nSupports one-to-one, one-to-many, and many-to-one graphic morph animations by default</p>\n"},"glyph":{"desc":"<p><strong> glyph Chart Element </strong></p>\n"},"glyph.type":{"desc":"<p>Set the chart element type to <code class=\"codespan\">glyph</code></p>\n"},"glyph.glyphType":{"desc":"<p>Set the glyph type, supporting built-in glyph types, as well as custom registered glyph types</p>\n"},"glyph.glyphType.barBoxplot":{"desc":"<p>Execute <code class=\"codespan\">registerBarBoxplotGlyph()</code> to register the barBoxplot glyph before using the boxplot glyph</p>\n"},"glyph.glyphType.barBoxplot.glyphType":{"desc":"<p>Set the glyph type to <code class=\"codespan\">barBoxplot</code></p>\n"},"glyph.glyphType.barBoxplot.glyphConfig":{"desc":"<p>Supported glyph configurations include:</p>\n<ul>\n<li><code class=\"codespan\">direction</code>(&#39;vertical&#39;|&#39;horizontal&#39;): The direction of the barBoxplot glyph, default is <code class=\"codespan\">&#39;vertical&#39;</code></li>\n</ul>\n"},"glyph.glyphType.barBoxplot.animation":{"desc":"<p>Supported built-in animation types include:</p>\n<ul>\n<li><code class=\"codespan\">barBoxplotScaleIn</code>/<code class=\"codespan\">barBoxplotScaleOut</code>: Animation of the barBoxplot glyph growing along the median line</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.encode":{"desc":"<p>Set the visual channel encoding of the graphics elements, supporting three data change states by default:</p>\n<ul>\n<li><code class=\"codespan\">enter</code> newly added data items</li>\n<li><code class=\"codespan\">update</code> data items have been updated</li>\n<li><code class=\"codespan\">exit</code> data items are deleted</li>\n</ul>\n<p>Note that the data state here is automatically generated based on the <code class=\"codespan\">mark</code>&#39;s <code class=\"codespan\">key</code>. We will calculate the unique identifier for the data bound to the <code class=\"codespan\">mark</code> based on the <code class=\"codespan\">key</code> configuration. After the data is updated, if the corresponding unique identifier no longer exists, the state is <code class=\"codespan\">exit</code>; if it exists, it is <code class=\"codespan\">update</code>. If the previous data does not exist for the unique identifier, the data item&#39;s state is <code class=\"codespan\">enter</code>.</p>\n<p>Supports one interaction state by default:</p>\n<ul>\n<li><code class=\"codespan\">hover</code> when the mouse hovers over a specific shape, set the corresponding visual channel encoding for the shape</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.encode.enter":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data initialization state. Note that it will not be executed again when the data is updated.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.barBoxplot.encode.enter.max":{"desc":"<p>Max value coordinate of the element</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.min":{"desc":"<p>Min value coordinate of the element</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.q1":{"desc":"<p>1/4 value coordinate of the element</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.q3":{"desc":"<p>3/4 value coordinate of the element</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.median":{"desc":"<p>Median value coordinate of the element</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.minMaxFillOpacity":{"desc":"<p>Fill opacity of the min and max value bars</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.minMaxWidth":{"desc":"<p>Width of the min and max value bars</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.minMaxHeight":{"desc":"<p>Height of the min and max value bars</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.q1q3Width":{"desc":"<p>Width of the q1q3 value bars</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.q1q3Height":{"desc":"<p>Height of the q1q3 value bars</p>\n<!-- base channels -->\n"},"glyph.glyphType.barBoxplot.encode.enter.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.barBoxplot.encode.enter.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.barBoxplot.encode.enter.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.encode.enter.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.encode.enter.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.outerBorder":{"desc":"<p>Outer border</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.innerBorder":{"desc":"<p>Inner border</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.barBoxplot.encode.enter.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.encode.enter.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.texture":{"desc":"<p>The texture of the graphic</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"glyph.glyphType.barBoxplot.encode.enter.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.encode.update":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data update state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.barBoxplot.encode.update.max":{"desc":"<p>Max value coordinate of the element</p>\n"},"glyph.glyphType.barBoxplot.encode.update.min":{"desc":"<p>Min value coordinate of the element</p>\n"},"glyph.glyphType.barBoxplot.encode.update.q1":{"desc":"<p>1/4 value coordinate of the element</p>\n"},"glyph.glyphType.barBoxplot.encode.update.q3":{"desc":"<p>3/4 value coordinate of the element</p>\n"},"glyph.glyphType.barBoxplot.encode.update.median":{"desc":"<p>Median value coordinate of the element</p>\n"},"glyph.glyphType.barBoxplot.encode.update.minMaxFillOpacity":{"desc":"<p>Fill opacity of the min and max value bars</p>\n"},"glyph.glyphType.barBoxplot.encode.update.minMaxWidth":{"desc":"<p>Width of the min and max value bars</p>\n"},"glyph.glyphType.barBoxplot.encode.update.minMaxHeight":{"desc":"<p>Height of the min and max value bars</p>\n"},"glyph.glyphType.barBoxplot.encode.update.q1q3Width":{"desc":"<p>Width of the q1q3 value bars</p>\n"},"glyph.glyphType.barBoxplot.encode.update.q1q3Height":{"desc":"<p>Height of the q1q3 value bars</p>\n<!-- base channels -->\n"},"glyph.glyphType.barBoxplot.encode.update.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"glyph.glyphType.barBoxplot.encode.update.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"glyph.glyphType.barBoxplot.encode.update.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"glyph.glyphType.barBoxplot.encode.update.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"glyph.glyphType.barBoxplot.encode.update.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.barBoxplot.encode.update.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"glyph.glyphType.barBoxplot.encode.update.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.barBoxplot.encode.update.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.barBoxplot.encode.update.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.barBoxplot.encode.update.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.barBoxplot.encode.update.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"glyph.glyphType.barBoxplot.encode.update.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.encode.update.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.encode.update.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"glyph.glyphType.barBoxplot.encode.update.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"glyph.glyphType.barBoxplot.encode.update.outerBorder":{"desc":"<p>Outer border</p>\n"},"glyph.glyphType.barBoxplot.encode.update.innerBorder":{"desc":"<p>Inner border</p>\n"},"glyph.glyphType.barBoxplot.encode.update.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"glyph.glyphType.barBoxplot.encode.update.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.barBoxplot.encode.update.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"glyph.glyphType.barBoxplot.encode.update.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"glyph.glyphType.barBoxplot.encode.update.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"glyph.glyphType.barBoxplot.encode.update.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"glyph.glyphType.barBoxplot.encode.update.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"glyph.glyphType.barBoxplot.encode.update.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"glyph.glyphType.barBoxplot.encode.update.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"glyph.glyphType.barBoxplot.encode.update.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.barBoxplot.encode.update.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.barBoxplot.encode.update.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.barBoxplot.encode.update.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"glyph.glyphType.barBoxplot.encode.update.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"glyph.glyphType.barBoxplot.encode.update.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"glyph.glyphType.barBoxplot.encode.update.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.encode.update.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"glyph.glyphType.barBoxplot.encode.update.texture":{"desc":"<p>The texture of the graphic</p>\n"},"glyph.glyphType.barBoxplot.encode.update.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"glyph.glyphType.barBoxplot.encode.update.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"glyph.glyphType.barBoxplot.encode.update.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"glyph.glyphType.barBoxplot.encode.update.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"glyph.glyphType.barBoxplot.encode.update.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.encode.exit":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data deletion state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.barBoxplot.encode.exit.max":{"desc":"<p>Max value coordinate of the element</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.min":{"desc":"<p>Min value coordinate of the element</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.q1":{"desc":"<p>1/4 value coordinate of the element</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.q3":{"desc":"<p>3/4 value coordinate of the element</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.median":{"desc":"<p>Median value coordinate of the element</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.minMaxFillOpacity":{"desc":"<p>Fill opacity of the min and max value bars</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.minMaxWidth":{"desc":"<p>Width of the min and max value bars</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.minMaxHeight":{"desc":"<p>Height of the min and max value bars</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.q1q3Width":{"desc":"<p>Width of the q1q3 value bars</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.q1q3Height":{"desc":"<p>Height of the q1q3 value bars</p>\n<!-- base channels -->\n"},"glyph.glyphType.barBoxplot.encode.exit.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.barBoxplot.encode.exit.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.barBoxplot.encode.exit.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.encode.exit.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.encode.exit.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.outerBorder":{"desc":"<p>Outer border</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.innerBorder":{"desc":"<p>Inner border</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.barBoxplot.encode.exit.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.encode.exit.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.texture":{"desc":"<p>The texture of the graphic</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"glyph.glyphType.barBoxplot.encode.exit.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.encode.hover":{"desc":"<p>Set the visual channel mapping corresponding to the graphics elements when in the <code class=\"codespan\">hover</code> state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.barBoxplot.encode.hover.max":{"desc":"<p>Max value coordinate of the element</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.min":{"desc":"<p>Min value coordinate of the element</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.q1":{"desc":"<p>1/4 value coordinate of the element</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.q3":{"desc":"<p>3/4 value coordinate of the element</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.median":{"desc":"<p>Median value coordinate of the element</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.minMaxFillOpacity":{"desc":"<p>Fill opacity of the min and max value bars</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.minMaxWidth":{"desc":"<p>Width of the min and max value bars</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.minMaxHeight":{"desc":"<p>Height of the min and max value bars</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.q1q3Width":{"desc":"<p>Width of the q1q3 value bars</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.q1q3Height":{"desc":"<p>Height of the q1q3 value bars</p>\n<!-- base channels -->\n"},"glyph.glyphType.barBoxplot.encode.hover.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.barBoxplot.encode.hover.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.barBoxplot.encode.hover.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.encode.hover.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.encode.hover.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.outerBorder":{"desc":"<p>Outer border</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.innerBorder":{"desc":"<p>Inner border</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.barBoxplot.encode.hover.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.encode.hover.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.texture":{"desc":"<p>The texture of the graphic</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"glyph.glyphType.barBoxplot.encode.hover.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.zIndex":{"desc":"<p>Set the zIndex of the container shape (group) corresponding to the <code class=\"codespan\">mark</code> graphic primitive</p>\n"},"glyph.glyphType.barBoxplot.interactive":{"desc":"<p>Type: <code class=\"codespan\">boolean</code>\nRequired: No</p>\n"},"glyph.glyphType.barBoxplot.context":{"desc":"<p>Set the context parameters of the graphic primitive</p>\n"},"glyph.glyphType.barBoxplot.setCustomizedShape":{"desc":"<p>Set the callback function of custom shape. The corresponding ts type is as follows:</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>Where <code class=\"codespan\">ICustomPath2D</code> is a utility class provided by VRender for drawing custom paths.</p>\n"},"glyph.glyphType.barBoxplot.support3d":{"desc":"<p>Whether to support 3d mode when the canvas is set to 3d view.</p>\n"},"glyph.glyphType.barBoxplot.group":{"desc":"<p>Set the parent graphic primitive. Supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> The id of the corresponding parent graphic primitive</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> The corresponding grammar element of the parent graphic primitive, generally used in API call scenarios.</li>\n</ul>\n<p>If not set, it will be attached to the root node of the canvas by default.</p>\n"},"glyph.glyphType.barBoxplot.from":{"desc":"<p>ts type definition is:</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>Declare the data on which the graphic primitive depends through the <code class=\"codespan\">data</code> attribute.</p>\n"},"glyph.glyphType.barBoxplot.key":{"desc":"<p>Set the unique identifier for the graphic primitive data element, which is used to calculate the data state of the graphic element. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the <code class=\"codespan\">key</code></li>\n</ul>\n"},"glyph.glyphType.barBoxplot.sort":{"desc":"<p>Sort all graphic elements in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"glyph.glyphType.barBoxplot.groupBy":{"desc":"<p>Set the grouping attribute, the corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the grouping <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the grouping <code class=\"codespan\">key</code></li>\n</ul>\n"},"glyph.glyphType.barBoxplot.groupSort":{"desc":"<p>Sort the groups in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"glyph.glyphType.barBoxplot.coordinate":{"desc":"<p>Set the id or graphic element corresponding to the associated coordinate system of this graphic primitive</p>\n"},"glyph.glyphType.barBoxplot.state":{"desc":"<p>Set the state values ​​of all graphical elements of the current graphic primitive, supporting three formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the state of the graphic, for example, <code class=\"codespan\">{ state: &#39;selected&#39;}</code> sets the state of all graphics to <code class=\"codespan\">&#39;selected&#39;</code>, usually in this case, the <code class=\"codespan\">encode</code> also sets the graphic channel mapping corresponding to the <code class=\"codespan\">&#39;selected&#39;</code> state</li>\n<li><code class=\"codespan\">string[]</code> Set multiple states for the graphic, you can configure <code class=\"codespan\">stateSort</code> to influence the order of executing the graphic channel mapping corresponding to the state</li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the state value, and the return parameter is <code class=\"codespan\">string | string[]</code>, the corresponding ts type definition is:</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"glyph.glyphType.barBoxplot.stateSort":{"desc":"<p>Set the sorting function of the state values ​​of all graphics elements of the current graphic primitive, which will affect the order of the graphic channel mapping corresponding to the state. The result of the graphic channel mapping executed earlier may be covered by subsequent states. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"glyph.glyphType.barBoxplot.transform":{"desc":"<p>Set the corresponding transformation of the graphic primitive. All data transformations can be configured on the graphic primitive and are used for the <code class=\"codespan\">join data</code> execution transformation;\nAnother type of transformation is the transformation executed by graphical elements, such as <code class=\"codespan\">dodge</code>;\nThe general type definition is as follows:</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>The parameters supported by each transformation are different</p>\n"},"glyph.glyphType.barBoxplot.layout":{"desc":"<p>Set the layout parameters of the graphic primitive. There are two roles when the graphic primitive participates in the layout:</p>\n<ul>\n<li>&#39;container&#39; Container graphic primitive, usually <code class=\"codespan\">group</code> graphic primitive</li>\n<li>&#39;item&#39; layout child element, as a child node of the container graphic primitive</li>\n</ul>\n<p>Please note that we only support one layer of layout. If it is a multi-layer nested layout, it is recommended to use a custom layout scheme for implementation;</p>\n<p>Now support two content layouts: <code class=\"codespan\">grid</code> layout and <code class=\"codespan\">relative</code> layout, the related type definition is as follows</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>If you want to set a custom layout scheme, <code class=\"codespan\">layout</code> also supports setting callback functions directly. The definition of the callback function is as follows:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"glyph.glyphType.barBoxplot.layout.display":{"desc":"<p>The container graphic primitive sets the layout type and supports two configurations:</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> Relative layout</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> Grid layout</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.layout.callback":{"desc":"<p>Customize the callback function for this graphic primitive, the ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"glyph.glyphType.barBoxplot.layout.skipBeforeLayouted":{"desc":"<p>Skip the execution stage before the layout is completed</p>\n"},"glyph.glyphType.barBoxplot.layout.updateViewSignals":{"desc":"<p>Whether to update the default view signals, that is: <code class=\"codespan\">padding</code>, <code class=\"codespan\">viewWidth</code> and <code class=\"codespan\">viewHeight</code></p>\n<p>This property can only be set on a container graphic primitive with <code class=\"codespan\">&#39;relative&#39;</code> layout.</p>\n"},"glyph.glyphType.barBoxplot.layout.maxChildWidth":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum width of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the width of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.layout.maxChildHeight":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum height of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the height of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"glyph.glyphType.barBoxplot.layout.position":{"desc":"<p>Set the position of the child graphic primitive of the relative layout. The supported settings are:</p>\n<ul>\n<li>&#39;top&#39; Relative to the top of the parent graphic primitive</li>\n<li>&#39;bottom&#39; Relative to the bottom of the parent graphic primitive</li>\n<li>&#39;left&#39; Relative to the left side of the parent graphic primitive</li>\n<li>&#39;right&#39; Relative to the right side of the parent graphic primitive</li>\n<li>&#39;content&#39; Relative to the center of the parent graphic primitive, that is, the content area</li>\n<li>&#39;auto&#39; When the graphic primitive sets the coordinate system, the position relative to the parent graphic primitive is automatically calculated according to the associated <code class=\"codespan\">scale</code></li>\n</ul>\n"},"glyph.glyphType.barBoxplot.layout.padding":{"desc":"<p>The inner padding of Child graphic primitive, in px unit, with the default padding of 0 for all directions. Accepts numerical values, numerical arrays, and objects for settings.</p>\n<p>Example of usage:</p>\n<pre><code class=\"lang-ts\">// Numerical type, set the padding to 5\npadding: 5;\n// Numerical array, set the top and bottom padding to 5, and the left and right padding to 10, similar to the CSS box model\npadding: [5, 10];\n// Numerical array, set the padding for all four directions separately\npadding: [\n  5, // Top\n  10, // Right\n  5, // Bottom\n  10 // Left\n];\n// Object type\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"glyph.glyphType.barBoxplot.layout.gridTemplateRows":{"desc":"<p>The parent graphic primitive of the grid layout sets the row height</p>\n"},"glyph.glyphType.barBoxplot.layout.gridTemplateColumns":{"desc":"<p>The parent graphic primitive of the grid layout sets the column width</p>\n"},"glyph.glyphType.barBoxplot.layout.gridRowGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the row spacing</p>\n"},"glyph.glyphType.barBoxplot.layout.gridColumnGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the column spacing</p>\n"},"glyph.glyphType.barBoxplot.layout.gridRowStart":{"desc":"<p>The child graphic primitive of the grid layout sets the row start position</p>\n"},"glyph.glyphType.barBoxplot.layout.gridRowEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the row end position</p>\n"},"glyph.glyphType.barBoxplot.layout.gridColumnStart":{"desc":"<p>The child graphic primitive of the grid layout sets the column start position</p>\n"},"glyph.glyphType.barBoxplot.layout.gridColumnEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the column end position</p>\n"},"glyph.glyphType.boxplot":{"desc":"<p>Before using the boxplot glyph, you need to execute <code class=\"codespan\">registerBoxplotGlyph()</code> to register the boxplot glyph</p>\n"},"glyph.glyphType.boxplot.glyphType":{"desc":"<p>Set the glyph type to <code class=\"codespan\">boxplot</code></p>\n"},"glyph.glyphType.boxplot.glyphConfig":{"desc":"<p>The supported glyph configurations include:</p>\n<ul>\n<li><code class=\"codespan\">direction</code>(&#39;vertical&#39;|&#39;horizontal&#39;): The direction of the boxplot glyph, default to <code class=\"codespan\">&#39;vertical&#39;</code></li>\n</ul>\n"},"glyph.glyphType.boxplot.animation":{"desc":"<p>The supported built-in animation types include:</p>\n<ul>\n<li><code class=\"codespan\">boxplotScaleIn</code>/<code class=\"codespan\">boxplotScaleOut</code>: The animation of the boxplot glyph growing along the median line</li>\n</ul>\n"},"glyph.glyphType.boxplot.encode":{"desc":"<p>Set the visual channel encoding of the graphics elements, supporting three data change states by default:</p>\n<ul>\n<li><code class=\"codespan\">enter</code> newly added data items</li>\n<li><code class=\"codespan\">update</code> data items have been updated</li>\n<li><code class=\"codespan\">exit</code> data items are deleted</li>\n</ul>\n<p>Note that the data state here is automatically generated based on the <code class=\"codespan\">mark</code>&#39;s <code class=\"codespan\">key</code>. We will calculate the unique identifier for the data bound to the <code class=\"codespan\">mark</code> based on the <code class=\"codespan\">key</code> configuration. After the data is updated, if the corresponding unique identifier no longer exists, the state is <code class=\"codespan\">exit</code>; if it exists, it is <code class=\"codespan\">update</code>. If the previous data does not exist for the unique identifier, the data item&#39;s state is <code class=\"codespan\">enter</code>.</p>\n<p>Supports one interaction state by default:</p>\n<ul>\n<li><code class=\"codespan\">hover</code> when the mouse hovers over a specific shape, set the corresponding visual channel encoding for the shape</li>\n</ul>\n"},"glyph.glyphType.boxplot.encode.enter":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data initialization state. Note that it will not be executed again when the data is updated.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.boxplot.encode.enter.max":{"desc":"<p>Max value coordinate of the element</p>\n"},"glyph.glyphType.boxplot.encode.enter.min":{"desc":"<p>Min value coordinate of the element</p>\n"},"glyph.glyphType.boxplot.encode.enter.q1":{"desc":"<p>1/4 value coordinate of the element</p>\n"},"glyph.glyphType.boxplot.encode.enter.q3":{"desc":"<p>3/4 value coordinate of the element</p>\n"},"glyph.glyphType.boxplot.encode.enter.median":{"desc":"<p>Median value coordinate of the element</p>\n"},"glyph.glyphType.boxplot.encode.enter.boxWidth":{"desc":"<p>Width of the q1q3 box part</p>\n"},"glyph.glyphType.boxplot.encode.enter.boxHeight":{"desc":"<p>Height of the q1q3 box part</p>\n"},"glyph.glyphType.boxplot.encode.enter.ruleWidth":{"desc":"<p>Width of the minMax line part</p>\n"},"glyph.glyphType.boxplot.encode.enter.ruleHeight":{"desc":"<p>Height of the minMax line part</p>\n<!-- base channels -->\n"},"glyph.glyphType.boxplot.encode.enter.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"glyph.glyphType.boxplot.encode.enter.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"glyph.glyphType.boxplot.encode.enter.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"glyph.glyphType.boxplot.encode.enter.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"glyph.glyphType.boxplot.encode.enter.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.boxplot.encode.enter.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"glyph.glyphType.boxplot.encode.enter.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.boxplot.encode.enter.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.boxplot.encode.enter.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.boxplot.encode.enter.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.boxplot.encode.enter.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"glyph.glyphType.boxplot.encode.enter.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.boxplot.encode.enter.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.boxplot.encode.enter.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"glyph.glyphType.boxplot.encode.enter.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"glyph.glyphType.boxplot.encode.enter.outerBorder":{"desc":"<p>Outer border</p>\n"},"glyph.glyphType.boxplot.encode.enter.innerBorder":{"desc":"<p>Inner border</p>\n"},"glyph.glyphType.boxplot.encode.enter.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"glyph.glyphType.boxplot.encode.enter.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.boxplot.encode.enter.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"glyph.glyphType.boxplot.encode.enter.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"glyph.glyphType.boxplot.encode.enter.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"glyph.glyphType.boxplot.encode.enter.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"glyph.glyphType.boxplot.encode.enter.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"glyph.glyphType.boxplot.encode.enter.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"glyph.glyphType.boxplot.encode.enter.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"glyph.glyphType.boxplot.encode.enter.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.boxplot.encode.enter.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.boxplot.encode.enter.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.boxplot.encode.enter.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"glyph.glyphType.boxplot.encode.enter.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"glyph.glyphType.boxplot.encode.enter.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"glyph.glyphType.boxplot.encode.enter.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"glyph.glyphType.boxplot.encode.enter.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"glyph.glyphType.boxplot.encode.enter.texture":{"desc":"<p>The texture of the graphic</p>\n"},"glyph.glyphType.boxplot.encode.enter.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"glyph.glyphType.boxplot.encode.enter.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"glyph.glyphType.boxplot.encode.enter.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"glyph.glyphType.boxplot.encode.enter.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"glyph.glyphType.boxplot.encode.enter.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"glyph.glyphType.boxplot.encode.update":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data update state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.boxplot.encode.update.max":{"desc":"<p>Max value coordinate of the element</p>\n"},"glyph.glyphType.boxplot.encode.update.min":{"desc":"<p>Min value coordinate of the element</p>\n"},"glyph.glyphType.boxplot.encode.update.q1":{"desc":"<p>1/4 value coordinate of the element</p>\n"},"glyph.glyphType.boxplot.encode.update.q3":{"desc":"<p>3/4 value coordinate of the element</p>\n"},"glyph.glyphType.boxplot.encode.update.median":{"desc":"<p>Median value coordinate of the element</p>\n"},"glyph.glyphType.boxplot.encode.update.boxWidth":{"desc":"<p>Width of the q1q3 box part</p>\n"},"glyph.glyphType.boxplot.encode.update.boxHeight":{"desc":"<p>Height of the q1q3 box part</p>\n"},"glyph.glyphType.boxplot.encode.update.ruleWidth":{"desc":"<p>Width of the minMax line part</p>\n"},"glyph.glyphType.boxplot.encode.update.ruleHeight":{"desc":"<p>Height of the minMax line part</p>\n<!-- base channels -->\n"},"glyph.glyphType.boxplot.encode.update.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"glyph.glyphType.boxplot.encode.update.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"glyph.glyphType.boxplot.encode.update.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"glyph.glyphType.boxplot.encode.update.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"glyph.glyphType.boxplot.encode.update.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.boxplot.encode.update.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"glyph.glyphType.boxplot.encode.update.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.boxplot.encode.update.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.boxplot.encode.update.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.boxplot.encode.update.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.boxplot.encode.update.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"glyph.glyphType.boxplot.encode.update.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.boxplot.encode.update.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.boxplot.encode.update.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"glyph.glyphType.boxplot.encode.update.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"glyph.glyphType.boxplot.encode.update.outerBorder":{"desc":"<p>Outer border</p>\n"},"glyph.glyphType.boxplot.encode.update.innerBorder":{"desc":"<p>Inner border</p>\n"},"glyph.glyphType.boxplot.encode.update.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"glyph.glyphType.boxplot.encode.update.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.boxplot.encode.update.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"glyph.glyphType.boxplot.encode.update.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"glyph.glyphType.boxplot.encode.update.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"glyph.glyphType.boxplot.encode.update.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"glyph.glyphType.boxplot.encode.update.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"glyph.glyphType.boxplot.encode.update.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"glyph.glyphType.boxplot.encode.update.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"glyph.glyphType.boxplot.encode.update.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.boxplot.encode.update.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.boxplot.encode.update.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.boxplot.encode.update.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"glyph.glyphType.boxplot.encode.update.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"glyph.glyphType.boxplot.encode.update.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"glyph.glyphType.boxplot.encode.update.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"glyph.glyphType.boxplot.encode.update.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"glyph.glyphType.boxplot.encode.update.texture":{"desc":"<p>The texture of the graphic</p>\n"},"glyph.glyphType.boxplot.encode.update.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"glyph.glyphType.boxplot.encode.update.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"glyph.glyphType.boxplot.encode.update.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"glyph.glyphType.boxplot.encode.update.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"glyph.glyphType.boxplot.encode.update.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"glyph.glyphType.boxplot.encode.exit":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data deletion state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.boxplot.encode.exit.max":{"desc":"<p>Max value coordinate of the element</p>\n"},"glyph.glyphType.boxplot.encode.exit.min":{"desc":"<p>Min value coordinate of the element</p>\n"},"glyph.glyphType.boxplot.encode.exit.q1":{"desc":"<p>1/4 value coordinate of the element</p>\n"},"glyph.glyphType.boxplot.encode.exit.q3":{"desc":"<p>3/4 value coordinate of the element</p>\n"},"glyph.glyphType.boxplot.encode.exit.median":{"desc":"<p>Median value coordinate of the element</p>\n"},"glyph.glyphType.boxplot.encode.exit.boxWidth":{"desc":"<p>Width of the q1q3 box part</p>\n"},"glyph.glyphType.boxplot.encode.exit.boxHeight":{"desc":"<p>Height of the q1q3 box part</p>\n"},"glyph.glyphType.boxplot.encode.exit.ruleWidth":{"desc":"<p>Width of the minMax line part</p>\n"},"glyph.glyphType.boxplot.encode.exit.ruleHeight":{"desc":"<p>Height of the minMax line part</p>\n<!-- base channels -->\n"},"glyph.glyphType.boxplot.encode.exit.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"glyph.glyphType.boxplot.encode.exit.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"glyph.glyphType.boxplot.encode.exit.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"glyph.glyphType.boxplot.encode.exit.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"glyph.glyphType.boxplot.encode.exit.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.boxplot.encode.exit.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"glyph.glyphType.boxplot.encode.exit.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.boxplot.encode.exit.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.boxplot.encode.exit.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.boxplot.encode.exit.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.boxplot.encode.exit.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"glyph.glyphType.boxplot.encode.exit.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.boxplot.encode.exit.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.boxplot.encode.exit.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"glyph.glyphType.boxplot.encode.exit.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"glyph.glyphType.boxplot.encode.exit.outerBorder":{"desc":"<p>Outer border</p>\n"},"glyph.glyphType.boxplot.encode.exit.innerBorder":{"desc":"<p>Inner border</p>\n"},"glyph.glyphType.boxplot.encode.exit.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"glyph.glyphType.boxplot.encode.exit.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.boxplot.encode.exit.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"glyph.glyphType.boxplot.encode.exit.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"glyph.glyphType.boxplot.encode.exit.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"glyph.glyphType.boxplot.encode.exit.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"glyph.glyphType.boxplot.encode.exit.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"glyph.glyphType.boxplot.encode.exit.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"glyph.glyphType.boxplot.encode.exit.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"glyph.glyphType.boxplot.encode.exit.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.boxplot.encode.exit.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.boxplot.encode.exit.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.boxplot.encode.exit.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"glyph.glyphType.boxplot.encode.exit.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"glyph.glyphType.boxplot.encode.exit.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"glyph.glyphType.boxplot.encode.exit.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"glyph.glyphType.boxplot.encode.exit.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"glyph.glyphType.boxplot.encode.exit.texture":{"desc":"<p>The texture of the graphic</p>\n"},"glyph.glyphType.boxplot.encode.exit.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"glyph.glyphType.boxplot.encode.exit.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"glyph.glyphType.boxplot.encode.exit.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"glyph.glyphType.boxplot.encode.exit.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"glyph.glyphType.boxplot.encode.exit.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"glyph.glyphType.boxplot.encode.hover":{"desc":"<p>Set the visual channel mapping corresponding to the graphics elements when in the <code class=\"codespan\">hover</code> state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.boxplot.encode.hover.max":{"desc":"<p>Max value coordinate of the element</p>\n"},"glyph.glyphType.boxplot.encode.hover.min":{"desc":"<p>Min value coordinate of the element</p>\n"},"glyph.glyphType.boxplot.encode.hover.q1":{"desc":"<p>1/4 value coordinate of the element</p>\n"},"glyph.glyphType.boxplot.encode.hover.q3":{"desc":"<p>3/4 value coordinate of the element</p>\n"},"glyph.glyphType.boxplot.encode.hover.median":{"desc":"<p>Median value coordinate of the element</p>\n"},"glyph.glyphType.boxplot.encode.hover.boxWidth":{"desc":"<p>Width of the q1q3 box part</p>\n"},"glyph.glyphType.boxplot.encode.hover.boxHeight":{"desc":"<p>Height of the q1q3 box part</p>\n"},"glyph.glyphType.boxplot.encode.hover.ruleWidth":{"desc":"<p>Width of the minMax line part</p>\n"},"glyph.glyphType.boxplot.encode.hover.ruleHeight":{"desc":"<p>Height of the minMax line part</p>\n<!-- base channels -->\n"},"glyph.glyphType.boxplot.encode.hover.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"glyph.glyphType.boxplot.encode.hover.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"glyph.glyphType.boxplot.encode.hover.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"glyph.glyphType.boxplot.encode.hover.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"glyph.glyphType.boxplot.encode.hover.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.boxplot.encode.hover.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"glyph.glyphType.boxplot.encode.hover.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.boxplot.encode.hover.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.boxplot.encode.hover.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.boxplot.encode.hover.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.boxplot.encode.hover.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"glyph.glyphType.boxplot.encode.hover.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.boxplot.encode.hover.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.boxplot.encode.hover.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"glyph.glyphType.boxplot.encode.hover.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"glyph.glyphType.boxplot.encode.hover.outerBorder":{"desc":"<p>Outer border</p>\n"},"glyph.glyphType.boxplot.encode.hover.innerBorder":{"desc":"<p>Inner border</p>\n"},"glyph.glyphType.boxplot.encode.hover.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"glyph.glyphType.boxplot.encode.hover.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.boxplot.encode.hover.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"glyph.glyphType.boxplot.encode.hover.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"glyph.glyphType.boxplot.encode.hover.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"glyph.glyphType.boxplot.encode.hover.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"glyph.glyphType.boxplot.encode.hover.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"glyph.glyphType.boxplot.encode.hover.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"glyph.glyphType.boxplot.encode.hover.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"glyph.glyphType.boxplot.encode.hover.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.boxplot.encode.hover.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.boxplot.encode.hover.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.boxplot.encode.hover.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"glyph.glyphType.boxplot.encode.hover.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"glyph.glyphType.boxplot.encode.hover.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"glyph.glyphType.boxplot.encode.hover.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"glyph.glyphType.boxplot.encode.hover.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"glyph.glyphType.boxplot.encode.hover.texture":{"desc":"<p>The texture of the graphic</p>\n"},"glyph.glyphType.boxplot.encode.hover.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"glyph.glyphType.boxplot.encode.hover.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"glyph.glyphType.boxplot.encode.hover.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"glyph.glyphType.boxplot.encode.hover.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"glyph.glyphType.boxplot.encode.hover.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"glyph.glyphType.boxplot.zIndex":{"desc":"<p>Set the zIndex of the container shape (group) corresponding to the <code class=\"codespan\">mark</code> graphic primitive</p>\n"},"glyph.glyphType.boxplot.interactive":{"desc":"<p>Type: <code class=\"codespan\">boolean</code>\nRequired: No</p>\n"},"glyph.glyphType.boxplot.context":{"desc":"<p>Set the context parameters of the graphic primitive</p>\n"},"glyph.glyphType.boxplot.setCustomizedShape":{"desc":"<p>Set the callback function of custom shape. The corresponding ts type is as follows:</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>Where <code class=\"codespan\">ICustomPath2D</code> is a utility class provided by VRender for drawing custom paths.</p>\n"},"glyph.glyphType.boxplot.support3d":{"desc":"<p>Whether to support 3d mode when the canvas is set to 3d view.</p>\n"},"glyph.glyphType.boxplot.group":{"desc":"<p>Set the parent graphic primitive. Supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> The id of the corresponding parent graphic primitive</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> The corresponding grammar element of the parent graphic primitive, generally used in API call scenarios.</li>\n</ul>\n<p>If not set, it will be attached to the root node of the canvas by default.</p>\n"},"glyph.glyphType.boxplot.from":{"desc":"<p>ts type definition is:</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>Declare the data on which the graphic primitive depends through the <code class=\"codespan\">data</code> attribute.</p>\n"},"glyph.glyphType.boxplot.key":{"desc":"<p>Set the unique identifier for the graphic primitive data element, which is used to calculate the data state of the graphic element. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the <code class=\"codespan\">key</code></li>\n</ul>\n"},"glyph.glyphType.boxplot.sort":{"desc":"<p>Sort all graphic elements in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"glyph.glyphType.boxplot.groupBy":{"desc":"<p>Set the grouping attribute, the corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the grouping <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the grouping <code class=\"codespan\">key</code></li>\n</ul>\n"},"glyph.glyphType.boxplot.groupSort":{"desc":"<p>Sort the groups in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"glyph.glyphType.boxplot.coordinate":{"desc":"<p>Set the id or graphic element corresponding to the associated coordinate system of this graphic primitive</p>\n"},"glyph.glyphType.boxplot.state":{"desc":"<p>Set the state values ​​of all graphical elements of the current graphic primitive, supporting three formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the state of the graphic, for example, <code class=\"codespan\">{ state: &#39;selected&#39;}</code> sets the state of all graphics to <code class=\"codespan\">&#39;selected&#39;</code>, usually in this case, the <code class=\"codespan\">encode</code> also sets the graphic channel mapping corresponding to the <code class=\"codespan\">&#39;selected&#39;</code> state</li>\n<li><code class=\"codespan\">string[]</code> Set multiple states for the graphic, you can configure <code class=\"codespan\">stateSort</code> to influence the order of executing the graphic channel mapping corresponding to the state</li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the state value, and the return parameter is <code class=\"codespan\">string | string[]</code>, the corresponding ts type definition is:</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"glyph.glyphType.boxplot.stateSort":{"desc":"<p>Set the sorting function of the state values ​​of all graphics elements of the current graphic primitive, which will affect the order of the graphic channel mapping corresponding to the state. The result of the graphic channel mapping executed earlier may be covered by subsequent states. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"glyph.glyphType.boxplot.transform":{"desc":"<p>Set the corresponding transformation of the graphic primitive. All data transformations can be configured on the graphic primitive and are used for the <code class=\"codespan\">join data</code> execution transformation;\nAnother type of transformation is the transformation executed by graphical elements, such as <code class=\"codespan\">dodge</code>;\nThe general type definition is as follows:</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>The parameters supported by each transformation are different</p>\n"},"glyph.glyphType.boxplot.layout":{"desc":"<p>Set the layout parameters of the graphic primitive. There are two roles when the graphic primitive participates in the layout:</p>\n<ul>\n<li>&#39;container&#39; Container graphic primitive, usually <code class=\"codespan\">group</code> graphic primitive</li>\n<li>&#39;item&#39; layout child element, as a child node of the container graphic primitive</li>\n</ul>\n<p>Please note that we only support one layer of layout. If it is a multi-layer nested layout, it is recommended to use a custom layout scheme for implementation;</p>\n<p>Now support two content layouts: <code class=\"codespan\">grid</code> layout and <code class=\"codespan\">relative</code> layout, the related type definition is as follows</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>If you want to set a custom layout scheme, <code class=\"codespan\">layout</code> also supports setting callback functions directly. The definition of the callback function is as follows:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"glyph.glyphType.boxplot.layout.display":{"desc":"<p>The container graphic primitive sets the layout type and supports two configurations:</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> Relative layout</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> Grid layout</li>\n</ul>\n"},"glyph.glyphType.boxplot.layout.callback":{"desc":"<p>Customize the callback function for this graphic primitive, the ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"glyph.glyphType.boxplot.layout.skipBeforeLayouted":{"desc":"<p>Skip the execution stage before the layout is completed</p>\n"},"glyph.glyphType.boxplot.layout.updateViewSignals":{"desc":"<p>Whether to update the default view signals, that is: <code class=\"codespan\">padding</code>, <code class=\"codespan\">viewWidth</code> and <code class=\"codespan\">viewHeight</code></p>\n<p>This property can only be set on a container graphic primitive with <code class=\"codespan\">&#39;relative&#39;</code> layout.</p>\n"},"glyph.glyphType.boxplot.layout.maxChildWidth":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum width of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the width of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"glyph.glyphType.boxplot.layout.maxChildHeight":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum height of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the height of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"glyph.glyphType.boxplot.layout.position":{"desc":"<p>Set the position of the child graphic primitive of the relative layout. The supported settings are:</p>\n<ul>\n<li>&#39;top&#39; Relative to the top of the parent graphic primitive</li>\n<li>&#39;bottom&#39; Relative to the bottom of the parent graphic primitive</li>\n<li>&#39;left&#39; Relative to the left side of the parent graphic primitive</li>\n<li>&#39;right&#39; Relative to the right side of the parent graphic primitive</li>\n<li>&#39;content&#39; Relative to the center of the parent graphic primitive, that is, the content area</li>\n<li>&#39;auto&#39; When the graphic primitive sets the coordinate system, the position relative to the parent graphic primitive is automatically calculated according to the associated <code class=\"codespan\">scale</code></li>\n</ul>\n"},"glyph.glyphType.boxplot.layout.padding":{"desc":"<p>The inner padding of Child graphic primitive, in px unit, with the default padding of 0 for all directions. Accepts numerical values, numerical arrays, and objects for settings.</p>\n<p>Example of usage:</p>\n<pre><code class=\"lang-ts\">// Numerical type, set the padding to 5\npadding: 5;\n// Numerical array, set the top and bottom padding to 5, and the left and right padding to 10, similar to the CSS box model\npadding: [5, 10];\n// Numerical array, set the padding for all four directions separately\npadding: [\n  5, // Top\n  10, // Right\n  5, // Bottom\n  10 // Left\n];\n// Object type\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"glyph.glyphType.boxplot.layout.gridTemplateRows":{"desc":"<p>The parent graphic primitive of the grid layout sets the row height</p>\n"},"glyph.glyphType.boxplot.layout.gridTemplateColumns":{"desc":"<p>The parent graphic primitive of the grid layout sets the column width</p>\n"},"glyph.glyphType.boxplot.layout.gridRowGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the row spacing</p>\n"},"glyph.glyphType.boxplot.layout.gridColumnGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the column spacing</p>\n"},"glyph.glyphType.boxplot.layout.gridRowStart":{"desc":"<p>The child graphic primitive of the grid layout sets the row start position</p>\n"},"glyph.glyphType.boxplot.layout.gridRowEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the row end position</p>\n"},"glyph.glyphType.boxplot.layout.gridColumnStart":{"desc":"<p>The child graphic primitive of the grid layout sets the column start position</p>\n"},"glyph.glyphType.boxplot.layout.gridColumnEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the column end position</p>\n"},"glyph.glyphType.linkPath":{"desc":"<p>Execute <code class=\"codespan\">registerLinkPathGlyph()</code> to register the linkPath glyph before using it</p>\n"},"glyph.glyphType.linkPath.glyphType":{"desc":"<p>Set the glyph type to <code class=\"codespan\">linkPath</code></p>\n"},"glyph.glyphType.linkPath.glyphConfig":{"desc":"<p>Supported glyph configurations include:</p>\n<ul>\n<li><code class=\"codespan\">direction</code>: <code class=\"codespan\">&#39;vertical&#39;|&#39;horizontal&#39;</code>, the direction of the linkPath glyph, default is <code class=\"codespan\">&#39;vertical&#39;</code></li>\n</ul>\n"},"glyph.glyphType.linkPath.encode":{"desc":"<p>Set the visual channel encoding of the graphics elements, supporting three data change states by default:</p>\n<ul>\n<li><code class=\"codespan\">enter</code> newly added data items</li>\n<li><code class=\"codespan\">update</code> data items have been updated</li>\n<li><code class=\"codespan\">exit</code> data items are deleted</li>\n</ul>\n<p>Note that the data state here is automatically generated based on the <code class=\"codespan\">mark</code>&#39;s <code class=\"codespan\">key</code>. We will calculate the unique identifier for the data bound to the <code class=\"codespan\">mark</code> based on the <code class=\"codespan\">key</code> configuration. After the data is updated, if the corresponding unique identifier no longer exists, the state is <code class=\"codespan\">exit</code>; if it exists, it is <code class=\"codespan\">update</code>. If the previous data does not exist for the unique identifier, the data item&#39;s state is <code class=\"codespan\">enter</code>.</p>\n<p>Supports one interaction state by default:</p>\n<ul>\n<li><code class=\"codespan\">hover</code> when the mouse hovers over a specific shape, set the corresponding visual channel encoding for the shape</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.enter":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data initialization state. Note that it will not be executed again when the data is updated.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.linkPath.encode.enter.x0":{"desc":"<p>Minimum horizontal position</p>\n"},"glyph.glyphType.linkPath.encode.enter.x1":{"desc":"<p>Maximum horizontal position</p>\n"},"glyph.glyphType.linkPath.encode.enter.y0":{"desc":"<p>Minimum vertical position</p>\n"},"glyph.glyphType.linkPath.encode.enter.y1":{"desc":"<p>Maximum vertical position</p>\n"},"glyph.glyphType.linkPath.encode.enter.thickness":{"desc":"<p>Thickness of the graphic element</p>\n"},"glyph.glyphType.linkPath.encode.enter.curvature":{"desc":"<p>Curvature of the graphic element, default is 0.5</p>\n"},"glyph.glyphType.linkPath.encode.enter.round":{"desc":"<p>Whether to round the calculated path of the graphic element</p>\n"},"glyph.glyphType.linkPath.encode.enter.ratio":{"desc":"<p>Thickness percentage of the normal path</p>\n"},"glyph.glyphType.linkPath.encode.enter.align":{"desc":"<p>Alignment of the graphic element</p>\n<ul>\n<li>&#39;start&#39;</li>\n<li>&#39;end&#39;</li>\n<li>&#39;center&#39;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.enter.pathType":{"desc":"<p>Rendering shape of the graphic element</p>\n<ul>\n<li>&#39;line&#39;</li>\n<li>&#39;smooth&#39;</li>\n<li>&#39;polyline&#39;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.enter.startArrow":{"desc":"<p>Enable arrow at starting point</p>\n"},"glyph.glyphType.linkPath.encode.enter.endArrow":{"desc":"<p>Enable arrow at the end point</p>\n"},"glyph.glyphType.linkPath.encode.enter.backgroundStyle":{"desc":"<p>Style of the graphic element background</p>\n"},"glyph.glyphType.linkPath.encode.enter.direction":{"desc":"<p>Direction of the graphic element</p>\n<ul>\n<li>&#39;horizontal&#39;</li>\n<li>&#39;vertical&#39;</li>\n<li>&#39;LR&#39;</li>\n<li>&#39;RL&#39;</li>\n<li>&#39;TB&#39;</li>\n<li>&#39;BL&#39;</li>\n<li>&#39;radial&#39;</li>\n</ul>\n<!-- base channels -->\n"},"glyph.glyphType.linkPath.encode.enter.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"glyph.glyphType.linkPath.encode.enter.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"glyph.glyphType.linkPath.encode.enter.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"glyph.glyphType.linkPath.encode.enter.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"glyph.glyphType.linkPath.encode.enter.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.linkPath.encode.enter.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"glyph.glyphType.linkPath.encode.enter.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.linkPath.encode.enter.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.linkPath.encode.enter.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.linkPath.encode.enter.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.linkPath.encode.enter.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"glyph.glyphType.linkPath.encode.enter.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.enter.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.enter.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"glyph.glyphType.linkPath.encode.enter.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"glyph.glyphType.linkPath.encode.enter.outerBorder":{"desc":"<p>Outer border</p>\n"},"glyph.glyphType.linkPath.encode.enter.innerBorder":{"desc":"<p>Inner border</p>\n"},"glyph.glyphType.linkPath.encode.enter.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"glyph.glyphType.linkPath.encode.enter.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.linkPath.encode.enter.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"glyph.glyphType.linkPath.encode.enter.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"glyph.glyphType.linkPath.encode.enter.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"glyph.glyphType.linkPath.encode.enter.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"glyph.glyphType.linkPath.encode.enter.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"glyph.glyphType.linkPath.encode.enter.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"glyph.glyphType.linkPath.encode.enter.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"glyph.glyphType.linkPath.encode.enter.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.linkPath.encode.enter.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.linkPath.encode.enter.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.linkPath.encode.enter.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"glyph.glyphType.linkPath.encode.enter.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"glyph.glyphType.linkPath.encode.enter.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"glyph.glyphType.linkPath.encode.enter.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.enter.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"glyph.glyphType.linkPath.encode.enter.texture":{"desc":"<p>The texture of the graphic</p>\n"},"glyph.glyphType.linkPath.encode.enter.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"glyph.glyphType.linkPath.encode.enter.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"glyph.glyphType.linkPath.encode.enter.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"glyph.glyphType.linkPath.encode.enter.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"glyph.glyphType.linkPath.encode.enter.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.update":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data update state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.linkPath.encode.update.x0":{"desc":"<p>Minimum horizontal position</p>\n"},"glyph.glyphType.linkPath.encode.update.x1":{"desc":"<p>Maximum horizontal position</p>\n"},"glyph.glyphType.linkPath.encode.update.y0":{"desc":"<p>Minimum vertical position</p>\n"},"glyph.glyphType.linkPath.encode.update.y1":{"desc":"<p>Maximum vertical position</p>\n"},"glyph.glyphType.linkPath.encode.update.thickness":{"desc":"<p>Thickness of the graphic element</p>\n"},"glyph.glyphType.linkPath.encode.update.curvature":{"desc":"<p>Curvature of the graphic element, default is 0.5</p>\n"},"glyph.glyphType.linkPath.encode.update.round":{"desc":"<p>Whether to round the calculated path of the graphic element</p>\n"},"glyph.glyphType.linkPath.encode.update.ratio":{"desc":"<p>Thickness percentage of the normal path</p>\n"},"glyph.glyphType.linkPath.encode.update.align":{"desc":"<p>Alignment of the graphic element</p>\n<ul>\n<li>&#39;start&#39;</li>\n<li>&#39;end&#39;</li>\n<li>&#39;center&#39;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.update.pathType":{"desc":"<p>Rendering shape of the graphic element</p>\n<ul>\n<li>&#39;line&#39;</li>\n<li>&#39;smooth&#39;</li>\n<li>&#39;polyline&#39;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.update.startArrow":{"desc":"<p>Enable arrow at starting point</p>\n"},"glyph.glyphType.linkPath.encode.update.endArrow":{"desc":"<p>Enable arrow at the end point</p>\n"},"glyph.glyphType.linkPath.encode.update.backgroundStyle":{"desc":"<p>Style of the graphic element background</p>\n"},"glyph.glyphType.linkPath.encode.update.direction":{"desc":"<p>Direction of the graphic element</p>\n<ul>\n<li>&#39;horizontal&#39;</li>\n<li>&#39;vertical&#39;</li>\n<li>&#39;LR&#39;</li>\n<li>&#39;RL&#39;</li>\n<li>&#39;TB&#39;</li>\n<li>&#39;BL&#39;</li>\n<li>&#39;radial&#39;</li>\n</ul>\n<!-- base channels -->\n"},"glyph.glyphType.linkPath.encode.update.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"glyph.glyphType.linkPath.encode.update.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"glyph.glyphType.linkPath.encode.update.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"glyph.glyphType.linkPath.encode.update.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"glyph.glyphType.linkPath.encode.update.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.linkPath.encode.update.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"glyph.glyphType.linkPath.encode.update.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.linkPath.encode.update.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.linkPath.encode.update.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.linkPath.encode.update.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.linkPath.encode.update.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"glyph.glyphType.linkPath.encode.update.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.update.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.update.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"glyph.glyphType.linkPath.encode.update.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"glyph.glyphType.linkPath.encode.update.outerBorder":{"desc":"<p>Outer border</p>\n"},"glyph.glyphType.linkPath.encode.update.innerBorder":{"desc":"<p>Inner border</p>\n"},"glyph.glyphType.linkPath.encode.update.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"glyph.glyphType.linkPath.encode.update.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.linkPath.encode.update.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"glyph.glyphType.linkPath.encode.update.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"glyph.glyphType.linkPath.encode.update.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"glyph.glyphType.linkPath.encode.update.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"glyph.glyphType.linkPath.encode.update.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"glyph.glyphType.linkPath.encode.update.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"glyph.glyphType.linkPath.encode.update.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"glyph.glyphType.linkPath.encode.update.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.linkPath.encode.update.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.linkPath.encode.update.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.linkPath.encode.update.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"glyph.glyphType.linkPath.encode.update.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"glyph.glyphType.linkPath.encode.update.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"glyph.glyphType.linkPath.encode.update.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.update.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"glyph.glyphType.linkPath.encode.update.texture":{"desc":"<p>The texture of the graphic</p>\n"},"glyph.glyphType.linkPath.encode.update.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"glyph.glyphType.linkPath.encode.update.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"glyph.glyphType.linkPath.encode.update.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"glyph.glyphType.linkPath.encode.update.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"glyph.glyphType.linkPath.encode.update.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.exit":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data deletion state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.linkPath.encode.exit.x0":{"desc":"<p>Minimum horizontal position</p>\n"},"glyph.glyphType.linkPath.encode.exit.x1":{"desc":"<p>Maximum horizontal position</p>\n"},"glyph.glyphType.linkPath.encode.exit.y0":{"desc":"<p>Minimum vertical position</p>\n"},"glyph.glyphType.linkPath.encode.exit.y1":{"desc":"<p>Maximum vertical position</p>\n"},"glyph.glyphType.linkPath.encode.exit.thickness":{"desc":"<p>Thickness of the graphic element</p>\n"},"glyph.glyphType.linkPath.encode.exit.curvature":{"desc":"<p>Curvature of the graphic element, default is 0.5</p>\n"},"glyph.glyphType.linkPath.encode.exit.round":{"desc":"<p>Whether to round the calculated path of the graphic element</p>\n"},"glyph.glyphType.linkPath.encode.exit.ratio":{"desc":"<p>Thickness percentage of the normal path</p>\n"},"glyph.glyphType.linkPath.encode.exit.align":{"desc":"<p>Alignment of the graphic element</p>\n<ul>\n<li>&#39;start&#39;</li>\n<li>&#39;end&#39;</li>\n<li>&#39;center&#39;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.exit.pathType":{"desc":"<p>Rendering shape of the graphic element</p>\n<ul>\n<li>&#39;line&#39;</li>\n<li>&#39;smooth&#39;</li>\n<li>&#39;polyline&#39;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.exit.startArrow":{"desc":"<p>Enable arrow at starting point</p>\n"},"glyph.glyphType.linkPath.encode.exit.endArrow":{"desc":"<p>Enable arrow at the end point</p>\n"},"glyph.glyphType.linkPath.encode.exit.backgroundStyle":{"desc":"<p>Style of the graphic element background</p>\n"},"glyph.glyphType.linkPath.encode.exit.direction":{"desc":"<p>Direction of the graphic element</p>\n<ul>\n<li>&#39;horizontal&#39;</li>\n<li>&#39;vertical&#39;</li>\n<li>&#39;LR&#39;</li>\n<li>&#39;RL&#39;</li>\n<li>&#39;TB&#39;</li>\n<li>&#39;BL&#39;</li>\n<li>&#39;radial&#39;</li>\n</ul>\n<!-- base channels -->\n"},"glyph.glyphType.linkPath.encode.exit.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"glyph.glyphType.linkPath.encode.exit.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"glyph.glyphType.linkPath.encode.exit.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"glyph.glyphType.linkPath.encode.exit.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"glyph.glyphType.linkPath.encode.exit.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.linkPath.encode.exit.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"glyph.glyphType.linkPath.encode.exit.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.linkPath.encode.exit.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.linkPath.encode.exit.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.linkPath.encode.exit.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.linkPath.encode.exit.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"glyph.glyphType.linkPath.encode.exit.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.exit.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.exit.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"glyph.glyphType.linkPath.encode.exit.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"glyph.glyphType.linkPath.encode.exit.outerBorder":{"desc":"<p>Outer border</p>\n"},"glyph.glyphType.linkPath.encode.exit.innerBorder":{"desc":"<p>Inner border</p>\n"},"glyph.glyphType.linkPath.encode.exit.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"glyph.glyphType.linkPath.encode.exit.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.linkPath.encode.exit.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"glyph.glyphType.linkPath.encode.exit.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"glyph.glyphType.linkPath.encode.exit.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"glyph.glyphType.linkPath.encode.exit.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"glyph.glyphType.linkPath.encode.exit.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"glyph.glyphType.linkPath.encode.exit.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"glyph.glyphType.linkPath.encode.exit.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"glyph.glyphType.linkPath.encode.exit.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.linkPath.encode.exit.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.linkPath.encode.exit.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.linkPath.encode.exit.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"glyph.glyphType.linkPath.encode.exit.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"glyph.glyphType.linkPath.encode.exit.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"glyph.glyphType.linkPath.encode.exit.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.exit.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"glyph.glyphType.linkPath.encode.exit.texture":{"desc":"<p>The texture of the graphic</p>\n"},"glyph.glyphType.linkPath.encode.exit.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"glyph.glyphType.linkPath.encode.exit.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"glyph.glyphType.linkPath.encode.exit.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"glyph.glyphType.linkPath.encode.exit.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"glyph.glyphType.linkPath.encode.exit.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.hover":{"desc":"<p>Set the visual channel mapping corresponding to the graphics elements when in the <code class=\"codespan\">hover</code> state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.linkPath.encode.hover.x0":{"desc":"<p>Minimum horizontal position</p>\n"},"glyph.glyphType.linkPath.encode.hover.x1":{"desc":"<p>Maximum horizontal position</p>\n"},"glyph.glyphType.linkPath.encode.hover.y0":{"desc":"<p>Minimum vertical position</p>\n"},"glyph.glyphType.linkPath.encode.hover.y1":{"desc":"<p>Maximum vertical position</p>\n"},"glyph.glyphType.linkPath.encode.hover.thickness":{"desc":"<p>Thickness of the graphic element</p>\n"},"glyph.glyphType.linkPath.encode.hover.curvature":{"desc":"<p>Curvature of the graphic element, default is 0.5</p>\n"},"glyph.glyphType.linkPath.encode.hover.round":{"desc":"<p>Whether to round the calculated path of the graphic element</p>\n"},"glyph.glyphType.linkPath.encode.hover.ratio":{"desc":"<p>Thickness percentage of the normal path</p>\n"},"glyph.glyphType.linkPath.encode.hover.align":{"desc":"<p>Alignment of the graphic element</p>\n<ul>\n<li>&#39;start&#39;</li>\n<li>&#39;end&#39;</li>\n<li>&#39;center&#39;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.hover.pathType":{"desc":"<p>Rendering shape of the graphic element</p>\n<ul>\n<li>&#39;line&#39;</li>\n<li>&#39;smooth&#39;</li>\n<li>&#39;polyline&#39;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.hover.startArrow":{"desc":"<p>Enable arrow at starting point</p>\n"},"glyph.glyphType.linkPath.encode.hover.endArrow":{"desc":"<p>Enable arrow at the end point</p>\n"},"glyph.glyphType.linkPath.encode.hover.backgroundStyle":{"desc":"<p>Style of the graphic element background</p>\n"},"glyph.glyphType.linkPath.encode.hover.direction":{"desc":"<p>Direction of the graphic element</p>\n<ul>\n<li>&#39;horizontal&#39;</li>\n<li>&#39;vertical&#39;</li>\n<li>&#39;LR&#39;</li>\n<li>&#39;RL&#39;</li>\n<li>&#39;TB&#39;</li>\n<li>&#39;BL&#39;</li>\n<li>&#39;radial&#39;</li>\n</ul>\n<!-- base channels -->\n"},"glyph.glyphType.linkPath.encode.hover.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"glyph.glyphType.linkPath.encode.hover.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"glyph.glyphType.linkPath.encode.hover.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"glyph.glyphType.linkPath.encode.hover.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"glyph.glyphType.linkPath.encode.hover.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.linkPath.encode.hover.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"glyph.glyphType.linkPath.encode.hover.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.linkPath.encode.hover.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.linkPath.encode.hover.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.linkPath.encode.hover.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.linkPath.encode.hover.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"glyph.glyphType.linkPath.encode.hover.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.hover.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.hover.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"glyph.glyphType.linkPath.encode.hover.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"glyph.glyphType.linkPath.encode.hover.outerBorder":{"desc":"<p>Outer border</p>\n"},"glyph.glyphType.linkPath.encode.hover.innerBorder":{"desc":"<p>Inner border</p>\n"},"glyph.glyphType.linkPath.encode.hover.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"glyph.glyphType.linkPath.encode.hover.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.linkPath.encode.hover.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"glyph.glyphType.linkPath.encode.hover.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"glyph.glyphType.linkPath.encode.hover.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"glyph.glyphType.linkPath.encode.hover.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"glyph.glyphType.linkPath.encode.hover.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"glyph.glyphType.linkPath.encode.hover.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"glyph.glyphType.linkPath.encode.hover.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"glyph.glyphType.linkPath.encode.hover.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.linkPath.encode.hover.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.linkPath.encode.hover.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.linkPath.encode.hover.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"glyph.glyphType.linkPath.encode.hover.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"glyph.glyphType.linkPath.encode.hover.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"glyph.glyphType.linkPath.encode.hover.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"glyph.glyphType.linkPath.encode.hover.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"glyph.glyphType.linkPath.encode.hover.texture":{"desc":"<p>The texture of the graphic</p>\n"},"glyph.glyphType.linkPath.encode.hover.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"glyph.glyphType.linkPath.encode.hover.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"glyph.glyphType.linkPath.encode.hover.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"glyph.glyphType.linkPath.encode.hover.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"glyph.glyphType.linkPath.encode.hover.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"glyph.glyphType.linkPath.zIndex":{"desc":"<p>Set the zIndex of the container shape (group) corresponding to the <code class=\"codespan\">mark</code> graphic primitive</p>\n"},"glyph.glyphType.linkPath.interactive":{"desc":"<p>Type: <code class=\"codespan\">boolean</code>\nRequired: No</p>\n"},"glyph.glyphType.linkPath.context":{"desc":"<p>Set the context parameters of the graphic primitive</p>\n"},"glyph.glyphType.linkPath.setCustomizedShape":{"desc":"<p>Set the callback function of custom shape. The corresponding ts type is as follows:</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>Where <code class=\"codespan\">ICustomPath2D</code> is a utility class provided by VRender for drawing custom paths.</p>\n"},"glyph.glyphType.linkPath.support3d":{"desc":"<p>Whether to support 3d mode when the canvas is set to 3d view.</p>\n"},"glyph.glyphType.linkPath.group":{"desc":"<p>Set the parent graphic primitive. Supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> The id of the corresponding parent graphic primitive</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> The corresponding grammar element of the parent graphic primitive, generally used in API call scenarios.</li>\n</ul>\n<p>If not set, it will be attached to the root node of the canvas by default.</p>\n"},"glyph.glyphType.linkPath.from":{"desc":"<p>ts type definition is:</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>Declare the data on which the graphic primitive depends through the <code class=\"codespan\">data</code> attribute.</p>\n"},"glyph.glyphType.linkPath.key":{"desc":"<p>Set the unique identifier for the graphic primitive data element, which is used to calculate the data state of the graphic element. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the <code class=\"codespan\">key</code></li>\n</ul>\n"},"glyph.glyphType.linkPath.sort":{"desc":"<p>Sort all graphic elements in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"glyph.glyphType.linkPath.groupBy":{"desc":"<p>Set the grouping attribute, the corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the grouping <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the grouping <code class=\"codespan\">key</code></li>\n</ul>\n"},"glyph.glyphType.linkPath.groupSort":{"desc":"<p>Sort the groups in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"glyph.glyphType.linkPath.coordinate":{"desc":"<p>Set the id or graphic element corresponding to the associated coordinate system of this graphic primitive</p>\n"},"glyph.glyphType.linkPath.state":{"desc":"<p>Set the state values ​​of all graphical elements of the current graphic primitive, supporting three formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the state of the graphic, for example, <code class=\"codespan\">{ state: &#39;selected&#39;}</code> sets the state of all graphics to <code class=\"codespan\">&#39;selected&#39;</code>, usually in this case, the <code class=\"codespan\">encode</code> also sets the graphic channel mapping corresponding to the <code class=\"codespan\">&#39;selected&#39;</code> state</li>\n<li><code class=\"codespan\">string[]</code> Set multiple states for the graphic, you can configure <code class=\"codespan\">stateSort</code> to influence the order of executing the graphic channel mapping corresponding to the state</li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the state value, and the return parameter is <code class=\"codespan\">string | string[]</code>, the corresponding ts type definition is:</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"glyph.glyphType.linkPath.stateSort":{"desc":"<p>Set the sorting function of the state values ​​of all graphics elements of the current graphic primitive, which will affect the order of the graphic channel mapping corresponding to the state. The result of the graphic channel mapping executed earlier may be covered by subsequent states. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"glyph.glyphType.linkPath.transform":{"desc":"<p>Set the corresponding transformation of the graphic primitive. All data transformations can be configured on the graphic primitive and are used for the <code class=\"codespan\">join data</code> execution transformation;\nAnother type of transformation is the transformation executed by graphical elements, such as <code class=\"codespan\">dodge</code>;\nThe general type definition is as follows:</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>The parameters supported by each transformation are different</p>\n"},"glyph.glyphType.linkPath.layout":{"desc":"<p>Set the layout parameters of the graphic primitive. There are two roles when the graphic primitive participates in the layout:</p>\n<ul>\n<li>&#39;container&#39; Container graphic primitive, usually <code class=\"codespan\">group</code> graphic primitive</li>\n<li>&#39;item&#39; layout child element, as a child node of the container graphic primitive</li>\n</ul>\n<p>Please note that we only support one layer of layout. If it is a multi-layer nested layout, it is recommended to use a custom layout scheme for implementation;</p>\n<p>Now support two content layouts: <code class=\"codespan\">grid</code> layout and <code class=\"codespan\">relative</code> layout, the related type definition is as follows</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>If you want to set a custom layout scheme, <code class=\"codespan\">layout</code> also supports setting callback functions directly. The definition of the callback function is as follows:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"glyph.glyphType.linkPath.layout.display":{"desc":"<p>The container graphic primitive sets the layout type and supports two configurations:</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> Relative layout</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> Grid layout</li>\n</ul>\n"},"glyph.glyphType.linkPath.layout.callback":{"desc":"<p>Customize the callback function for this graphic primitive, the ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"glyph.glyphType.linkPath.layout.skipBeforeLayouted":{"desc":"<p>Skip the execution stage before the layout is completed</p>\n"},"glyph.glyphType.linkPath.layout.updateViewSignals":{"desc":"<p>Whether to update the default view signals, that is: <code class=\"codespan\">padding</code>, <code class=\"codespan\">viewWidth</code> and <code class=\"codespan\">viewHeight</code></p>\n<p>This property can only be set on a container graphic primitive with <code class=\"codespan\">&#39;relative&#39;</code> layout.</p>\n"},"glyph.glyphType.linkPath.layout.maxChildWidth":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum width of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the width of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"glyph.glyphType.linkPath.layout.maxChildHeight":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum height of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the height of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"glyph.glyphType.linkPath.layout.position":{"desc":"<p>Set the position of the child graphic primitive of the relative layout. The supported settings are:</p>\n<ul>\n<li>&#39;top&#39; Relative to the top of the parent graphic primitive</li>\n<li>&#39;bottom&#39; Relative to the bottom of the parent graphic primitive</li>\n<li>&#39;left&#39; Relative to the left side of the parent graphic primitive</li>\n<li>&#39;right&#39; Relative to the right side of the parent graphic primitive</li>\n<li>&#39;content&#39; Relative to the center of the parent graphic primitive, that is, the content area</li>\n<li>&#39;auto&#39; When the graphic primitive sets the coordinate system, the position relative to the parent graphic primitive is automatically calculated according to the associated <code class=\"codespan\">scale</code></li>\n</ul>\n"},"glyph.glyphType.linkPath.layout.padding":{"desc":"<p>The inner padding of Child graphic primitive, in px unit, with the default padding of 0 for all directions. Accepts numerical values, numerical arrays, and objects for settings.</p>\n<p>Example of usage:</p>\n<pre><code class=\"lang-ts\">// Numerical type, set the padding to 5\npadding: 5;\n// Numerical array, set the top and bottom padding to 5, and the left and right padding to 10, similar to the CSS box model\npadding: [5, 10];\n// Numerical array, set the padding for all four directions separately\npadding: [\n  5, // Top\n  10, // Right\n  5, // Bottom\n  10 // Left\n];\n// Object type\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"glyph.glyphType.linkPath.layout.gridTemplateRows":{"desc":"<p>The parent graphic primitive of the grid layout sets the row height</p>\n"},"glyph.glyphType.linkPath.layout.gridTemplateColumns":{"desc":"<p>The parent graphic primitive of the grid layout sets the column width</p>\n"},"glyph.glyphType.linkPath.layout.gridRowGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the row spacing</p>\n"},"glyph.glyphType.linkPath.layout.gridColumnGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the column spacing</p>\n"},"glyph.glyphType.linkPath.layout.gridRowStart":{"desc":"<p>The child graphic primitive of the grid layout sets the row start position</p>\n"},"glyph.glyphType.linkPath.layout.gridRowEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the row end position</p>\n"},"glyph.glyphType.linkPath.layout.gridColumnStart":{"desc":"<p>The child graphic primitive of the grid layout sets the column start position</p>\n"},"glyph.glyphType.linkPath.layout.gridColumnEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the column end position</p>\n"},"glyph.glyphType.ripplePoint":{"desc":"<p>Execute <code class=\"codespan\">registerRippleGlyph()</code> to register the ripplePoint glyph before using it.</p>\n"},"glyph.glyphType.ripplePoint.glyphType":{"desc":"<p>Set the glyph type to <code class=\"codespan\">ripplePoint</code></p>\n"},"glyph.glyphType.ripplePoint.animation":{"desc":"<p>Implement the loop playback of ripples through the <code class=\"codespan\">ripple</code> channel:</p>\n<pre><code class=\"lang-json\">{\n  &quot;channel&quot;: { &quot;ripple&quot;: { &quot;from&quot;: 0, &quot;to&quot;: 1 } },\n  &quot;loop&quot;: true\n}\n</code></pre>\n"},"glyph.glyphType.ripplePoint.encode":{"desc":"<p>Set the visual channel encoding of the graphics elements, supporting three data change states by default:</p>\n<ul>\n<li><code class=\"codespan\">enter</code> newly added data items</li>\n<li><code class=\"codespan\">update</code> data items have been updated</li>\n<li><code class=\"codespan\">exit</code> data items are deleted</li>\n</ul>\n<p>Note that the data state here is automatically generated based on the <code class=\"codespan\">mark</code>&#39;s <code class=\"codespan\">key</code>. We will calculate the unique identifier for the data bound to the <code class=\"codespan\">mark</code> based on the <code class=\"codespan\">key</code> configuration. After the data is updated, if the corresponding unique identifier no longer exists, the state is <code class=\"codespan\">exit</code>; if it exists, it is <code class=\"codespan\">update</code>. If the previous data does not exist for the unique identifier, the data item&#39;s state is <code class=\"codespan\">enter</code>.</p>\n<p>Supports one interaction state by default:</p>\n<ul>\n<li><code class=\"codespan\">hover</code> when the mouse hovers over a specific shape, set the corresponding visual channel encoding for the shape</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.encode.enter":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data initialization state. Note that it will not be executed again when the data is updated.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.ripplePoint.encode.enter.ripple":{"desc":"<p>Ripple change state, range is <code class=\"codespan\">[0, 1]</code></p>\n<!-- base channels -->\n"},"glyph.glyphType.ripplePoint.encode.enter.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.ripplePoint.encode.enter.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.ripplePoint.encode.enter.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.encode.enter.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.encode.enter.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.outerBorder":{"desc":"<p>Outer border</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.innerBorder":{"desc":"<p>Inner border</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.ripplePoint.encode.enter.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.encode.enter.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.texture":{"desc":"<p>The texture of the graphic</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"glyph.glyphType.ripplePoint.encode.enter.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.encode.update":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data update state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.ripplePoint.encode.update.ripple":{"desc":"<p>Ripple change state, range is <code class=\"codespan\">[0, 1]</code></p>\n<!-- base channels -->\n"},"glyph.glyphType.ripplePoint.encode.update.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"glyph.glyphType.ripplePoint.encode.update.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"glyph.glyphType.ripplePoint.encode.update.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"glyph.glyphType.ripplePoint.encode.update.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"glyph.glyphType.ripplePoint.encode.update.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.ripplePoint.encode.update.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"glyph.glyphType.ripplePoint.encode.update.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.ripplePoint.encode.update.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.ripplePoint.encode.update.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.ripplePoint.encode.update.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.ripplePoint.encode.update.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"glyph.glyphType.ripplePoint.encode.update.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.encode.update.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.encode.update.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"glyph.glyphType.ripplePoint.encode.update.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"glyph.glyphType.ripplePoint.encode.update.outerBorder":{"desc":"<p>Outer border</p>\n"},"glyph.glyphType.ripplePoint.encode.update.innerBorder":{"desc":"<p>Inner border</p>\n"},"glyph.glyphType.ripplePoint.encode.update.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"glyph.glyphType.ripplePoint.encode.update.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.ripplePoint.encode.update.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"glyph.glyphType.ripplePoint.encode.update.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"glyph.glyphType.ripplePoint.encode.update.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"glyph.glyphType.ripplePoint.encode.update.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"glyph.glyphType.ripplePoint.encode.update.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"glyph.glyphType.ripplePoint.encode.update.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"glyph.glyphType.ripplePoint.encode.update.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"glyph.glyphType.ripplePoint.encode.update.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.ripplePoint.encode.update.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.ripplePoint.encode.update.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.ripplePoint.encode.update.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"glyph.glyphType.ripplePoint.encode.update.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"glyph.glyphType.ripplePoint.encode.update.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"glyph.glyphType.ripplePoint.encode.update.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.encode.update.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"glyph.glyphType.ripplePoint.encode.update.texture":{"desc":"<p>The texture of the graphic</p>\n"},"glyph.glyphType.ripplePoint.encode.update.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"glyph.glyphType.ripplePoint.encode.update.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"glyph.glyphType.ripplePoint.encode.update.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"glyph.glyphType.ripplePoint.encode.update.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"glyph.glyphType.ripplePoint.encode.update.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.encode.exit":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data deletion state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.ripplePoint.encode.exit.ripple":{"desc":"<p>Ripple change state, range is <code class=\"codespan\">[0, 1]</code></p>\n<!-- base channels -->\n"},"glyph.glyphType.ripplePoint.encode.exit.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.ripplePoint.encode.exit.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.ripplePoint.encode.exit.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.encode.exit.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.encode.exit.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.outerBorder":{"desc":"<p>Outer border</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.innerBorder":{"desc":"<p>Inner border</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.ripplePoint.encode.exit.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.encode.exit.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.texture":{"desc":"<p>The texture of the graphic</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"glyph.glyphType.ripplePoint.encode.exit.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.encode.hover":{"desc":"<p>Set the visual channel mapping corresponding to the graphics elements when in the <code class=\"codespan\">hover</code> state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.ripplePoint.encode.hover.ripple":{"desc":"<p>Ripple change state, range is <code class=\"codespan\">[0, 1]</code></p>\n<!-- base channels -->\n"},"glyph.glyphType.ripplePoint.encode.hover.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.ripplePoint.encode.hover.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.ripplePoint.encode.hover.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.encode.hover.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.encode.hover.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.outerBorder":{"desc":"<p>Outer border</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.innerBorder":{"desc":"<p>Inner border</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.ripplePoint.encode.hover.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.encode.hover.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.texture":{"desc":"<p>The texture of the graphic</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"glyph.glyphType.ripplePoint.encode.hover.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.zIndex":{"desc":"<p>Set the zIndex of the container shape (group) corresponding to the <code class=\"codespan\">mark</code> graphic primitive</p>\n"},"glyph.glyphType.ripplePoint.interactive":{"desc":"<p>Type: <code class=\"codespan\">boolean</code>\nRequired: No</p>\n"},"glyph.glyphType.ripplePoint.context":{"desc":"<p>Set the context parameters of the graphic primitive</p>\n"},"glyph.glyphType.ripplePoint.setCustomizedShape":{"desc":"<p>Set the callback function of custom shape. The corresponding ts type is as follows:</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>Where <code class=\"codespan\">ICustomPath2D</code> is a utility class provided by VRender for drawing custom paths.</p>\n"},"glyph.glyphType.ripplePoint.support3d":{"desc":"<p>Whether to support 3d mode when the canvas is set to 3d view.</p>\n"},"glyph.glyphType.ripplePoint.group":{"desc":"<p>Set the parent graphic primitive. Supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> The id of the corresponding parent graphic primitive</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> The corresponding grammar element of the parent graphic primitive, generally used in API call scenarios.</li>\n</ul>\n<p>If not set, it will be attached to the root node of the canvas by default.</p>\n"},"glyph.glyphType.ripplePoint.from":{"desc":"<p>ts type definition is:</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>Declare the data on which the graphic primitive depends through the <code class=\"codespan\">data</code> attribute.</p>\n"},"glyph.glyphType.ripplePoint.key":{"desc":"<p>Set the unique identifier for the graphic primitive data element, which is used to calculate the data state of the graphic element. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the <code class=\"codespan\">key</code></li>\n</ul>\n"},"glyph.glyphType.ripplePoint.sort":{"desc":"<p>Sort all graphic elements in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"glyph.glyphType.ripplePoint.groupBy":{"desc":"<p>Set the grouping attribute, the corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the grouping <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the grouping <code class=\"codespan\">key</code></li>\n</ul>\n"},"glyph.glyphType.ripplePoint.groupSort":{"desc":"<p>Sort the groups in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"glyph.glyphType.ripplePoint.coordinate":{"desc":"<p>Set the id or graphic element corresponding to the associated coordinate system of this graphic primitive</p>\n"},"glyph.glyphType.ripplePoint.state":{"desc":"<p>Set the state values ​​of all graphical elements of the current graphic primitive, supporting three formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the state of the graphic, for example, <code class=\"codespan\">{ state: &#39;selected&#39;}</code> sets the state of all graphics to <code class=\"codespan\">&#39;selected&#39;</code>, usually in this case, the <code class=\"codespan\">encode</code> also sets the graphic channel mapping corresponding to the <code class=\"codespan\">&#39;selected&#39;</code> state</li>\n<li><code class=\"codespan\">string[]</code> Set multiple states for the graphic, you can configure <code class=\"codespan\">stateSort</code> to influence the order of executing the graphic channel mapping corresponding to the state</li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the state value, and the return parameter is <code class=\"codespan\">string | string[]</code>, the corresponding ts type definition is:</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"glyph.glyphType.ripplePoint.stateSort":{"desc":"<p>Set the sorting function of the state values ​​of all graphics elements of the current graphic primitive, which will affect the order of the graphic channel mapping corresponding to the state. The result of the graphic channel mapping executed earlier may be covered by subsequent states. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"glyph.glyphType.ripplePoint.transform":{"desc":"<p>Set the corresponding transformation of the graphic primitive. All data transformations can be configured on the graphic primitive and are used for the <code class=\"codespan\">join data</code> execution transformation;\nAnother type of transformation is the transformation executed by graphical elements, such as <code class=\"codespan\">dodge</code>;\nThe general type definition is as follows:</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>The parameters supported by each transformation are different</p>\n"},"glyph.glyphType.ripplePoint.layout":{"desc":"<p>Set the layout parameters of the graphic primitive. There are two roles when the graphic primitive participates in the layout:</p>\n<ul>\n<li>&#39;container&#39; Container graphic primitive, usually <code class=\"codespan\">group</code> graphic primitive</li>\n<li>&#39;item&#39; layout child element, as a child node of the container graphic primitive</li>\n</ul>\n<p>Please note that we only support one layer of layout. If it is a multi-layer nested layout, it is recommended to use a custom layout scheme for implementation;</p>\n<p>Now support two content layouts: <code class=\"codespan\">grid</code> layout and <code class=\"codespan\">relative</code> layout, the related type definition is as follows</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>If you want to set a custom layout scheme, <code class=\"codespan\">layout</code> also supports setting callback functions directly. The definition of the callback function is as follows:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"glyph.glyphType.ripplePoint.layout.display":{"desc":"<p>The container graphic primitive sets the layout type and supports two configurations:</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> Relative layout</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> Grid layout</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.layout.callback":{"desc":"<p>Customize the callback function for this graphic primitive, the ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"glyph.glyphType.ripplePoint.layout.skipBeforeLayouted":{"desc":"<p>Skip the execution stage before the layout is completed</p>\n"},"glyph.glyphType.ripplePoint.layout.updateViewSignals":{"desc":"<p>Whether to update the default view signals, that is: <code class=\"codespan\">padding</code>, <code class=\"codespan\">viewWidth</code> and <code class=\"codespan\">viewHeight</code></p>\n<p>This property can only be set on a container graphic primitive with <code class=\"codespan\">&#39;relative&#39;</code> layout.</p>\n"},"glyph.glyphType.ripplePoint.layout.maxChildWidth":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum width of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the width of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.layout.maxChildHeight":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum height of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the height of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"glyph.glyphType.ripplePoint.layout.position":{"desc":"<p>Set the position of the child graphic primitive of the relative layout. The supported settings are:</p>\n<ul>\n<li>&#39;top&#39; Relative to the top of the parent graphic primitive</li>\n<li>&#39;bottom&#39; Relative to the bottom of the parent graphic primitive</li>\n<li>&#39;left&#39; Relative to the left side of the parent graphic primitive</li>\n<li>&#39;right&#39; Relative to the right side of the parent graphic primitive</li>\n<li>&#39;content&#39; Relative to the center of the parent graphic primitive, that is, the content area</li>\n<li>&#39;auto&#39; When the graphic primitive sets the coordinate system, the position relative to the parent graphic primitive is automatically calculated according to the associated <code class=\"codespan\">scale</code></li>\n</ul>\n"},"glyph.glyphType.ripplePoint.layout.padding":{"desc":"<p>The inner padding of Child graphic primitive, in px unit, with the default padding of 0 for all directions. Accepts numerical values, numerical arrays, and objects for settings.</p>\n<p>Example of usage:</p>\n<pre><code class=\"lang-ts\">// Numerical type, set the padding to 5\npadding: 5;\n// Numerical array, set the top and bottom padding to 5, and the left and right padding to 10, similar to the CSS box model\npadding: [5, 10];\n// Numerical array, set the padding for all four directions separately\npadding: [\n  5, // Top\n  10, // Right\n  5, // Bottom\n  10 // Left\n];\n// Object type\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"glyph.glyphType.ripplePoint.layout.gridTemplateRows":{"desc":"<p>The parent graphic primitive of the grid layout sets the row height</p>\n"},"glyph.glyphType.ripplePoint.layout.gridTemplateColumns":{"desc":"<p>The parent graphic primitive of the grid layout sets the column width</p>\n"},"glyph.glyphType.ripplePoint.layout.gridRowGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the row spacing</p>\n"},"glyph.glyphType.ripplePoint.layout.gridColumnGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the column spacing</p>\n"},"glyph.glyphType.ripplePoint.layout.gridRowStart":{"desc":"<p>The child graphic primitive of the grid layout sets the row start position</p>\n"},"glyph.glyphType.ripplePoint.layout.gridRowEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the row end position</p>\n"},"glyph.glyphType.ripplePoint.layout.gridColumnStart":{"desc":"<p>The child graphic primitive of the grid layout sets the column start position</p>\n"},"glyph.glyphType.ripplePoint.layout.gridColumnEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the column end position</p>\n"},"glyph.glyphType.wave":{"desc":"<p>You need to perform <code class=\"codespan\">registerWaveGlyph()</code> to register the wave glyph before using it</p>\n"},"glyph.glyphType.wave.glyphType":{"desc":"<p>Set the glyph type to <code class=\"codespan\">wave</code></p>\n"},"glyph.glyphType.wave.animation":{"desc":"<p>You can implement the ripple loop playback through the <code class=\"codespan\">wave</code> channel:</p>\n<pre><code class=\"lang-json\">{\n  &quot;channel&quot;: { &quot;wave&quot;: { &quot;from&quot;: 0, &quot;to&quot;: 1 } },\n  &quot;loop&quot;: true\n}\n</code></pre>\n"},"glyph.glyphType.wave.encode":{"desc":"<p>Set the visual channel encoding of the graphics elements, supporting three data change states by default:</p>\n<ul>\n<li><code class=\"codespan\">enter</code> newly added data items</li>\n<li><code class=\"codespan\">update</code> data items have been updated</li>\n<li><code class=\"codespan\">exit</code> data items are deleted</li>\n</ul>\n<p>Note that the data state here is automatically generated based on the <code class=\"codespan\">mark</code>&#39;s <code class=\"codespan\">key</code>. We will calculate the unique identifier for the data bound to the <code class=\"codespan\">mark</code> based on the <code class=\"codespan\">key</code> configuration. After the data is updated, if the corresponding unique identifier no longer exists, the state is <code class=\"codespan\">exit</code>; if it exists, it is <code class=\"codespan\">update</code>. If the previous data does not exist for the unique identifier, the data item&#39;s state is <code class=\"codespan\">enter</code>.</p>\n<p>Supports one interaction state by default:</p>\n<ul>\n<li><code class=\"codespan\">hover</code> when the mouse hovers over a specific shape, set the corresponding visual channel encoding for the shape</li>\n</ul>\n"},"glyph.glyphType.wave.encode.enter":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data initialization state. Note that it will not be executed again when the data is updated.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.wave.encode.enter.wave":{"desc":"<p>Wave change state, range is <code class=\"codespan\">[0, 1]</code></p>\n<!-- base channels -->\n"},"glyph.glyphType.wave.encode.enter.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"glyph.glyphType.wave.encode.enter.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"glyph.glyphType.wave.encode.enter.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"glyph.glyphType.wave.encode.enter.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"glyph.glyphType.wave.encode.enter.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.wave.encode.enter.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"glyph.glyphType.wave.encode.enter.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.wave.encode.enter.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.wave.encode.enter.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.wave.encode.enter.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.wave.encode.enter.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"glyph.glyphType.wave.encode.enter.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.wave.encode.enter.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.wave.encode.enter.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"glyph.glyphType.wave.encode.enter.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"glyph.glyphType.wave.encode.enter.outerBorder":{"desc":"<p>Outer border</p>\n"},"glyph.glyphType.wave.encode.enter.innerBorder":{"desc":"<p>Inner border</p>\n"},"glyph.glyphType.wave.encode.enter.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"glyph.glyphType.wave.encode.enter.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.wave.encode.enter.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"glyph.glyphType.wave.encode.enter.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"glyph.glyphType.wave.encode.enter.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"glyph.glyphType.wave.encode.enter.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"glyph.glyphType.wave.encode.enter.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"glyph.glyphType.wave.encode.enter.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"glyph.glyphType.wave.encode.enter.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"glyph.glyphType.wave.encode.enter.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.wave.encode.enter.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.wave.encode.enter.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.wave.encode.enter.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"glyph.glyphType.wave.encode.enter.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"glyph.glyphType.wave.encode.enter.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"glyph.glyphType.wave.encode.enter.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"glyph.glyphType.wave.encode.enter.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"glyph.glyphType.wave.encode.enter.texture":{"desc":"<p>The texture of the graphic</p>\n"},"glyph.glyphType.wave.encode.enter.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"glyph.glyphType.wave.encode.enter.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"glyph.glyphType.wave.encode.enter.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"glyph.glyphType.wave.encode.enter.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"glyph.glyphType.wave.encode.enter.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"glyph.glyphType.wave.encode.update":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data update state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.wave.encode.update.wave":{"desc":"<p>Wave change state, range is <code class=\"codespan\">[0, 1]</code></p>\n<!-- base channels -->\n"},"glyph.glyphType.wave.encode.update.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"glyph.glyphType.wave.encode.update.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"glyph.glyphType.wave.encode.update.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"glyph.glyphType.wave.encode.update.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"glyph.glyphType.wave.encode.update.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.wave.encode.update.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"glyph.glyphType.wave.encode.update.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.wave.encode.update.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.wave.encode.update.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.wave.encode.update.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.wave.encode.update.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"glyph.glyphType.wave.encode.update.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.wave.encode.update.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.wave.encode.update.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"glyph.glyphType.wave.encode.update.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"glyph.glyphType.wave.encode.update.outerBorder":{"desc":"<p>Outer border</p>\n"},"glyph.glyphType.wave.encode.update.innerBorder":{"desc":"<p>Inner border</p>\n"},"glyph.glyphType.wave.encode.update.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"glyph.glyphType.wave.encode.update.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.wave.encode.update.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"glyph.glyphType.wave.encode.update.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"glyph.glyphType.wave.encode.update.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"glyph.glyphType.wave.encode.update.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"glyph.glyphType.wave.encode.update.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"glyph.glyphType.wave.encode.update.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"glyph.glyphType.wave.encode.update.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"glyph.glyphType.wave.encode.update.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.wave.encode.update.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.wave.encode.update.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.wave.encode.update.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"glyph.glyphType.wave.encode.update.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"glyph.glyphType.wave.encode.update.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"glyph.glyphType.wave.encode.update.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"glyph.glyphType.wave.encode.update.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"glyph.glyphType.wave.encode.update.texture":{"desc":"<p>The texture of the graphic</p>\n"},"glyph.glyphType.wave.encode.update.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"glyph.glyphType.wave.encode.update.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"glyph.glyphType.wave.encode.update.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"glyph.glyphType.wave.encode.update.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"glyph.glyphType.wave.encode.update.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"glyph.glyphType.wave.encode.exit":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data deletion state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.wave.encode.exit.wave":{"desc":"<p>Wave change state, range is <code class=\"codespan\">[0, 1]</code></p>\n<!-- base channels -->\n"},"glyph.glyphType.wave.encode.exit.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"glyph.glyphType.wave.encode.exit.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"glyph.glyphType.wave.encode.exit.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"glyph.glyphType.wave.encode.exit.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"glyph.glyphType.wave.encode.exit.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.wave.encode.exit.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"glyph.glyphType.wave.encode.exit.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.wave.encode.exit.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.wave.encode.exit.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.wave.encode.exit.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.wave.encode.exit.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"glyph.glyphType.wave.encode.exit.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.wave.encode.exit.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.wave.encode.exit.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"glyph.glyphType.wave.encode.exit.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"glyph.glyphType.wave.encode.exit.outerBorder":{"desc":"<p>Outer border</p>\n"},"glyph.glyphType.wave.encode.exit.innerBorder":{"desc":"<p>Inner border</p>\n"},"glyph.glyphType.wave.encode.exit.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"glyph.glyphType.wave.encode.exit.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.wave.encode.exit.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"glyph.glyphType.wave.encode.exit.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"glyph.glyphType.wave.encode.exit.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"glyph.glyphType.wave.encode.exit.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"glyph.glyphType.wave.encode.exit.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"glyph.glyphType.wave.encode.exit.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"glyph.glyphType.wave.encode.exit.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"glyph.glyphType.wave.encode.exit.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.wave.encode.exit.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.wave.encode.exit.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.wave.encode.exit.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"glyph.glyphType.wave.encode.exit.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"glyph.glyphType.wave.encode.exit.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"glyph.glyphType.wave.encode.exit.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"glyph.glyphType.wave.encode.exit.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"glyph.glyphType.wave.encode.exit.texture":{"desc":"<p>The texture of the graphic</p>\n"},"glyph.glyphType.wave.encode.exit.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"glyph.glyphType.wave.encode.exit.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"glyph.glyphType.wave.encode.exit.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"glyph.glyphType.wave.encode.exit.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"glyph.glyphType.wave.encode.exit.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"glyph.glyphType.wave.encode.hover":{"desc":"<p>Set the visual channel mapping corresponding to the graphics elements when in the <code class=\"codespan\">hover</code> state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n"},"glyph.glyphType.wave.encode.hover.wave":{"desc":"<p>Wave change state, range is <code class=\"codespan\">[0, 1]</code></p>\n<!-- base channels -->\n"},"glyph.glyphType.wave.encode.hover.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"glyph.glyphType.wave.encode.hover.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"glyph.glyphType.wave.encode.hover.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"glyph.glyphType.wave.encode.hover.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"glyph.glyphType.wave.encode.hover.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.wave.encode.hover.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"glyph.glyphType.wave.encode.hover.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.wave.encode.hover.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.wave.encode.hover.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.wave.encode.hover.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"glyph.glyphType.wave.encode.hover.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"glyph.glyphType.wave.encode.hover.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"glyph.glyphType.wave.encode.hover.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"glyph.glyphType.wave.encode.hover.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"glyph.glyphType.wave.encode.hover.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"glyph.glyphType.wave.encode.hover.outerBorder":{"desc":"<p>Outer border</p>\n"},"glyph.glyphType.wave.encode.hover.innerBorder":{"desc":"<p>Inner border</p>\n"},"glyph.glyphType.wave.encode.hover.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"glyph.glyphType.wave.encode.hover.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"glyph.glyphType.wave.encode.hover.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"glyph.glyphType.wave.encode.hover.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"glyph.glyphType.wave.encode.hover.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"glyph.glyphType.wave.encode.hover.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"glyph.glyphType.wave.encode.hover.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"glyph.glyphType.wave.encode.hover.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"glyph.glyphType.wave.encode.hover.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"glyph.glyphType.wave.encode.hover.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.wave.encode.hover.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.wave.encode.hover.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"glyph.glyphType.wave.encode.hover.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"glyph.glyphType.wave.encode.hover.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"glyph.glyphType.wave.encode.hover.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"glyph.glyphType.wave.encode.hover.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"glyph.glyphType.wave.encode.hover.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"glyph.glyphType.wave.encode.hover.texture":{"desc":"<p>The texture of the graphic</p>\n"},"glyph.glyphType.wave.encode.hover.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"glyph.glyphType.wave.encode.hover.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"glyph.glyphType.wave.encode.hover.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"glyph.glyphType.wave.encode.hover.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"glyph.glyphType.wave.encode.hover.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"glyph.glyphType.wave.zIndex":{"desc":"<p>Set the zIndex of the container shape (group) corresponding to the <code class=\"codespan\">mark</code> graphic primitive</p>\n"},"glyph.glyphType.wave.interactive":{"desc":"<p>Type: <code class=\"codespan\">boolean</code>\nRequired: No</p>\n"},"glyph.glyphType.wave.context":{"desc":"<p>Set the context parameters of the graphic primitive</p>\n"},"glyph.glyphType.wave.setCustomizedShape":{"desc":"<p>Set the callback function of custom shape. The corresponding ts type is as follows:</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>Where <code class=\"codespan\">ICustomPath2D</code> is a utility class provided by VRender for drawing custom paths.</p>\n"},"glyph.glyphType.wave.support3d":{"desc":"<p>Whether to support 3d mode when the canvas is set to 3d view.</p>\n"},"glyph.glyphType.wave.group":{"desc":"<p>Set the parent graphic primitive. Supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> The id of the corresponding parent graphic primitive</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> The corresponding grammar element of the parent graphic primitive, generally used in API call scenarios.</li>\n</ul>\n<p>If not set, it will be attached to the root node of the canvas by default.</p>\n"},"glyph.glyphType.wave.from":{"desc":"<p>ts type definition is:</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>Declare the data on which the graphic primitive depends through the <code class=\"codespan\">data</code> attribute.</p>\n"},"glyph.glyphType.wave.key":{"desc":"<p>Set the unique identifier for the graphic primitive data element, which is used to calculate the data state of the graphic element. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the <code class=\"codespan\">key</code></li>\n</ul>\n"},"glyph.glyphType.wave.sort":{"desc":"<p>Sort all graphic elements in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"glyph.glyphType.wave.groupBy":{"desc":"<p>Set the grouping attribute, the corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the grouping <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the grouping <code class=\"codespan\">key</code></li>\n</ul>\n"},"glyph.glyphType.wave.groupSort":{"desc":"<p>Sort the groups in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"glyph.glyphType.wave.coordinate":{"desc":"<p>Set the id or graphic element corresponding to the associated coordinate system of this graphic primitive</p>\n"},"glyph.glyphType.wave.state":{"desc":"<p>Set the state values ​​of all graphical elements of the current graphic primitive, supporting three formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the state of the graphic, for example, <code class=\"codespan\">{ state: &#39;selected&#39;}</code> sets the state of all graphics to <code class=\"codespan\">&#39;selected&#39;</code>, usually in this case, the <code class=\"codespan\">encode</code> also sets the graphic channel mapping corresponding to the <code class=\"codespan\">&#39;selected&#39;</code> state</li>\n<li><code class=\"codespan\">string[]</code> Set multiple states for the graphic, you can configure <code class=\"codespan\">stateSort</code> to influence the order of executing the graphic channel mapping corresponding to the state</li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the state value, and the return parameter is <code class=\"codespan\">string | string[]</code>, the corresponding ts type definition is:</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"glyph.glyphType.wave.stateSort":{"desc":"<p>Set the sorting function of the state values ​​of all graphics elements of the current graphic primitive, which will affect the order of the graphic channel mapping corresponding to the state. The result of the graphic channel mapping executed earlier may be covered by subsequent states. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"glyph.glyphType.wave.transform":{"desc":"<p>Set the corresponding transformation of the graphic primitive. All data transformations can be configured on the graphic primitive and are used for the <code class=\"codespan\">join data</code> execution transformation;\nAnother type of transformation is the transformation executed by graphical elements, such as <code class=\"codespan\">dodge</code>;\nThe general type definition is as follows:</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>The parameters supported by each transformation are different</p>\n"},"glyph.glyphType.wave.layout":{"desc":"<p>Set the layout parameters of the graphic primitive. There are two roles when the graphic primitive participates in the layout:</p>\n<ul>\n<li>&#39;container&#39; Container graphic primitive, usually <code class=\"codespan\">group</code> graphic primitive</li>\n<li>&#39;item&#39; layout child element, as a child node of the container graphic primitive</li>\n</ul>\n<p>Please note that we only support one layer of layout. If it is a multi-layer nested layout, it is recommended to use a custom layout scheme for implementation;</p>\n<p>Now support two content layouts: <code class=\"codespan\">grid</code> layout and <code class=\"codespan\">relative</code> layout, the related type definition is as follows</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>If you want to set a custom layout scheme, <code class=\"codespan\">layout</code> also supports setting callback functions directly. The definition of the callback function is as follows:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"glyph.glyphType.wave.layout.display":{"desc":"<p>The container graphic primitive sets the layout type and supports two configurations:</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> Relative layout</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> Grid layout</li>\n</ul>\n"},"glyph.glyphType.wave.layout.callback":{"desc":"<p>Customize the callback function for this graphic primitive, the ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"glyph.glyphType.wave.layout.skipBeforeLayouted":{"desc":"<p>Skip the execution stage before the layout is completed</p>\n"},"glyph.glyphType.wave.layout.updateViewSignals":{"desc":"<p>Whether to update the default view signals, that is: <code class=\"codespan\">padding</code>, <code class=\"codespan\">viewWidth</code> and <code class=\"codespan\">viewHeight</code></p>\n<p>This property can only be set on a container graphic primitive with <code class=\"codespan\">&#39;relative&#39;</code> layout.</p>\n"},"glyph.glyphType.wave.layout.maxChildWidth":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum width of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the width of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"glyph.glyphType.wave.layout.maxChildHeight":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum height of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the height of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"glyph.glyphType.wave.layout.position":{"desc":"<p>Set the position of the child graphic primitive of the relative layout. The supported settings are:</p>\n<ul>\n<li>&#39;top&#39; Relative to the top of the parent graphic primitive</li>\n<li>&#39;bottom&#39; Relative to the bottom of the parent graphic primitive</li>\n<li>&#39;left&#39; Relative to the left side of the parent graphic primitive</li>\n<li>&#39;right&#39; Relative to the right side of the parent graphic primitive</li>\n<li>&#39;content&#39; Relative to the center of the parent graphic primitive, that is, the content area</li>\n<li>&#39;auto&#39; When the graphic primitive sets the coordinate system, the position relative to the parent graphic primitive is automatically calculated according to the associated <code class=\"codespan\">scale</code></li>\n</ul>\n"},"glyph.glyphType.wave.layout.padding":{"desc":"<p>The inner padding of Child graphic primitive, in px unit, with the default padding of 0 for all directions. Accepts numerical values, numerical arrays, and objects for settings.</p>\n<p>Example of usage:</p>\n<pre><code class=\"lang-ts\">// Numerical type, set the padding to 5\npadding: 5;\n// Numerical array, set the top and bottom padding to 5, and the left and right padding to 10, similar to the CSS box model\npadding: [5, 10];\n// Numerical array, set the padding for all four directions separately\npadding: [\n  5, // Top\n  10, // Right\n  5, // Bottom\n  10 // Left\n];\n// Object type\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"glyph.glyphType.wave.layout.gridTemplateRows":{"desc":"<p>The parent graphic primitive of the grid layout sets the row height</p>\n"},"glyph.glyphType.wave.layout.gridTemplateColumns":{"desc":"<p>The parent graphic primitive of the grid layout sets the column width</p>\n"},"glyph.glyphType.wave.layout.gridRowGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the row spacing</p>\n"},"glyph.glyphType.wave.layout.gridColumnGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the column spacing</p>\n"},"glyph.glyphType.wave.layout.gridRowStart":{"desc":"<p>The child graphic primitive of the grid layout sets the row start position</p>\n"},"glyph.glyphType.wave.layout.gridRowEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the row end position</p>\n"},"glyph.glyphType.wave.layout.gridColumnStart":{"desc":"<p>The child graphic primitive of the grid layout sets the column start position</p>\n"},"glyph.glyphType.wave.layout.gridColumnEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the column end position</p>\n"},"component":{"desc":"<p><strong> component Graphics </strong></p>\n"},"component.type":{"desc":"<p>Set the graphics type to <code class=\"codespan\">component</code></p>\n"},"component.componentType":{"desc":"<p>Set the type of the component</p>\n"},"component.componentType.axis.componentType":{"desc":"<p>Set the component type to <code class=\"codespan\">axis</code></p>\n"},"component.componentType.axis.axisType":{"desc":"<p>Set the type of axis, supporting two types of configuration:</p>\n<ul>\n<li>&#39;line&#39;</li>\n<li>&#39;circle&#39;;</li>\n</ul>\n"},"component.componentType.axis.tickCount":{"desc":"<p>Set the number of ticks</p>\n"},"component.componentType.axis.inside":{"desc":"<p>Whether the coordinate axis points to the inside of the coordinate system</p>\n"},"component.componentType.axis.baseValue":{"desc":"<p>Set the base value corresponding to the coordinate value, for example, the <code class=\"codespan\">x</code> axis corresponds to the <code class=\"codespan\">y</code> axis base value of <code class=\"codespan\">0</code></p>\n"},"component.componentType.axis.scale":{"desc":"<p>Set the associated <code class=\"codespan\">scale</code> grammar element, supporting two types of settings:</p>\n<ul>\n<li>The id corresponding to the <code class=\"codespan\">string</code> grammar element</li>\n<li>The instance corresponding to the <code class=\"codespan\">IScale</code> grammar element, mainly used for API creation mode</li>\n</ul>\n"},"component.componentType.axis.encode":{"desc":"<p>Set the visual channel encoding of the graphics elements, supporting three data change states by default:</p>\n<ul>\n<li><code class=\"codespan\">enter</code> newly added data items</li>\n<li><code class=\"codespan\">update</code> data items have been updated</li>\n<li><code class=\"codespan\">exit</code> data items are deleted</li>\n</ul>\n<p>Note that the data state here is automatically generated based on the <code class=\"codespan\">mark</code>&#39;s <code class=\"codespan\">key</code>. We will calculate the unique identifier for the data bound to the <code class=\"codespan\">mark</code> based on the <code class=\"codespan\">key</code> configuration. After the data is updated, if the corresponding unique identifier no longer exists, the state is <code class=\"codespan\">exit</code>; if it exists, it is <code class=\"codespan\">update</code>. If the previous data does not exist for the unique identifier, the data item&#39;s state is <code class=\"codespan\">enter</code>.</p>\n<p>Supports one interaction state by default:</p>\n<ul>\n<li><code class=\"codespan\">hover</code> when the mouse hovers over a specific shape, set the corresponding visual channel encoding for the shape</li>\n</ul>\n"},"component.componentType.axis.encode.enter":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data initialization state. Note that it will not be executed again when the data is updated.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.axis.encode.enter.start":{"desc":"<p>Set the point coordinates of the upper left corner of the axis. The format is: <code class=\"codespan\">{ x: number; y: number }</code></p>\n"},"component.componentType.axis.encode.enter.end":{"desc":"<p>Set the point coordinates of the lower right corner of the axis. The format is: <code class=\"codespan\">{ x: number; y: number }</code></p>\n"},"component.componentType.axis.encode.enter.title":{"desc":"<p>Set the axis title configuration</p>\n"},"component.componentType.axis.encode.enter.label":{"desc":"<p>Set the axis label configuration</p>\n"},"component.componentType.axis.encode.enter.line":{"desc":"<p>Set the axis connection line configuration</p>\n"},"component.componentType.axis.encode.enter.tick":{"desc":"<p>Set the axis tick grid configuration</p>\n"},"component.componentType.axis.encode.enter.subTick":{"desc":"<p>Set the axis secondary tick configuration</p>\n"},"component.componentType.axis.encode.enter.grid":{"desc":"<p>Set the axis grid configuration</p>\n"},"component.componentType.axis.encode.enter.subGrid":{"desc":"<p>Set the axis secondary grid configuration</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.axis.encode.enter.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"component.componentType.axis.encode.enter.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"component.componentType.axis.encode.enter.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"component.componentType.axis.encode.enter.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"component.componentType.axis.encode.enter.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.axis.encode.enter.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"component.componentType.axis.encode.enter.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.axis.encode.enter.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"component.componentType.axis.encode.enter.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"component.componentType.axis.encode.enter.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"component.componentType.axis.encode.enter.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"component.componentType.axis.encode.enter.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.axis.encode.enter.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.axis.encode.enter.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"component.componentType.axis.encode.enter.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"component.componentType.axis.encode.enter.outerBorder":{"desc":"<p>Outer border</p>\n"},"component.componentType.axis.encode.enter.innerBorder":{"desc":"<p>Inner border</p>\n"},"component.componentType.axis.encode.enter.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"component.componentType.axis.encode.enter.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.axis.encode.enter.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"component.componentType.axis.encode.enter.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"component.componentType.axis.encode.enter.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"component.componentType.axis.encode.enter.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"component.componentType.axis.encode.enter.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"component.componentType.axis.encode.enter.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"component.componentType.axis.encode.enter.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"component.componentType.axis.encode.enter.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.axis.encode.enter.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.axis.encode.enter.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.axis.encode.enter.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"component.componentType.axis.encode.enter.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"component.componentType.axis.encode.enter.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"component.componentType.axis.encode.enter.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"component.componentType.axis.encode.enter.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"component.componentType.axis.encode.enter.texture":{"desc":"<p>The texture of the graphic</p>\n"},"component.componentType.axis.encode.enter.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"component.componentType.axis.encode.enter.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"component.componentType.axis.encode.enter.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"component.componentType.axis.encode.enter.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"component.componentType.axis.encode.enter.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"component.componentType.axis.encode.update":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data update state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.axis.encode.update.start":{"desc":"<p>Set the point coordinates of the upper left corner of the axis. The format is: <code class=\"codespan\">{ x: number; y: number }</code></p>\n"},"component.componentType.axis.encode.update.end":{"desc":"<p>Set the point coordinates of the lower right corner of the axis. The format is: <code class=\"codespan\">{ x: number; y: number }</code></p>\n"},"component.componentType.axis.encode.update.title":{"desc":"<p>Set the axis title configuration</p>\n"},"component.componentType.axis.encode.update.label":{"desc":"<p>Set the axis label configuration</p>\n"},"component.componentType.axis.encode.update.line":{"desc":"<p>Set the axis connection line configuration</p>\n"},"component.componentType.axis.encode.update.tick":{"desc":"<p>Set the axis tick grid configuration</p>\n"},"component.componentType.axis.encode.update.subTick":{"desc":"<p>Set the axis secondary tick configuration</p>\n"},"component.componentType.axis.encode.update.grid":{"desc":"<p>Set the axis grid configuration</p>\n"},"component.componentType.axis.encode.update.subGrid":{"desc":"<p>Set the axis secondary grid configuration</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.axis.encode.update.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"component.componentType.axis.encode.update.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"component.componentType.axis.encode.update.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"component.componentType.axis.encode.update.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"component.componentType.axis.encode.update.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.axis.encode.update.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"component.componentType.axis.encode.update.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.axis.encode.update.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"component.componentType.axis.encode.update.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"component.componentType.axis.encode.update.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"component.componentType.axis.encode.update.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"component.componentType.axis.encode.update.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.axis.encode.update.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.axis.encode.update.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"component.componentType.axis.encode.update.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"component.componentType.axis.encode.update.outerBorder":{"desc":"<p>Outer border</p>\n"},"component.componentType.axis.encode.update.innerBorder":{"desc":"<p>Inner border</p>\n"},"component.componentType.axis.encode.update.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"component.componentType.axis.encode.update.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.axis.encode.update.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"component.componentType.axis.encode.update.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"component.componentType.axis.encode.update.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"component.componentType.axis.encode.update.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"component.componentType.axis.encode.update.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"component.componentType.axis.encode.update.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"component.componentType.axis.encode.update.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"component.componentType.axis.encode.update.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.axis.encode.update.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.axis.encode.update.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.axis.encode.update.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"component.componentType.axis.encode.update.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"component.componentType.axis.encode.update.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"component.componentType.axis.encode.update.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"component.componentType.axis.encode.update.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"component.componentType.axis.encode.update.texture":{"desc":"<p>The texture of the graphic</p>\n"},"component.componentType.axis.encode.update.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"component.componentType.axis.encode.update.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"component.componentType.axis.encode.update.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"component.componentType.axis.encode.update.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"component.componentType.axis.encode.update.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"component.componentType.axis.encode.exit":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data deletion state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.axis.encode.exit.start":{"desc":"<p>Set the point coordinates of the upper left corner of the axis. The format is: <code class=\"codespan\">{ x: number; y: number }</code></p>\n"},"component.componentType.axis.encode.exit.end":{"desc":"<p>Set the point coordinates of the lower right corner of the axis. The format is: <code class=\"codespan\">{ x: number; y: number }</code></p>\n"},"component.componentType.axis.encode.exit.title":{"desc":"<p>Set the axis title configuration</p>\n"},"component.componentType.axis.encode.exit.label":{"desc":"<p>Set the axis label configuration</p>\n"},"component.componentType.axis.encode.exit.line":{"desc":"<p>Set the axis connection line configuration</p>\n"},"component.componentType.axis.encode.exit.tick":{"desc":"<p>Set the axis tick grid configuration</p>\n"},"component.componentType.axis.encode.exit.subTick":{"desc":"<p>Set the axis secondary tick configuration</p>\n"},"component.componentType.axis.encode.exit.grid":{"desc":"<p>Set the axis grid configuration</p>\n"},"component.componentType.axis.encode.exit.subGrid":{"desc":"<p>Set the axis secondary grid configuration</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.axis.encode.exit.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"component.componentType.axis.encode.exit.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"component.componentType.axis.encode.exit.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"component.componentType.axis.encode.exit.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"component.componentType.axis.encode.exit.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.axis.encode.exit.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"component.componentType.axis.encode.exit.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.axis.encode.exit.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"component.componentType.axis.encode.exit.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"component.componentType.axis.encode.exit.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"component.componentType.axis.encode.exit.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"component.componentType.axis.encode.exit.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.axis.encode.exit.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.axis.encode.exit.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"component.componentType.axis.encode.exit.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"component.componentType.axis.encode.exit.outerBorder":{"desc":"<p>Outer border</p>\n"},"component.componentType.axis.encode.exit.innerBorder":{"desc":"<p>Inner border</p>\n"},"component.componentType.axis.encode.exit.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"component.componentType.axis.encode.exit.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.axis.encode.exit.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"component.componentType.axis.encode.exit.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"component.componentType.axis.encode.exit.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"component.componentType.axis.encode.exit.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"component.componentType.axis.encode.exit.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"component.componentType.axis.encode.exit.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"component.componentType.axis.encode.exit.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"component.componentType.axis.encode.exit.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.axis.encode.exit.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.axis.encode.exit.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.axis.encode.exit.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"component.componentType.axis.encode.exit.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"component.componentType.axis.encode.exit.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"component.componentType.axis.encode.exit.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"component.componentType.axis.encode.exit.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"component.componentType.axis.encode.exit.texture":{"desc":"<p>The texture of the graphic</p>\n"},"component.componentType.axis.encode.exit.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"component.componentType.axis.encode.exit.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"component.componentType.axis.encode.exit.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"component.componentType.axis.encode.exit.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"component.componentType.axis.encode.exit.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"component.componentType.axis.encode.hover":{"desc":"<p>Set the visual channel mapping corresponding to the graphics elements when in the <code class=\"codespan\">hover</code> state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.axis.encode.hover.start":{"desc":"<p>Set the point coordinates of the upper left corner of the axis. The format is: <code class=\"codespan\">{ x: number; y: number }</code></p>\n"},"component.componentType.axis.encode.hover.end":{"desc":"<p>Set the point coordinates of the lower right corner of the axis. The format is: <code class=\"codespan\">{ x: number; y: number }</code></p>\n"},"component.componentType.axis.encode.hover.title":{"desc":"<p>Set the axis title configuration</p>\n"},"component.componentType.axis.encode.hover.label":{"desc":"<p>Set the axis label configuration</p>\n"},"component.componentType.axis.encode.hover.line":{"desc":"<p>Set the axis connection line configuration</p>\n"},"component.componentType.axis.encode.hover.tick":{"desc":"<p>Set the axis tick grid configuration</p>\n"},"component.componentType.axis.encode.hover.subTick":{"desc":"<p>Set the axis secondary tick configuration</p>\n"},"component.componentType.axis.encode.hover.grid":{"desc":"<p>Set the axis grid configuration</p>\n"},"component.componentType.axis.encode.hover.subGrid":{"desc":"<p>Set the axis secondary grid configuration</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.axis.encode.hover.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"component.componentType.axis.encode.hover.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"component.componentType.axis.encode.hover.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"component.componentType.axis.encode.hover.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"component.componentType.axis.encode.hover.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.axis.encode.hover.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"component.componentType.axis.encode.hover.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.axis.encode.hover.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"component.componentType.axis.encode.hover.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"component.componentType.axis.encode.hover.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"component.componentType.axis.encode.hover.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"component.componentType.axis.encode.hover.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.axis.encode.hover.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.axis.encode.hover.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"component.componentType.axis.encode.hover.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"component.componentType.axis.encode.hover.outerBorder":{"desc":"<p>Outer border</p>\n"},"component.componentType.axis.encode.hover.innerBorder":{"desc":"<p>Inner border</p>\n"},"component.componentType.axis.encode.hover.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"component.componentType.axis.encode.hover.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.axis.encode.hover.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"component.componentType.axis.encode.hover.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"component.componentType.axis.encode.hover.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"component.componentType.axis.encode.hover.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"component.componentType.axis.encode.hover.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"component.componentType.axis.encode.hover.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"component.componentType.axis.encode.hover.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"component.componentType.axis.encode.hover.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.axis.encode.hover.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.axis.encode.hover.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.axis.encode.hover.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"component.componentType.axis.encode.hover.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"component.componentType.axis.encode.hover.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"component.componentType.axis.encode.hover.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"component.componentType.axis.encode.hover.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"component.componentType.axis.encode.hover.texture":{"desc":"<p>The texture of the graphic</p>\n"},"component.componentType.axis.encode.hover.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"component.componentType.axis.encode.hover.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"component.componentType.axis.encode.hover.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"component.componentType.axis.encode.hover.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"component.componentType.axis.encode.hover.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"component.componentType.axis.zIndex":{"desc":"<p>Set the zIndex of the container shape (group) corresponding to the <code class=\"codespan\">mark</code> graphic primitive</p>\n"},"component.componentType.axis.interactive":{"desc":"<p>Type: <code class=\"codespan\">boolean</code>\nRequired: No</p>\n"},"component.componentType.axis.context":{"desc":"<p>Set the context parameters of the graphic primitive</p>\n"},"component.componentType.axis.setCustomizedShape":{"desc":"<p>Set the callback function of custom shape. The corresponding ts type is as follows:</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>Where <code class=\"codespan\">ICustomPath2D</code> is a utility class provided by VRender for drawing custom paths.</p>\n"},"component.componentType.axis.support3d":{"desc":"<p>Whether to support 3d mode when the canvas is set to 3d view.</p>\n"},"component.componentType.axis.group":{"desc":"<p>Set the parent graphic primitive. Supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> The id of the corresponding parent graphic primitive</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> The corresponding grammar element of the parent graphic primitive, generally used in API call scenarios.</li>\n</ul>\n<p>If not set, it will be attached to the root node of the canvas by default.</p>\n"},"component.componentType.axis.from":{"desc":"<p>ts type definition is:</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>Declare the data on which the graphic primitive depends through the <code class=\"codespan\">data</code> attribute.</p>\n"},"component.componentType.axis.key":{"desc":"<p>Set the unique identifier for the graphic primitive data element, which is used to calculate the data state of the graphic element. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the <code class=\"codespan\">key</code></li>\n</ul>\n"},"component.componentType.axis.sort":{"desc":"<p>Sort all graphic elements in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"component.componentType.axis.groupBy":{"desc":"<p>Set the grouping attribute, the corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the grouping <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the grouping <code class=\"codespan\">key</code></li>\n</ul>\n"},"component.componentType.axis.groupSort":{"desc":"<p>Sort the groups in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"component.componentType.axis.coordinate":{"desc":"<p>Set the id or graphic element corresponding to the associated coordinate system of this graphic primitive</p>\n"},"component.componentType.axis.state":{"desc":"<p>Set the state values ​​of all graphical elements of the current graphic primitive, supporting three formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the state of the graphic, for example, <code class=\"codespan\">{ state: &#39;selected&#39;}</code> sets the state of all graphics to <code class=\"codespan\">&#39;selected&#39;</code>, usually in this case, the <code class=\"codespan\">encode</code> also sets the graphic channel mapping corresponding to the <code class=\"codespan\">&#39;selected&#39;</code> state</li>\n<li><code class=\"codespan\">string[]</code> Set multiple states for the graphic, you can configure <code class=\"codespan\">stateSort</code> to influence the order of executing the graphic channel mapping corresponding to the state</li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the state value, and the return parameter is <code class=\"codespan\">string | string[]</code>, the corresponding ts type definition is:</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"component.componentType.axis.stateSort":{"desc":"<p>Set the sorting function of the state values ​​of all graphics elements of the current graphic primitive, which will affect the order of the graphic channel mapping corresponding to the state. The result of the graphic channel mapping executed earlier may be covered by subsequent states. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"component.componentType.axis.transform":{"desc":"<p>Set the corresponding transformation of the graphic primitive. All data transformations can be configured on the graphic primitive and are used for the <code class=\"codespan\">join data</code> execution transformation;\nAnother type of transformation is the transformation executed by graphical elements, such as <code class=\"codespan\">dodge</code>;\nThe general type definition is as follows:</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>The parameters supported by each transformation are different</p>\n"},"component.componentType.axis.layout":{"desc":"<p>Set the layout parameters of the graphic primitive. There are two roles when the graphic primitive participates in the layout:</p>\n<ul>\n<li>&#39;container&#39; Container graphic primitive, usually <code class=\"codespan\">group</code> graphic primitive</li>\n<li>&#39;item&#39; layout child element, as a child node of the container graphic primitive</li>\n</ul>\n<p>Please note that we only support one layer of layout. If it is a multi-layer nested layout, it is recommended to use a custom layout scheme for implementation;</p>\n<p>Now support two content layouts: <code class=\"codespan\">grid</code> layout and <code class=\"codespan\">relative</code> layout, the related type definition is as follows</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>If you want to set a custom layout scheme, <code class=\"codespan\">layout</code> also supports setting callback functions directly. The definition of the callback function is as follows:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"component.componentType.axis.layout.display":{"desc":"<p>The container graphic primitive sets the layout type and supports two configurations:</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> Relative layout</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> Grid layout</li>\n</ul>\n"},"component.componentType.axis.layout.callback":{"desc":"<p>Customize the callback function for this graphic primitive, the ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"component.componentType.axis.layout.skipBeforeLayouted":{"desc":"<p>Skip the execution stage before the layout is completed</p>\n"},"component.componentType.axis.layout.updateViewSignals":{"desc":"<p>Whether to update the default view signals, that is: <code class=\"codespan\">padding</code>, <code class=\"codespan\">viewWidth</code> and <code class=\"codespan\">viewHeight</code></p>\n<p>This property can only be set on a container graphic primitive with <code class=\"codespan\">&#39;relative&#39;</code> layout.</p>\n"},"component.componentType.axis.layout.maxChildWidth":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum width of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the width of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"component.componentType.axis.layout.maxChildHeight":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum height of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the height of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"component.componentType.axis.layout.position":{"desc":"<p>Set the position of the child graphic primitive of the relative layout. The supported settings are:</p>\n<ul>\n<li>&#39;top&#39; Relative to the top of the parent graphic primitive</li>\n<li>&#39;bottom&#39; Relative to the bottom of the parent graphic primitive</li>\n<li>&#39;left&#39; Relative to the left side of the parent graphic primitive</li>\n<li>&#39;right&#39; Relative to the right side of the parent graphic primitive</li>\n<li>&#39;content&#39; Relative to the center of the parent graphic primitive, that is, the content area</li>\n<li>&#39;auto&#39; When the graphic primitive sets the coordinate system, the position relative to the parent graphic primitive is automatically calculated according to the associated <code class=\"codespan\">scale</code></li>\n</ul>\n"},"component.componentType.axis.layout.padding":{"desc":"<p>The inner padding of Child graphic primitive, in px unit, with the default padding of 0 for all directions. Accepts numerical values, numerical arrays, and objects for settings.</p>\n<p>Example of usage:</p>\n<pre><code class=\"lang-ts\">// Numerical type, set the padding to 5\npadding: 5;\n// Numerical array, set the top and bottom padding to 5, and the left and right padding to 10, similar to the CSS box model\npadding: [5, 10];\n// Numerical array, set the padding for all four directions separately\npadding: [\n  5, // Top\n  10, // Right\n  5, // Bottom\n  10 // Left\n];\n// Object type\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"component.componentType.axis.layout.gridTemplateRows":{"desc":"<p>The parent graphic primitive of the grid layout sets the row height</p>\n"},"component.componentType.axis.layout.gridTemplateColumns":{"desc":"<p>The parent graphic primitive of the grid layout sets the column width</p>\n"},"component.componentType.axis.layout.gridRowGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the row spacing</p>\n"},"component.componentType.axis.layout.gridColumnGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the column spacing</p>\n"},"component.componentType.axis.layout.gridRowStart":{"desc":"<p>The child graphic primitive of the grid layout sets the row start position</p>\n"},"component.componentType.axis.layout.gridRowEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the row end position</p>\n"},"component.componentType.axis.layout.gridColumnStart":{"desc":"<p>The child graphic primitive of the grid layout sets the column start position</p>\n"},"component.componentType.axis.layout.gridColumnEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the column end position</p>\n"},"component.componentType.crosshair.componentType":{"desc":"<p>Set the component type to <code class=\"codespan\">crosshair</code></p>\n"},"component.componentType.crosshair.crosshairType":{"desc":"<p>Supports the following types:</p>\n<ul>\n<li>&#39;x&#39;</li>\n<li>&#39;y&#39;</li>\n<li>&#39;angle&#39;</li>\n<li>&#39;radius&#39;</li>\n<li>&#39;radius-polygon&#39;</li>\n</ul>\n"},"component.componentType.crosshair.crosshairShape":{"desc":"<p>Supports the following types:</p>\n<ul>\n<li>&#39;line&#39;</li>\n<li>&#39;rect&#39;;</li>\n</ul>\n"},"component.componentType.crosshair.encode":{"desc":"<p>Set the visual channel encoding of the graphics elements, supporting three data change states by default:</p>\n<ul>\n<li><code class=\"codespan\">enter</code> newly added data items</li>\n<li><code class=\"codespan\">update</code> data items have been updated</li>\n<li><code class=\"codespan\">exit</code> data items are deleted</li>\n</ul>\n<p>Note that the data state here is automatically generated based on the <code class=\"codespan\">mark</code>&#39;s <code class=\"codespan\">key</code>. We will calculate the unique identifier for the data bound to the <code class=\"codespan\">mark</code> based on the <code class=\"codespan\">key</code> configuration. After the data is updated, if the corresponding unique identifier no longer exists, the state is <code class=\"codespan\">exit</code>; if it exists, it is <code class=\"codespan\">update</code>. If the previous data does not exist for the unique identifier, the data item&#39;s state is <code class=\"codespan\">enter</code>.</p>\n<p>Supports one interaction state by default:</p>\n<ul>\n<li><code class=\"codespan\">hover</code> when the mouse hovers over a specific shape, set the corresponding visual channel encoding for the shape</li>\n</ul>\n"},"component.componentType.crosshair.encode.enter":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data initialization state. Note that it will not be executed again when the data is updated.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.crosshair.encode.enter.start":{"desc":"<p>When used in Cartesian coordinate system, set the coordinate of the upper left corner of the axis, in the format: <code class=\"codespan\">{ x: number; y: number }</code></p>\n"},"component.componentType.crosshair.encode.enter.end":{"desc":"<p>When used in Cartesian coordinate system, set the coordinate of the lower right corner of the axis, in the format: <code class=\"codespan\">{ x: number; y: number }</code></p>\n"},"component.componentType.crosshair.encode.enter.center":{"desc":"<p>When used in polar coordinate system, set the origin coordinate of the coordinate system</p>\n"},"component.componentType.crosshair.encode.enter.radius":{"desc":"<p>When used in polar coordinate system, set the radius of the coordinate system</p>\n"},"component.componentType.crosshair.encode.enter.startAngle":{"desc":"<p>When used in polar coordinate system, set the starting angle of the coordinate system, default is <code class=\"codespan\">0</code></p>\n"},"component.componentType.crosshair.encode.enter.endAngle":{"desc":"<p>When used in polar coordinate system, set the ending angle of the coordinate system, default is <code class=\"codespan\">2 * PI</code></p>\n"},"component.componentType.crosshair.encode.enter.lineStyle":{"desc":"<p>Set the line style of <code class=\"codespan\">crosshair</code> of type <code class=\"codespan\">crosshairShape = &#39;line&#39;</code></p>\n"},"component.componentType.crosshair.encode.enter.rectStyle":{"desc":"<p>Set the rectangle style of <code class=\"codespan\">crosshair</code> of type <code class=\"codespan\">crosshairShape = &#39;rect&#39;</code></p>\n"},"component.componentType.crosshair.encode.enter.sectorStyle":{"desc":"<p>Set the graphics style of <code class=\"codespan\">crosshair</code> of type <code class=\"codespan\">crosshairShape = &#39;rect&#39; &amp; crosshairType = &#39;angle&#39;</code></p>\n"},"component.componentType.crosshair.encode.enter.innerRadius":{"desc":"<p>Set the inner radius of the graphics of <code class=\"codespan\">crosshair</code> of type <code class=\"codespan\">crosshairShape = &#39;rect&#39; &amp; crosshairType = &#39;angle&#39;</code></p>\n"},"component.componentType.crosshair.encode.enter.sides":{"desc":"<p>Set the polygon side count of the graphics of <code class=\"codespan\">crosshair</code> of type <code class=\"codespan\">crosshairShape = &#39;line&#39; &amp; crosshairType = &#39;radius&#39;</code></p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.crosshair.encode.enter.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"component.componentType.crosshair.encode.enter.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"component.componentType.crosshair.encode.enter.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"component.componentType.crosshair.encode.enter.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"component.componentType.crosshair.encode.enter.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.crosshair.encode.enter.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"component.componentType.crosshair.encode.enter.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.crosshair.encode.enter.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"component.componentType.crosshair.encode.enter.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"component.componentType.crosshair.encode.enter.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"component.componentType.crosshair.encode.enter.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"component.componentType.crosshair.encode.enter.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.crosshair.encode.enter.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.crosshair.encode.enter.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"component.componentType.crosshair.encode.enter.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"component.componentType.crosshair.encode.enter.outerBorder":{"desc":"<p>Outer border</p>\n"},"component.componentType.crosshair.encode.enter.innerBorder":{"desc":"<p>Inner border</p>\n"},"component.componentType.crosshair.encode.enter.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"component.componentType.crosshair.encode.enter.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.crosshair.encode.enter.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"component.componentType.crosshair.encode.enter.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"component.componentType.crosshair.encode.enter.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"component.componentType.crosshair.encode.enter.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"component.componentType.crosshair.encode.enter.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"component.componentType.crosshair.encode.enter.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"component.componentType.crosshair.encode.enter.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"component.componentType.crosshair.encode.enter.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.crosshair.encode.enter.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.crosshair.encode.enter.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.crosshair.encode.enter.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"component.componentType.crosshair.encode.enter.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"component.componentType.crosshair.encode.enter.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"component.componentType.crosshair.encode.enter.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"component.componentType.crosshair.encode.enter.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"component.componentType.crosshair.encode.enter.texture":{"desc":"<p>The texture of the graphic</p>\n"},"component.componentType.crosshair.encode.enter.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"component.componentType.crosshair.encode.enter.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"component.componentType.crosshair.encode.enter.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"component.componentType.crosshair.encode.enter.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"component.componentType.crosshair.encode.enter.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"component.componentType.crosshair.encode.update":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data update state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.crosshair.encode.update.start":{"desc":"<p>When used in Cartesian coordinate system, set the coordinate of the upper left corner of the axis, in the format: <code class=\"codespan\">{ x: number; y: number }</code></p>\n"},"component.componentType.crosshair.encode.update.end":{"desc":"<p>When used in Cartesian coordinate system, set the coordinate of the lower right corner of the axis, in the format: <code class=\"codespan\">{ x: number; y: number }</code></p>\n"},"component.componentType.crosshair.encode.update.center":{"desc":"<p>When used in polar coordinate system, set the origin coordinate of the coordinate system</p>\n"},"component.componentType.crosshair.encode.update.radius":{"desc":"<p>When used in polar coordinate system, set the radius of the coordinate system</p>\n"},"component.componentType.crosshair.encode.update.startAngle":{"desc":"<p>When used in polar coordinate system, set the starting angle of the coordinate system, default is <code class=\"codespan\">0</code></p>\n"},"component.componentType.crosshair.encode.update.endAngle":{"desc":"<p>When used in polar coordinate system, set the ending angle of the coordinate system, default is <code class=\"codespan\">2 * PI</code></p>\n"},"component.componentType.crosshair.encode.update.lineStyle":{"desc":"<p>Set the line style of <code class=\"codespan\">crosshair</code> of type <code class=\"codespan\">crosshairShape = &#39;line&#39;</code></p>\n"},"component.componentType.crosshair.encode.update.rectStyle":{"desc":"<p>Set the rectangle style of <code class=\"codespan\">crosshair</code> of type <code class=\"codespan\">crosshairShape = &#39;rect&#39;</code></p>\n"},"component.componentType.crosshair.encode.update.sectorStyle":{"desc":"<p>Set the graphics style of <code class=\"codespan\">crosshair</code> of type <code class=\"codespan\">crosshairShape = &#39;rect&#39; &amp; crosshairType = &#39;angle&#39;</code></p>\n"},"component.componentType.crosshair.encode.update.innerRadius":{"desc":"<p>Set the inner radius of the graphics of <code class=\"codespan\">crosshair</code> of type <code class=\"codespan\">crosshairShape = &#39;rect&#39; &amp; crosshairType = &#39;angle&#39;</code></p>\n"},"component.componentType.crosshair.encode.update.sides":{"desc":"<p>Set the polygon side count of the graphics of <code class=\"codespan\">crosshair</code> of type <code class=\"codespan\">crosshairShape = &#39;line&#39; &amp; crosshairType = &#39;radius&#39;</code></p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.crosshair.encode.update.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"component.componentType.crosshair.encode.update.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"component.componentType.crosshair.encode.update.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"component.componentType.crosshair.encode.update.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"component.componentType.crosshair.encode.update.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.crosshair.encode.update.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"component.componentType.crosshair.encode.update.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.crosshair.encode.update.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"component.componentType.crosshair.encode.update.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"component.componentType.crosshair.encode.update.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"component.componentType.crosshair.encode.update.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"component.componentType.crosshair.encode.update.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.crosshair.encode.update.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.crosshair.encode.update.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"component.componentType.crosshair.encode.update.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"component.componentType.crosshair.encode.update.outerBorder":{"desc":"<p>Outer border</p>\n"},"component.componentType.crosshair.encode.update.innerBorder":{"desc":"<p>Inner border</p>\n"},"component.componentType.crosshair.encode.update.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"component.componentType.crosshair.encode.update.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.crosshair.encode.update.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"component.componentType.crosshair.encode.update.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"component.componentType.crosshair.encode.update.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"component.componentType.crosshair.encode.update.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"component.componentType.crosshair.encode.update.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"component.componentType.crosshair.encode.update.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"component.componentType.crosshair.encode.update.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"component.componentType.crosshair.encode.update.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.crosshair.encode.update.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.crosshair.encode.update.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.crosshair.encode.update.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"component.componentType.crosshair.encode.update.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"component.componentType.crosshair.encode.update.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"component.componentType.crosshair.encode.update.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"component.componentType.crosshair.encode.update.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"component.componentType.crosshair.encode.update.texture":{"desc":"<p>The texture of the graphic</p>\n"},"component.componentType.crosshair.encode.update.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"component.componentType.crosshair.encode.update.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"component.componentType.crosshair.encode.update.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"component.componentType.crosshair.encode.update.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"component.componentType.crosshair.encode.update.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"component.componentType.crosshair.encode.exit":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data deletion state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.crosshair.encode.exit.start":{"desc":"<p>When used in Cartesian coordinate system, set the coordinate of the upper left corner of the axis, in the format: <code class=\"codespan\">{ x: number; y: number }</code></p>\n"},"component.componentType.crosshair.encode.exit.end":{"desc":"<p>When used in Cartesian coordinate system, set the coordinate of the lower right corner of the axis, in the format: <code class=\"codespan\">{ x: number; y: number }</code></p>\n"},"component.componentType.crosshair.encode.exit.center":{"desc":"<p>When used in polar coordinate system, set the origin coordinate of the coordinate system</p>\n"},"component.componentType.crosshair.encode.exit.radius":{"desc":"<p>When used in polar coordinate system, set the radius of the coordinate system</p>\n"},"component.componentType.crosshair.encode.exit.startAngle":{"desc":"<p>When used in polar coordinate system, set the starting angle of the coordinate system, default is <code class=\"codespan\">0</code></p>\n"},"component.componentType.crosshair.encode.exit.endAngle":{"desc":"<p>When used in polar coordinate system, set the ending angle of the coordinate system, default is <code class=\"codespan\">2 * PI</code></p>\n"},"component.componentType.crosshair.encode.exit.lineStyle":{"desc":"<p>Set the line style of <code class=\"codespan\">crosshair</code> of type <code class=\"codespan\">crosshairShape = &#39;line&#39;</code></p>\n"},"component.componentType.crosshair.encode.exit.rectStyle":{"desc":"<p>Set the rectangle style of <code class=\"codespan\">crosshair</code> of type <code class=\"codespan\">crosshairShape = &#39;rect&#39;</code></p>\n"},"component.componentType.crosshair.encode.exit.sectorStyle":{"desc":"<p>Set the graphics style of <code class=\"codespan\">crosshair</code> of type <code class=\"codespan\">crosshairShape = &#39;rect&#39; &amp; crosshairType = &#39;angle&#39;</code></p>\n"},"component.componentType.crosshair.encode.exit.innerRadius":{"desc":"<p>Set the inner radius of the graphics of <code class=\"codespan\">crosshair</code> of type <code class=\"codespan\">crosshairShape = &#39;rect&#39; &amp; crosshairType = &#39;angle&#39;</code></p>\n"},"component.componentType.crosshair.encode.exit.sides":{"desc":"<p>Set the polygon side count of the graphics of <code class=\"codespan\">crosshair</code> of type <code class=\"codespan\">crosshairShape = &#39;line&#39; &amp; crosshairType = &#39;radius&#39;</code></p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.crosshair.encode.exit.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"component.componentType.crosshair.encode.exit.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"component.componentType.crosshair.encode.exit.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"component.componentType.crosshair.encode.exit.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"component.componentType.crosshair.encode.exit.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.crosshair.encode.exit.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"component.componentType.crosshair.encode.exit.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.crosshair.encode.exit.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"component.componentType.crosshair.encode.exit.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"component.componentType.crosshair.encode.exit.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"component.componentType.crosshair.encode.exit.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"component.componentType.crosshair.encode.exit.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.crosshair.encode.exit.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.crosshair.encode.exit.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"component.componentType.crosshair.encode.exit.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"component.componentType.crosshair.encode.exit.outerBorder":{"desc":"<p>Outer border</p>\n"},"component.componentType.crosshair.encode.exit.innerBorder":{"desc":"<p>Inner border</p>\n"},"component.componentType.crosshair.encode.exit.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"component.componentType.crosshair.encode.exit.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.crosshair.encode.exit.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"component.componentType.crosshair.encode.exit.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"component.componentType.crosshair.encode.exit.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"component.componentType.crosshair.encode.exit.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"component.componentType.crosshair.encode.exit.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"component.componentType.crosshair.encode.exit.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"component.componentType.crosshair.encode.exit.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"component.componentType.crosshair.encode.exit.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.crosshair.encode.exit.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.crosshair.encode.exit.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.crosshair.encode.exit.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"component.componentType.crosshair.encode.exit.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"component.componentType.crosshair.encode.exit.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"component.componentType.crosshair.encode.exit.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"component.componentType.crosshair.encode.exit.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"component.componentType.crosshair.encode.exit.texture":{"desc":"<p>The texture of the graphic</p>\n"},"component.componentType.crosshair.encode.exit.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"component.componentType.crosshair.encode.exit.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"component.componentType.crosshair.encode.exit.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"component.componentType.crosshair.encode.exit.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"component.componentType.crosshair.encode.exit.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"component.componentType.crosshair.encode.hover":{"desc":"<p>Set the visual channel mapping corresponding to the graphics elements when in the <code class=\"codespan\">hover</code> state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.crosshair.encode.hover.start":{"desc":"<p>When used in Cartesian coordinate system, set the coordinate of the upper left corner of the axis, in the format: <code class=\"codespan\">{ x: number; y: number }</code></p>\n"},"component.componentType.crosshair.encode.hover.end":{"desc":"<p>When used in Cartesian coordinate system, set the coordinate of the lower right corner of the axis, in the format: <code class=\"codespan\">{ x: number; y: number }</code></p>\n"},"component.componentType.crosshair.encode.hover.center":{"desc":"<p>When used in polar coordinate system, set the origin coordinate of the coordinate system</p>\n"},"component.componentType.crosshair.encode.hover.radius":{"desc":"<p>When used in polar coordinate system, set the radius of the coordinate system</p>\n"},"component.componentType.crosshair.encode.hover.startAngle":{"desc":"<p>When used in polar coordinate system, set the starting angle of the coordinate system, default is <code class=\"codespan\">0</code></p>\n"},"component.componentType.crosshair.encode.hover.endAngle":{"desc":"<p>When used in polar coordinate system, set the ending angle of the coordinate system, default is <code class=\"codespan\">2 * PI</code></p>\n"},"component.componentType.crosshair.encode.hover.lineStyle":{"desc":"<p>Set the line style of <code class=\"codespan\">crosshair</code> of type <code class=\"codespan\">crosshairShape = &#39;line&#39;</code></p>\n"},"component.componentType.crosshair.encode.hover.rectStyle":{"desc":"<p>Set the rectangle style of <code class=\"codespan\">crosshair</code> of type <code class=\"codespan\">crosshairShape = &#39;rect&#39;</code></p>\n"},"component.componentType.crosshair.encode.hover.sectorStyle":{"desc":"<p>Set the graphics style of <code class=\"codespan\">crosshair</code> of type <code class=\"codespan\">crosshairShape = &#39;rect&#39; &amp; crosshairType = &#39;angle&#39;</code></p>\n"},"component.componentType.crosshair.encode.hover.innerRadius":{"desc":"<p>Set the inner radius of the graphics of <code class=\"codespan\">crosshair</code> of type <code class=\"codespan\">crosshairShape = &#39;rect&#39; &amp; crosshairType = &#39;angle&#39;</code></p>\n"},"component.componentType.crosshair.encode.hover.sides":{"desc":"<p>Set the polygon side count of the graphics of <code class=\"codespan\">crosshair</code> of type <code class=\"codespan\">crosshairShape = &#39;line&#39; &amp; crosshairType = &#39;radius&#39;</code></p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.crosshair.encode.hover.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"component.componentType.crosshair.encode.hover.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"component.componentType.crosshair.encode.hover.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"component.componentType.crosshair.encode.hover.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"component.componentType.crosshair.encode.hover.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.crosshair.encode.hover.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"component.componentType.crosshair.encode.hover.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.crosshair.encode.hover.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"component.componentType.crosshair.encode.hover.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"component.componentType.crosshair.encode.hover.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"component.componentType.crosshair.encode.hover.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"component.componentType.crosshair.encode.hover.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.crosshair.encode.hover.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.crosshair.encode.hover.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"component.componentType.crosshair.encode.hover.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"component.componentType.crosshair.encode.hover.outerBorder":{"desc":"<p>Outer border</p>\n"},"component.componentType.crosshair.encode.hover.innerBorder":{"desc":"<p>Inner border</p>\n"},"component.componentType.crosshair.encode.hover.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"component.componentType.crosshair.encode.hover.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.crosshair.encode.hover.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"component.componentType.crosshair.encode.hover.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"component.componentType.crosshair.encode.hover.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"component.componentType.crosshair.encode.hover.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"component.componentType.crosshair.encode.hover.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"component.componentType.crosshair.encode.hover.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"component.componentType.crosshair.encode.hover.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"component.componentType.crosshair.encode.hover.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.crosshair.encode.hover.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.crosshair.encode.hover.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.crosshair.encode.hover.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"component.componentType.crosshair.encode.hover.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"component.componentType.crosshair.encode.hover.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"component.componentType.crosshair.encode.hover.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"component.componentType.crosshair.encode.hover.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"component.componentType.crosshair.encode.hover.texture":{"desc":"<p>The texture of the graphic</p>\n"},"component.componentType.crosshair.encode.hover.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"component.componentType.crosshair.encode.hover.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"component.componentType.crosshair.encode.hover.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"component.componentType.crosshair.encode.hover.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"component.componentType.crosshair.encode.hover.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"component.componentType.crosshair.zIndex":{"desc":"<p>Set the zIndex of the container shape (group) corresponding to the <code class=\"codespan\">mark</code> graphic primitive</p>\n"},"component.componentType.crosshair.interactive":{"desc":"<p>Type: <code class=\"codespan\">boolean</code>\nRequired: No</p>\n"},"component.componentType.crosshair.context":{"desc":"<p>Set the context parameters of the graphic primitive</p>\n"},"component.componentType.crosshair.setCustomizedShape":{"desc":"<p>Set the callback function of custom shape. The corresponding ts type is as follows:</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>Where <code class=\"codespan\">ICustomPath2D</code> is a utility class provided by VRender for drawing custom paths.</p>\n"},"component.componentType.crosshair.support3d":{"desc":"<p>Whether to support 3d mode when the canvas is set to 3d view.</p>\n"},"component.componentType.crosshair.group":{"desc":"<p>Set the parent graphic primitive. Supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> The id of the corresponding parent graphic primitive</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> The corresponding grammar element of the parent graphic primitive, generally used in API call scenarios.</li>\n</ul>\n<p>If not set, it will be attached to the root node of the canvas by default.</p>\n"},"component.componentType.crosshair.from":{"desc":"<p>ts type definition is:</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>Declare the data on which the graphic primitive depends through the <code class=\"codespan\">data</code> attribute.</p>\n"},"component.componentType.crosshair.key":{"desc":"<p>Set the unique identifier for the graphic primitive data element, which is used to calculate the data state of the graphic element. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the <code class=\"codespan\">key</code></li>\n</ul>\n"},"component.componentType.crosshair.sort":{"desc":"<p>Sort all graphic elements in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"component.componentType.crosshair.groupBy":{"desc":"<p>Set the grouping attribute, the corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the grouping <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the grouping <code class=\"codespan\">key</code></li>\n</ul>\n"},"component.componentType.crosshair.groupSort":{"desc":"<p>Sort the groups in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"component.componentType.crosshair.coordinate":{"desc":"<p>Set the id or graphic element corresponding to the associated coordinate system of this graphic primitive</p>\n"},"component.componentType.crosshair.state":{"desc":"<p>Set the state values ​​of all graphical elements of the current graphic primitive, supporting three formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the state of the graphic, for example, <code class=\"codespan\">{ state: &#39;selected&#39;}</code> sets the state of all graphics to <code class=\"codespan\">&#39;selected&#39;</code>, usually in this case, the <code class=\"codespan\">encode</code> also sets the graphic channel mapping corresponding to the <code class=\"codespan\">&#39;selected&#39;</code> state</li>\n<li><code class=\"codespan\">string[]</code> Set multiple states for the graphic, you can configure <code class=\"codespan\">stateSort</code> to influence the order of executing the graphic channel mapping corresponding to the state</li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the state value, and the return parameter is <code class=\"codespan\">string | string[]</code>, the corresponding ts type definition is:</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"component.componentType.crosshair.stateSort":{"desc":"<p>Set the sorting function of the state values ​​of all graphics elements of the current graphic primitive, which will affect the order of the graphic channel mapping corresponding to the state. The result of the graphic channel mapping executed earlier may be covered by subsequent states. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"component.componentType.crosshair.transform":{"desc":"<p>Set the corresponding transformation of the graphic primitive. All data transformations can be configured on the graphic primitive and are used for the <code class=\"codespan\">join data</code> execution transformation;\nAnother type of transformation is the transformation executed by graphical elements, such as <code class=\"codespan\">dodge</code>;\nThe general type definition is as follows:</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>The parameters supported by each transformation are different</p>\n"},"component.componentType.crosshair.layout":{"desc":"<p>Set the layout parameters of the graphic primitive. There are two roles when the graphic primitive participates in the layout:</p>\n<ul>\n<li>&#39;container&#39; Container graphic primitive, usually <code class=\"codespan\">group</code> graphic primitive</li>\n<li>&#39;item&#39; layout child element, as a child node of the container graphic primitive</li>\n</ul>\n<p>Please note that we only support one layer of layout. If it is a multi-layer nested layout, it is recommended to use a custom layout scheme for implementation;</p>\n<p>Now support two content layouts: <code class=\"codespan\">grid</code> layout and <code class=\"codespan\">relative</code> layout, the related type definition is as follows</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>If you want to set a custom layout scheme, <code class=\"codespan\">layout</code> also supports setting callback functions directly. The definition of the callback function is as follows:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"component.componentType.crosshair.layout.display":{"desc":"<p>The container graphic primitive sets the layout type and supports two configurations:</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> Relative layout</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> Grid layout</li>\n</ul>\n"},"component.componentType.crosshair.layout.callback":{"desc":"<p>Customize the callback function for this graphic primitive, the ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"component.componentType.crosshair.layout.skipBeforeLayouted":{"desc":"<p>Skip the execution stage before the layout is completed</p>\n"},"component.componentType.crosshair.layout.updateViewSignals":{"desc":"<p>Whether to update the default view signals, that is: <code class=\"codespan\">padding</code>, <code class=\"codespan\">viewWidth</code> and <code class=\"codespan\">viewHeight</code></p>\n<p>This property can only be set on a container graphic primitive with <code class=\"codespan\">&#39;relative&#39;</code> layout.</p>\n"},"component.componentType.crosshair.layout.maxChildWidth":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum width of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the width of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"component.componentType.crosshair.layout.maxChildHeight":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum height of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the height of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"component.componentType.crosshair.layout.position":{"desc":"<p>Set the position of the child graphic primitive of the relative layout. The supported settings are:</p>\n<ul>\n<li>&#39;top&#39; Relative to the top of the parent graphic primitive</li>\n<li>&#39;bottom&#39; Relative to the bottom of the parent graphic primitive</li>\n<li>&#39;left&#39; Relative to the left side of the parent graphic primitive</li>\n<li>&#39;right&#39; Relative to the right side of the parent graphic primitive</li>\n<li>&#39;content&#39; Relative to the center of the parent graphic primitive, that is, the content area</li>\n<li>&#39;auto&#39; When the graphic primitive sets the coordinate system, the position relative to the parent graphic primitive is automatically calculated according to the associated <code class=\"codespan\">scale</code></li>\n</ul>\n"},"component.componentType.crosshair.layout.padding":{"desc":"<p>The inner padding of Child graphic primitive, in px unit, with the default padding of 0 for all directions. Accepts numerical values, numerical arrays, and objects for settings.</p>\n<p>Example of usage:</p>\n<pre><code class=\"lang-ts\">// Numerical type, set the padding to 5\npadding: 5;\n// Numerical array, set the top and bottom padding to 5, and the left and right padding to 10, similar to the CSS box model\npadding: [5, 10];\n// Numerical array, set the padding for all four directions separately\npadding: [\n  5, // Top\n  10, // Right\n  5, // Bottom\n  10 // Left\n];\n// Object type\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"component.componentType.crosshair.layout.gridTemplateRows":{"desc":"<p>The parent graphic primitive of the grid layout sets the row height</p>\n"},"component.componentType.crosshair.layout.gridTemplateColumns":{"desc":"<p>The parent graphic primitive of the grid layout sets the column width</p>\n"},"component.componentType.crosshair.layout.gridRowGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the row spacing</p>\n"},"component.componentType.crosshair.layout.gridColumnGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the column spacing</p>\n"},"component.componentType.crosshair.layout.gridRowStart":{"desc":"<p>The child graphic primitive of the grid layout sets the row start position</p>\n"},"component.componentType.crosshair.layout.gridRowEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the row end position</p>\n"},"component.componentType.crosshair.layout.gridColumnStart":{"desc":"<p>The child graphic primitive of the grid layout sets the column start position</p>\n"},"component.componentType.crosshair.layout.gridColumnEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the column end position</p>\n"},"component.componentType.datazoom.componentType":{"desc":"<p>Set the component type to <code class=\"codespan\">datazoom</code></p>\n"},"component.componentType.datazoom.preview":{"desc":"<p>Set the data corresponding to the preview</p>\n"},"component.componentType.datazoom.preview.data":{"desc":"<p>Set the <code class=\"codespan\">data</code> syntax element corresponding to the preview data, supporting two types of settings:</p>\n<ul>\n<li><code class=\"codespan\">string</code> id corresponding to the data syntax element</li>\n<li><code class=\"codespan\">IData</code> an instance corresponding to the data syntax element, mainly used for API creation mode</li>\n</ul>\n"},"component.componentType.datazoom.preview.x":{"desc":"<p>Same as the visual channel settings in <code class=\"codespan\">encode</code></p>\n"},"component.componentType.datazoom.preview.y":{"desc":"<p>Same as the visual channel settings in <code class=\"codespan\">encode</code></p>\n"},"component.componentType.datazoom.preview.x1":{"desc":"<p>Same as the visual channel settings in <code class=\"codespan\">encode</code></p>\n"},"component.componentType.datazoom.preview.y1":{"desc":"<p>Same as the visual channel settings in <code class=\"codespan\">encode</code></p>\n"},"component.componentType.datazoom.target":{"desc":"<p>Set the data elements that need to be updated after datazoom triggers the data update</p>\n"},"component.componentType.datazoom.target.data":{"desc":"<p>Set the <code class=\"codespan\">data</code> syntax element corresponding to the updated data, supporting two types of settings:</p>\n<ul>\n<li><code class=\"codespan\">string</code> The id corresponding to the data syntax element</li>\n<li><code class=\"codespan\">IData</code> The instance corresponding to the data syntax element, mainly used for API creation mode</li>\n</ul>\n"},"component.componentType.datazoom.target.filter":{"desc":"<p>Perform filter operation on the target data element, supporting two types of settings:</p>\n<ul>\n<li><code class=\"codespan\">string</code> The field corresponding to the updated data element</li>\n<li><code class=\"codespan\">function</code> Custom filter function, defined as: <code class=\"codespan\">(datum: any, value: { start: number; end: number; startRatio: number; endRatio: number }) =&gt; boolean</code></li>\n</ul>\n"},"component.componentType.datazoom.encode":{"desc":"<p>Set the visual channel encoding of the graphics elements, supporting three data change states by default:</p>\n<ul>\n<li><code class=\"codespan\">enter</code> newly added data items</li>\n<li><code class=\"codespan\">update</code> data items have been updated</li>\n<li><code class=\"codespan\">exit</code> data items are deleted</li>\n</ul>\n<p>Note that the data state here is automatically generated based on the <code class=\"codespan\">mark</code>&#39;s <code class=\"codespan\">key</code>. We will calculate the unique identifier for the data bound to the <code class=\"codespan\">mark</code> based on the <code class=\"codespan\">key</code> configuration. After the data is updated, if the corresponding unique identifier no longer exists, the state is <code class=\"codespan\">exit</code>; if it exists, it is <code class=\"codespan\">update</code>. If the previous data does not exist for the unique identifier, the data item&#39;s state is <code class=\"codespan\">enter</code>.</p>\n<p>Supports one interaction state by default:</p>\n<ul>\n<li><code class=\"codespan\">hover</code> when the mouse hovers over a specific shape, set the corresponding visual channel encoding for the shape</li>\n</ul>\n"},"component.componentType.datazoom.encode.enter":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data initialization state. Note that it will not be executed again when the data is updated.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.datazoom.encode.enter.orient":{"desc":"<p>Component orientation</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n</ul>\n"},"component.componentType.datazoom.encode.enter.showDetail(boolean | string)":{"desc":"<p>Whether to show the front and back content text</p>\n"},"component.componentType.datazoom.encode.enter.brushSelect":{"desc":"<p>Whether to enable brush selection</p>\n"},"component.componentType.datazoom.encode.enter.backgroundStyle":{"desc":"<p>Background style</p>\n"},"component.componentType.datazoom.encode.enter.dragMaskStyle":{"desc":"<p>Drag area style</p>\n"},"component.componentType.datazoom.encode.enter.backgroundChartStyle":{"desc":"<p>Thumbnail style</p>\n"},"component.componentType.datazoom.encode.enter.selectedBackgroundStyle":{"desc":"<p>Selected area background style</p>\n"},"component.componentType.datazoom.encode.enter.selectedBackgroundChartStyle":{"desc":"<p>Selected area thumbnail style</p>\n"},"component.componentType.datazoom.encode.enter.middleHandlerStyle":{"desc":"<p>Central handle style</p>\n"},"component.componentType.datazoom.encode.enter.startHandlerStyle":{"desc":"<p>Initial handle style</p>\n"},"component.componentType.datazoom.encode.enter.endHandlerStyle":{"desc":"<p>End handle style</p>\n"},"component.componentType.datazoom.encode.enter.startTextStyle":{"desc":"<p>Header text style</p>\n"},"component.componentType.datazoom.encode.enter.endTextStyle":{"desc":"<p>Footer text style</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.datazoom.encode.enter.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"component.componentType.datazoom.encode.enter.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"component.componentType.datazoom.encode.enter.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"component.componentType.datazoom.encode.enter.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"component.componentType.datazoom.encode.enter.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.datazoom.encode.enter.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"component.componentType.datazoom.encode.enter.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.datazoom.encode.enter.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"component.componentType.datazoom.encode.enter.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"component.componentType.datazoom.encode.enter.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"component.componentType.datazoom.encode.enter.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"component.componentType.datazoom.encode.enter.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.datazoom.encode.enter.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.datazoom.encode.enter.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"component.componentType.datazoom.encode.enter.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"component.componentType.datazoom.encode.enter.outerBorder":{"desc":"<p>Outer border</p>\n"},"component.componentType.datazoom.encode.enter.innerBorder":{"desc":"<p>Inner border</p>\n"},"component.componentType.datazoom.encode.enter.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"component.componentType.datazoom.encode.enter.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.datazoom.encode.enter.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"component.componentType.datazoom.encode.enter.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"component.componentType.datazoom.encode.enter.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"component.componentType.datazoom.encode.enter.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"component.componentType.datazoom.encode.enter.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"component.componentType.datazoom.encode.enter.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"component.componentType.datazoom.encode.enter.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"component.componentType.datazoom.encode.enter.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.datazoom.encode.enter.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.datazoom.encode.enter.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.datazoom.encode.enter.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"component.componentType.datazoom.encode.enter.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"component.componentType.datazoom.encode.enter.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"component.componentType.datazoom.encode.enter.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"component.componentType.datazoom.encode.enter.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"component.componentType.datazoom.encode.enter.texture":{"desc":"<p>The texture of the graphic</p>\n"},"component.componentType.datazoom.encode.enter.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"component.componentType.datazoom.encode.enter.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"component.componentType.datazoom.encode.enter.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"component.componentType.datazoom.encode.enter.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"component.componentType.datazoom.encode.enter.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"component.componentType.datazoom.encode.update":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data update state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.datazoom.encode.update.orient":{"desc":"<p>Component orientation</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n</ul>\n"},"component.componentType.datazoom.encode.update.showDetail(boolean | string)":{"desc":"<p>Whether to show the front and back content text</p>\n"},"component.componentType.datazoom.encode.update.brushSelect":{"desc":"<p>Whether to enable brush selection</p>\n"},"component.componentType.datazoom.encode.update.backgroundStyle":{"desc":"<p>Background style</p>\n"},"component.componentType.datazoom.encode.update.dragMaskStyle":{"desc":"<p>Drag area style</p>\n"},"component.componentType.datazoom.encode.update.backgroundChartStyle":{"desc":"<p>Thumbnail style</p>\n"},"component.componentType.datazoom.encode.update.selectedBackgroundStyle":{"desc":"<p>Selected area background style</p>\n"},"component.componentType.datazoom.encode.update.selectedBackgroundChartStyle":{"desc":"<p>Selected area thumbnail style</p>\n"},"component.componentType.datazoom.encode.update.middleHandlerStyle":{"desc":"<p>Central handle style</p>\n"},"component.componentType.datazoom.encode.update.startHandlerStyle":{"desc":"<p>Initial handle style</p>\n"},"component.componentType.datazoom.encode.update.endHandlerStyle":{"desc":"<p>End handle style</p>\n"},"component.componentType.datazoom.encode.update.startTextStyle":{"desc":"<p>Header text style</p>\n"},"component.componentType.datazoom.encode.update.endTextStyle":{"desc":"<p>Footer text style</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.datazoom.encode.update.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"component.componentType.datazoom.encode.update.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"component.componentType.datazoom.encode.update.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"component.componentType.datazoom.encode.update.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"component.componentType.datazoom.encode.update.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.datazoom.encode.update.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"component.componentType.datazoom.encode.update.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.datazoom.encode.update.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"component.componentType.datazoom.encode.update.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"component.componentType.datazoom.encode.update.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"component.componentType.datazoom.encode.update.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"component.componentType.datazoom.encode.update.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.datazoom.encode.update.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.datazoom.encode.update.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"component.componentType.datazoom.encode.update.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"component.componentType.datazoom.encode.update.outerBorder":{"desc":"<p>Outer border</p>\n"},"component.componentType.datazoom.encode.update.innerBorder":{"desc":"<p>Inner border</p>\n"},"component.componentType.datazoom.encode.update.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"component.componentType.datazoom.encode.update.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.datazoom.encode.update.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"component.componentType.datazoom.encode.update.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"component.componentType.datazoom.encode.update.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"component.componentType.datazoom.encode.update.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"component.componentType.datazoom.encode.update.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"component.componentType.datazoom.encode.update.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"component.componentType.datazoom.encode.update.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"component.componentType.datazoom.encode.update.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.datazoom.encode.update.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.datazoom.encode.update.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.datazoom.encode.update.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"component.componentType.datazoom.encode.update.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"component.componentType.datazoom.encode.update.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"component.componentType.datazoom.encode.update.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"component.componentType.datazoom.encode.update.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"component.componentType.datazoom.encode.update.texture":{"desc":"<p>The texture of the graphic</p>\n"},"component.componentType.datazoom.encode.update.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"component.componentType.datazoom.encode.update.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"component.componentType.datazoom.encode.update.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"component.componentType.datazoom.encode.update.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"component.componentType.datazoom.encode.update.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"component.componentType.datazoom.encode.exit":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data deletion state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.datazoom.encode.exit.orient":{"desc":"<p>Component orientation</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n</ul>\n"},"component.componentType.datazoom.encode.exit.showDetail(boolean | string)":{"desc":"<p>Whether to show the front and back content text</p>\n"},"component.componentType.datazoom.encode.exit.brushSelect":{"desc":"<p>Whether to enable brush selection</p>\n"},"component.componentType.datazoom.encode.exit.backgroundStyle":{"desc":"<p>Background style</p>\n"},"component.componentType.datazoom.encode.exit.dragMaskStyle":{"desc":"<p>Drag area style</p>\n"},"component.componentType.datazoom.encode.exit.backgroundChartStyle":{"desc":"<p>Thumbnail style</p>\n"},"component.componentType.datazoom.encode.exit.selectedBackgroundStyle":{"desc":"<p>Selected area background style</p>\n"},"component.componentType.datazoom.encode.exit.selectedBackgroundChartStyle":{"desc":"<p>Selected area thumbnail style</p>\n"},"component.componentType.datazoom.encode.exit.middleHandlerStyle":{"desc":"<p>Central handle style</p>\n"},"component.componentType.datazoom.encode.exit.startHandlerStyle":{"desc":"<p>Initial handle style</p>\n"},"component.componentType.datazoom.encode.exit.endHandlerStyle":{"desc":"<p>End handle style</p>\n"},"component.componentType.datazoom.encode.exit.startTextStyle":{"desc":"<p>Header text style</p>\n"},"component.componentType.datazoom.encode.exit.endTextStyle":{"desc":"<p>Footer text style</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.datazoom.encode.exit.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"component.componentType.datazoom.encode.exit.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"component.componentType.datazoom.encode.exit.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"component.componentType.datazoom.encode.exit.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"component.componentType.datazoom.encode.exit.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.datazoom.encode.exit.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"component.componentType.datazoom.encode.exit.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.datazoom.encode.exit.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"component.componentType.datazoom.encode.exit.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"component.componentType.datazoom.encode.exit.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"component.componentType.datazoom.encode.exit.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"component.componentType.datazoom.encode.exit.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.datazoom.encode.exit.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.datazoom.encode.exit.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"component.componentType.datazoom.encode.exit.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"component.componentType.datazoom.encode.exit.outerBorder":{"desc":"<p>Outer border</p>\n"},"component.componentType.datazoom.encode.exit.innerBorder":{"desc":"<p>Inner border</p>\n"},"component.componentType.datazoom.encode.exit.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"component.componentType.datazoom.encode.exit.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.datazoom.encode.exit.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"component.componentType.datazoom.encode.exit.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"component.componentType.datazoom.encode.exit.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"component.componentType.datazoom.encode.exit.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"component.componentType.datazoom.encode.exit.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"component.componentType.datazoom.encode.exit.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"component.componentType.datazoom.encode.exit.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"component.componentType.datazoom.encode.exit.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.datazoom.encode.exit.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.datazoom.encode.exit.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.datazoom.encode.exit.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"component.componentType.datazoom.encode.exit.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"component.componentType.datazoom.encode.exit.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"component.componentType.datazoom.encode.exit.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"component.componentType.datazoom.encode.exit.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"component.componentType.datazoom.encode.exit.texture":{"desc":"<p>The texture of the graphic</p>\n"},"component.componentType.datazoom.encode.exit.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"component.componentType.datazoom.encode.exit.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"component.componentType.datazoom.encode.exit.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"component.componentType.datazoom.encode.exit.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"component.componentType.datazoom.encode.exit.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"component.componentType.datazoom.encode.hover":{"desc":"<p>Set the visual channel mapping corresponding to the graphics elements when in the <code class=\"codespan\">hover</code> state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.datazoom.encode.hover.orient":{"desc":"<p>Component orientation</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n</ul>\n"},"component.componentType.datazoom.encode.hover.showDetail(boolean | string)":{"desc":"<p>Whether to show the front and back content text</p>\n"},"component.componentType.datazoom.encode.hover.brushSelect":{"desc":"<p>Whether to enable brush selection</p>\n"},"component.componentType.datazoom.encode.hover.backgroundStyle":{"desc":"<p>Background style</p>\n"},"component.componentType.datazoom.encode.hover.dragMaskStyle":{"desc":"<p>Drag area style</p>\n"},"component.componentType.datazoom.encode.hover.backgroundChartStyle":{"desc":"<p>Thumbnail style</p>\n"},"component.componentType.datazoom.encode.hover.selectedBackgroundStyle":{"desc":"<p>Selected area background style</p>\n"},"component.componentType.datazoom.encode.hover.selectedBackgroundChartStyle":{"desc":"<p>Selected area thumbnail style</p>\n"},"component.componentType.datazoom.encode.hover.middleHandlerStyle":{"desc":"<p>Central handle style</p>\n"},"component.componentType.datazoom.encode.hover.startHandlerStyle":{"desc":"<p>Initial handle style</p>\n"},"component.componentType.datazoom.encode.hover.endHandlerStyle":{"desc":"<p>End handle style</p>\n"},"component.componentType.datazoom.encode.hover.startTextStyle":{"desc":"<p>Header text style</p>\n"},"component.componentType.datazoom.encode.hover.endTextStyle":{"desc":"<p>Footer text style</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.datazoom.encode.hover.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"component.componentType.datazoom.encode.hover.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"component.componentType.datazoom.encode.hover.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"component.componentType.datazoom.encode.hover.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"component.componentType.datazoom.encode.hover.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.datazoom.encode.hover.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"component.componentType.datazoom.encode.hover.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.datazoom.encode.hover.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"component.componentType.datazoom.encode.hover.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"component.componentType.datazoom.encode.hover.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"component.componentType.datazoom.encode.hover.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"component.componentType.datazoom.encode.hover.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.datazoom.encode.hover.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.datazoom.encode.hover.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"component.componentType.datazoom.encode.hover.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"component.componentType.datazoom.encode.hover.outerBorder":{"desc":"<p>Outer border</p>\n"},"component.componentType.datazoom.encode.hover.innerBorder":{"desc":"<p>Inner border</p>\n"},"component.componentType.datazoom.encode.hover.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"component.componentType.datazoom.encode.hover.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.datazoom.encode.hover.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"component.componentType.datazoom.encode.hover.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"component.componentType.datazoom.encode.hover.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"component.componentType.datazoom.encode.hover.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"component.componentType.datazoom.encode.hover.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"component.componentType.datazoom.encode.hover.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"component.componentType.datazoom.encode.hover.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"component.componentType.datazoom.encode.hover.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.datazoom.encode.hover.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.datazoom.encode.hover.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.datazoom.encode.hover.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"component.componentType.datazoom.encode.hover.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"component.componentType.datazoom.encode.hover.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"component.componentType.datazoom.encode.hover.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"component.componentType.datazoom.encode.hover.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"component.componentType.datazoom.encode.hover.texture":{"desc":"<p>The texture of the graphic</p>\n"},"component.componentType.datazoom.encode.hover.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"component.componentType.datazoom.encode.hover.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"component.componentType.datazoom.encode.hover.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"component.componentType.datazoom.encode.hover.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"component.componentType.datazoom.encode.hover.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"component.componentType.datazoom.zIndex":{"desc":"<p>Set the zIndex of the container shape (group) corresponding to the <code class=\"codespan\">mark</code> graphic primitive</p>\n"},"component.componentType.datazoom.interactive":{"desc":"<p>Type: <code class=\"codespan\">boolean</code>\nRequired: No</p>\n"},"component.componentType.datazoom.context":{"desc":"<p>Set the context parameters of the graphic primitive</p>\n"},"component.componentType.datazoom.setCustomizedShape":{"desc":"<p>Set the callback function of custom shape. The corresponding ts type is as follows:</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>Where <code class=\"codespan\">ICustomPath2D</code> is a utility class provided by VRender for drawing custom paths.</p>\n"},"component.componentType.datazoom.support3d":{"desc":"<p>Whether to support 3d mode when the canvas is set to 3d view.</p>\n"},"component.componentType.datazoom.group":{"desc":"<p>Set the parent graphic primitive. Supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> The id of the corresponding parent graphic primitive</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> The corresponding grammar element of the parent graphic primitive, generally used in API call scenarios.</li>\n</ul>\n<p>If not set, it will be attached to the root node of the canvas by default.</p>\n"},"component.componentType.datazoom.from":{"desc":"<p>ts type definition is:</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>Declare the data on which the graphic primitive depends through the <code class=\"codespan\">data</code> attribute.</p>\n"},"component.componentType.datazoom.key":{"desc":"<p>Set the unique identifier for the graphic primitive data element, which is used to calculate the data state of the graphic element. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the <code class=\"codespan\">key</code></li>\n</ul>\n"},"component.componentType.datazoom.sort":{"desc":"<p>Sort all graphic elements in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"component.componentType.datazoom.groupBy":{"desc":"<p>Set the grouping attribute, the corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the grouping <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the grouping <code class=\"codespan\">key</code></li>\n</ul>\n"},"component.componentType.datazoom.groupSort":{"desc":"<p>Sort the groups in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"component.componentType.datazoom.coordinate":{"desc":"<p>Set the id or graphic element corresponding to the associated coordinate system of this graphic primitive</p>\n"},"component.componentType.datazoom.state":{"desc":"<p>Set the state values ​​of all graphical elements of the current graphic primitive, supporting three formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the state of the graphic, for example, <code class=\"codespan\">{ state: &#39;selected&#39;}</code> sets the state of all graphics to <code class=\"codespan\">&#39;selected&#39;</code>, usually in this case, the <code class=\"codespan\">encode</code> also sets the graphic channel mapping corresponding to the <code class=\"codespan\">&#39;selected&#39;</code> state</li>\n<li><code class=\"codespan\">string[]</code> Set multiple states for the graphic, you can configure <code class=\"codespan\">stateSort</code> to influence the order of executing the graphic channel mapping corresponding to the state</li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the state value, and the return parameter is <code class=\"codespan\">string | string[]</code>, the corresponding ts type definition is:</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"component.componentType.datazoom.stateSort":{"desc":"<p>Set the sorting function of the state values ​​of all graphics elements of the current graphic primitive, which will affect the order of the graphic channel mapping corresponding to the state. The result of the graphic channel mapping executed earlier may be covered by subsequent states. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"component.componentType.datazoom.transform":{"desc":"<p>Set the corresponding transformation of the graphic primitive. All data transformations can be configured on the graphic primitive and are used for the <code class=\"codespan\">join data</code> execution transformation;\nAnother type of transformation is the transformation executed by graphical elements, such as <code class=\"codespan\">dodge</code>;\nThe general type definition is as follows:</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>The parameters supported by each transformation are different</p>\n"},"component.componentType.datazoom.layout":{"desc":"<p>Set the layout parameters of the graphic primitive. There are two roles when the graphic primitive participates in the layout:</p>\n<ul>\n<li>&#39;container&#39; Container graphic primitive, usually <code class=\"codespan\">group</code> graphic primitive</li>\n<li>&#39;item&#39; layout child element, as a child node of the container graphic primitive</li>\n</ul>\n<p>Please note that we only support one layer of layout. If it is a multi-layer nested layout, it is recommended to use a custom layout scheme for implementation;</p>\n<p>Now support two content layouts: <code class=\"codespan\">grid</code> layout and <code class=\"codespan\">relative</code> layout, the related type definition is as follows</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>If you want to set a custom layout scheme, <code class=\"codespan\">layout</code> also supports setting callback functions directly. The definition of the callback function is as follows:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"component.componentType.datazoom.layout.display":{"desc":"<p>The container graphic primitive sets the layout type and supports two configurations:</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> Relative layout</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> Grid layout</li>\n</ul>\n"},"component.componentType.datazoom.layout.callback":{"desc":"<p>Customize the callback function for this graphic primitive, the ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"component.componentType.datazoom.layout.skipBeforeLayouted":{"desc":"<p>Skip the execution stage before the layout is completed</p>\n"},"component.componentType.datazoom.layout.updateViewSignals":{"desc":"<p>Whether to update the default view signals, that is: <code class=\"codespan\">padding</code>, <code class=\"codespan\">viewWidth</code> and <code class=\"codespan\">viewHeight</code></p>\n<p>This property can only be set on a container graphic primitive with <code class=\"codespan\">&#39;relative&#39;</code> layout.</p>\n"},"component.componentType.datazoom.layout.maxChildWidth":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum width of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the width of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"component.componentType.datazoom.layout.maxChildHeight":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum height of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the height of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"component.componentType.datazoom.layout.position":{"desc":"<p>Set the position of the child graphic primitive of the relative layout. The supported settings are:</p>\n<ul>\n<li>&#39;top&#39; Relative to the top of the parent graphic primitive</li>\n<li>&#39;bottom&#39; Relative to the bottom of the parent graphic primitive</li>\n<li>&#39;left&#39; Relative to the left side of the parent graphic primitive</li>\n<li>&#39;right&#39; Relative to the right side of the parent graphic primitive</li>\n<li>&#39;content&#39; Relative to the center of the parent graphic primitive, that is, the content area</li>\n<li>&#39;auto&#39; When the graphic primitive sets the coordinate system, the position relative to the parent graphic primitive is automatically calculated according to the associated <code class=\"codespan\">scale</code></li>\n</ul>\n"},"component.componentType.datazoom.layout.padding":{"desc":"<p>The inner padding of Child graphic primitive, in px unit, with the default padding of 0 for all directions. Accepts numerical values, numerical arrays, and objects for settings.</p>\n<p>Example of usage:</p>\n<pre><code class=\"lang-ts\">// Numerical type, set the padding to 5\npadding: 5;\n// Numerical array, set the top and bottom padding to 5, and the left and right padding to 10, similar to the CSS box model\npadding: [5, 10];\n// Numerical array, set the padding for all four directions separately\npadding: [\n  5, // Top\n  10, // Right\n  5, // Bottom\n  10 // Left\n];\n// Object type\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"component.componentType.datazoom.layout.gridTemplateRows":{"desc":"<p>The parent graphic primitive of the grid layout sets the row height</p>\n"},"component.componentType.datazoom.layout.gridTemplateColumns":{"desc":"<p>The parent graphic primitive of the grid layout sets the column width</p>\n"},"component.componentType.datazoom.layout.gridRowGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the row spacing</p>\n"},"component.componentType.datazoom.layout.gridColumnGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the column spacing</p>\n"},"component.componentType.datazoom.layout.gridRowStart":{"desc":"<p>The child graphic primitive of the grid layout sets the row start position</p>\n"},"component.componentType.datazoom.layout.gridRowEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the row end position</p>\n"},"component.componentType.datazoom.layout.gridColumnStart":{"desc":"<p>The child graphic primitive of the grid layout sets the column start position</p>\n"},"component.componentType.datazoom.layout.gridColumnEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the column end position</p>\n"},"component.componentType.label.componentType":{"desc":"<p>Set the component type to <code class=\"codespan\">label</code></p>\n"},"component.componentType.label.labelStyle":{"desc":"<p>Set the style of the label</p>\n"},"component.componentType.label.size":{"desc":"<p>When associating with the <code class=\"codespan\">symbol</code> element, set the <code class=\"codespan\">size</code> visual channel for the corresponding <code class=\"codespan\">symbol</code></p>\n"},"component.componentType.label.target":{"desc":"<p>Associated graphics objects, supporting the association of a single graphics object or multiple graphics objects, supporting four formats of configuration:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: associate a single graphics object, configure the corresponding id of the associated graphics object</li>\n<li><code class=\"codespan\">string[]</code>: associate multiple graphics objects, configure the corresponding ids of the associated graphics objects</li>\n<li><code class=\"codespan\">IMark</code>: associate a single graphics object, configure the instance of the associated graphics object, mainly used for API creation mode</li>\n<li><code class=\"codespan\">IMark[]</code>: associate multiple graphics objects, configure the instances of the associated graphics objects, mainly used for API creation mode</li>\n</ul>\n"},"component.componentType.label.encode":{"desc":"<p>Set the visual channel encoding of the graphics elements, supporting three data change states by default:</p>\n<ul>\n<li><code class=\"codespan\">enter</code> newly added data items</li>\n<li><code class=\"codespan\">update</code> data items have been updated</li>\n<li><code class=\"codespan\">exit</code> data items are deleted</li>\n</ul>\n<p>Note that the data state here is automatically generated based on the <code class=\"codespan\">mark</code>&#39;s <code class=\"codespan\">key</code>. We will calculate the unique identifier for the data bound to the <code class=\"codespan\">mark</code> based on the <code class=\"codespan\">key</code> configuration. After the data is updated, if the corresponding unique identifier no longer exists, the state is <code class=\"codespan\">exit</code>; if it exists, it is <code class=\"codespan\">update</code>. If the previous data does not exist for the unique identifier, the data item&#39;s state is <code class=\"codespan\">enter</code>.</p>\n<p>Supports one interaction state by default:</p>\n<ul>\n<li><code class=\"codespan\">hover</code> when the mouse hovers over a specific shape, set the corresponding visual channel encoding for the shape</li>\n</ul>\n"},"component.componentType.label.encode.enter":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data initialization state. Note that it will not be executed again when the data is updated.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.label.encode.enter.size":{"desc":"<p>The range of label overlap prevention calculation</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.label.encode.enter.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"component.componentType.label.encode.enter.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"component.componentType.label.encode.enter.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"component.componentType.label.encode.enter.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"component.componentType.label.encode.enter.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.label.encode.enter.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"component.componentType.label.encode.enter.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.label.encode.enter.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"component.componentType.label.encode.enter.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"component.componentType.label.encode.enter.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"component.componentType.label.encode.enter.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"component.componentType.label.encode.enter.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.label.encode.enter.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.label.encode.enter.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"component.componentType.label.encode.enter.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"component.componentType.label.encode.enter.outerBorder":{"desc":"<p>Outer border</p>\n"},"component.componentType.label.encode.enter.innerBorder":{"desc":"<p>Inner border</p>\n"},"component.componentType.label.encode.enter.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"component.componentType.label.encode.enter.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.label.encode.enter.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"component.componentType.label.encode.enter.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"component.componentType.label.encode.enter.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"component.componentType.label.encode.enter.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"component.componentType.label.encode.enter.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"component.componentType.label.encode.enter.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"component.componentType.label.encode.enter.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"component.componentType.label.encode.enter.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.label.encode.enter.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.label.encode.enter.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.label.encode.enter.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"component.componentType.label.encode.enter.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"component.componentType.label.encode.enter.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"component.componentType.label.encode.enter.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"component.componentType.label.encode.enter.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"component.componentType.label.encode.enter.texture":{"desc":"<p>The texture of the graphic</p>\n"},"component.componentType.label.encode.enter.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"component.componentType.label.encode.enter.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"component.componentType.label.encode.enter.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"component.componentType.label.encode.enter.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"component.componentType.label.encode.enter.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"component.componentType.label.encode.update":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data update state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.label.encode.update.size":{"desc":"<p>The range of label overlap prevention calculation</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.label.encode.update.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"component.componentType.label.encode.update.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"component.componentType.label.encode.update.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"component.componentType.label.encode.update.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"component.componentType.label.encode.update.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.label.encode.update.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"component.componentType.label.encode.update.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.label.encode.update.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"component.componentType.label.encode.update.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"component.componentType.label.encode.update.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"component.componentType.label.encode.update.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"component.componentType.label.encode.update.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.label.encode.update.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.label.encode.update.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"component.componentType.label.encode.update.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"component.componentType.label.encode.update.outerBorder":{"desc":"<p>Outer border</p>\n"},"component.componentType.label.encode.update.innerBorder":{"desc":"<p>Inner border</p>\n"},"component.componentType.label.encode.update.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"component.componentType.label.encode.update.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.label.encode.update.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"component.componentType.label.encode.update.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"component.componentType.label.encode.update.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"component.componentType.label.encode.update.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"component.componentType.label.encode.update.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"component.componentType.label.encode.update.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"component.componentType.label.encode.update.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"component.componentType.label.encode.update.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.label.encode.update.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.label.encode.update.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.label.encode.update.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"component.componentType.label.encode.update.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"component.componentType.label.encode.update.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"component.componentType.label.encode.update.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"component.componentType.label.encode.update.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"component.componentType.label.encode.update.texture":{"desc":"<p>The texture of the graphic</p>\n"},"component.componentType.label.encode.update.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"component.componentType.label.encode.update.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"component.componentType.label.encode.update.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"component.componentType.label.encode.update.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"component.componentType.label.encode.update.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"component.componentType.label.encode.exit":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data deletion state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.label.encode.exit.size":{"desc":"<p>The range of label overlap prevention calculation</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.label.encode.exit.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"component.componentType.label.encode.exit.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"component.componentType.label.encode.exit.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"component.componentType.label.encode.exit.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"component.componentType.label.encode.exit.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.label.encode.exit.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"component.componentType.label.encode.exit.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.label.encode.exit.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"component.componentType.label.encode.exit.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"component.componentType.label.encode.exit.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"component.componentType.label.encode.exit.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"component.componentType.label.encode.exit.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.label.encode.exit.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.label.encode.exit.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"component.componentType.label.encode.exit.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"component.componentType.label.encode.exit.outerBorder":{"desc":"<p>Outer border</p>\n"},"component.componentType.label.encode.exit.innerBorder":{"desc":"<p>Inner border</p>\n"},"component.componentType.label.encode.exit.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"component.componentType.label.encode.exit.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.label.encode.exit.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"component.componentType.label.encode.exit.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"component.componentType.label.encode.exit.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"component.componentType.label.encode.exit.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"component.componentType.label.encode.exit.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"component.componentType.label.encode.exit.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"component.componentType.label.encode.exit.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"component.componentType.label.encode.exit.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.label.encode.exit.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.label.encode.exit.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.label.encode.exit.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"component.componentType.label.encode.exit.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"component.componentType.label.encode.exit.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"component.componentType.label.encode.exit.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"component.componentType.label.encode.exit.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"component.componentType.label.encode.exit.texture":{"desc":"<p>The texture of the graphic</p>\n"},"component.componentType.label.encode.exit.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"component.componentType.label.encode.exit.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"component.componentType.label.encode.exit.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"component.componentType.label.encode.exit.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"component.componentType.label.encode.exit.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"component.componentType.label.encode.hover":{"desc":"<p>Set the visual channel mapping corresponding to the graphics elements when in the <code class=\"codespan\">hover</code> state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.label.encode.hover.size":{"desc":"<p>The range of label overlap prevention calculation</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.label.encode.hover.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"component.componentType.label.encode.hover.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"component.componentType.label.encode.hover.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"component.componentType.label.encode.hover.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"component.componentType.label.encode.hover.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.label.encode.hover.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"component.componentType.label.encode.hover.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.label.encode.hover.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"component.componentType.label.encode.hover.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"component.componentType.label.encode.hover.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"component.componentType.label.encode.hover.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"component.componentType.label.encode.hover.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.label.encode.hover.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.label.encode.hover.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"component.componentType.label.encode.hover.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"component.componentType.label.encode.hover.outerBorder":{"desc":"<p>Outer border</p>\n"},"component.componentType.label.encode.hover.innerBorder":{"desc":"<p>Inner border</p>\n"},"component.componentType.label.encode.hover.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"component.componentType.label.encode.hover.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.label.encode.hover.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"component.componentType.label.encode.hover.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"component.componentType.label.encode.hover.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"component.componentType.label.encode.hover.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"component.componentType.label.encode.hover.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"component.componentType.label.encode.hover.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"component.componentType.label.encode.hover.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"component.componentType.label.encode.hover.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.label.encode.hover.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.label.encode.hover.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.label.encode.hover.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"component.componentType.label.encode.hover.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"component.componentType.label.encode.hover.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"component.componentType.label.encode.hover.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"component.componentType.label.encode.hover.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"component.componentType.label.encode.hover.texture":{"desc":"<p>The texture of the graphic</p>\n"},"component.componentType.label.encode.hover.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"component.componentType.label.encode.hover.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"component.componentType.label.encode.hover.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"component.componentType.label.encode.hover.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"component.componentType.label.encode.hover.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"component.componentType.label.zIndex":{"desc":"<p>Set the zIndex of the container shape (group) corresponding to the <code class=\"codespan\">mark</code> graphic primitive</p>\n"},"component.componentType.label.interactive":{"desc":"<p>Type: <code class=\"codespan\">boolean</code>\nRequired: No</p>\n"},"component.componentType.label.context":{"desc":"<p>Set the context parameters of the graphic primitive</p>\n"},"component.componentType.label.setCustomizedShape":{"desc":"<p>Set the callback function of custom shape. The corresponding ts type is as follows:</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>Where <code class=\"codespan\">ICustomPath2D</code> is a utility class provided by VRender for drawing custom paths.</p>\n"},"component.componentType.label.support3d":{"desc":"<p>Whether to support 3d mode when the canvas is set to 3d view.</p>\n"},"component.componentType.label.group":{"desc":"<p>Set the parent graphic primitive. Supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> The id of the corresponding parent graphic primitive</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> The corresponding grammar element of the parent graphic primitive, generally used in API call scenarios.</li>\n</ul>\n<p>If not set, it will be attached to the root node of the canvas by default.</p>\n"},"component.componentType.label.from":{"desc":"<p>ts type definition is:</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>Declare the data on which the graphic primitive depends through the <code class=\"codespan\">data</code> attribute.</p>\n"},"component.componentType.label.key":{"desc":"<p>Set the unique identifier for the graphic primitive data element, which is used to calculate the data state of the graphic element. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the <code class=\"codespan\">key</code></li>\n</ul>\n"},"component.componentType.label.sort":{"desc":"<p>Sort all graphic elements in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"component.componentType.label.groupBy":{"desc":"<p>Set the grouping attribute, the corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the grouping <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the grouping <code class=\"codespan\">key</code></li>\n</ul>\n"},"component.componentType.label.groupSort":{"desc":"<p>Sort the groups in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"component.componentType.label.coordinate":{"desc":"<p>Set the id or graphic element corresponding to the associated coordinate system of this graphic primitive</p>\n"},"component.componentType.label.state":{"desc":"<p>Set the state values ​​of all graphical elements of the current graphic primitive, supporting three formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the state of the graphic, for example, <code class=\"codespan\">{ state: &#39;selected&#39;}</code> sets the state of all graphics to <code class=\"codespan\">&#39;selected&#39;</code>, usually in this case, the <code class=\"codespan\">encode</code> also sets the graphic channel mapping corresponding to the <code class=\"codespan\">&#39;selected&#39;</code> state</li>\n<li><code class=\"codespan\">string[]</code> Set multiple states for the graphic, you can configure <code class=\"codespan\">stateSort</code> to influence the order of executing the graphic channel mapping corresponding to the state</li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the state value, and the return parameter is <code class=\"codespan\">string | string[]</code>, the corresponding ts type definition is:</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"component.componentType.label.stateSort":{"desc":"<p>Set the sorting function of the state values ​​of all graphics elements of the current graphic primitive, which will affect the order of the graphic channel mapping corresponding to the state. The result of the graphic channel mapping executed earlier may be covered by subsequent states. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"component.componentType.label.transform":{"desc":"<p>Set the corresponding transformation of the graphic primitive. All data transformations can be configured on the graphic primitive and are used for the <code class=\"codespan\">join data</code> execution transformation;\nAnother type of transformation is the transformation executed by graphical elements, such as <code class=\"codespan\">dodge</code>;\nThe general type definition is as follows:</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>The parameters supported by each transformation are different</p>\n"},"component.componentType.label.layout":{"desc":"<p>Set the layout parameters of the graphic primitive. There are two roles when the graphic primitive participates in the layout:</p>\n<ul>\n<li>&#39;container&#39; Container graphic primitive, usually <code class=\"codespan\">group</code> graphic primitive</li>\n<li>&#39;item&#39; layout child element, as a child node of the container graphic primitive</li>\n</ul>\n<p>Please note that we only support one layer of layout. If it is a multi-layer nested layout, it is recommended to use a custom layout scheme for implementation;</p>\n<p>Now support two content layouts: <code class=\"codespan\">grid</code> layout and <code class=\"codespan\">relative</code> layout, the related type definition is as follows</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>If you want to set a custom layout scheme, <code class=\"codespan\">layout</code> also supports setting callback functions directly. The definition of the callback function is as follows:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"component.componentType.label.layout.display":{"desc":"<p>The container graphic primitive sets the layout type and supports two configurations:</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> Relative layout</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> Grid layout</li>\n</ul>\n"},"component.componentType.label.layout.callback":{"desc":"<p>Customize the callback function for this graphic primitive, the ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"component.componentType.label.layout.skipBeforeLayouted":{"desc":"<p>Skip the execution stage before the layout is completed</p>\n"},"component.componentType.label.layout.updateViewSignals":{"desc":"<p>Whether to update the default view signals, that is: <code class=\"codespan\">padding</code>, <code class=\"codespan\">viewWidth</code> and <code class=\"codespan\">viewHeight</code></p>\n<p>This property can only be set on a container graphic primitive with <code class=\"codespan\">&#39;relative&#39;</code> layout.</p>\n"},"component.componentType.label.layout.maxChildWidth":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum width of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the width of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"component.componentType.label.layout.maxChildHeight":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum height of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the height of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"component.componentType.label.layout.position":{"desc":"<p>Set the position of the child graphic primitive of the relative layout. The supported settings are:</p>\n<ul>\n<li>&#39;top&#39; Relative to the top of the parent graphic primitive</li>\n<li>&#39;bottom&#39; Relative to the bottom of the parent graphic primitive</li>\n<li>&#39;left&#39; Relative to the left side of the parent graphic primitive</li>\n<li>&#39;right&#39; Relative to the right side of the parent graphic primitive</li>\n<li>&#39;content&#39; Relative to the center of the parent graphic primitive, that is, the content area</li>\n<li>&#39;auto&#39; When the graphic primitive sets the coordinate system, the position relative to the parent graphic primitive is automatically calculated according to the associated <code class=\"codespan\">scale</code></li>\n</ul>\n"},"component.componentType.label.layout.padding":{"desc":"<p>The inner padding of Child graphic primitive, in px unit, with the default padding of 0 for all directions. Accepts numerical values, numerical arrays, and objects for settings.</p>\n<p>Example of usage:</p>\n<pre><code class=\"lang-ts\">// Numerical type, set the padding to 5\npadding: 5;\n// Numerical array, set the top and bottom padding to 5, and the left and right padding to 10, similar to the CSS box model\npadding: [5, 10];\n// Numerical array, set the padding for all four directions separately\npadding: [\n  5, // Top\n  10, // Right\n  5, // Bottom\n  10 // Left\n];\n// Object type\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"component.componentType.label.layout.gridTemplateRows":{"desc":"<p>The parent graphic primitive of the grid layout sets the row height</p>\n"},"component.componentType.label.layout.gridTemplateColumns":{"desc":"<p>The parent graphic primitive of the grid layout sets the column width</p>\n"},"component.componentType.label.layout.gridRowGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the row spacing</p>\n"},"component.componentType.label.layout.gridColumnGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the column spacing</p>\n"},"component.componentType.label.layout.gridRowStart":{"desc":"<p>The child graphic primitive of the grid layout sets the row start position</p>\n"},"component.componentType.label.layout.gridRowEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the row end position</p>\n"},"component.componentType.label.layout.gridColumnStart":{"desc":"<p>The child graphic primitive of the grid layout sets the column start position</p>\n"},"component.componentType.label.layout.gridColumnEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the column end position</p>\n"},"component.componentType.legend.componentType":{"desc":"<p>Set the component type to <code class=\"codespan\">legend</code></p>\n"},"component.componentType.legend.legendType":{"desc":"<p>Set the legend type</p>\n<ul>\n<li>&#39;auto&#39; Automatically resolve based on the associated <code class=\"codespan\">scale</code></li>\n<li>&#39;discrete&#39; Discrete type</li>\n<li>&#39;color&#39; Color type</li>\n<li>&#39;size&#39; Size type</li>\n</ul>\n"},"component.componentType.legend.scale":{"desc":"<p>Set the associated <code class=\"codespan\">scale</code> grammar element, supporting two types of settings:</p>\n<ul>\n<li>The id corresponding to the <code class=\"codespan\">string</code> grammar element</li>\n<li>The instance corresponding to the <code class=\"codespan\">IScale</code> grammar element, mainly used for API creation mode</li>\n</ul>\n"},"component.componentType.legend.target":{"desc":"<p>Set the data elements that need to be updated after legend triggers the data update</p>\n"},"component.componentType.legend.target.data":{"desc":"<p>Set the <code class=\"codespan\">data</code> syntax element corresponding to the updated data, supporting two types of settings:</p>\n<ul>\n<li><code class=\"codespan\">string</code> The id corresponding to the data syntax element</li>\n<li><code class=\"codespan\">IData</code> The instance corresponding to the data syntax element, mainly used for API creation mode</li>\n</ul>\n"},"component.componentType.legend.target.filter":{"desc":"<p>Perform filter operation on the target data element, supporting two types of settings:</p>\n<ul>\n<li><code class=\"codespan\">string</code> The field corresponding to the updated data element</li>\n<li><code class=\"codespan\">function</code> Custom filter function, defined as: <code class=\"codespan\">(datum: any, value: any[]) =&gt; boolean</code></li>\n</ul>\n"},"component.componentType.legend.encode":{"desc":"<p>Set the visual channel encoding of the graphics elements, supporting three data change states by default:</p>\n<ul>\n<li><code class=\"codespan\">enter</code> newly added data items</li>\n<li><code class=\"codespan\">update</code> data items have been updated</li>\n<li><code class=\"codespan\">exit</code> data items are deleted</li>\n</ul>\n<p>Note that the data state here is automatically generated based on the <code class=\"codespan\">mark</code>&#39;s <code class=\"codespan\">key</code>. We will calculate the unique identifier for the data bound to the <code class=\"codespan\">mark</code> based on the <code class=\"codespan\">key</code> configuration. After the data is updated, if the corresponding unique identifier no longer exists, the state is <code class=\"codespan\">exit</code>; if it exists, it is <code class=\"codespan\">update</code>. If the previous data does not exist for the unique identifier, the data item&#39;s state is <code class=\"codespan\">enter</code>.</p>\n<p>Supports one interaction state by default:</p>\n<ul>\n<li><code class=\"codespan\">hover</code> when the mouse hovers over a specific shape, set the corresponding visual channel encoding for the shape</li>\n</ul>\n"},"component.componentType.legend.encode.enter":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data initialization state. Note that it will not be executed again when the data is updated.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.legend.encode.enter.select":{"desc":"<p>Allow selection for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.enter.hover":{"desc":"<p>Allow hover for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.enter.items":{"desc":"<p>Legend items for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.enter.defaultSelected":{"desc":"<p>Default selected legend items for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.enter.selectMode":{"desc":"<p>Legend selection mode for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n<ul>\n<li>&#39;single&#39;</li>\n<li>&#39;multiple&#39;</li>\n</ul>\n"},"component.componentType.legend.encode.enter.allowAllCanceled":{"desc":"<p>Allow all canceling for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.enter.reversed":{"desc":"<p>Display legend items in reversed order for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.enter.item":{"desc":"<p>Legend item style for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.enter.maxWidth":{"desc":"<p>Maximum width for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.enter.maxHeight":{"desc":"<p>Maximum height for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.enter.maxRow":{"desc":"<p>Maximum row count for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.enter.maxCol":{"desc":"<p>Maximum column count for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.enter.autoPage":{"desc":"<p>Support automatic page turning for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.enter.pager":{"desc":"<p>Pager style for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.enter.colors":{"desc":"<p>Color palette for color legends when <code class=\"codespan\">legendType = &#39;color&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;color&#39;</code></p>\n"},"component.componentType.legend.encode.enter.sizeBackground":{"desc":"<p>Background style for size legends when <code class=\"codespan\">legendType = &#39;size&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;size&#39;</code></p>\n"},"component.componentType.legend.encode.enter.slider":{"desc":"<p>Slider component styles when the color legend is set to <code class=\"codespan\">legendType = &#39;color&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;color&#39;</code>, and when the size legend is set to <code class=\"codespan\">legendType = &#39;size&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;size&#39;</code></p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.legend.encode.enter.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"component.componentType.legend.encode.enter.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"component.componentType.legend.encode.enter.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"component.componentType.legend.encode.enter.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"component.componentType.legend.encode.enter.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.legend.encode.enter.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"component.componentType.legend.encode.enter.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.legend.encode.enter.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"component.componentType.legend.encode.enter.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"component.componentType.legend.encode.enter.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"component.componentType.legend.encode.enter.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"component.componentType.legend.encode.enter.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.legend.encode.enter.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.legend.encode.enter.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"component.componentType.legend.encode.enter.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"component.componentType.legend.encode.enter.outerBorder":{"desc":"<p>Outer border</p>\n"},"component.componentType.legend.encode.enter.innerBorder":{"desc":"<p>Inner border</p>\n"},"component.componentType.legend.encode.enter.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"component.componentType.legend.encode.enter.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.legend.encode.enter.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"component.componentType.legend.encode.enter.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"component.componentType.legend.encode.enter.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"component.componentType.legend.encode.enter.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"component.componentType.legend.encode.enter.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"component.componentType.legend.encode.enter.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"component.componentType.legend.encode.enter.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"component.componentType.legend.encode.enter.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.legend.encode.enter.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.legend.encode.enter.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.legend.encode.enter.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"component.componentType.legend.encode.enter.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"component.componentType.legend.encode.enter.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"component.componentType.legend.encode.enter.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"component.componentType.legend.encode.enter.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"component.componentType.legend.encode.enter.texture":{"desc":"<p>The texture of the graphic</p>\n"},"component.componentType.legend.encode.enter.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"component.componentType.legend.encode.enter.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"component.componentType.legend.encode.enter.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"component.componentType.legend.encode.enter.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"component.componentType.legend.encode.enter.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"component.componentType.legend.encode.update":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data update state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.legend.encode.update.select":{"desc":"<p>Allow selection for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.update.hover":{"desc":"<p>Allow hover for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.update.items":{"desc":"<p>Legend items for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.update.defaultSelected":{"desc":"<p>Default selected legend items for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.update.selectMode":{"desc":"<p>Legend selection mode for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n<ul>\n<li>&#39;single&#39;</li>\n<li>&#39;multiple&#39;</li>\n</ul>\n"},"component.componentType.legend.encode.update.allowAllCanceled":{"desc":"<p>Allow all canceling for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.update.reversed":{"desc":"<p>Display legend items in reversed order for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.update.item":{"desc":"<p>Legend item style for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.update.maxWidth":{"desc":"<p>Maximum width for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.update.maxHeight":{"desc":"<p>Maximum height for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.update.maxRow":{"desc":"<p>Maximum row count for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.update.maxCol":{"desc":"<p>Maximum column count for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.update.autoPage":{"desc":"<p>Support automatic page turning for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.update.pager":{"desc":"<p>Pager style for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.update.colors":{"desc":"<p>Color palette for color legends when <code class=\"codespan\">legendType = &#39;color&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;color&#39;</code></p>\n"},"component.componentType.legend.encode.update.sizeBackground":{"desc":"<p>Background style for size legends when <code class=\"codespan\">legendType = &#39;size&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;size&#39;</code></p>\n"},"component.componentType.legend.encode.update.slider":{"desc":"<p>Slider component styles when the color legend is set to <code class=\"codespan\">legendType = &#39;color&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;color&#39;</code>, and when the size legend is set to <code class=\"codespan\">legendType = &#39;size&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;size&#39;</code></p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.legend.encode.update.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"component.componentType.legend.encode.update.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"component.componentType.legend.encode.update.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"component.componentType.legend.encode.update.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"component.componentType.legend.encode.update.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.legend.encode.update.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"component.componentType.legend.encode.update.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.legend.encode.update.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"component.componentType.legend.encode.update.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"component.componentType.legend.encode.update.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"component.componentType.legend.encode.update.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"component.componentType.legend.encode.update.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.legend.encode.update.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.legend.encode.update.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"component.componentType.legend.encode.update.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"component.componentType.legend.encode.update.outerBorder":{"desc":"<p>Outer border</p>\n"},"component.componentType.legend.encode.update.innerBorder":{"desc":"<p>Inner border</p>\n"},"component.componentType.legend.encode.update.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"component.componentType.legend.encode.update.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.legend.encode.update.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"component.componentType.legend.encode.update.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"component.componentType.legend.encode.update.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"component.componentType.legend.encode.update.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"component.componentType.legend.encode.update.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"component.componentType.legend.encode.update.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"component.componentType.legend.encode.update.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"component.componentType.legend.encode.update.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.legend.encode.update.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.legend.encode.update.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.legend.encode.update.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"component.componentType.legend.encode.update.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"component.componentType.legend.encode.update.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"component.componentType.legend.encode.update.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"component.componentType.legend.encode.update.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"component.componentType.legend.encode.update.texture":{"desc":"<p>The texture of the graphic</p>\n"},"component.componentType.legend.encode.update.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"component.componentType.legend.encode.update.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"component.componentType.legend.encode.update.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"component.componentType.legend.encode.update.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"component.componentType.legend.encode.update.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"component.componentType.legend.encode.exit":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data deletion state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.legend.encode.exit.select":{"desc":"<p>Allow selection for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.exit.hover":{"desc":"<p>Allow hover for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.exit.items":{"desc":"<p>Legend items for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.exit.defaultSelected":{"desc":"<p>Default selected legend items for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.exit.selectMode":{"desc":"<p>Legend selection mode for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n<ul>\n<li>&#39;single&#39;</li>\n<li>&#39;multiple&#39;</li>\n</ul>\n"},"component.componentType.legend.encode.exit.allowAllCanceled":{"desc":"<p>Allow all canceling for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.exit.reversed":{"desc":"<p>Display legend items in reversed order for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.exit.item":{"desc":"<p>Legend item style for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.exit.maxWidth":{"desc":"<p>Maximum width for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.exit.maxHeight":{"desc":"<p>Maximum height for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.exit.maxRow":{"desc":"<p>Maximum row count for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.exit.maxCol":{"desc":"<p>Maximum column count for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.exit.autoPage":{"desc":"<p>Support automatic page turning for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.exit.pager":{"desc":"<p>Pager style for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.exit.colors":{"desc":"<p>Color palette for color legends when <code class=\"codespan\">legendType = &#39;color&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;color&#39;</code></p>\n"},"component.componentType.legend.encode.exit.sizeBackground":{"desc":"<p>Background style for size legends when <code class=\"codespan\">legendType = &#39;size&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;size&#39;</code></p>\n"},"component.componentType.legend.encode.exit.slider":{"desc":"<p>Slider component styles when the color legend is set to <code class=\"codespan\">legendType = &#39;color&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;color&#39;</code>, and when the size legend is set to <code class=\"codespan\">legendType = &#39;size&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;size&#39;</code></p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.legend.encode.exit.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"component.componentType.legend.encode.exit.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"component.componentType.legend.encode.exit.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"component.componentType.legend.encode.exit.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"component.componentType.legend.encode.exit.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.legend.encode.exit.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"component.componentType.legend.encode.exit.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.legend.encode.exit.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"component.componentType.legend.encode.exit.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"component.componentType.legend.encode.exit.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"component.componentType.legend.encode.exit.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"component.componentType.legend.encode.exit.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.legend.encode.exit.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.legend.encode.exit.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"component.componentType.legend.encode.exit.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"component.componentType.legend.encode.exit.outerBorder":{"desc":"<p>Outer border</p>\n"},"component.componentType.legend.encode.exit.innerBorder":{"desc":"<p>Inner border</p>\n"},"component.componentType.legend.encode.exit.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"component.componentType.legend.encode.exit.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.legend.encode.exit.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"component.componentType.legend.encode.exit.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"component.componentType.legend.encode.exit.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"component.componentType.legend.encode.exit.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"component.componentType.legend.encode.exit.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"component.componentType.legend.encode.exit.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"component.componentType.legend.encode.exit.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"component.componentType.legend.encode.exit.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.legend.encode.exit.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.legend.encode.exit.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.legend.encode.exit.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"component.componentType.legend.encode.exit.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"component.componentType.legend.encode.exit.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"component.componentType.legend.encode.exit.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"component.componentType.legend.encode.exit.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"component.componentType.legend.encode.exit.texture":{"desc":"<p>The texture of the graphic</p>\n"},"component.componentType.legend.encode.exit.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"component.componentType.legend.encode.exit.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"component.componentType.legend.encode.exit.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"component.componentType.legend.encode.exit.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"component.componentType.legend.encode.exit.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"component.componentType.legend.encode.hover":{"desc":"<p>Set the visual channel mapping corresponding to the graphics elements when in the <code class=\"codespan\">hover</code> state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.legend.encode.hover.select":{"desc":"<p>Allow selection for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.hover.hover":{"desc":"<p>Allow hover for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.hover.items":{"desc":"<p>Legend items for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.hover.defaultSelected":{"desc":"<p>Default selected legend items for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.hover.selectMode":{"desc":"<p>Legend selection mode for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n<ul>\n<li>&#39;single&#39;</li>\n<li>&#39;multiple&#39;</li>\n</ul>\n"},"component.componentType.legend.encode.hover.allowAllCanceled":{"desc":"<p>Allow all canceling for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.hover.reversed":{"desc":"<p>Display legend items in reversed order for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.hover.item":{"desc":"<p>Legend item style for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.hover.maxWidth":{"desc":"<p>Maximum width for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.hover.maxHeight":{"desc":"<p>Maximum height for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.hover.maxRow":{"desc":"<p>Maximum row count for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.hover.maxCol":{"desc":"<p>Maximum column count for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.hover.autoPage":{"desc":"<p>Support automatic page turning for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.hover.pager":{"desc":"<p>Pager style for discrete legends when <code class=\"codespan\">legendType = &#39;discrete&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;discrete&#39;</code></p>\n"},"component.componentType.legend.encode.hover.colors":{"desc":"<p>Color palette for color legends when <code class=\"codespan\">legendType = &#39;color&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;color&#39;</code></p>\n"},"component.componentType.legend.encode.hover.sizeBackground":{"desc":"<p>Background style for size legends when <code class=\"codespan\">legendType = &#39;size&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;size&#39;</code></p>\n"},"component.componentType.legend.encode.hover.slider":{"desc":"<p>Slider component styles when the color legend is set to <code class=\"codespan\">legendType = &#39;color&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;color&#39;</code>, and when the size legend is set to <code class=\"codespan\">legendType = &#39;size&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;size&#39;</code></p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.legend.encode.hover.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"component.componentType.legend.encode.hover.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"component.componentType.legend.encode.hover.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"component.componentType.legend.encode.hover.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"component.componentType.legend.encode.hover.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.legend.encode.hover.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"component.componentType.legend.encode.hover.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.legend.encode.hover.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"component.componentType.legend.encode.hover.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"component.componentType.legend.encode.hover.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"component.componentType.legend.encode.hover.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"component.componentType.legend.encode.hover.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.legend.encode.hover.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.legend.encode.hover.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"component.componentType.legend.encode.hover.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"component.componentType.legend.encode.hover.outerBorder":{"desc":"<p>Outer border</p>\n"},"component.componentType.legend.encode.hover.innerBorder":{"desc":"<p>Inner border</p>\n"},"component.componentType.legend.encode.hover.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"component.componentType.legend.encode.hover.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.legend.encode.hover.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"component.componentType.legend.encode.hover.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"component.componentType.legend.encode.hover.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"component.componentType.legend.encode.hover.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"component.componentType.legend.encode.hover.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"component.componentType.legend.encode.hover.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"component.componentType.legend.encode.hover.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"component.componentType.legend.encode.hover.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.legend.encode.hover.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.legend.encode.hover.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.legend.encode.hover.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"component.componentType.legend.encode.hover.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"component.componentType.legend.encode.hover.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"component.componentType.legend.encode.hover.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"component.componentType.legend.encode.hover.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"component.componentType.legend.encode.hover.texture":{"desc":"<p>The texture of the graphic</p>\n"},"component.componentType.legend.encode.hover.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"component.componentType.legend.encode.hover.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"component.componentType.legend.encode.hover.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"component.componentType.legend.encode.hover.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"component.componentType.legend.encode.hover.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"component.componentType.legend.zIndex":{"desc":"<p>Set the zIndex of the container shape (group) corresponding to the <code class=\"codespan\">mark</code> graphic primitive</p>\n"},"component.componentType.legend.interactive":{"desc":"<p>Type: <code class=\"codespan\">boolean</code>\nRequired: No</p>\n"},"component.componentType.legend.context":{"desc":"<p>Set the context parameters of the graphic primitive</p>\n"},"component.componentType.legend.setCustomizedShape":{"desc":"<p>Set the callback function of custom shape. The corresponding ts type is as follows:</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>Where <code class=\"codespan\">ICustomPath2D</code> is a utility class provided by VRender for drawing custom paths.</p>\n"},"component.componentType.legend.support3d":{"desc":"<p>Whether to support 3d mode when the canvas is set to 3d view.</p>\n"},"component.componentType.legend.group":{"desc":"<p>Set the parent graphic primitive. Supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> The id of the corresponding parent graphic primitive</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> The corresponding grammar element of the parent graphic primitive, generally used in API call scenarios.</li>\n</ul>\n<p>If not set, it will be attached to the root node of the canvas by default.</p>\n"},"component.componentType.legend.from":{"desc":"<p>ts type definition is:</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>Declare the data on which the graphic primitive depends through the <code class=\"codespan\">data</code> attribute.</p>\n"},"component.componentType.legend.key":{"desc":"<p>Set the unique identifier for the graphic primitive data element, which is used to calculate the data state of the graphic element. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the <code class=\"codespan\">key</code></li>\n</ul>\n"},"component.componentType.legend.sort":{"desc":"<p>Sort all graphic elements in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"component.componentType.legend.groupBy":{"desc":"<p>Set the grouping attribute, the corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the grouping <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the grouping <code class=\"codespan\">key</code></li>\n</ul>\n"},"component.componentType.legend.groupSort":{"desc":"<p>Sort the groups in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"component.componentType.legend.coordinate":{"desc":"<p>Set the id or graphic element corresponding to the associated coordinate system of this graphic primitive</p>\n"},"component.componentType.legend.state":{"desc":"<p>Set the state values ​​of all graphical elements of the current graphic primitive, supporting three formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the state of the graphic, for example, <code class=\"codespan\">{ state: &#39;selected&#39;}</code> sets the state of all graphics to <code class=\"codespan\">&#39;selected&#39;</code>, usually in this case, the <code class=\"codespan\">encode</code> also sets the graphic channel mapping corresponding to the <code class=\"codespan\">&#39;selected&#39;</code> state</li>\n<li><code class=\"codespan\">string[]</code> Set multiple states for the graphic, you can configure <code class=\"codespan\">stateSort</code> to influence the order of executing the graphic channel mapping corresponding to the state</li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the state value, and the return parameter is <code class=\"codespan\">string | string[]</code>, the corresponding ts type definition is:</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"component.componentType.legend.stateSort":{"desc":"<p>Set the sorting function of the state values ​​of all graphics elements of the current graphic primitive, which will affect the order of the graphic channel mapping corresponding to the state. The result of the graphic channel mapping executed earlier may be covered by subsequent states. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"component.componentType.legend.transform":{"desc":"<p>Set the corresponding transformation of the graphic primitive. All data transformations can be configured on the graphic primitive and are used for the <code class=\"codespan\">join data</code> execution transformation;\nAnother type of transformation is the transformation executed by graphical elements, such as <code class=\"codespan\">dodge</code>;\nThe general type definition is as follows:</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>The parameters supported by each transformation are different</p>\n"},"component.componentType.legend.layout":{"desc":"<p>Set the layout parameters of the graphic primitive. There are two roles when the graphic primitive participates in the layout:</p>\n<ul>\n<li>&#39;container&#39; Container graphic primitive, usually <code class=\"codespan\">group</code> graphic primitive</li>\n<li>&#39;item&#39; layout child element, as a child node of the container graphic primitive</li>\n</ul>\n<p>Please note that we only support one layer of layout. If it is a multi-layer nested layout, it is recommended to use a custom layout scheme for implementation;</p>\n<p>Now support two content layouts: <code class=\"codespan\">grid</code> layout and <code class=\"codespan\">relative</code> layout, the related type definition is as follows</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>If you want to set a custom layout scheme, <code class=\"codespan\">layout</code> also supports setting callback functions directly. The definition of the callback function is as follows:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"component.componentType.legend.layout.display":{"desc":"<p>The container graphic primitive sets the layout type and supports two configurations:</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> Relative layout</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> Grid layout</li>\n</ul>\n"},"component.componentType.legend.layout.callback":{"desc":"<p>Customize the callback function for this graphic primitive, the ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"component.componentType.legend.layout.skipBeforeLayouted":{"desc":"<p>Skip the execution stage before the layout is completed</p>\n"},"component.componentType.legend.layout.updateViewSignals":{"desc":"<p>Whether to update the default view signals, that is: <code class=\"codespan\">padding</code>, <code class=\"codespan\">viewWidth</code> and <code class=\"codespan\">viewHeight</code></p>\n<p>This property can only be set on a container graphic primitive with <code class=\"codespan\">&#39;relative&#39;</code> layout.</p>\n"},"component.componentType.legend.layout.maxChildWidth":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum width of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the width of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"component.componentType.legend.layout.maxChildHeight":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum height of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the height of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"component.componentType.legend.layout.position":{"desc":"<p>Set the position of the child graphic primitive of the relative layout. The supported settings are:</p>\n<ul>\n<li>&#39;top&#39; Relative to the top of the parent graphic primitive</li>\n<li>&#39;bottom&#39; Relative to the bottom of the parent graphic primitive</li>\n<li>&#39;left&#39; Relative to the left side of the parent graphic primitive</li>\n<li>&#39;right&#39; Relative to the right side of the parent graphic primitive</li>\n<li>&#39;content&#39; Relative to the center of the parent graphic primitive, that is, the content area</li>\n<li>&#39;auto&#39; When the graphic primitive sets the coordinate system, the position relative to the parent graphic primitive is automatically calculated according to the associated <code class=\"codespan\">scale</code></li>\n</ul>\n"},"component.componentType.legend.layout.padding":{"desc":"<p>The inner padding of Child graphic primitive, in px unit, with the default padding of 0 for all directions. Accepts numerical values, numerical arrays, and objects for settings.</p>\n<p>Example of usage:</p>\n<pre><code class=\"lang-ts\">// Numerical type, set the padding to 5\npadding: 5;\n// Numerical array, set the top and bottom padding to 5, and the left and right padding to 10, similar to the CSS box model\npadding: [5, 10];\n// Numerical array, set the padding for all four directions separately\npadding: [\n  5, // Top\n  10, // Right\n  5, // Bottom\n  10 // Left\n];\n// Object type\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"component.componentType.legend.layout.gridTemplateRows":{"desc":"<p>The parent graphic primitive of the grid layout sets the row height</p>\n"},"component.componentType.legend.layout.gridTemplateColumns":{"desc":"<p>The parent graphic primitive of the grid layout sets the column width</p>\n"},"component.componentType.legend.layout.gridRowGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the row spacing</p>\n"},"component.componentType.legend.layout.gridColumnGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the column spacing</p>\n"},"component.componentType.legend.layout.gridRowStart":{"desc":"<p>The child graphic primitive of the grid layout sets the row start position</p>\n"},"component.componentType.legend.layout.gridRowEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the row end position</p>\n"},"component.componentType.legend.layout.gridColumnStart":{"desc":"<p>The child graphic primitive of the grid layout sets the column start position</p>\n"},"component.componentType.legend.layout.gridColumnEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the column end position</p>\n"},"component.componentType.player.componentType":{"desc":"<p>Sets the component type to <code class=\"codespan\">player</code></p>\n"},"component.componentType.player.playerType":{"desc":"<p>Supported types:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;discrete&#39;</li>\n<li>&#39;continuous&#39;</li>\n</ul>\n"},"component.componentType.player.target":{"desc":"<p>Set the data elements that need to be updated after player triggers the data update</p>\n"},"component.componentType.player.target.data":{"desc":"<p>Set the <code class=\"codespan\">data</code> syntax element corresponding to the updated data, supporting two types of settings:</p>\n<ul>\n<li><code class=\"codespan\">string</code> The id corresponding to the data syntax element</li>\n<li><code class=\"codespan\">IData</code> The instance corresponding to the data syntax element, mainly used for API creation mode</li>\n</ul>\n"},"component.componentType.player.target.source":{"desc":"<p>Set data source, support three types of settings:</p>\n<ul>\n<li><code class=\"codespan\">string</code> The id corresponding to the data syntax element</li>\n<li><code class=\"codespan\">IData</code> The instance corresponding to the data syntax element, mainly used for API creation mode</li>\n<li><code class=\"codespan\">any[]</code> custom data</li>\n</ul>\n"},"component.componentType.player.encode":{"desc":"<p>Set the visual channel encoding of the graphics elements, supporting three data change states by default:</p>\n<ul>\n<li><code class=\"codespan\">enter</code> newly added data items</li>\n<li><code class=\"codespan\">update</code> data items have been updated</li>\n<li><code class=\"codespan\">exit</code> data items are deleted</li>\n</ul>\n<p>Note that the data state here is automatically generated based on the <code class=\"codespan\">mark</code>&#39;s <code class=\"codespan\">key</code>. We will calculate the unique identifier for the data bound to the <code class=\"codespan\">mark</code> based on the <code class=\"codespan\">key</code> configuration. After the data is updated, if the corresponding unique identifier no longer exists, the state is <code class=\"codespan\">exit</code>; if it exists, it is <code class=\"codespan\">update</code>. If the previous data does not exist for the unique identifier, the data item&#39;s state is <code class=\"codespan\">enter</code>.</p>\n<p>Supports one interaction state by default:</p>\n<ul>\n<li><code class=\"codespan\">hover</code> when the mouse hovers over a specific shape, set the corresponding visual channel encoding for the shape</li>\n</ul>\n"},"component.componentType.player.encode.enter":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data initialization state. Note that it will not be executed again when the data is updated.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.player.encode.enter.data":{"desc":"<p>Data item content</p>\n"},"component.componentType.player.encode.enter.dataIndex":{"desc":"<p>Data item index</p>\n"},"component.componentType.player.encode.enter.orient":{"desc":"<p>Player orientation</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n</ul>\n"},"component.componentType.player.encode.enter.size":{"desc":"<p>Player size</p>\n"},"component.componentType.player.encode.enter.slider":{"desc":"<p>Player slider style</p>\n"},"component.componentType.player.encode.enter.controller":{"desc":"<p>Player controller style</p>\n"},"component.componentType.player.encode.enter.interval":{"desc":"<p>Play interval</p>\n"},"component.componentType.player.encode.enter.totalDuration":{"desc":"<p>Set the total duration for the <code class=\"codespan\">playerType = &#39;continuous&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;continuous&#39;</code> type player, mutually exclusive with the <code class=\"codespan\">interval</code> configuration item</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.player.encode.enter.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"component.componentType.player.encode.enter.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"component.componentType.player.encode.enter.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"component.componentType.player.encode.enter.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"component.componentType.player.encode.enter.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.player.encode.enter.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"component.componentType.player.encode.enter.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.player.encode.enter.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"component.componentType.player.encode.enter.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"component.componentType.player.encode.enter.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"component.componentType.player.encode.enter.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"component.componentType.player.encode.enter.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.player.encode.enter.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.player.encode.enter.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"component.componentType.player.encode.enter.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"component.componentType.player.encode.enter.outerBorder":{"desc":"<p>Outer border</p>\n"},"component.componentType.player.encode.enter.innerBorder":{"desc":"<p>Inner border</p>\n"},"component.componentType.player.encode.enter.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"component.componentType.player.encode.enter.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.player.encode.enter.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"component.componentType.player.encode.enter.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"component.componentType.player.encode.enter.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"component.componentType.player.encode.enter.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"component.componentType.player.encode.enter.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"component.componentType.player.encode.enter.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"component.componentType.player.encode.enter.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"component.componentType.player.encode.enter.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.player.encode.enter.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.player.encode.enter.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.player.encode.enter.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"component.componentType.player.encode.enter.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"component.componentType.player.encode.enter.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"component.componentType.player.encode.enter.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"component.componentType.player.encode.enter.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"component.componentType.player.encode.enter.texture":{"desc":"<p>The texture of the graphic</p>\n"},"component.componentType.player.encode.enter.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"component.componentType.player.encode.enter.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"component.componentType.player.encode.enter.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"component.componentType.player.encode.enter.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"component.componentType.player.encode.enter.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"component.componentType.player.encode.update":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data update state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.player.encode.update.data":{"desc":"<p>Data item content</p>\n"},"component.componentType.player.encode.update.dataIndex":{"desc":"<p>Data item index</p>\n"},"component.componentType.player.encode.update.orient":{"desc":"<p>Player orientation</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n</ul>\n"},"component.componentType.player.encode.update.size":{"desc":"<p>Player size</p>\n"},"component.componentType.player.encode.update.slider":{"desc":"<p>Player slider style</p>\n"},"component.componentType.player.encode.update.controller":{"desc":"<p>Player controller style</p>\n"},"component.componentType.player.encode.update.interval":{"desc":"<p>Play interval</p>\n"},"component.componentType.player.encode.update.totalDuration":{"desc":"<p>Set the total duration for the <code class=\"codespan\">playerType = &#39;continuous&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;continuous&#39;</code> type player, mutually exclusive with the <code class=\"codespan\">interval</code> configuration item</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.player.encode.update.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"component.componentType.player.encode.update.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"component.componentType.player.encode.update.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"component.componentType.player.encode.update.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"component.componentType.player.encode.update.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.player.encode.update.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"component.componentType.player.encode.update.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.player.encode.update.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"component.componentType.player.encode.update.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"component.componentType.player.encode.update.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"component.componentType.player.encode.update.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"component.componentType.player.encode.update.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.player.encode.update.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.player.encode.update.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"component.componentType.player.encode.update.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"component.componentType.player.encode.update.outerBorder":{"desc":"<p>Outer border</p>\n"},"component.componentType.player.encode.update.innerBorder":{"desc":"<p>Inner border</p>\n"},"component.componentType.player.encode.update.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"component.componentType.player.encode.update.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.player.encode.update.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"component.componentType.player.encode.update.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"component.componentType.player.encode.update.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"component.componentType.player.encode.update.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"component.componentType.player.encode.update.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"component.componentType.player.encode.update.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"component.componentType.player.encode.update.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"component.componentType.player.encode.update.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.player.encode.update.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.player.encode.update.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.player.encode.update.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"component.componentType.player.encode.update.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"component.componentType.player.encode.update.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"component.componentType.player.encode.update.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"component.componentType.player.encode.update.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"component.componentType.player.encode.update.texture":{"desc":"<p>The texture of the graphic</p>\n"},"component.componentType.player.encode.update.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"component.componentType.player.encode.update.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"component.componentType.player.encode.update.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"component.componentType.player.encode.update.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"component.componentType.player.encode.update.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"component.componentType.player.encode.exit":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data deletion state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.player.encode.exit.data":{"desc":"<p>Data item content</p>\n"},"component.componentType.player.encode.exit.dataIndex":{"desc":"<p>Data item index</p>\n"},"component.componentType.player.encode.exit.orient":{"desc":"<p>Player orientation</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n</ul>\n"},"component.componentType.player.encode.exit.size":{"desc":"<p>Player size</p>\n"},"component.componentType.player.encode.exit.slider":{"desc":"<p>Player slider style</p>\n"},"component.componentType.player.encode.exit.controller":{"desc":"<p>Player controller style</p>\n"},"component.componentType.player.encode.exit.interval":{"desc":"<p>Play interval</p>\n"},"component.componentType.player.encode.exit.totalDuration":{"desc":"<p>Set the total duration for the <code class=\"codespan\">playerType = &#39;continuous&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;continuous&#39;</code> type player, mutually exclusive with the <code class=\"codespan\">interval</code> configuration item</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.player.encode.exit.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"component.componentType.player.encode.exit.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"component.componentType.player.encode.exit.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"component.componentType.player.encode.exit.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"component.componentType.player.encode.exit.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.player.encode.exit.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"component.componentType.player.encode.exit.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.player.encode.exit.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"component.componentType.player.encode.exit.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"component.componentType.player.encode.exit.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"component.componentType.player.encode.exit.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"component.componentType.player.encode.exit.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.player.encode.exit.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.player.encode.exit.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"component.componentType.player.encode.exit.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"component.componentType.player.encode.exit.outerBorder":{"desc":"<p>Outer border</p>\n"},"component.componentType.player.encode.exit.innerBorder":{"desc":"<p>Inner border</p>\n"},"component.componentType.player.encode.exit.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"component.componentType.player.encode.exit.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.player.encode.exit.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"component.componentType.player.encode.exit.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"component.componentType.player.encode.exit.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"component.componentType.player.encode.exit.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"component.componentType.player.encode.exit.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"component.componentType.player.encode.exit.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"component.componentType.player.encode.exit.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"component.componentType.player.encode.exit.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.player.encode.exit.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.player.encode.exit.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.player.encode.exit.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"component.componentType.player.encode.exit.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"component.componentType.player.encode.exit.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"component.componentType.player.encode.exit.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"component.componentType.player.encode.exit.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"component.componentType.player.encode.exit.texture":{"desc":"<p>The texture of the graphic</p>\n"},"component.componentType.player.encode.exit.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"component.componentType.player.encode.exit.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"component.componentType.player.encode.exit.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"component.componentType.player.encode.exit.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"component.componentType.player.encode.exit.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"component.componentType.player.encode.hover":{"desc":"<p>Set the visual channel mapping corresponding to the graphics elements when in the <code class=\"codespan\">hover</code> state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.player.encode.hover.data":{"desc":"<p>Data item content</p>\n"},"component.componentType.player.encode.hover.dataIndex":{"desc":"<p>Data item index</p>\n"},"component.componentType.player.encode.hover.orient":{"desc":"<p>Player orientation</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n</ul>\n"},"component.componentType.player.encode.hover.size":{"desc":"<p>Player size</p>\n"},"component.componentType.player.encode.hover.slider":{"desc":"<p>Player slider style</p>\n"},"component.componentType.player.encode.hover.controller":{"desc":"<p>Player controller style</p>\n"},"component.componentType.player.encode.hover.interval":{"desc":"<p>Play interval</p>\n"},"component.componentType.player.encode.hover.totalDuration":{"desc":"<p>Set the total duration for the <code class=\"codespan\">playerType = &#39;continuous&#39;</code> or automatically calculated as <code class=\"codespan\">&#39;continuous&#39;</code> type player, mutually exclusive with the <code class=\"codespan\">interval</code> configuration item</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.player.encode.hover.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"component.componentType.player.encode.hover.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"component.componentType.player.encode.hover.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"component.componentType.player.encode.hover.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"component.componentType.player.encode.hover.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.player.encode.hover.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"component.componentType.player.encode.hover.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.player.encode.hover.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"component.componentType.player.encode.hover.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"component.componentType.player.encode.hover.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"component.componentType.player.encode.hover.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"component.componentType.player.encode.hover.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.player.encode.hover.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.player.encode.hover.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"component.componentType.player.encode.hover.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"component.componentType.player.encode.hover.outerBorder":{"desc":"<p>Outer border</p>\n"},"component.componentType.player.encode.hover.innerBorder":{"desc":"<p>Inner border</p>\n"},"component.componentType.player.encode.hover.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"component.componentType.player.encode.hover.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.player.encode.hover.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"component.componentType.player.encode.hover.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"component.componentType.player.encode.hover.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"component.componentType.player.encode.hover.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"component.componentType.player.encode.hover.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"component.componentType.player.encode.hover.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"component.componentType.player.encode.hover.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"component.componentType.player.encode.hover.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.player.encode.hover.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.player.encode.hover.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.player.encode.hover.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"component.componentType.player.encode.hover.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"component.componentType.player.encode.hover.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"component.componentType.player.encode.hover.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"component.componentType.player.encode.hover.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"component.componentType.player.encode.hover.texture":{"desc":"<p>The texture of the graphic</p>\n"},"component.componentType.player.encode.hover.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"component.componentType.player.encode.hover.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"component.componentType.player.encode.hover.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"component.componentType.player.encode.hover.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"component.componentType.player.encode.hover.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"component.componentType.player.zIndex":{"desc":"<p>Set the zIndex of the container shape (group) corresponding to the <code class=\"codespan\">mark</code> graphic primitive</p>\n"},"component.componentType.player.interactive":{"desc":"<p>Type: <code class=\"codespan\">boolean</code>\nRequired: No</p>\n"},"component.componentType.player.context":{"desc":"<p>Set the context parameters of the graphic primitive</p>\n"},"component.componentType.player.setCustomizedShape":{"desc":"<p>Set the callback function of custom shape. The corresponding ts type is as follows:</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>Where <code class=\"codespan\">ICustomPath2D</code> is a utility class provided by VRender for drawing custom paths.</p>\n"},"component.componentType.player.support3d":{"desc":"<p>Whether to support 3d mode when the canvas is set to 3d view.</p>\n"},"component.componentType.player.group":{"desc":"<p>Set the parent graphic primitive. Supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> The id of the corresponding parent graphic primitive</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> The corresponding grammar element of the parent graphic primitive, generally used in API call scenarios.</li>\n</ul>\n<p>If not set, it will be attached to the root node of the canvas by default.</p>\n"},"component.componentType.player.from":{"desc":"<p>ts type definition is:</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>Declare the data on which the graphic primitive depends through the <code class=\"codespan\">data</code> attribute.</p>\n"},"component.componentType.player.key":{"desc":"<p>Set the unique identifier for the graphic primitive data element, which is used to calculate the data state of the graphic element. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the <code class=\"codespan\">key</code></li>\n</ul>\n"},"component.componentType.player.sort":{"desc":"<p>Sort all graphic elements in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"component.componentType.player.groupBy":{"desc":"<p>Set the grouping attribute, the corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the grouping <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the grouping <code class=\"codespan\">key</code></li>\n</ul>\n"},"component.componentType.player.groupSort":{"desc":"<p>Sort the groups in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"component.componentType.player.coordinate":{"desc":"<p>Set the id or graphic element corresponding to the associated coordinate system of this graphic primitive</p>\n"},"component.componentType.player.state":{"desc":"<p>Set the state values ​​of all graphical elements of the current graphic primitive, supporting three formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the state of the graphic, for example, <code class=\"codespan\">{ state: &#39;selected&#39;}</code> sets the state of all graphics to <code class=\"codespan\">&#39;selected&#39;</code>, usually in this case, the <code class=\"codespan\">encode</code> also sets the graphic channel mapping corresponding to the <code class=\"codespan\">&#39;selected&#39;</code> state</li>\n<li><code class=\"codespan\">string[]</code> Set multiple states for the graphic, you can configure <code class=\"codespan\">stateSort</code> to influence the order of executing the graphic channel mapping corresponding to the state</li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the state value, and the return parameter is <code class=\"codespan\">string | string[]</code>, the corresponding ts type definition is:</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"component.componentType.player.stateSort":{"desc":"<p>Set the sorting function of the state values ​​of all graphics elements of the current graphic primitive, which will affect the order of the graphic channel mapping corresponding to the state. The result of the graphic channel mapping executed earlier may be covered by subsequent states. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"component.componentType.player.transform":{"desc":"<p>Set the corresponding transformation of the graphic primitive. All data transformations can be configured on the graphic primitive and are used for the <code class=\"codespan\">join data</code> execution transformation;\nAnother type of transformation is the transformation executed by graphical elements, such as <code class=\"codespan\">dodge</code>;\nThe general type definition is as follows:</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>The parameters supported by each transformation are different</p>\n"},"component.componentType.player.layout":{"desc":"<p>Set the layout parameters of the graphic primitive. There are two roles when the graphic primitive participates in the layout:</p>\n<ul>\n<li>&#39;container&#39; Container graphic primitive, usually <code class=\"codespan\">group</code> graphic primitive</li>\n<li>&#39;item&#39; layout child element, as a child node of the container graphic primitive</li>\n</ul>\n<p>Please note that we only support one layer of layout. If it is a multi-layer nested layout, it is recommended to use a custom layout scheme for implementation;</p>\n<p>Now support two content layouts: <code class=\"codespan\">grid</code> layout and <code class=\"codespan\">relative</code> layout, the related type definition is as follows</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>If you want to set a custom layout scheme, <code class=\"codespan\">layout</code> also supports setting callback functions directly. The definition of the callback function is as follows:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"component.componentType.player.layout.display":{"desc":"<p>The container graphic primitive sets the layout type and supports two configurations:</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> Relative layout</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> Grid layout</li>\n</ul>\n"},"component.componentType.player.layout.callback":{"desc":"<p>Customize the callback function for this graphic primitive, the ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"component.componentType.player.layout.skipBeforeLayouted":{"desc":"<p>Skip the execution stage before the layout is completed</p>\n"},"component.componentType.player.layout.updateViewSignals":{"desc":"<p>Whether to update the default view signals, that is: <code class=\"codespan\">padding</code>, <code class=\"codespan\">viewWidth</code> and <code class=\"codespan\">viewHeight</code></p>\n<p>This property can only be set on a container graphic primitive with <code class=\"codespan\">&#39;relative&#39;</code> layout.</p>\n"},"component.componentType.player.layout.maxChildWidth":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum width of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the width of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"component.componentType.player.layout.maxChildHeight":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum height of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the height of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"component.componentType.player.layout.position":{"desc":"<p>Set the position of the child graphic primitive of the relative layout. The supported settings are:</p>\n<ul>\n<li>&#39;top&#39; Relative to the top of the parent graphic primitive</li>\n<li>&#39;bottom&#39; Relative to the bottom of the parent graphic primitive</li>\n<li>&#39;left&#39; Relative to the left side of the parent graphic primitive</li>\n<li>&#39;right&#39; Relative to the right side of the parent graphic primitive</li>\n<li>&#39;content&#39; Relative to the center of the parent graphic primitive, that is, the content area</li>\n<li>&#39;auto&#39; When the graphic primitive sets the coordinate system, the position relative to the parent graphic primitive is automatically calculated according to the associated <code class=\"codespan\">scale</code></li>\n</ul>\n"},"component.componentType.player.layout.padding":{"desc":"<p>The inner padding of Child graphic primitive, in px unit, with the default padding of 0 for all directions. Accepts numerical values, numerical arrays, and objects for settings.</p>\n<p>Example of usage:</p>\n<pre><code class=\"lang-ts\">// Numerical type, set the padding to 5\npadding: 5;\n// Numerical array, set the top and bottom padding to 5, and the left and right padding to 10, similar to the CSS box model\npadding: [5, 10];\n// Numerical array, set the padding for all four directions separately\npadding: [\n  5, // Top\n  10, // Right\n  5, // Bottom\n  10 // Left\n];\n// Object type\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"component.componentType.player.layout.gridTemplateRows":{"desc":"<p>The parent graphic primitive of the grid layout sets the row height</p>\n"},"component.componentType.player.layout.gridTemplateColumns":{"desc":"<p>The parent graphic primitive of the grid layout sets the column width</p>\n"},"component.componentType.player.layout.gridRowGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the row spacing</p>\n"},"component.componentType.player.layout.gridColumnGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the column spacing</p>\n"},"component.componentType.player.layout.gridRowStart":{"desc":"<p>The child graphic primitive of the grid layout sets the row start position</p>\n"},"component.componentType.player.layout.gridRowEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the row end position</p>\n"},"component.componentType.player.layout.gridColumnStart":{"desc":"<p>The child graphic primitive of the grid layout sets the column start position</p>\n"},"component.componentType.player.layout.gridColumnEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the column end position</p>\n"},"component.componentType.slider.componentType":{"desc":"<p>Set the component type to <code class=\"codespan\">slider</code></p>\n"},"component.componentType.slider.min":{"desc":"<p>Set the minimum value</p>\n"},"component.componentType.slider.max":{"desc":"<p>Set the maximum value</p>\n"},"component.componentType.slider.target":{"desc":"<p>Set the data elements that need to be updated after slider triggers the data update</p>\n"},"component.componentType.slider.target.data":{"desc":"<p>Set the <code class=\"codespan\">data</code> syntax element corresponding to the updated data, supporting two types of settings:</p>\n<ul>\n<li><code class=\"codespan\">string</code> The id corresponding to the data syntax element</li>\n<li><code class=\"codespan\">IData</code> The instance corresponding to the data syntax element, mainly used for API creation mode</li>\n</ul>\n"},"component.componentType.slider.target.filter":{"desc":"<p>Perform filter operation on the target data element, supporting two types of settings:</p>\n<ul>\n<li><code class=\"codespan\">string</code> The field corresponding to the updated data element</li>\n<li><code class=\"codespan\">function</code> Custom filter function, defined as: <code class=\"codespan\">(datum: any, value: { start: number; end: number }) =&gt; boolean</code></li>\n</ul>\n"},"component.componentType.slider.encode":{"desc":"<p>Set the visual channel encoding of the graphics elements, supporting three data change states by default:</p>\n<ul>\n<li><code class=\"codespan\">enter</code> newly added data items</li>\n<li><code class=\"codespan\">update</code> data items have been updated</li>\n<li><code class=\"codespan\">exit</code> data items are deleted</li>\n</ul>\n<p>Note that the data state here is automatically generated based on the <code class=\"codespan\">mark</code>&#39;s <code class=\"codespan\">key</code>. We will calculate the unique identifier for the data bound to the <code class=\"codespan\">mark</code> based on the <code class=\"codespan\">key</code> configuration. After the data is updated, if the corresponding unique identifier no longer exists, the state is <code class=\"codespan\">exit</code>; if it exists, it is <code class=\"codespan\">update</code>. If the previous data does not exist for the unique identifier, the data item&#39;s state is <code class=\"codespan\">enter</code>.</p>\n<p>Supports one interaction state by default:</p>\n<ul>\n<li><code class=\"codespan\">hover</code> when the mouse hovers over a specific shape, set the corresponding visual channel encoding for the shape</li>\n</ul>\n"},"component.componentType.slider.encode.enter":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data initialization state. Note that it will not be executed again when the data is updated.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.slider.encode.enter.slidable":{"desc":"<p>Allow dragging</p>\n"},"component.componentType.slider.encode.enter.layout":{"desc":"<p>Layout mode</p>\n<ul>\n<li>&#39;horizontal&#39;</li>\n<li>&#39;vertical&#39;</li>\n</ul>\n"},"component.componentType.slider.encode.enter.align":{"desc":"<p>Handle and text placement</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n</ul>\n"},"component.componentType.slider.encode.enter.range":{"desc":"<p>Slider value range</p>\n"},"component.componentType.slider.encode.enter.min":{"desc":"<p>Slider minimum value</p>\n"},"component.componentType.slider.encode.enter.max":{"desc":"<p>Slider maximum value</p>\n"},"component.componentType.slider.encode.enter.value":{"desc":"<p>Slider current value</p>\n"},"component.componentType.slider.encode.enter.step":{"desc":"<p>Sliding step size</p>\n"},"component.componentType.slider.encode.enter.railWidth":{"desc":"<p>Rail width</p>\n"},"component.componentType.slider.encode.enter.railHeight":{"desc":"<p>Rail height</p>\n"},"component.componentType.slider.encode.enter.showHandler":{"desc":"<p>Show slider handle</p>\n"},"component.componentType.slider.encode.enter.handlerSize":{"desc":"<p>Handle size</p>\n"},"component.componentType.slider.encode.enter.handlerStyle":{"desc":"<p>Handle style</p>\n"},"component.componentType.slider.encode.enter.railStyle":{"desc":"<p>Rail style</p>\n"},"component.componentType.slider.encode.enter.trackStyle":{"desc":"<p>Selected area style</p>\n"},"component.componentType.slider.encode.enter.startText":{"desc":"<p>Head text style</p>\n"},"component.componentType.slider.encode.enter.endText":{"desc":"<p>Tail text style</p>\n"},"component.componentType.slider.encode.enter.handlerText":{"desc":"<p>Slider handle text style</p>\n"},"component.componentType.slider.encode.enter.showTooltip":{"desc":"<p>Show tooltip</p>\n"},"component.componentType.slider.encode.enter.tooltip":{"desc":"<p>Tooltip style</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.slider.encode.enter.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"component.componentType.slider.encode.enter.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"component.componentType.slider.encode.enter.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"component.componentType.slider.encode.enter.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"component.componentType.slider.encode.enter.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.slider.encode.enter.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"component.componentType.slider.encode.enter.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.slider.encode.enter.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"component.componentType.slider.encode.enter.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"component.componentType.slider.encode.enter.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"component.componentType.slider.encode.enter.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"component.componentType.slider.encode.enter.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.slider.encode.enter.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.slider.encode.enter.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"component.componentType.slider.encode.enter.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"component.componentType.slider.encode.enter.outerBorder":{"desc":"<p>Outer border</p>\n"},"component.componentType.slider.encode.enter.innerBorder":{"desc":"<p>Inner border</p>\n"},"component.componentType.slider.encode.enter.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"component.componentType.slider.encode.enter.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.slider.encode.enter.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"component.componentType.slider.encode.enter.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"component.componentType.slider.encode.enter.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"component.componentType.slider.encode.enter.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"component.componentType.slider.encode.enter.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"component.componentType.slider.encode.enter.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"component.componentType.slider.encode.enter.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"component.componentType.slider.encode.enter.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.slider.encode.enter.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.slider.encode.enter.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.slider.encode.enter.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"component.componentType.slider.encode.enter.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"component.componentType.slider.encode.enter.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"component.componentType.slider.encode.enter.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"component.componentType.slider.encode.enter.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"component.componentType.slider.encode.enter.texture":{"desc":"<p>The texture of the graphic</p>\n"},"component.componentType.slider.encode.enter.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"component.componentType.slider.encode.enter.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"component.componentType.slider.encode.enter.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"component.componentType.slider.encode.enter.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"component.componentType.slider.encode.enter.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"component.componentType.slider.encode.update":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data update state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.slider.encode.update.slidable":{"desc":"<p>Allow dragging</p>\n"},"component.componentType.slider.encode.update.layout":{"desc":"<p>Layout mode</p>\n<ul>\n<li>&#39;horizontal&#39;</li>\n<li>&#39;vertical&#39;</li>\n</ul>\n"},"component.componentType.slider.encode.update.align":{"desc":"<p>Handle and text placement</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n</ul>\n"},"component.componentType.slider.encode.update.range":{"desc":"<p>Slider value range</p>\n"},"component.componentType.slider.encode.update.min":{"desc":"<p>Slider minimum value</p>\n"},"component.componentType.slider.encode.update.max":{"desc":"<p>Slider maximum value</p>\n"},"component.componentType.slider.encode.update.value":{"desc":"<p>Slider current value</p>\n"},"component.componentType.slider.encode.update.step":{"desc":"<p>Sliding step size</p>\n"},"component.componentType.slider.encode.update.railWidth":{"desc":"<p>Rail width</p>\n"},"component.componentType.slider.encode.update.railHeight":{"desc":"<p>Rail height</p>\n"},"component.componentType.slider.encode.update.showHandler":{"desc":"<p>Show slider handle</p>\n"},"component.componentType.slider.encode.update.handlerSize":{"desc":"<p>Handle size</p>\n"},"component.componentType.slider.encode.update.handlerStyle":{"desc":"<p>Handle style</p>\n"},"component.componentType.slider.encode.update.railStyle":{"desc":"<p>Rail style</p>\n"},"component.componentType.slider.encode.update.trackStyle":{"desc":"<p>Selected area style</p>\n"},"component.componentType.slider.encode.update.startText":{"desc":"<p>Head text style</p>\n"},"component.componentType.slider.encode.update.endText":{"desc":"<p>Tail text style</p>\n"},"component.componentType.slider.encode.update.handlerText":{"desc":"<p>Slider handle text style</p>\n"},"component.componentType.slider.encode.update.showTooltip":{"desc":"<p>Show tooltip</p>\n"},"component.componentType.slider.encode.update.tooltip":{"desc":"<p>Tooltip style</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.slider.encode.update.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"component.componentType.slider.encode.update.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"component.componentType.slider.encode.update.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"component.componentType.slider.encode.update.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"component.componentType.slider.encode.update.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.slider.encode.update.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"component.componentType.slider.encode.update.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.slider.encode.update.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"component.componentType.slider.encode.update.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"component.componentType.slider.encode.update.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"component.componentType.slider.encode.update.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"component.componentType.slider.encode.update.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.slider.encode.update.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.slider.encode.update.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"component.componentType.slider.encode.update.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"component.componentType.slider.encode.update.outerBorder":{"desc":"<p>Outer border</p>\n"},"component.componentType.slider.encode.update.innerBorder":{"desc":"<p>Inner border</p>\n"},"component.componentType.slider.encode.update.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"component.componentType.slider.encode.update.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.slider.encode.update.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"component.componentType.slider.encode.update.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"component.componentType.slider.encode.update.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"component.componentType.slider.encode.update.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"component.componentType.slider.encode.update.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"component.componentType.slider.encode.update.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"component.componentType.slider.encode.update.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"component.componentType.slider.encode.update.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.slider.encode.update.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.slider.encode.update.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.slider.encode.update.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"component.componentType.slider.encode.update.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"component.componentType.slider.encode.update.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"component.componentType.slider.encode.update.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"component.componentType.slider.encode.update.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"component.componentType.slider.encode.update.texture":{"desc":"<p>The texture of the graphic</p>\n"},"component.componentType.slider.encode.update.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"component.componentType.slider.encode.update.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"component.componentType.slider.encode.update.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"component.componentType.slider.encode.update.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"component.componentType.slider.encode.update.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"component.componentType.slider.encode.exit":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data deletion state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.slider.encode.exit.slidable":{"desc":"<p>Allow dragging</p>\n"},"component.componentType.slider.encode.exit.layout":{"desc":"<p>Layout mode</p>\n<ul>\n<li>&#39;horizontal&#39;</li>\n<li>&#39;vertical&#39;</li>\n</ul>\n"},"component.componentType.slider.encode.exit.align":{"desc":"<p>Handle and text placement</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n</ul>\n"},"component.componentType.slider.encode.exit.range":{"desc":"<p>Slider value range</p>\n"},"component.componentType.slider.encode.exit.min":{"desc":"<p>Slider minimum value</p>\n"},"component.componentType.slider.encode.exit.max":{"desc":"<p>Slider maximum value</p>\n"},"component.componentType.slider.encode.exit.value":{"desc":"<p>Slider current value</p>\n"},"component.componentType.slider.encode.exit.step":{"desc":"<p>Sliding step size</p>\n"},"component.componentType.slider.encode.exit.railWidth":{"desc":"<p>Rail width</p>\n"},"component.componentType.slider.encode.exit.railHeight":{"desc":"<p>Rail height</p>\n"},"component.componentType.slider.encode.exit.showHandler":{"desc":"<p>Show slider handle</p>\n"},"component.componentType.slider.encode.exit.handlerSize":{"desc":"<p>Handle size</p>\n"},"component.componentType.slider.encode.exit.handlerStyle":{"desc":"<p>Handle style</p>\n"},"component.componentType.slider.encode.exit.railStyle":{"desc":"<p>Rail style</p>\n"},"component.componentType.slider.encode.exit.trackStyle":{"desc":"<p>Selected area style</p>\n"},"component.componentType.slider.encode.exit.startText":{"desc":"<p>Head text style</p>\n"},"component.componentType.slider.encode.exit.endText":{"desc":"<p>Tail text style</p>\n"},"component.componentType.slider.encode.exit.handlerText":{"desc":"<p>Slider handle text style</p>\n"},"component.componentType.slider.encode.exit.showTooltip":{"desc":"<p>Show tooltip</p>\n"},"component.componentType.slider.encode.exit.tooltip":{"desc":"<p>Tooltip style</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.slider.encode.exit.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"component.componentType.slider.encode.exit.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"component.componentType.slider.encode.exit.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"component.componentType.slider.encode.exit.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"component.componentType.slider.encode.exit.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.slider.encode.exit.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"component.componentType.slider.encode.exit.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.slider.encode.exit.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"component.componentType.slider.encode.exit.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"component.componentType.slider.encode.exit.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"component.componentType.slider.encode.exit.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"component.componentType.slider.encode.exit.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.slider.encode.exit.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.slider.encode.exit.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"component.componentType.slider.encode.exit.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"component.componentType.slider.encode.exit.outerBorder":{"desc":"<p>Outer border</p>\n"},"component.componentType.slider.encode.exit.innerBorder":{"desc":"<p>Inner border</p>\n"},"component.componentType.slider.encode.exit.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"component.componentType.slider.encode.exit.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.slider.encode.exit.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"component.componentType.slider.encode.exit.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"component.componentType.slider.encode.exit.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"component.componentType.slider.encode.exit.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"component.componentType.slider.encode.exit.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"component.componentType.slider.encode.exit.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"component.componentType.slider.encode.exit.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"component.componentType.slider.encode.exit.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.slider.encode.exit.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.slider.encode.exit.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.slider.encode.exit.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"component.componentType.slider.encode.exit.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"component.componentType.slider.encode.exit.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"component.componentType.slider.encode.exit.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"component.componentType.slider.encode.exit.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"component.componentType.slider.encode.exit.texture":{"desc":"<p>The texture of the graphic</p>\n"},"component.componentType.slider.encode.exit.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"component.componentType.slider.encode.exit.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"component.componentType.slider.encode.exit.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"component.componentType.slider.encode.exit.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"component.componentType.slider.encode.exit.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"component.componentType.slider.encode.hover":{"desc":"<p>Set the visual channel mapping corresponding to the graphics elements when in the <code class=\"codespan\">hover</code> state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.slider.encode.hover.slidable":{"desc":"<p>Allow dragging</p>\n"},"component.componentType.slider.encode.hover.layout":{"desc":"<p>Layout mode</p>\n<ul>\n<li>&#39;horizontal&#39;</li>\n<li>&#39;vertical&#39;</li>\n</ul>\n"},"component.componentType.slider.encode.hover.align":{"desc":"<p>Handle and text placement</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n</ul>\n"},"component.componentType.slider.encode.hover.range":{"desc":"<p>Slider value range</p>\n"},"component.componentType.slider.encode.hover.min":{"desc":"<p>Slider minimum value</p>\n"},"component.componentType.slider.encode.hover.max":{"desc":"<p>Slider maximum value</p>\n"},"component.componentType.slider.encode.hover.value":{"desc":"<p>Slider current value</p>\n"},"component.componentType.slider.encode.hover.step":{"desc":"<p>Sliding step size</p>\n"},"component.componentType.slider.encode.hover.railWidth":{"desc":"<p>Rail width</p>\n"},"component.componentType.slider.encode.hover.railHeight":{"desc":"<p>Rail height</p>\n"},"component.componentType.slider.encode.hover.showHandler":{"desc":"<p>Show slider handle</p>\n"},"component.componentType.slider.encode.hover.handlerSize":{"desc":"<p>Handle size</p>\n"},"component.componentType.slider.encode.hover.handlerStyle":{"desc":"<p>Handle style</p>\n"},"component.componentType.slider.encode.hover.railStyle":{"desc":"<p>Rail style</p>\n"},"component.componentType.slider.encode.hover.trackStyle":{"desc":"<p>Selected area style</p>\n"},"component.componentType.slider.encode.hover.startText":{"desc":"<p>Head text style</p>\n"},"component.componentType.slider.encode.hover.endText":{"desc":"<p>Tail text style</p>\n"},"component.componentType.slider.encode.hover.handlerText":{"desc":"<p>Slider handle text style</p>\n"},"component.componentType.slider.encode.hover.showTooltip":{"desc":"<p>Show tooltip</p>\n"},"component.componentType.slider.encode.hover.tooltip":{"desc":"<p>Tooltip style</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.slider.encode.hover.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"component.componentType.slider.encode.hover.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"component.componentType.slider.encode.hover.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"component.componentType.slider.encode.hover.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"component.componentType.slider.encode.hover.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.slider.encode.hover.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"component.componentType.slider.encode.hover.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.slider.encode.hover.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"component.componentType.slider.encode.hover.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"component.componentType.slider.encode.hover.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"component.componentType.slider.encode.hover.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"component.componentType.slider.encode.hover.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.slider.encode.hover.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.slider.encode.hover.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"component.componentType.slider.encode.hover.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"component.componentType.slider.encode.hover.outerBorder":{"desc":"<p>Outer border</p>\n"},"component.componentType.slider.encode.hover.innerBorder":{"desc":"<p>Inner border</p>\n"},"component.componentType.slider.encode.hover.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"component.componentType.slider.encode.hover.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.slider.encode.hover.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"component.componentType.slider.encode.hover.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"component.componentType.slider.encode.hover.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"component.componentType.slider.encode.hover.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"component.componentType.slider.encode.hover.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"component.componentType.slider.encode.hover.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"component.componentType.slider.encode.hover.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"component.componentType.slider.encode.hover.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.slider.encode.hover.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.slider.encode.hover.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.slider.encode.hover.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"component.componentType.slider.encode.hover.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"component.componentType.slider.encode.hover.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"component.componentType.slider.encode.hover.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"component.componentType.slider.encode.hover.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"component.componentType.slider.encode.hover.texture":{"desc":"<p>The texture of the graphic</p>\n"},"component.componentType.slider.encode.hover.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"component.componentType.slider.encode.hover.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"component.componentType.slider.encode.hover.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"component.componentType.slider.encode.hover.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"component.componentType.slider.encode.hover.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"component.componentType.slider.zIndex":{"desc":"<p>Set the zIndex of the container shape (group) corresponding to the <code class=\"codespan\">mark</code> graphic primitive</p>\n"},"component.componentType.slider.interactive":{"desc":"<p>Type: <code class=\"codespan\">boolean</code>\nRequired: No</p>\n"},"component.componentType.slider.context":{"desc":"<p>Set the context parameters of the graphic primitive</p>\n"},"component.componentType.slider.setCustomizedShape":{"desc":"<p>Set the callback function of custom shape. The corresponding ts type is as follows:</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>Where <code class=\"codespan\">ICustomPath2D</code> is a utility class provided by VRender for drawing custom paths.</p>\n"},"component.componentType.slider.support3d":{"desc":"<p>Whether to support 3d mode when the canvas is set to 3d view.</p>\n"},"component.componentType.slider.group":{"desc":"<p>Set the parent graphic primitive. Supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> The id of the corresponding parent graphic primitive</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> The corresponding grammar element of the parent graphic primitive, generally used in API call scenarios.</li>\n</ul>\n<p>If not set, it will be attached to the root node of the canvas by default.</p>\n"},"component.componentType.slider.from":{"desc":"<p>ts type definition is:</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>Declare the data on which the graphic primitive depends through the <code class=\"codespan\">data</code> attribute.</p>\n"},"component.componentType.slider.key":{"desc":"<p>Set the unique identifier for the graphic primitive data element, which is used to calculate the data state of the graphic element. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the <code class=\"codespan\">key</code></li>\n</ul>\n"},"component.componentType.slider.sort":{"desc":"<p>Sort all graphic elements in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"component.componentType.slider.groupBy":{"desc":"<p>Set the grouping attribute, the corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the grouping <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the grouping <code class=\"codespan\">key</code></li>\n</ul>\n"},"component.componentType.slider.groupSort":{"desc":"<p>Sort the groups in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"component.componentType.slider.coordinate":{"desc":"<p>Set the id or graphic element corresponding to the associated coordinate system of this graphic primitive</p>\n"},"component.componentType.slider.state":{"desc":"<p>Set the state values ​​of all graphical elements of the current graphic primitive, supporting three formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the state of the graphic, for example, <code class=\"codespan\">{ state: &#39;selected&#39;}</code> sets the state of all graphics to <code class=\"codespan\">&#39;selected&#39;</code>, usually in this case, the <code class=\"codespan\">encode</code> also sets the graphic channel mapping corresponding to the <code class=\"codespan\">&#39;selected&#39;</code> state</li>\n<li><code class=\"codespan\">string[]</code> Set multiple states for the graphic, you can configure <code class=\"codespan\">stateSort</code> to influence the order of executing the graphic channel mapping corresponding to the state</li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the state value, and the return parameter is <code class=\"codespan\">string | string[]</code>, the corresponding ts type definition is:</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"component.componentType.slider.stateSort":{"desc":"<p>Set the sorting function of the state values ​​of all graphics elements of the current graphic primitive, which will affect the order of the graphic channel mapping corresponding to the state. The result of the graphic channel mapping executed earlier may be covered by subsequent states. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"component.componentType.slider.transform":{"desc":"<p>Set the corresponding transformation of the graphic primitive. All data transformations can be configured on the graphic primitive and are used for the <code class=\"codespan\">join data</code> execution transformation;\nAnother type of transformation is the transformation executed by graphical elements, such as <code class=\"codespan\">dodge</code>;\nThe general type definition is as follows:</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>The parameters supported by each transformation are different</p>\n"},"component.componentType.slider.layout":{"desc":"<p>Set the layout parameters of the graphic primitive. There are two roles when the graphic primitive participates in the layout:</p>\n<ul>\n<li>&#39;container&#39; Container graphic primitive, usually <code class=\"codespan\">group</code> graphic primitive</li>\n<li>&#39;item&#39; layout child element, as a child node of the container graphic primitive</li>\n</ul>\n<p>Please note that we only support one layer of layout. If it is a multi-layer nested layout, it is recommended to use a custom layout scheme for implementation;</p>\n<p>Now support two content layouts: <code class=\"codespan\">grid</code> layout and <code class=\"codespan\">relative</code> layout, the related type definition is as follows</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>If you want to set a custom layout scheme, <code class=\"codespan\">layout</code> also supports setting callback functions directly. The definition of the callback function is as follows:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"component.componentType.slider.layout.display":{"desc":"<p>The container graphic primitive sets the layout type and supports two configurations:</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> Relative layout</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> Grid layout</li>\n</ul>\n"},"component.componentType.slider.layout.callback":{"desc":"<p>Customize the callback function for this graphic primitive, the ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"component.componentType.slider.layout.skipBeforeLayouted":{"desc":"<p>Skip the execution stage before the layout is completed</p>\n"},"component.componentType.slider.layout.updateViewSignals":{"desc":"<p>Whether to update the default view signals, that is: <code class=\"codespan\">padding</code>, <code class=\"codespan\">viewWidth</code> and <code class=\"codespan\">viewHeight</code></p>\n<p>This property can only be set on a container graphic primitive with <code class=\"codespan\">&#39;relative&#39;</code> layout.</p>\n"},"component.componentType.slider.layout.maxChildWidth":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum width of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the width of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"component.componentType.slider.layout.maxChildHeight":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum height of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the height of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"component.componentType.slider.layout.position":{"desc":"<p>Set the position of the child graphic primitive of the relative layout. The supported settings are:</p>\n<ul>\n<li>&#39;top&#39; Relative to the top of the parent graphic primitive</li>\n<li>&#39;bottom&#39; Relative to the bottom of the parent graphic primitive</li>\n<li>&#39;left&#39; Relative to the left side of the parent graphic primitive</li>\n<li>&#39;right&#39; Relative to the right side of the parent graphic primitive</li>\n<li>&#39;content&#39; Relative to the center of the parent graphic primitive, that is, the content area</li>\n<li>&#39;auto&#39; When the graphic primitive sets the coordinate system, the position relative to the parent graphic primitive is automatically calculated according to the associated <code class=\"codespan\">scale</code></li>\n</ul>\n"},"component.componentType.slider.layout.padding":{"desc":"<p>The inner padding of Child graphic primitive, in px unit, with the default padding of 0 for all directions. Accepts numerical values, numerical arrays, and objects for settings.</p>\n<p>Example of usage:</p>\n<pre><code class=\"lang-ts\">// Numerical type, set the padding to 5\npadding: 5;\n// Numerical array, set the top and bottom padding to 5, and the left and right padding to 10, similar to the CSS box model\npadding: [5, 10];\n// Numerical array, set the padding for all four directions separately\npadding: [\n  5, // Top\n  10, // Right\n  5, // Bottom\n  10 // Left\n];\n// Object type\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"component.componentType.slider.layout.gridTemplateRows":{"desc":"<p>The parent graphic primitive of the grid layout sets the row height</p>\n"},"component.componentType.slider.layout.gridTemplateColumns":{"desc":"<p>The parent graphic primitive of the grid layout sets the column width</p>\n"},"component.componentType.slider.layout.gridRowGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the row spacing</p>\n"},"component.componentType.slider.layout.gridColumnGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the column spacing</p>\n"},"component.componentType.slider.layout.gridRowStart":{"desc":"<p>The child graphic primitive of the grid layout sets the row start position</p>\n"},"component.componentType.slider.layout.gridRowEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the row end position</p>\n"},"component.componentType.slider.layout.gridColumnStart":{"desc":"<p>The child graphic primitive of the grid layout sets the column start position</p>\n"},"component.componentType.slider.layout.gridColumnEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the column end position</p>\n"},"component.componentType.tooltip.componentType":{"desc":"<p>Set the component type to <code class=\"codespan\">tooltip</code></p>\n"},"component.componentType.tooltip.title.visible":{"desc":"<p>Whether to display</p>\n"},"component.componentType.tooltip.title.key":{"desc":"<p>Set the content corresponding to <code class=\"codespan\">key</code>, supporting multiple formats:</p>\n<p><strong>First Type</strong>: Return the value corresponding to <code class=\"codespan\">key</code> through two formats</p>\n<p>Support two types of setting methods:</p>\n<ul>\n<li><code class=\"codespan\">string</code> type</li>\n<li><code class=\"codespan\">function</code> type, calculate the result through custom function, where the ts type definition of the function is:</li>\n</ul>\n<pre><code>(datum: any, el: IElement, parameters: any) =&gt; string;\n</code></pre><p>The <code class=\"codespan\">parameters</code> are the other syntax elements that this mark syntax element depends on.</p>\n<p><strong>Second Type</strong>: Return the graphic attributes of the <code class=\"codespan\">text</code> type graphic presentation corresponding to <code class=\"codespan\">key</code> through two formats, which can refer to the encode settings of the <code class=\"codespan\">type: &#39;text&#39;</code> mark</p>\n<p>Support two types of setting methods:</p>\n<ul>\n<li><code class=\"codespan\">ITextGraphicAttribute</code> type</li>\n<li><code class=\"codespan\">function</code> type, calculate the result through custom function, where the ts type definition of the function is:</li>\n</ul>\n<pre><code>(datum: any, el: IElement, parameters: any) =&gt; ITextGraphicAttribute;\n</code></pre><p>The <code class=\"codespan\">parameters</code> are the other syntax elements that this mark syntax element depends on.</p>\n<p><strong>Third Type</strong>: Set the value corresponding to <code class=\"codespan\">key</code> through the field</p>\n<p>The type definition is:</p>\n<pre><code class=\"lang-ts\">type FieldEncodeType = {\n  field: string;\n};\n</code></pre>\n<p>The <code class=\"codespan\">field</code> setting reads the value from the corresponding field in the related data.</p>\n"},"component.componentType.tooltip.title.value":{"desc":"<p>Set the content corresponding to <code class=\"codespan\">value</code>, supporting multiple formats:</p>\n<p><strong>First Type</strong>: Return the value corresponding to <code class=\"codespan\">value</code> through two formats</p>\n<p>Support two types of setting methods:</p>\n<ul>\n<li><code class=\"codespan\">string</code> type</li>\n<li><code class=\"codespan\">function</code> type, calculate the result through custom function, where the ts type definition of the function is:</li>\n</ul>\n<pre><code>(datum: any, el: IElement, parameters: any) =&gt; string;\n</code></pre><p>The <code class=\"codespan\">parameters</code> are the other syntax elements that this mark syntax element depends on.</p>\n<p><strong>Second Type</strong>: Return the graphic attributes of the <code class=\"codespan\">text</code> type graphic presentation corresponding to <code class=\"codespan\">value</code> through two formats, which can refer to the encode settings of the <code class=\"codespan\">type: &#39;text&#39;</code> mark</p>\n<p>Support two types of setting methods:</p>\n<ul>\n<li><code class=\"codespan\">ISymbolGraphicAttribute</code> type</li>\n<li><code class=\"codespan\">function</code> type, calculate the result through custom function, where the ts type definition of the function is:</li>\n</ul>\n<pre><code>(datum: any, el: IElement, parameters: any) =&gt; ISymbolGraphicAttribute;\n</code></pre><p>The <code class=\"codespan\">parameters</code> are the other syntax elements that this mark syntax element depends on.</p>\n<p>Third Type: Set the value corresponding to <code class=\"codespan\">value</code> through the field</p>\n<p>The type definition is:</p>\n<pre><code class=\"lang-ts\">type FieldEncodeType = {\n  field: string;\n};\n</code></pre>\n<p>The <code class=\"codespan\">field</code> setting reads the value from the corresponding field in the related data.</p>\n"},"component.componentType.tooltip.title.symbol":{"desc":"<p>Set the content corresponding to <code class=\"codespan\">symbol</code>, supporting multiple formats:</p>\n<p><strong>First Type</strong>: Return the type corresponding to <code class=\"codespan\">symbol</code> through two formats</p>\n<p>Support two types of setting methods:</p>\n<ul>\n<li><code class=\"codespan\">string</code> type</li>\n<li><code class=\"codespan\">function</code> type, calculate the result through custom function, where the ts type definition of the function is:</li>\n</ul>\n<pre><code>(datum: any, el: IElement, parameters: any) =&gt; string;\n</code></pre><p>The <code class=\"codespan\">parameters</code> are the other syntax elements that this mark syntax element depends on.</p>\n<p><strong>Second Type</strong>: Return the graphic attributes corresponding to <code class=\"codespan\">symbol</code> through two formats, which can refer to the encode settings of the <code class=\"codespan\">type: &#39;symbol&#39;</code> mark</p>\n<p>Support two types of setting methods:</p>\n<ul>\n<li><code class=\"codespan\">ISymbolGraphicAttribute</code> type</li>\n<li><code class=\"codespan\">function</code> type, calculate the result through custom function, where the ts type definition of the function is:</li>\n</ul>\n<pre><code>(datum: any, el: IElement, parameters: any) =&gt; ISymbolGraphicAttribute;\n</code></pre><p>The <code class=\"codespan\">parameters</code> are the other syntax elements that this mark syntax element depends on.</p>\n<p><strong>Third Type</strong>: Set the corresponding content of <code class=\"codespan\">symbol</code> through the field</p>\n<p>The type definition is:</p>\n<pre><code class=\"lang-ts\">type FieldEncodeType = {\n  field: string;\n};\n</code></pre>\n<p>The <code class=\"codespan\">field</code> setting reads the value from the corresponding field in the related data.</p>\n"},"component.componentType.tooltip.content":{"desc":"<p>Set the content of the tooltip, supporting two types:</p>\n<ul>\n<li><code class=\"codespan\">ITooltipRow</code> The specific configuration is as follows:</li>\n<li><code class=\"codespan\">ITooltipRow[]</code> Pass the following configuration through an array object</li>\n</ul>\n"},"component.componentType.tooltip.content.visible":{"desc":"<p>Whether to display</p>\n"},"component.componentType.tooltip.content.key":{"desc":"<p>Set the content corresponding to <code class=\"codespan\">key</code>, supporting multiple formats:</p>\n<p><strong>First Type</strong>: Return the value corresponding to <code class=\"codespan\">key</code> through two formats</p>\n<p>Support two types of setting methods:</p>\n<ul>\n<li><code class=\"codespan\">string</code> type</li>\n<li><code class=\"codespan\">function</code> type, calculate the result through custom function, where the ts type definition of the function is:</li>\n</ul>\n<pre><code>(datum: any, el: IElement, parameters: any) =&gt; string;\n</code></pre><p>The <code class=\"codespan\">parameters</code> are the other syntax elements that this mark syntax element depends on.</p>\n<p><strong>Second Type</strong>: Return the graphic attributes of the <code class=\"codespan\">text</code> type graphic presentation corresponding to <code class=\"codespan\">key</code> through two formats, which can refer to the encode settings of the <code class=\"codespan\">type: &#39;text&#39;</code> mark</p>\n<p>Support two types of setting methods:</p>\n<ul>\n<li><code class=\"codespan\">ITextGraphicAttribute</code> type</li>\n<li><code class=\"codespan\">function</code> type, calculate the result through custom function, where the ts type definition of the function is:</li>\n</ul>\n<pre><code>(datum: any, el: IElement, parameters: any) =&gt; ITextGraphicAttribute;\n</code></pre><p>The <code class=\"codespan\">parameters</code> are the other syntax elements that this mark syntax element depends on.</p>\n<p><strong>Third Type</strong>: Set the value corresponding to <code class=\"codespan\">key</code> through the field</p>\n<p>The type definition is:</p>\n<pre><code class=\"lang-ts\">type FieldEncodeType = {\n  field: string;\n};\n</code></pre>\n<p>The <code class=\"codespan\">field</code> setting reads the value from the corresponding field in the related data.</p>\n"},"component.componentType.tooltip.content.value":{"desc":"<p>Set the content corresponding to <code class=\"codespan\">value</code>, supporting multiple formats:</p>\n<p><strong>First Type</strong>: Return the value corresponding to <code class=\"codespan\">value</code> through two formats</p>\n<p>Support two types of setting methods:</p>\n<ul>\n<li><code class=\"codespan\">string</code> type</li>\n<li><code class=\"codespan\">function</code> type, calculate the result through custom function, where the ts type definition of the function is:</li>\n</ul>\n<pre><code>(datum: any, el: IElement, parameters: any) =&gt; string;\n</code></pre><p>The <code class=\"codespan\">parameters</code> are the other syntax elements that this mark syntax element depends on.</p>\n<p><strong>Second Type</strong>: Return the graphic attributes of the <code class=\"codespan\">text</code> type graphic presentation corresponding to <code class=\"codespan\">value</code> through two formats, which can refer to the encode settings of the <code class=\"codespan\">type: &#39;text&#39;</code> mark</p>\n<p>Support two types of setting methods:</p>\n<ul>\n<li><code class=\"codespan\">ISymbolGraphicAttribute</code> type</li>\n<li><code class=\"codespan\">function</code> type, calculate the result through custom function, where the ts type definition of the function is:</li>\n</ul>\n<pre><code>(datum: any, el: IElement, parameters: any) =&gt; ISymbolGraphicAttribute;\n</code></pre><p>The <code class=\"codespan\">parameters</code> are the other syntax elements that this mark syntax element depends on.</p>\n<p>Third Type: Set the value corresponding to <code class=\"codespan\">value</code> through the field</p>\n<p>The type definition is:</p>\n<pre><code class=\"lang-ts\">type FieldEncodeType = {\n  field: string;\n};\n</code></pre>\n<p>The <code class=\"codespan\">field</code> setting reads the value from the corresponding field in the related data.</p>\n"},"component.componentType.tooltip.content.symbol":{"desc":"<p>Set the content corresponding to <code class=\"codespan\">symbol</code>, supporting multiple formats:</p>\n<p><strong>First Type</strong>: Return the type corresponding to <code class=\"codespan\">symbol</code> through two formats</p>\n<p>Support two types of setting methods:</p>\n<ul>\n<li><code class=\"codespan\">string</code> type</li>\n<li><code class=\"codespan\">function</code> type, calculate the result through custom function, where the ts type definition of the function is:</li>\n</ul>\n<pre><code>(datum: any, el: IElement, parameters: any) =&gt; string;\n</code></pre><p>The <code class=\"codespan\">parameters</code> are the other syntax elements that this mark syntax element depends on.</p>\n<p><strong>Second Type</strong>: Return the graphic attributes corresponding to <code class=\"codespan\">symbol</code> through two formats, which can refer to the encode settings of the <code class=\"codespan\">type: &#39;symbol&#39;</code> mark</p>\n<p>Support two types of setting methods:</p>\n<ul>\n<li><code class=\"codespan\">ISymbolGraphicAttribute</code> type</li>\n<li><code class=\"codespan\">function</code> type, calculate the result through custom function, where the ts type definition of the function is:</li>\n</ul>\n<pre><code>(datum: any, el: IElement, parameters: any) =&gt; ISymbolGraphicAttribute;\n</code></pre><p>The <code class=\"codespan\">parameters</code> are the other syntax elements that this mark syntax element depends on.</p>\n<p><strong>Third Type</strong>: Set the corresponding content of <code class=\"codespan\">symbol</code> through the field</p>\n<p>The type definition is:</p>\n<pre><code class=\"lang-ts\">type FieldEncodeType = {\n  field: string;\n};\n</code></pre>\n<p>The <code class=\"codespan\">field</code> setting reads the value from the corresponding field in the related data.</p>\n"},"component.componentType.tooltip.target":{"desc":"<p>Associated graphics objects, supporting the association of a single graphics object or multiple graphics objects, supporting four formats of configuration:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: associate a single graphics object, configure the corresponding id of the associated graphics object</li>\n<li><code class=\"codespan\">string[]</code>: associate multiple graphics objects, configure the corresponding ids of the associated graphics objects</li>\n<li><code class=\"codespan\">IMark</code>: associate a single graphics object, configure the instance of the associated graphics object, mainly used for API creation mode</li>\n<li><code class=\"codespan\">IMark[]</code>: associate multiple graphics objects, configure the instances of the associated graphics objects, mainly used for API creation mode</li>\n</ul>\n"},"component.componentType.tooltip.encode":{"desc":"<p>Set the visual channel encoding of the graphics elements, supporting three data change states by default:</p>\n<ul>\n<li><code class=\"codespan\">enter</code> newly added data items</li>\n<li><code class=\"codespan\">update</code> data items have been updated</li>\n<li><code class=\"codespan\">exit</code> data items are deleted</li>\n</ul>\n<p>Note that the data state here is automatically generated based on the <code class=\"codespan\">mark</code>&#39;s <code class=\"codespan\">key</code>. We will calculate the unique identifier for the data bound to the <code class=\"codespan\">mark</code> based on the <code class=\"codespan\">key</code> configuration. After the data is updated, if the corresponding unique identifier no longer exists, the state is <code class=\"codespan\">exit</code>; if it exists, it is <code class=\"codespan\">update</code>. If the previous data does not exist for the unique identifier, the data item&#39;s state is <code class=\"codespan\">enter</code>.</p>\n<p>Supports one interaction state by default:</p>\n<ul>\n<li><code class=\"codespan\">hover</code> when the mouse hovers over a specific shape, set the corresponding visual channel encoding for the shape</li>\n</ul>\n"},"component.componentType.tooltip.encode.enter":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data initialization state. Note that it will not be executed again when the data is updated.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.tooltip.encode.enter.padding":{"desc":"<p>Padding</p>\n"},"component.componentType.tooltip.encode.enter.positionX":{"desc":"<p>The relative position of the tooltip information to the cursor on the X-axis</p>\n<ul>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;center&#39;</li>\n</ul>\n"},"component.componentType.tooltip.encode.enter.positionY":{"desc":"<p>The relative position of the tooltip information to the cursor on the Y-axis</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;middle&#39;</li>\n</ul>\n"},"component.componentType.tooltip.encode.enter.offsetX":{"desc":"<p>Additional offset of the tooltip information on the X-axis</p>\n"},"component.componentType.tooltip.encode.enter.offsetY":{"desc":"<p>Additional offset of the tooltip information on the Y-axis</p>\n"},"component.componentType.tooltip.encode.enter.parentBounds":{"desc":"<p>Bounding box of the parent node</p>\n"},"component.componentType.tooltip.encode.enter.autoCalculatePosition":{"desc":"<p>Whether to automatically calculate the position</p>\n"},"component.componentType.tooltip.encode.enter.autoMeasure":{"desc":"<p>Whether to automatically measure the width and height of the content text</p>\n"},"component.componentType.tooltip.encode.enter.panel":{"desc":"<p>Background style</p>\n"},"component.componentType.tooltip.encode.enter.titleStyle":{"desc":"<p>Title style</p>\n"},"component.componentType.tooltip.encode.enter.contentStyle":{"desc":"<p>Content style</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.tooltip.encode.enter.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"component.componentType.tooltip.encode.enter.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"component.componentType.tooltip.encode.enter.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"component.componentType.tooltip.encode.enter.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"component.componentType.tooltip.encode.enter.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.tooltip.encode.enter.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"component.componentType.tooltip.encode.enter.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.tooltip.encode.enter.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"component.componentType.tooltip.encode.enter.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"component.componentType.tooltip.encode.enter.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"component.componentType.tooltip.encode.enter.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"component.componentType.tooltip.encode.enter.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.tooltip.encode.enter.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.tooltip.encode.enter.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"component.componentType.tooltip.encode.enter.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"component.componentType.tooltip.encode.enter.outerBorder":{"desc":"<p>Outer border</p>\n"},"component.componentType.tooltip.encode.enter.innerBorder":{"desc":"<p>Inner border</p>\n"},"component.componentType.tooltip.encode.enter.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"component.componentType.tooltip.encode.enter.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.tooltip.encode.enter.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"component.componentType.tooltip.encode.enter.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"component.componentType.tooltip.encode.enter.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"component.componentType.tooltip.encode.enter.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"component.componentType.tooltip.encode.enter.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"component.componentType.tooltip.encode.enter.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"component.componentType.tooltip.encode.enter.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"component.componentType.tooltip.encode.enter.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.tooltip.encode.enter.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.tooltip.encode.enter.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.tooltip.encode.enter.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"component.componentType.tooltip.encode.enter.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"component.componentType.tooltip.encode.enter.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"component.componentType.tooltip.encode.enter.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"component.componentType.tooltip.encode.enter.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"component.componentType.tooltip.encode.enter.texture":{"desc":"<p>The texture of the graphic</p>\n"},"component.componentType.tooltip.encode.enter.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"component.componentType.tooltip.encode.enter.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"component.componentType.tooltip.encode.enter.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"component.componentType.tooltip.encode.enter.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"component.componentType.tooltip.encode.enter.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"component.componentType.tooltip.encode.update":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data update state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.tooltip.encode.update.padding":{"desc":"<p>Padding</p>\n"},"component.componentType.tooltip.encode.update.positionX":{"desc":"<p>The relative position of the tooltip information to the cursor on the X-axis</p>\n<ul>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;center&#39;</li>\n</ul>\n"},"component.componentType.tooltip.encode.update.positionY":{"desc":"<p>The relative position of the tooltip information to the cursor on the Y-axis</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;middle&#39;</li>\n</ul>\n"},"component.componentType.tooltip.encode.update.offsetX":{"desc":"<p>Additional offset of the tooltip information on the X-axis</p>\n"},"component.componentType.tooltip.encode.update.offsetY":{"desc":"<p>Additional offset of the tooltip information on the Y-axis</p>\n"},"component.componentType.tooltip.encode.update.parentBounds":{"desc":"<p>Bounding box of the parent node</p>\n"},"component.componentType.tooltip.encode.update.autoCalculatePosition":{"desc":"<p>Whether to automatically calculate the position</p>\n"},"component.componentType.tooltip.encode.update.autoMeasure":{"desc":"<p>Whether to automatically measure the width and height of the content text</p>\n"},"component.componentType.tooltip.encode.update.panel":{"desc":"<p>Background style</p>\n"},"component.componentType.tooltip.encode.update.titleStyle":{"desc":"<p>Title style</p>\n"},"component.componentType.tooltip.encode.update.contentStyle":{"desc":"<p>Content style</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.tooltip.encode.update.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"component.componentType.tooltip.encode.update.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"component.componentType.tooltip.encode.update.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"component.componentType.tooltip.encode.update.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"component.componentType.tooltip.encode.update.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.tooltip.encode.update.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"component.componentType.tooltip.encode.update.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.tooltip.encode.update.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"component.componentType.tooltip.encode.update.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"component.componentType.tooltip.encode.update.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"component.componentType.tooltip.encode.update.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"component.componentType.tooltip.encode.update.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.tooltip.encode.update.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.tooltip.encode.update.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"component.componentType.tooltip.encode.update.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"component.componentType.tooltip.encode.update.outerBorder":{"desc":"<p>Outer border</p>\n"},"component.componentType.tooltip.encode.update.innerBorder":{"desc":"<p>Inner border</p>\n"},"component.componentType.tooltip.encode.update.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"component.componentType.tooltip.encode.update.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.tooltip.encode.update.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"component.componentType.tooltip.encode.update.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"component.componentType.tooltip.encode.update.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"component.componentType.tooltip.encode.update.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"component.componentType.tooltip.encode.update.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"component.componentType.tooltip.encode.update.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"component.componentType.tooltip.encode.update.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"component.componentType.tooltip.encode.update.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.tooltip.encode.update.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.tooltip.encode.update.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.tooltip.encode.update.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"component.componentType.tooltip.encode.update.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"component.componentType.tooltip.encode.update.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"component.componentType.tooltip.encode.update.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"component.componentType.tooltip.encode.update.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"component.componentType.tooltip.encode.update.texture":{"desc":"<p>The texture of the graphic</p>\n"},"component.componentType.tooltip.encode.update.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"component.componentType.tooltip.encode.update.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"component.componentType.tooltip.encode.update.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"component.componentType.tooltip.encode.update.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"component.componentType.tooltip.encode.update.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"component.componentType.tooltip.encode.exit":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data deletion state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.tooltip.encode.exit.padding":{"desc":"<p>Padding</p>\n"},"component.componentType.tooltip.encode.exit.positionX":{"desc":"<p>The relative position of the tooltip information to the cursor on the X-axis</p>\n<ul>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;center&#39;</li>\n</ul>\n"},"component.componentType.tooltip.encode.exit.positionY":{"desc":"<p>The relative position of the tooltip information to the cursor on the Y-axis</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;middle&#39;</li>\n</ul>\n"},"component.componentType.tooltip.encode.exit.offsetX":{"desc":"<p>Additional offset of the tooltip information on the X-axis</p>\n"},"component.componentType.tooltip.encode.exit.offsetY":{"desc":"<p>Additional offset of the tooltip information on the Y-axis</p>\n"},"component.componentType.tooltip.encode.exit.parentBounds":{"desc":"<p>Bounding box of the parent node</p>\n"},"component.componentType.tooltip.encode.exit.autoCalculatePosition":{"desc":"<p>Whether to automatically calculate the position</p>\n"},"component.componentType.tooltip.encode.exit.autoMeasure":{"desc":"<p>Whether to automatically measure the width and height of the content text</p>\n"},"component.componentType.tooltip.encode.exit.panel":{"desc":"<p>Background style</p>\n"},"component.componentType.tooltip.encode.exit.titleStyle":{"desc":"<p>Title style</p>\n"},"component.componentType.tooltip.encode.exit.contentStyle":{"desc":"<p>Content style</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.tooltip.encode.exit.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"component.componentType.tooltip.encode.exit.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"component.componentType.tooltip.encode.exit.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"component.componentType.tooltip.encode.exit.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"component.componentType.tooltip.encode.exit.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.tooltip.encode.exit.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"component.componentType.tooltip.encode.exit.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.tooltip.encode.exit.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"component.componentType.tooltip.encode.exit.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"component.componentType.tooltip.encode.exit.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"component.componentType.tooltip.encode.exit.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"component.componentType.tooltip.encode.exit.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.tooltip.encode.exit.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.tooltip.encode.exit.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"component.componentType.tooltip.encode.exit.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"component.componentType.tooltip.encode.exit.outerBorder":{"desc":"<p>Outer border</p>\n"},"component.componentType.tooltip.encode.exit.innerBorder":{"desc":"<p>Inner border</p>\n"},"component.componentType.tooltip.encode.exit.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"component.componentType.tooltip.encode.exit.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.tooltip.encode.exit.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"component.componentType.tooltip.encode.exit.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"component.componentType.tooltip.encode.exit.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"component.componentType.tooltip.encode.exit.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"component.componentType.tooltip.encode.exit.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"component.componentType.tooltip.encode.exit.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"component.componentType.tooltip.encode.exit.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"component.componentType.tooltip.encode.exit.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.tooltip.encode.exit.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.tooltip.encode.exit.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.tooltip.encode.exit.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"component.componentType.tooltip.encode.exit.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"component.componentType.tooltip.encode.exit.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"component.componentType.tooltip.encode.exit.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"component.componentType.tooltip.encode.exit.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"component.componentType.tooltip.encode.exit.texture":{"desc":"<p>The texture of the graphic</p>\n"},"component.componentType.tooltip.encode.exit.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"component.componentType.tooltip.encode.exit.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"component.componentType.tooltip.encode.exit.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"component.componentType.tooltip.encode.exit.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"component.componentType.tooltip.encode.exit.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"component.componentType.tooltip.encode.hover":{"desc":"<p>Set the visual channel mapping corresponding to the graphics elements when in the <code class=\"codespan\">hover</code> state.</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n"},"component.componentType.tooltip.encode.hover.padding":{"desc":"<p>Padding</p>\n"},"component.componentType.tooltip.encode.hover.positionX":{"desc":"<p>The relative position of the tooltip information to the cursor on the X-axis</p>\n<ul>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;center&#39;</li>\n</ul>\n"},"component.componentType.tooltip.encode.hover.positionY":{"desc":"<p>The relative position of the tooltip information to the cursor on the Y-axis</p>\n<ul>\n<li>&#39;top&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;middle&#39;</li>\n</ul>\n"},"component.componentType.tooltip.encode.hover.offsetX":{"desc":"<p>Additional offset of the tooltip information on the X-axis</p>\n"},"component.componentType.tooltip.encode.hover.offsetY":{"desc":"<p>Additional offset of the tooltip information on the Y-axis</p>\n"},"component.componentType.tooltip.encode.hover.parentBounds":{"desc":"<p>Bounding box of the parent node</p>\n"},"component.componentType.tooltip.encode.hover.autoCalculatePosition":{"desc":"<p>Whether to automatically calculate the position</p>\n"},"component.componentType.tooltip.encode.hover.autoMeasure":{"desc":"<p>Whether to automatically measure the width and height of the content text</p>\n"},"component.componentType.tooltip.encode.hover.panel":{"desc":"<p>Background style</p>\n"},"component.componentType.tooltip.encode.hover.titleStyle":{"desc":"<p>Title style</p>\n"},"component.componentType.tooltip.encode.hover.contentStyle":{"desc":"<p>Content style</p>\n<!-- glyph -->\n<!-- base channels -->\n"},"component.componentType.tooltip.encode.hover.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"component.componentType.tooltip.encode.hover.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"component.componentType.tooltip.encode.hover.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"component.componentType.tooltip.encode.hover.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"component.componentType.tooltip.encode.hover.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.tooltip.encode.hover.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"component.componentType.tooltip.encode.hover.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.tooltip.encode.hover.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"component.componentType.tooltip.encode.hover.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"component.componentType.tooltip.encode.hover.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"component.componentType.tooltip.encode.hover.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"component.componentType.tooltip.encode.hover.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"component.componentType.tooltip.encode.hover.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"component.componentType.tooltip.encode.hover.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"component.componentType.tooltip.encode.hover.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"component.componentType.tooltip.encode.hover.outerBorder":{"desc":"<p>Outer border</p>\n"},"component.componentType.tooltip.encode.hover.innerBorder":{"desc":"<p>Inner border</p>\n"},"component.componentType.tooltip.encode.hover.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"component.componentType.tooltip.encode.hover.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"component.componentType.tooltip.encode.hover.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"component.componentType.tooltip.encode.hover.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"component.componentType.tooltip.encode.hover.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"component.componentType.tooltip.encode.hover.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"component.componentType.tooltip.encode.hover.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"component.componentType.tooltip.encode.hover.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"component.componentType.tooltip.encode.hover.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"component.componentType.tooltip.encode.hover.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.tooltip.encode.hover.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.tooltip.encode.hover.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"component.componentType.tooltip.encode.hover.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"component.componentType.tooltip.encode.hover.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"component.componentType.tooltip.encode.hover.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"component.componentType.tooltip.encode.hover.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"component.componentType.tooltip.encode.hover.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"component.componentType.tooltip.encode.hover.texture":{"desc":"<p>The texture of the graphic</p>\n"},"component.componentType.tooltip.encode.hover.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"component.componentType.tooltip.encode.hover.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"component.componentType.tooltip.encode.hover.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"component.componentType.tooltip.encode.hover.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"component.componentType.tooltip.encode.hover.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"component.componentType.tooltip.zIndex":{"desc":"<p>Set the zIndex of the container shape (group) corresponding to the <code class=\"codespan\">mark</code> graphic primitive</p>\n"},"component.componentType.tooltip.interactive":{"desc":"<p>Type: <code class=\"codespan\">boolean</code>\nRequired: No</p>\n"},"component.componentType.tooltip.context":{"desc":"<p>Set the context parameters of the graphic primitive</p>\n"},"component.componentType.tooltip.setCustomizedShape":{"desc":"<p>Set the callback function of custom shape. The corresponding ts type is as follows:</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>Where <code class=\"codespan\">ICustomPath2D</code> is a utility class provided by VRender for drawing custom paths.</p>\n"},"component.componentType.tooltip.support3d":{"desc":"<p>Whether to support 3d mode when the canvas is set to 3d view.</p>\n"},"component.componentType.tooltip.group":{"desc":"<p>Set the parent graphic primitive. Supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> The id of the corresponding parent graphic primitive</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> The corresponding grammar element of the parent graphic primitive, generally used in API call scenarios.</li>\n</ul>\n<p>If not set, it will be attached to the root node of the canvas by default.</p>\n"},"component.componentType.tooltip.from":{"desc":"<p>ts type definition is:</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>Declare the data on which the graphic primitive depends through the <code class=\"codespan\">data</code> attribute.</p>\n"},"component.componentType.tooltip.key":{"desc":"<p>Set the unique identifier for the graphic primitive data element, which is used to calculate the data state of the graphic element. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the <code class=\"codespan\">key</code></li>\n</ul>\n"},"component.componentType.tooltip.sort":{"desc":"<p>Sort all graphic elements in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"component.componentType.tooltip.groupBy":{"desc":"<p>Set the grouping attribute, the corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the grouping <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the grouping <code class=\"codespan\">key</code></li>\n</ul>\n"},"component.componentType.tooltip.groupSort":{"desc":"<p>Sort the groups in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"component.componentType.tooltip.coordinate":{"desc":"<p>Set the id or graphic element corresponding to the associated coordinate system of this graphic primitive</p>\n"},"component.componentType.tooltip.state":{"desc":"<p>Set the state values ​​of all graphical elements of the current graphic primitive, supporting three formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the state of the graphic, for example, <code class=\"codespan\">{ state: &#39;selected&#39;}</code> sets the state of all graphics to <code class=\"codespan\">&#39;selected&#39;</code>, usually in this case, the <code class=\"codespan\">encode</code> also sets the graphic channel mapping corresponding to the <code class=\"codespan\">&#39;selected&#39;</code> state</li>\n<li><code class=\"codespan\">string[]</code> Set multiple states for the graphic, you can configure <code class=\"codespan\">stateSort</code> to influence the order of executing the graphic channel mapping corresponding to the state</li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the state value, and the return parameter is <code class=\"codespan\">string | string[]</code>, the corresponding ts type definition is:</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"component.componentType.tooltip.stateSort":{"desc":"<p>Set the sorting function of the state values ​​of all graphics elements of the current graphic primitive, which will affect the order of the graphic channel mapping corresponding to the state. The result of the graphic channel mapping executed earlier may be covered by subsequent states. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"component.componentType.tooltip.transform":{"desc":"<p>Set the corresponding transformation of the graphic primitive. All data transformations can be configured on the graphic primitive and are used for the <code class=\"codespan\">join data</code> execution transformation;\nAnother type of transformation is the transformation executed by graphical elements, such as <code class=\"codespan\">dodge</code>;\nThe general type definition is as follows:</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>The parameters supported by each transformation are different</p>\n"},"component.componentType.tooltip.layout":{"desc":"<p>Set the layout parameters of the graphic primitive. There are two roles when the graphic primitive participates in the layout:</p>\n<ul>\n<li>&#39;container&#39; Container graphic primitive, usually <code class=\"codespan\">group</code> graphic primitive</li>\n<li>&#39;item&#39; layout child element, as a child node of the container graphic primitive</li>\n</ul>\n<p>Please note that we only support one layer of layout. If it is a multi-layer nested layout, it is recommended to use a custom layout scheme for implementation;</p>\n<p>Now support two content layouts: <code class=\"codespan\">grid</code> layout and <code class=\"codespan\">relative</code> layout, the related type definition is as follows</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>If you want to set a custom layout scheme, <code class=\"codespan\">layout</code> also supports setting callback functions directly. The definition of the callback function is as follows:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"component.componentType.tooltip.layout.display":{"desc":"<p>The container graphic primitive sets the layout type and supports two configurations:</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> Relative layout</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> Grid layout</li>\n</ul>\n"},"component.componentType.tooltip.layout.callback":{"desc":"<p>Customize the callback function for this graphic primitive, the ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"component.componentType.tooltip.layout.skipBeforeLayouted":{"desc":"<p>Skip the execution stage before the layout is completed</p>\n"},"component.componentType.tooltip.layout.updateViewSignals":{"desc":"<p>Whether to update the default view signals, that is: <code class=\"codespan\">padding</code>, <code class=\"codespan\">viewWidth</code> and <code class=\"codespan\">viewHeight</code></p>\n<p>This property can only be set on a container graphic primitive with <code class=\"codespan\">&#39;relative&#39;</code> layout.</p>\n"},"component.componentType.tooltip.layout.maxChildWidth":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum width of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the width of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"component.componentType.tooltip.layout.maxChildHeight":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum height of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the height of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"component.componentType.tooltip.layout.position":{"desc":"<p>Set the position of the child graphic primitive of the relative layout. The supported settings are:</p>\n<ul>\n<li>&#39;top&#39; Relative to the top of the parent graphic primitive</li>\n<li>&#39;bottom&#39; Relative to the bottom of the parent graphic primitive</li>\n<li>&#39;left&#39; Relative to the left side of the parent graphic primitive</li>\n<li>&#39;right&#39; Relative to the right side of the parent graphic primitive</li>\n<li>&#39;content&#39; Relative to the center of the parent graphic primitive, that is, the content area</li>\n<li>&#39;auto&#39; When the graphic primitive sets the coordinate system, the position relative to the parent graphic primitive is automatically calculated according to the associated <code class=\"codespan\">scale</code></li>\n</ul>\n"},"component.componentType.tooltip.layout.padding":{"desc":"<p>The inner padding of Child graphic primitive, in px unit, with the default padding of 0 for all directions. Accepts numerical values, numerical arrays, and objects for settings.</p>\n<p>Example of usage:</p>\n<pre><code class=\"lang-ts\">// Numerical type, set the padding to 5\npadding: 5;\n// Numerical array, set the top and bottom padding to 5, and the left and right padding to 10, similar to the CSS box model\npadding: [5, 10];\n// Numerical array, set the padding for all four directions separately\npadding: [\n  5, // Top\n  10, // Right\n  5, // Bottom\n  10 // Left\n];\n// Object type\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"component.componentType.tooltip.layout.gridTemplateRows":{"desc":"<p>The parent graphic primitive of the grid layout sets the row height</p>\n"},"component.componentType.tooltip.layout.gridTemplateColumns":{"desc":"<p>The parent graphic primitive of the grid layout sets the column width</p>\n"},"component.componentType.tooltip.layout.gridRowGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the row spacing</p>\n"},"component.componentType.tooltip.layout.gridColumnGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the column spacing</p>\n"},"component.componentType.tooltip.layout.gridRowStart":{"desc":"<p>The child graphic primitive of the grid layout sets the row start position</p>\n"},"component.componentType.tooltip.layout.gridRowEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the row end position</p>\n"},"component.componentType.tooltip.layout.gridColumnStart":{"desc":"<p>The child graphic primitive of the grid layout sets the column start position</p>\n"},"component.componentType.tooltip.layout.gridColumnEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the column end position</p>\n"},"arc3d":{"desc":"<p><strong> arc3d Graphic Element </strong></p>\n"},"arc3d.type":{"desc":"<p>Set the graphic element type as <code class=\"codespan\">arc3d</code></p>\n"},"arc3d.encode":{"desc":"<p>Set the visual channel encoding of the graphics elements, supporting three data change states by default:</p>\n<ul>\n<li><code class=\"codespan\">enter</code> newly added data items</li>\n<li><code class=\"codespan\">update</code> data items have been updated</li>\n<li><code class=\"codespan\">exit</code> data items are deleted</li>\n</ul>\n<p>Note that the data state here is automatically generated based on the <code class=\"codespan\">mark</code>&#39;s <code class=\"codespan\">key</code>. We will calculate the unique identifier for the data bound to the <code class=\"codespan\">mark</code> based on the <code class=\"codespan\">key</code> configuration. After the data is updated, if the corresponding unique identifier no longer exists, the state is <code class=\"codespan\">exit</code>; if it exists, it is <code class=\"codespan\">update</code>. If the previous data does not exist for the unique identifier, the data item&#39;s state is <code class=\"codespan\">enter</code>.</p>\n<p>Supports one interaction state by default:</p>\n<ul>\n<li><code class=\"codespan\">hover</code> when the mouse hovers over a specific shape, set the corresponding visual channel encoding for the shape</li>\n</ul>\n"},"arc3d.encode.enter":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data initialization state. Note that it will not be executed again when the data is updated.</p>\n"},"arc3d.encode.enter.innerRadius":{"desc":"<p>Inner radius</p>\n"},"arc3d.encode.enter.outerRadius":{"desc":"<p>Outer radius</p>\n"},"arc3d.encode.enter.startAngle":{"desc":"<p>The starting angle of the arc;\nSpecified in radians, 0 represents the 12 o&#39;clock direction and the clockwise direction is positive.\nIf <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code>, a complete sector or ring will be drawn</p>\n"},"arc3d.encode.enter.endAngle":{"desc":"<p>The ending angle of the arc;\nSpecified in radians, 0 represents the 12 o&#39;clock direction and the clockwise direction is positive.\nIf <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code>, a complete sector or ring will be drawn</p>\n"},"arc3d.encode.enter.padAngle":{"desc":"<p>Gap angle; the gap angle is converted into a fixed linear distance between two adjacent arcs, defined as <code class=\"codespan\">padRadius * | padAngle |</code></p>\n<p>This distance is equal at the beginning and end of the arc;\nThe gap angle should generally only be applied to annular sectors (i.e. when the inner radius is greater than 0)</p>\n"},"arc3d.encode.enter.padRadius":{"desc":"<p>Used in conjunction with <code class=\"codespan\">padAngle</code></p>\n"},"arc3d.encode.enter.cap":{"desc":"<p>Corresponds to the lineCap attribute of the line segment, lineCap represents how the line segment is drawn at the end, supporting two types of settings</p>\n<ul>\n<li><p><code class=\"codespan\">boolean</code>: <code class=\"codespan\">cap: true</code> means to add an angle at the starting position of the arc line, and the angle is <code class=\"codespan\">| outerRadius - innerRadius | / outerRadius</code></p>\n</li>\n<li><p><code class=\"codespan\">[boolean, boolean]</code>: set different end drawing strategies for the head and tail</p>\n</li>\n</ul>\n"},"arc3d.encode.enter.forceShowCap":{"desc":"<p>When cap = true and gradient fill is used, automatically implement conical gradient, which is the circular gradient</p>\n<!-- arc3d -->\n"},"arc3d.encode.enter.height":{"desc":"<p>Height of the arc</p>\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"arc3d.encode.enter.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"arc3d.encode.enter.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"arc3d.encode.enter.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"arc3d.encode.enter.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"arc3d.encode.enter.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"arc3d.encode.enter.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"arc3d.encode.enter.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"arc3d.encode.enter.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"arc3d.encode.enter.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"arc3d.encode.enter.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"arc3d.encode.enter.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"arc3d.encode.enter.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"arc3d.encode.enter.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"arc3d.encode.enter.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"arc3d.encode.enter.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"arc3d.encode.enter.outerBorder":{"desc":"<p>Outer border</p>\n"},"arc3d.encode.enter.innerBorder":{"desc":"<p>Inner border</p>\n"},"arc3d.encode.enter.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"arc3d.encode.enter.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"arc3d.encode.enter.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"arc3d.encode.enter.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"arc3d.encode.enter.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"arc3d.encode.enter.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"arc3d.encode.enter.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"arc3d.encode.enter.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"arc3d.encode.enter.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"arc3d.encode.enter.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"arc3d.encode.enter.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"arc3d.encode.enter.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"arc3d.encode.enter.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"arc3d.encode.enter.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"arc3d.encode.enter.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"arc3d.encode.enter.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"arc3d.encode.enter.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"arc3d.encode.enter.texture":{"desc":"<p>The texture of the graphic</p>\n"},"arc3d.encode.enter.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"arc3d.encode.enter.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"arc3d.encode.enter.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"arc3d.encode.enter.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"arc3d.encode.enter.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"arc3d.encode.update":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data update state.</p>\n"},"arc3d.encode.update.innerRadius":{"desc":"<p>Inner radius</p>\n"},"arc3d.encode.update.outerRadius":{"desc":"<p>Outer radius</p>\n"},"arc3d.encode.update.startAngle":{"desc":"<p>The starting angle of the arc;\nSpecified in radians, 0 represents the 12 o&#39;clock direction and the clockwise direction is positive.\nIf <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code>, a complete sector or ring will be drawn</p>\n"},"arc3d.encode.update.endAngle":{"desc":"<p>The ending angle of the arc;\nSpecified in radians, 0 represents the 12 o&#39;clock direction and the clockwise direction is positive.\nIf <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code>, a complete sector or ring will be drawn</p>\n"},"arc3d.encode.update.padAngle":{"desc":"<p>Gap angle; the gap angle is converted into a fixed linear distance between two adjacent arcs, defined as <code class=\"codespan\">padRadius * | padAngle |</code></p>\n<p>This distance is equal at the beginning and end of the arc;\nThe gap angle should generally only be applied to annular sectors (i.e. when the inner radius is greater than 0)</p>\n"},"arc3d.encode.update.padRadius":{"desc":"<p>Used in conjunction with <code class=\"codespan\">padAngle</code></p>\n"},"arc3d.encode.update.cap":{"desc":"<p>Corresponds to the lineCap attribute of the line segment, lineCap represents how the line segment is drawn at the end, supporting two types of settings</p>\n<ul>\n<li><p><code class=\"codespan\">boolean</code>: <code class=\"codespan\">cap: true</code> means to add an angle at the starting position of the arc line, and the angle is <code class=\"codespan\">| outerRadius - innerRadius | / outerRadius</code></p>\n</li>\n<li><p><code class=\"codespan\">[boolean, boolean]</code>: set different end drawing strategies for the head and tail</p>\n</li>\n</ul>\n"},"arc3d.encode.update.forceShowCap":{"desc":"<p>When cap = true and gradient fill is used, automatically implement conical gradient, which is the circular gradient</p>\n<!-- arc3d -->\n"},"arc3d.encode.update.height":{"desc":"<p>Height of the arc</p>\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"arc3d.encode.update.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"arc3d.encode.update.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"arc3d.encode.update.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"arc3d.encode.update.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"arc3d.encode.update.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"arc3d.encode.update.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"arc3d.encode.update.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"arc3d.encode.update.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"arc3d.encode.update.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"arc3d.encode.update.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"arc3d.encode.update.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"arc3d.encode.update.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"arc3d.encode.update.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"arc3d.encode.update.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"arc3d.encode.update.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"arc3d.encode.update.outerBorder":{"desc":"<p>Outer border</p>\n"},"arc3d.encode.update.innerBorder":{"desc":"<p>Inner border</p>\n"},"arc3d.encode.update.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"arc3d.encode.update.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"arc3d.encode.update.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"arc3d.encode.update.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"arc3d.encode.update.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"arc3d.encode.update.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"arc3d.encode.update.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"arc3d.encode.update.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"arc3d.encode.update.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"arc3d.encode.update.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"arc3d.encode.update.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"arc3d.encode.update.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"arc3d.encode.update.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"arc3d.encode.update.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"arc3d.encode.update.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"arc3d.encode.update.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"arc3d.encode.update.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"arc3d.encode.update.texture":{"desc":"<p>The texture of the graphic</p>\n"},"arc3d.encode.update.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"arc3d.encode.update.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"arc3d.encode.update.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"arc3d.encode.update.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"arc3d.encode.update.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"arc3d.encode.exit":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data deletion state.</p>\n"},"arc3d.encode.exit.innerRadius":{"desc":"<p>Inner radius</p>\n"},"arc3d.encode.exit.outerRadius":{"desc":"<p>Outer radius</p>\n"},"arc3d.encode.exit.startAngle":{"desc":"<p>The starting angle of the arc;\nSpecified in radians, 0 represents the 12 o&#39;clock direction and the clockwise direction is positive.\nIf <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code>, a complete sector or ring will be drawn</p>\n"},"arc3d.encode.exit.endAngle":{"desc":"<p>The ending angle of the arc;\nSpecified in radians, 0 represents the 12 o&#39;clock direction and the clockwise direction is positive.\nIf <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code>, a complete sector or ring will be drawn</p>\n"},"arc3d.encode.exit.padAngle":{"desc":"<p>Gap angle; the gap angle is converted into a fixed linear distance between two adjacent arcs, defined as <code class=\"codespan\">padRadius * | padAngle |</code></p>\n<p>This distance is equal at the beginning and end of the arc;\nThe gap angle should generally only be applied to annular sectors (i.e. when the inner radius is greater than 0)</p>\n"},"arc3d.encode.exit.padRadius":{"desc":"<p>Used in conjunction with <code class=\"codespan\">padAngle</code></p>\n"},"arc3d.encode.exit.cap":{"desc":"<p>Corresponds to the lineCap attribute of the line segment, lineCap represents how the line segment is drawn at the end, supporting two types of settings</p>\n<ul>\n<li><p><code class=\"codespan\">boolean</code>: <code class=\"codespan\">cap: true</code> means to add an angle at the starting position of the arc line, and the angle is <code class=\"codespan\">| outerRadius - innerRadius | / outerRadius</code></p>\n</li>\n<li><p><code class=\"codespan\">[boolean, boolean]</code>: set different end drawing strategies for the head and tail</p>\n</li>\n</ul>\n"},"arc3d.encode.exit.forceShowCap":{"desc":"<p>When cap = true and gradient fill is used, automatically implement conical gradient, which is the circular gradient</p>\n<!-- arc3d -->\n"},"arc3d.encode.exit.height":{"desc":"<p>Height of the arc</p>\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"arc3d.encode.exit.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"arc3d.encode.exit.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"arc3d.encode.exit.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"arc3d.encode.exit.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"arc3d.encode.exit.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"arc3d.encode.exit.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"arc3d.encode.exit.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"arc3d.encode.exit.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"arc3d.encode.exit.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"arc3d.encode.exit.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"arc3d.encode.exit.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"arc3d.encode.exit.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"arc3d.encode.exit.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"arc3d.encode.exit.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"arc3d.encode.exit.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"arc3d.encode.exit.outerBorder":{"desc":"<p>Outer border</p>\n"},"arc3d.encode.exit.innerBorder":{"desc":"<p>Inner border</p>\n"},"arc3d.encode.exit.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"arc3d.encode.exit.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"arc3d.encode.exit.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"arc3d.encode.exit.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"arc3d.encode.exit.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"arc3d.encode.exit.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"arc3d.encode.exit.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"arc3d.encode.exit.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"arc3d.encode.exit.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"arc3d.encode.exit.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"arc3d.encode.exit.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"arc3d.encode.exit.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"arc3d.encode.exit.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"arc3d.encode.exit.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"arc3d.encode.exit.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"arc3d.encode.exit.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"arc3d.encode.exit.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"arc3d.encode.exit.texture":{"desc":"<p>The texture of the graphic</p>\n"},"arc3d.encode.exit.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"arc3d.encode.exit.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"arc3d.encode.exit.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"arc3d.encode.exit.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"arc3d.encode.exit.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"arc3d.encode.hover":{"desc":"<p>Set the visual channel mapping corresponding to the graphics elements when in the <code class=\"codespan\">hover</code> state.</p>\n"},"arc3d.encode.hover.innerRadius":{"desc":"<p>Inner radius</p>\n"},"arc3d.encode.hover.outerRadius":{"desc":"<p>Outer radius</p>\n"},"arc3d.encode.hover.startAngle":{"desc":"<p>The starting angle of the arc;\nSpecified in radians, 0 represents the 12 o&#39;clock direction and the clockwise direction is positive.\nIf <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code>, a complete sector or ring will be drawn</p>\n"},"arc3d.encode.hover.endAngle":{"desc":"<p>The ending angle of the arc;\nSpecified in radians, 0 represents the 12 o&#39;clock direction and the clockwise direction is positive.\nIf <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code>, a complete sector or ring will be drawn</p>\n"},"arc3d.encode.hover.padAngle":{"desc":"<p>Gap angle; the gap angle is converted into a fixed linear distance between two adjacent arcs, defined as <code class=\"codespan\">padRadius * | padAngle |</code></p>\n<p>This distance is equal at the beginning and end of the arc;\nThe gap angle should generally only be applied to annular sectors (i.e. when the inner radius is greater than 0)</p>\n"},"arc3d.encode.hover.padRadius":{"desc":"<p>Used in conjunction with <code class=\"codespan\">padAngle</code></p>\n"},"arc3d.encode.hover.cap":{"desc":"<p>Corresponds to the lineCap attribute of the line segment, lineCap represents how the line segment is drawn at the end, supporting two types of settings</p>\n<ul>\n<li><p><code class=\"codespan\">boolean</code>: <code class=\"codespan\">cap: true</code> means to add an angle at the starting position of the arc line, and the angle is <code class=\"codespan\">| outerRadius - innerRadius | / outerRadius</code></p>\n</li>\n<li><p><code class=\"codespan\">[boolean, boolean]</code>: set different end drawing strategies for the head and tail</p>\n</li>\n</ul>\n"},"arc3d.encode.hover.forceShowCap":{"desc":"<p>When cap = true and gradient fill is used, automatically implement conical gradient, which is the circular gradient</p>\n<!-- arc3d -->\n"},"arc3d.encode.hover.height":{"desc":"<p>Height of the arc</p>\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"arc3d.encode.hover.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"arc3d.encode.hover.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"arc3d.encode.hover.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"arc3d.encode.hover.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"arc3d.encode.hover.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"arc3d.encode.hover.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"arc3d.encode.hover.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"arc3d.encode.hover.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"arc3d.encode.hover.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"arc3d.encode.hover.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"arc3d.encode.hover.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"arc3d.encode.hover.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"arc3d.encode.hover.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"arc3d.encode.hover.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"arc3d.encode.hover.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"arc3d.encode.hover.outerBorder":{"desc":"<p>Outer border</p>\n"},"arc3d.encode.hover.innerBorder":{"desc":"<p>Inner border</p>\n"},"arc3d.encode.hover.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"arc3d.encode.hover.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"arc3d.encode.hover.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"arc3d.encode.hover.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"arc3d.encode.hover.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"arc3d.encode.hover.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"arc3d.encode.hover.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"arc3d.encode.hover.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"arc3d.encode.hover.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"arc3d.encode.hover.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"arc3d.encode.hover.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"arc3d.encode.hover.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"arc3d.encode.hover.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"arc3d.encode.hover.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"arc3d.encode.hover.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"arc3d.encode.hover.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"arc3d.encode.hover.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"arc3d.encode.hover.texture":{"desc":"<p>The texture of the graphic</p>\n"},"arc3d.encode.hover.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"arc3d.encode.hover.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"arc3d.encode.hover.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"arc3d.encode.hover.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"arc3d.encode.hover.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"arc3d.animationState":{"desc":"<p>Type: <code class=\"codespan\">MarkFunctionType</code>\nRequired: No\nanimation attributes</p>\n"},"arc3d.animation":{"desc":"<p>Supports setting various state corresponding animations, data-driven animation states have three types:</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>Interaction-triggered state changes are configured through a unified interaction animation, with the configuration key being <code class=\"codespan\">state</code></p>\n"},"arc3d.animation.type":{"desc":"<p>Animation execution type, specifying a specific built-in animation execution effect</p>\n<p>Universal built-in animation types include:</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: Fade in and out animations</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: Scaling animations</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: Move in and out animations</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: Rotation animations</li>\n<li><code class=\"codespan\">update</code>: Update animations</li>\n</ul>\n"},"arc3d.animation.channel":{"desc":"<p>Visual channels before and after the animation is executed, conflicts with <code class=\"codespan\">type</code> configuration</p>\n"},"arc3d.animation.custom":{"desc":"<p>Custom animation, if custom animation configuration is set, it will replace the default visual channel interpolation logic</p>\n"},"arc3d.animation.customParameters":{"desc":"<p>Custom animation parameters</p>\n"},"arc3d.animation.easing":{"desc":"<p>Animation easing, default is <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"arc3d.animation.delay":{"desc":"<p>Animation execution delay time, default is 0</p>\n"},"arc3d.animation.duration":{"desc":"<p>Animation execution duration, default is 1000ms</p>\n"},"arc3d.animation.oneByOne":{"desc":"<p>Animation execution delay time in sequence. If set to <code class=\"codespan\">true</code>, the next element&#39;s animation will be executed after the previous element&#39;s animation is completed. The default is <code class=\"codespan\">false</code>.</p>\n"},"arc3d.animation.startTime":{"desc":"<p>Initial time of animation execution, which will not be repeatedly applied in loop animation, default is 0</p>\n"},"arc3d.animation.totalTime":{"desc":"<p>Maximum time of animation execution, the animation will be terminated if it reaches the set time</p>\n"},"arc3d.animation.loop":{"desc":"<p>Number of animation loops, if set to <code class=\"codespan\">true</code>, it will loop infinitely</p>\n"},"arc3d.animation.options":{"desc":"<p>Additional parameters set for specific animation types execution</p>\n"},"arc3d.animation.controlOptions":{"desc":"<p>Control parameters for animation execution logic:</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: Whether to immediately terminate its animation when the animation state changes</li>\n<li><code class=\"codespan\">immediatelyApply</code>: Whether to immediately apply the initial visual channel of the animation</li>\n</ul>\n"},"arc3d.zIndex":{"desc":"<p>Set the zIndex of the container shape (group) corresponding to the <code class=\"codespan\">mark</code> graphic primitive</p>\n"},"arc3d.interactive":{"desc":"<p>Type: <code class=\"codespan\">boolean</code>\nRequired: No</p>\n"},"arc3d.context":{"desc":"<p>Set the context parameters of the graphic primitive</p>\n"},"arc3d.setCustomizedShape":{"desc":"<p>Set the callback function of custom shape. The corresponding ts type is as follows:</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>Where <code class=\"codespan\">ICustomPath2D</code> is a utility class provided by VRender for drawing custom paths.</p>\n"},"arc3d.support3d":{"desc":"<p>Whether to support 3d mode when the canvas is set to 3d view.</p>\n"},"arc3d.group":{"desc":"<p>Set the parent graphic primitive. Supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> The id of the corresponding parent graphic primitive</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> The corresponding grammar element of the parent graphic primitive, generally used in API call scenarios.</li>\n</ul>\n<p>If not set, it will be attached to the root node of the canvas by default.</p>\n"},"arc3d.from":{"desc":"<p>ts type definition is:</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>Declare the data on which the graphic primitive depends through the <code class=\"codespan\">data</code> attribute.</p>\n"},"arc3d.key":{"desc":"<p>Set the unique identifier for the graphic primitive data element, which is used to calculate the data state of the graphic element. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the <code class=\"codespan\">key</code></li>\n</ul>\n"},"arc3d.sort":{"desc":"<p>Sort all graphic elements in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"arc3d.groupBy":{"desc":"<p>Set the grouping attribute, the corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the grouping <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the grouping <code class=\"codespan\">key</code></li>\n</ul>\n"},"arc3d.groupSort":{"desc":"<p>Sort the groups in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"arc3d.coordinate":{"desc":"<p>Set the id or graphic element corresponding to the associated coordinate system of this graphic primitive</p>\n"},"arc3d.state":{"desc":"<p>Set the state values ​​of all graphical elements of the current graphic primitive, supporting three formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the state of the graphic, for example, <code class=\"codespan\">{ state: &#39;selected&#39;}</code> sets the state of all graphics to <code class=\"codespan\">&#39;selected&#39;</code>, usually in this case, the <code class=\"codespan\">encode</code> also sets the graphic channel mapping corresponding to the <code class=\"codespan\">&#39;selected&#39;</code> state</li>\n<li><code class=\"codespan\">string[]</code> Set multiple states for the graphic, you can configure <code class=\"codespan\">stateSort</code> to influence the order of executing the graphic channel mapping corresponding to the state</li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the state value, and the return parameter is <code class=\"codespan\">string | string[]</code>, the corresponding ts type definition is:</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"arc3d.stateSort":{"desc":"<p>Set the sorting function of the state values ​​of all graphics elements of the current graphic primitive, which will affect the order of the graphic channel mapping corresponding to the state. The result of the graphic channel mapping executed earlier may be covered by subsequent states. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"arc3d.transform":{"desc":"<p>Set the corresponding transformation of the graphic primitive. All data transformations can be configured on the graphic primitive and are used for the <code class=\"codespan\">join data</code> execution transformation;\nAnother type of transformation is the transformation executed by graphical elements, such as <code class=\"codespan\">dodge</code>;\nThe general type definition is as follows:</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>The parameters supported by each transformation are different</p>\n"},"arc3d.layout":{"desc":"<p>Set the layout parameters of the graphic primitive. There are two roles when the graphic primitive participates in the layout:</p>\n<ul>\n<li>&#39;container&#39; Container graphic primitive, usually <code class=\"codespan\">group</code> graphic primitive</li>\n<li>&#39;item&#39; layout child element, as a child node of the container graphic primitive</li>\n</ul>\n<p>Please note that we only support one layer of layout. If it is a multi-layer nested layout, it is recommended to use a custom layout scheme for implementation;</p>\n<p>Now support two content layouts: <code class=\"codespan\">grid</code> layout and <code class=\"codespan\">relative</code> layout, the related type definition is as follows</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>If you want to set a custom layout scheme, <code class=\"codespan\">layout</code> also supports setting callback functions directly. The definition of the callback function is as follows:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"arc3d.layout.display":{"desc":"<p>The container graphic primitive sets the layout type and supports two configurations:</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> Relative layout</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> Grid layout</li>\n</ul>\n"},"arc3d.layout.callback":{"desc":"<p>Customize the callback function for this graphic primitive, the ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"arc3d.layout.skipBeforeLayouted":{"desc":"<p>Skip the execution stage before the layout is completed</p>\n"},"arc3d.layout.updateViewSignals":{"desc":"<p>Whether to update the default view signals, that is: <code class=\"codespan\">padding</code>, <code class=\"codespan\">viewWidth</code> and <code class=\"codespan\">viewHeight</code></p>\n<p>This property can only be set on a container graphic primitive with <code class=\"codespan\">&#39;relative&#39;</code> layout.</p>\n"},"arc3d.layout.maxChildWidth":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum width of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the width of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"arc3d.layout.maxChildHeight":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum height of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the height of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"arc3d.layout.position":{"desc":"<p>Set the position of the child graphic primitive of the relative layout. The supported settings are:</p>\n<ul>\n<li>&#39;top&#39; Relative to the top of the parent graphic primitive</li>\n<li>&#39;bottom&#39; Relative to the bottom of the parent graphic primitive</li>\n<li>&#39;left&#39; Relative to the left side of the parent graphic primitive</li>\n<li>&#39;right&#39; Relative to the right side of the parent graphic primitive</li>\n<li>&#39;content&#39; Relative to the center of the parent graphic primitive, that is, the content area</li>\n<li>&#39;auto&#39; When the graphic primitive sets the coordinate system, the position relative to the parent graphic primitive is automatically calculated according to the associated <code class=\"codespan\">scale</code></li>\n</ul>\n"},"arc3d.layout.padding":{"desc":"<p>The inner padding of Child graphic primitive, in px unit, with the default padding of 0 for all directions. Accepts numerical values, numerical arrays, and objects for settings.</p>\n<p>Example of usage:</p>\n<pre><code class=\"lang-ts\">// Numerical type, set the padding to 5\npadding: 5;\n// Numerical array, set the top and bottom padding to 5, and the left and right padding to 10, similar to the CSS box model\npadding: [5, 10];\n// Numerical array, set the padding for all four directions separately\npadding: [\n  5, // Top\n  10, // Right\n  5, // Bottom\n  10 // Left\n];\n// Object type\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"arc3d.layout.gridTemplateRows":{"desc":"<p>The parent graphic primitive of the grid layout sets the row height</p>\n"},"arc3d.layout.gridTemplateColumns":{"desc":"<p>The parent graphic primitive of the grid layout sets the column width</p>\n"},"arc3d.layout.gridRowGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the row spacing</p>\n"},"arc3d.layout.gridColumnGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the column spacing</p>\n"},"arc3d.layout.gridRowStart":{"desc":"<p>The child graphic primitive of the grid layout sets the row start position</p>\n"},"arc3d.layout.gridRowEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the row end position</p>\n"},"arc3d.layout.gridColumnStart":{"desc":"<p>The child graphic primitive of the grid layout sets the column start position</p>\n"},"arc3d.layout.gridColumnEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the column end position</p>\n"},"arc3d.large":{"desc":"<p>Whether to enable large data rendering mode</p>\n"},"arc3d.largeThreshold":{"desc":"<p>The threshold for enabling large data rendering optimization, corresponding to the length of data</p>\n"},"arc3d.progressiveStep":{"desc":"<p>The step length for enabling progressive rendering, corresponding to the length of data in each shard</p>\n"},"arc3d.progressiveThreshold":{"desc":"<p>The threshold for enabling progressive rendering, corresponding to the length of single series data</p>\n"},"arc3d.morph":{"desc":"<p>Whether to enable global transition morph animations for the current graphic element</p>\n"},"arc3d.morphKey":{"desc":"<p>Used to match graphic elements for global transition morph animations, graphic elements with the same <code class=\"codespan\">morphKey</code> will undergo morph animations</p>\n"},"arc3d.morphElementKey":{"desc":"<p>For the matched graphic elements before and after, use this configuration to match the graphic element; if not declared, we will read the <code class=\"codespan\">key</code> configuration by default to match the graphic element for morph animations;\nSupports one-to-one, one-to-many, and many-to-one graphic morph animations by default</p>\n"},"pyramid3d":{"desc":"<p><strong> pyramid3d primitive </strong></p>\n"},"pyramid3d.type":{"desc":"<p>Set the primitive type to <code class=\"codespan\">pyramid3d</code></p>\n"},"pyramid3d.encode":{"desc":"<p>Set the visual channel encoding of the graphics elements, supporting three data change states by default:</p>\n<ul>\n<li><code class=\"codespan\">enter</code> newly added data items</li>\n<li><code class=\"codespan\">update</code> data items have been updated</li>\n<li><code class=\"codespan\">exit</code> data items are deleted</li>\n</ul>\n<p>Note that the data state here is automatically generated based on the <code class=\"codespan\">mark</code>&#39;s <code class=\"codespan\">key</code>. We will calculate the unique identifier for the data bound to the <code class=\"codespan\">mark</code> based on the <code class=\"codespan\">key</code> configuration. After the data is updated, if the corresponding unique identifier no longer exists, the state is <code class=\"codespan\">exit</code>; if it exists, it is <code class=\"codespan\">update</code>. If the previous data does not exist for the unique identifier, the data item&#39;s state is <code class=\"codespan\">enter</code>.</p>\n<p>Supports one interaction state by default:</p>\n<ul>\n<li><code class=\"codespan\">hover</code> when the mouse hovers over a specific shape, set the corresponding visual channel encoding for the shape</li>\n</ul>\n"},"pyramid3d.encode.enter":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data initialization state. Note that it will not be executed again when the data is updated.</p>\n"},"pyramid3d.encode.enter.points":{"desc":"<p>Points corresponding to the polygon</p>\n"},"pyramid3d.encode.enter.borderRadius":{"desc":"<p>Set the border radius, default is 0, support two formats:</p>\n<ul>\n<li><code class=\"codespan\">number</code>: Set a uniform border radius for all corners</li>\n<li><code class=\"codespan\">number[]</code>: Set different border radius for each corner separately</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n"},"pyramid3d.encode.enter.depthRatio":{"desc":"<p>Depth ratio</p>\n"},"pyramid3d.encode.enter.face":{"desc":"<p>Set the 6 faces of up, down, left, right, front, and back. The ts type definition is:</p>\n<pre><code class=\"lang-ts\">[boolean, boolean, boolean, boolean, boolean, boolean];\n</code></pre>\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"pyramid3d.encode.enter.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"pyramid3d.encode.enter.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"pyramid3d.encode.enter.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"pyramid3d.encode.enter.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"pyramid3d.encode.enter.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"pyramid3d.encode.enter.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"pyramid3d.encode.enter.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"pyramid3d.encode.enter.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"pyramid3d.encode.enter.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"pyramid3d.encode.enter.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"pyramid3d.encode.enter.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"pyramid3d.encode.enter.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"pyramid3d.encode.enter.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"pyramid3d.encode.enter.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"pyramid3d.encode.enter.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"pyramid3d.encode.enter.outerBorder":{"desc":"<p>Outer border</p>\n"},"pyramid3d.encode.enter.innerBorder":{"desc":"<p>Inner border</p>\n"},"pyramid3d.encode.enter.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"pyramid3d.encode.enter.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"pyramid3d.encode.enter.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"pyramid3d.encode.enter.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"pyramid3d.encode.enter.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"pyramid3d.encode.enter.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"pyramid3d.encode.enter.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"pyramid3d.encode.enter.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"pyramid3d.encode.enter.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"pyramid3d.encode.enter.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"pyramid3d.encode.enter.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"pyramid3d.encode.enter.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"pyramid3d.encode.enter.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"pyramid3d.encode.enter.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"pyramid3d.encode.enter.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"pyramid3d.encode.enter.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"pyramid3d.encode.enter.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"pyramid3d.encode.enter.texture":{"desc":"<p>The texture of the graphic</p>\n"},"pyramid3d.encode.enter.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"pyramid3d.encode.enter.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"pyramid3d.encode.enter.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"pyramid3d.encode.enter.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"pyramid3d.encode.enter.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"pyramid3d.encode.update":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data update state.</p>\n"},"pyramid3d.encode.update.points":{"desc":"<p>Points corresponding to the polygon</p>\n"},"pyramid3d.encode.update.borderRadius":{"desc":"<p>Set the border radius, default is 0, support two formats:</p>\n<ul>\n<li><code class=\"codespan\">number</code>: Set a uniform border radius for all corners</li>\n<li><code class=\"codespan\">number[]</code>: Set different border radius for each corner separately</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n"},"pyramid3d.encode.update.depthRatio":{"desc":"<p>Depth ratio</p>\n"},"pyramid3d.encode.update.face":{"desc":"<p>Set the 6 faces of up, down, left, right, front, and back. The ts type definition is:</p>\n<pre><code class=\"lang-ts\">[boolean, boolean, boolean, boolean, boolean, boolean];\n</code></pre>\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"pyramid3d.encode.update.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"pyramid3d.encode.update.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"pyramid3d.encode.update.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"pyramid3d.encode.update.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"pyramid3d.encode.update.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"pyramid3d.encode.update.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"pyramid3d.encode.update.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"pyramid3d.encode.update.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"pyramid3d.encode.update.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"pyramid3d.encode.update.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"pyramid3d.encode.update.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"pyramid3d.encode.update.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"pyramid3d.encode.update.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"pyramid3d.encode.update.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"pyramid3d.encode.update.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"pyramid3d.encode.update.outerBorder":{"desc":"<p>Outer border</p>\n"},"pyramid3d.encode.update.innerBorder":{"desc":"<p>Inner border</p>\n"},"pyramid3d.encode.update.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"pyramid3d.encode.update.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"pyramid3d.encode.update.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"pyramid3d.encode.update.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"pyramid3d.encode.update.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"pyramid3d.encode.update.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"pyramid3d.encode.update.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"pyramid3d.encode.update.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"pyramid3d.encode.update.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"pyramid3d.encode.update.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"pyramid3d.encode.update.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"pyramid3d.encode.update.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"pyramid3d.encode.update.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"pyramid3d.encode.update.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"pyramid3d.encode.update.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"pyramid3d.encode.update.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"pyramid3d.encode.update.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"pyramid3d.encode.update.texture":{"desc":"<p>The texture of the graphic</p>\n"},"pyramid3d.encode.update.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"pyramid3d.encode.update.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"pyramid3d.encode.update.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"pyramid3d.encode.update.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"pyramid3d.encode.update.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"pyramid3d.encode.exit":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data deletion state.</p>\n"},"pyramid3d.encode.exit.points":{"desc":"<p>Points corresponding to the polygon</p>\n"},"pyramid3d.encode.exit.borderRadius":{"desc":"<p>Set the border radius, default is 0, support two formats:</p>\n<ul>\n<li><code class=\"codespan\">number</code>: Set a uniform border radius for all corners</li>\n<li><code class=\"codespan\">number[]</code>: Set different border radius for each corner separately</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n"},"pyramid3d.encode.exit.depthRatio":{"desc":"<p>Depth ratio</p>\n"},"pyramid3d.encode.exit.face":{"desc":"<p>Set the 6 faces of up, down, left, right, front, and back. The ts type definition is:</p>\n<pre><code class=\"lang-ts\">[boolean, boolean, boolean, boolean, boolean, boolean];\n</code></pre>\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"pyramid3d.encode.exit.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"pyramid3d.encode.exit.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"pyramid3d.encode.exit.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"pyramid3d.encode.exit.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"pyramid3d.encode.exit.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"pyramid3d.encode.exit.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"pyramid3d.encode.exit.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"pyramid3d.encode.exit.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"pyramid3d.encode.exit.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"pyramid3d.encode.exit.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"pyramid3d.encode.exit.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"pyramid3d.encode.exit.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"pyramid3d.encode.exit.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"pyramid3d.encode.exit.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"pyramid3d.encode.exit.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"pyramid3d.encode.exit.outerBorder":{"desc":"<p>Outer border</p>\n"},"pyramid3d.encode.exit.innerBorder":{"desc":"<p>Inner border</p>\n"},"pyramid3d.encode.exit.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"pyramid3d.encode.exit.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"pyramid3d.encode.exit.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"pyramid3d.encode.exit.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"pyramid3d.encode.exit.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"pyramid3d.encode.exit.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"pyramid3d.encode.exit.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"pyramid3d.encode.exit.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"pyramid3d.encode.exit.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"pyramid3d.encode.exit.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"pyramid3d.encode.exit.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"pyramid3d.encode.exit.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"pyramid3d.encode.exit.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"pyramid3d.encode.exit.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"pyramid3d.encode.exit.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"pyramid3d.encode.exit.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"pyramid3d.encode.exit.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"pyramid3d.encode.exit.texture":{"desc":"<p>The texture of the graphic</p>\n"},"pyramid3d.encode.exit.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"pyramid3d.encode.exit.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"pyramid3d.encode.exit.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"pyramid3d.encode.exit.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"pyramid3d.encode.exit.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"pyramid3d.encode.hover":{"desc":"<p>Set the visual channel mapping corresponding to the graphics elements when in the <code class=\"codespan\">hover</code> state.</p>\n"},"pyramid3d.encode.hover.points":{"desc":"<p>Points corresponding to the polygon</p>\n"},"pyramid3d.encode.hover.borderRadius":{"desc":"<p>Set the border radius, default is 0, support two formats:</p>\n<ul>\n<li><code class=\"codespan\">number</code>: Set a uniform border radius for all corners</li>\n<li><code class=\"codespan\">number[]</code>: Set different border radius for each corner separately</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n"},"pyramid3d.encode.hover.depthRatio":{"desc":"<p>Depth ratio</p>\n"},"pyramid3d.encode.hover.face":{"desc":"<p>Set the 6 faces of up, down, left, right, front, and back. The ts type definition is:</p>\n<pre><code class=\"lang-ts\">[boolean, boolean, boolean, boolean, boolean, boolean];\n</code></pre>\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"pyramid3d.encode.hover.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"pyramid3d.encode.hover.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"pyramid3d.encode.hover.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"pyramid3d.encode.hover.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"pyramid3d.encode.hover.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"pyramid3d.encode.hover.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"pyramid3d.encode.hover.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"pyramid3d.encode.hover.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"pyramid3d.encode.hover.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"pyramid3d.encode.hover.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"pyramid3d.encode.hover.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"pyramid3d.encode.hover.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"pyramid3d.encode.hover.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"pyramid3d.encode.hover.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"pyramid3d.encode.hover.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"pyramid3d.encode.hover.outerBorder":{"desc":"<p>Outer border</p>\n"},"pyramid3d.encode.hover.innerBorder":{"desc":"<p>Inner border</p>\n"},"pyramid3d.encode.hover.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"pyramid3d.encode.hover.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"pyramid3d.encode.hover.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"pyramid3d.encode.hover.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"pyramid3d.encode.hover.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"pyramid3d.encode.hover.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"pyramid3d.encode.hover.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"pyramid3d.encode.hover.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"pyramid3d.encode.hover.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"pyramid3d.encode.hover.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"pyramid3d.encode.hover.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"pyramid3d.encode.hover.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"pyramid3d.encode.hover.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"pyramid3d.encode.hover.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"pyramid3d.encode.hover.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"pyramid3d.encode.hover.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"pyramid3d.encode.hover.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"pyramid3d.encode.hover.texture":{"desc":"<p>The texture of the graphic</p>\n"},"pyramid3d.encode.hover.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"pyramid3d.encode.hover.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"pyramid3d.encode.hover.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"pyramid3d.encode.hover.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"pyramid3d.encode.hover.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"pyramid3d.animationState":{"desc":"<p>Type: <code class=\"codespan\">MarkFunctionType</code>\nRequired: No\nanimation attributes</p>\n"},"pyramid3d.animation":{"desc":"<p>Supports setting various state corresponding animations, data-driven animation states have three types:</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>Interaction-triggered state changes are configured through a unified interaction animation, with the configuration key being <code class=\"codespan\">state</code></p>\n"},"pyramid3d.animation.type":{"desc":"<p>Animation execution type, specifying a specific built-in animation execution effect</p>\n<p>Universal built-in animation types include:</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: Fade in and out animations</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: Scaling animations</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: Move in and out animations</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: Rotation animations</li>\n<li><code class=\"codespan\">update</code>: Update animations</li>\n</ul>\n"},"pyramid3d.animation.channel":{"desc":"<p>Visual channels before and after the animation is executed, conflicts with <code class=\"codespan\">type</code> configuration</p>\n"},"pyramid3d.animation.custom":{"desc":"<p>Custom animation, if custom animation configuration is set, it will replace the default visual channel interpolation logic</p>\n"},"pyramid3d.animation.customParameters":{"desc":"<p>Custom animation parameters</p>\n"},"pyramid3d.animation.easing":{"desc":"<p>Animation easing, default is <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"pyramid3d.animation.delay":{"desc":"<p>Animation execution delay time, default is 0</p>\n"},"pyramid3d.animation.duration":{"desc":"<p>Animation execution duration, default is 1000ms</p>\n"},"pyramid3d.animation.oneByOne":{"desc":"<p>Animation execution delay time in sequence. If set to <code class=\"codespan\">true</code>, the next element&#39;s animation will be executed after the previous element&#39;s animation is completed. The default is <code class=\"codespan\">false</code>.</p>\n"},"pyramid3d.animation.startTime":{"desc":"<p>Initial time of animation execution, which will not be repeatedly applied in loop animation, default is 0</p>\n"},"pyramid3d.animation.totalTime":{"desc":"<p>Maximum time of animation execution, the animation will be terminated if it reaches the set time</p>\n"},"pyramid3d.animation.loop":{"desc":"<p>Number of animation loops, if set to <code class=\"codespan\">true</code>, it will loop infinitely</p>\n"},"pyramid3d.animation.options":{"desc":"<p>Additional parameters set for specific animation types execution</p>\n"},"pyramid3d.animation.controlOptions":{"desc":"<p>Control parameters for animation execution logic:</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: Whether to immediately terminate its animation when the animation state changes</li>\n<li><code class=\"codespan\">immediatelyApply</code>: Whether to immediately apply the initial visual channel of the animation</li>\n</ul>\n"},"pyramid3d.zIndex":{"desc":"<p>Set the zIndex of the container shape (group) corresponding to the <code class=\"codespan\">mark</code> graphic primitive</p>\n"},"pyramid3d.interactive":{"desc":"<p>Type: <code class=\"codespan\">boolean</code>\nRequired: No</p>\n"},"pyramid3d.context":{"desc":"<p>Set the context parameters of the graphic primitive</p>\n"},"pyramid3d.setCustomizedShape":{"desc":"<p>Set the callback function of custom shape. The corresponding ts type is as follows:</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>Where <code class=\"codespan\">ICustomPath2D</code> is a utility class provided by VRender for drawing custom paths.</p>\n"},"pyramid3d.support3d":{"desc":"<p>Whether to support 3d mode when the canvas is set to 3d view.</p>\n"},"pyramid3d.group":{"desc":"<p>Set the parent graphic primitive. Supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> The id of the corresponding parent graphic primitive</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> The corresponding grammar element of the parent graphic primitive, generally used in API call scenarios.</li>\n</ul>\n<p>If not set, it will be attached to the root node of the canvas by default.</p>\n"},"pyramid3d.from":{"desc":"<p>ts type definition is:</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>Declare the data on which the graphic primitive depends through the <code class=\"codespan\">data</code> attribute.</p>\n"},"pyramid3d.key":{"desc":"<p>Set the unique identifier for the graphic primitive data element, which is used to calculate the data state of the graphic element. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the <code class=\"codespan\">key</code></li>\n</ul>\n"},"pyramid3d.sort":{"desc":"<p>Sort all graphic elements in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"pyramid3d.groupBy":{"desc":"<p>Set the grouping attribute, the corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the grouping <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the grouping <code class=\"codespan\">key</code></li>\n</ul>\n"},"pyramid3d.groupSort":{"desc":"<p>Sort the groups in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"pyramid3d.coordinate":{"desc":"<p>Set the id or graphic element corresponding to the associated coordinate system of this graphic primitive</p>\n"},"pyramid3d.state":{"desc":"<p>Set the state values ​​of all graphical elements of the current graphic primitive, supporting three formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the state of the graphic, for example, <code class=\"codespan\">{ state: &#39;selected&#39;}</code> sets the state of all graphics to <code class=\"codespan\">&#39;selected&#39;</code>, usually in this case, the <code class=\"codespan\">encode</code> also sets the graphic channel mapping corresponding to the <code class=\"codespan\">&#39;selected&#39;</code> state</li>\n<li><code class=\"codespan\">string[]</code> Set multiple states for the graphic, you can configure <code class=\"codespan\">stateSort</code> to influence the order of executing the graphic channel mapping corresponding to the state</li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the state value, and the return parameter is <code class=\"codespan\">string | string[]</code>, the corresponding ts type definition is:</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"pyramid3d.stateSort":{"desc":"<p>Set the sorting function of the state values ​​of all graphics elements of the current graphic primitive, which will affect the order of the graphic channel mapping corresponding to the state. The result of the graphic channel mapping executed earlier may be covered by subsequent states. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"pyramid3d.transform":{"desc":"<p>Set the corresponding transformation of the graphic primitive. All data transformations can be configured on the graphic primitive and are used for the <code class=\"codespan\">join data</code> execution transformation;\nAnother type of transformation is the transformation executed by graphical elements, such as <code class=\"codespan\">dodge</code>;\nThe general type definition is as follows:</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>The parameters supported by each transformation are different</p>\n"},"pyramid3d.layout":{"desc":"<p>Set the layout parameters of the graphic primitive. There are two roles when the graphic primitive participates in the layout:</p>\n<ul>\n<li>&#39;container&#39; Container graphic primitive, usually <code class=\"codespan\">group</code> graphic primitive</li>\n<li>&#39;item&#39; layout child element, as a child node of the container graphic primitive</li>\n</ul>\n<p>Please note that we only support one layer of layout. If it is a multi-layer nested layout, it is recommended to use a custom layout scheme for implementation;</p>\n<p>Now support two content layouts: <code class=\"codespan\">grid</code> layout and <code class=\"codespan\">relative</code> layout, the related type definition is as follows</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>If you want to set a custom layout scheme, <code class=\"codespan\">layout</code> also supports setting callback functions directly. The definition of the callback function is as follows:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"pyramid3d.layout.display":{"desc":"<p>The container graphic primitive sets the layout type and supports two configurations:</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> Relative layout</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> Grid layout</li>\n</ul>\n"},"pyramid3d.layout.callback":{"desc":"<p>Customize the callback function for this graphic primitive, the ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"pyramid3d.layout.skipBeforeLayouted":{"desc":"<p>Skip the execution stage before the layout is completed</p>\n"},"pyramid3d.layout.updateViewSignals":{"desc":"<p>Whether to update the default view signals, that is: <code class=\"codespan\">padding</code>, <code class=\"codespan\">viewWidth</code> and <code class=\"codespan\">viewHeight</code></p>\n<p>This property can only be set on a container graphic primitive with <code class=\"codespan\">&#39;relative&#39;</code> layout.</p>\n"},"pyramid3d.layout.maxChildWidth":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum width of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the width of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"pyramid3d.layout.maxChildHeight":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum height of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the height of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"pyramid3d.layout.position":{"desc":"<p>Set the position of the child graphic primitive of the relative layout. The supported settings are:</p>\n<ul>\n<li>&#39;top&#39; Relative to the top of the parent graphic primitive</li>\n<li>&#39;bottom&#39; Relative to the bottom of the parent graphic primitive</li>\n<li>&#39;left&#39; Relative to the left side of the parent graphic primitive</li>\n<li>&#39;right&#39; Relative to the right side of the parent graphic primitive</li>\n<li>&#39;content&#39; Relative to the center of the parent graphic primitive, that is, the content area</li>\n<li>&#39;auto&#39; When the graphic primitive sets the coordinate system, the position relative to the parent graphic primitive is automatically calculated according to the associated <code class=\"codespan\">scale</code></li>\n</ul>\n"},"pyramid3d.layout.padding":{"desc":"<p>The inner padding of Child graphic primitive, in px unit, with the default padding of 0 for all directions. Accepts numerical values, numerical arrays, and objects for settings.</p>\n<p>Example of usage:</p>\n<pre><code class=\"lang-ts\">// Numerical type, set the padding to 5\npadding: 5;\n// Numerical array, set the top and bottom padding to 5, and the left and right padding to 10, similar to the CSS box model\npadding: [5, 10];\n// Numerical array, set the padding for all four directions separately\npadding: [\n  5, // Top\n  10, // Right\n  5, // Bottom\n  10 // Left\n];\n// Object type\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"pyramid3d.layout.gridTemplateRows":{"desc":"<p>The parent graphic primitive of the grid layout sets the row height</p>\n"},"pyramid3d.layout.gridTemplateColumns":{"desc":"<p>The parent graphic primitive of the grid layout sets the column width</p>\n"},"pyramid3d.layout.gridRowGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the row spacing</p>\n"},"pyramid3d.layout.gridColumnGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the column spacing</p>\n"},"pyramid3d.layout.gridRowStart":{"desc":"<p>The child graphic primitive of the grid layout sets the row start position</p>\n"},"pyramid3d.layout.gridRowEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the row end position</p>\n"},"pyramid3d.layout.gridColumnStart":{"desc":"<p>The child graphic primitive of the grid layout sets the column start position</p>\n"},"pyramid3d.layout.gridColumnEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the column end position</p>\n"},"pyramid3d.large":{"desc":"<p>Whether to enable large data rendering mode</p>\n"},"pyramid3d.largeThreshold":{"desc":"<p>The threshold for enabling large data rendering optimization, corresponding to the length of data</p>\n"},"pyramid3d.progressiveStep":{"desc":"<p>The step length for enabling progressive rendering, corresponding to the length of data in each shard</p>\n"},"pyramid3d.progressiveThreshold":{"desc":"<p>The threshold for enabling progressive rendering, corresponding to the length of single series data</p>\n"},"pyramid3d.morph":{"desc":"<p>Whether to enable global transition morph animations for the current graphic element</p>\n"},"pyramid3d.morphKey":{"desc":"<p>Used to match graphic elements for global transition morph animations, graphic elements with the same <code class=\"codespan\">morphKey</code> will undergo morph animations</p>\n"},"pyramid3d.morphElementKey":{"desc":"<p>For the matched graphic elements before and after, use this configuration to match the graphic element; if not declared, we will read the <code class=\"codespan\">key</code> configuration by default to match the graphic element for morph animations;\nSupports one-to-one, one-to-many, and many-to-one graphic morph animations by default</p>\n"},"rect3d":{"desc":"<p><strong> rect3d Primitive </strong></p>\n"},"rect3d.type":{"desc":"<p>Set the primitive type to <code class=\"codespan\">rect3d</code></p>\n"},"rect3d.encode":{"desc":"<p>Set the visual channel encoding of the graphics elements, supporting three data change states by default:</p>\n<ul>\n<li><code class=\"codespan\">enter</code> newly added data items</li>\n<li><code class=\"codespan\">update</code> data items have been updated</li>\n<li><code class=\"codespan\">exit</code> data items are deleted</li>\n</ul>\n<p>Note that the data state here is automatically generated based on the <code class=\"codespan\">mark</code>&#39;s <code class=\"codespan\">key</code>. We will calculate the unique identifier for the data bound to the <code class=\"codespan\">mark</code> based on the <code class=\"codespan\">key</code> configuration. After the data is updated, if the corresponding unique identifier no longer exists, the state is <code class=\"codespan\">exit</code>; if it exists, it is <code class=\"codespan\">update</code>. If the previous data does not exist for the unique identifier, the data item&#39;s state is <code class=\"codespan\">enter</code>.</p>\n<p>Supports one interaction state by default:</p>\n<ul>\n<li><code class=\"codespan\">hover</code> when the mouse hovers over a specific shape, set the corresponding visual channel encoding for the shape</li>\n</ul>\n"},"rect3d.encode.enter":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data initialization state. Note that it will not be executed again when the data is updated.</p>\n"},"rect3d.encode.enter.width":{"desc":"<p>The width of the shape</p>\n"},"rect3d.encode.enter.height":{"desc":"<p>The height of the shape</p>\n"},"rect3d.encode.enter.borderRadius":{"desc":"<p>Set the border radius, default is 0, support two types of setting:</p>\n<ul>\n<li><code class=\"codespan\">number</code>: Set the same border radius for all four corners</li>\n<li><code class=\"codespan\">number[]</code>: Set different border radius for each corner<ul>\n<li>When the array length is <code class=\"codespan\">1</code>, set the same border radius for all four corners</li>\n<li>When the array length is <code class=\"codespan\">2</code> or <code class=\"codespan\">3</code>, set border radius of <strong>top-left</strong> and <strong>bottom-right</strong> corners to <code class=\"codespan\">borderRadius[0]</code>, and border radius of <strong>top-right</strong> and <strong>bottom-left</strong> corners to <code class=\"codespan\">borderRadius[1]</code></li>\n<li>When the array length is <code class=\"codespan\">4</code> or more, set different border radius for each corner</li>\n</ul>\n</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n"},"rect3d.encode.enter.length":{"desc":"<p>Length</p>\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"rect3d.encode.enter.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"rect3d.encode.enter.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"rect3d.encode.enter.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"rect3d.encode.enter.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"rect3d.encode.enter.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"rect3d.encode.enter.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"rect3d.encode.enter.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"rect3d.encode.enter.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"rect3d.encode.enter.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"rect3d.encode.enter.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"rect3d.encode.enter.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"rect3d.encode.enter.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"rect3d.encode.enter.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"rect3d.encode.enter.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"rect3d.encode.enter.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"rect3d.encode.enter.outerBorder":{"desc":"<p>Outer border</p>\n"},"rect3d.encode.enter.innerBorder":{"desc":"<p>Inner border</p>\n"},"rect3d.encode.enter.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"rect3d.encode.enter.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"rect3d.encode.enter.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"rect3d.encode.enter.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"rect3d.encode.enter.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"rect3d.encode.enter.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"rect3d.encode.enter.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"rect3d.encode.enter.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"rect3d.encode.enter.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"rect3d.encode.enter.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"rect3d.encode.enter.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"rect3d.encode.enter.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"rect3d.encode.enter.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"rect3d.encode.enter.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"rect3d.encode.enter.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"rect3d.encode.enter.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"rect3d.encode.enter.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"rect3d.encode.enter.texture":{"desc":"<p>The texture of the graphic</p>\n"},"rect3d.encode.enter.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"rect3d.encode.enter.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"rect3d.encode.enter.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"rect3d.encode.enter.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"rect3d.encode.enter.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"rect3d.encode.update":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data update state.</p>\n"},"rect3d.encode.update.width":{"desc":"<p>The width of the shape</p>\n"},"rect3d.encode.update.height":{"desc":"<p>The height of the shape</p>\n"},"rect3d.encode.update.borderRadius":{"desc":"<p>Set the border radius, default is 0, support two types of setting:</p>\n<ul>\n<li><code class=\"codespan\">number</code>: Set the same border radius for all four corners</li>\n<li><code class=\"codespan\">number[]</code>: Set different border radius for each corner<ul>\n<li>When the array length is <code class=\"codespan\">1</code>, set the same border radius for all four corners</li>\n<li>When the array length is <code class=\"codespan\">2</code> or <code class=\"codespan\">3</code>, set border radius of <strong>top-left</strong> and <strong>bottom-right</strong> corners to <code class=\"codespan\">borderRadius[0]</code>, and border radius of <strong>top-right</strong> and <strong>bottom-left</strong> corners to <code class=\"codespan\">borderRadius[1]</code></li>\n<li>When the array length is <code class=\"codespan\">4</code> or more, set different border radius for each corner</li>\n</ul>\n</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n"},"rect3d.encode.update.length":{"desc":"<p>Length</p>\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"rect3d.encode.update.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"rect3d.encode.update.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"rect3d.encode.update.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"rect3d.encode.update.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"rect3d.encode.update.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"rect3d.encode.update.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"rect3d.encode.update.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"rect3d.encode.update.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"rect3d.encode.update.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"rect3d.encode.update.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"rect3d.encode.update.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"rect3d.encode.update.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"rect3d.encode.update.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"rect3d.encode.update.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"rect3d.encode.update.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"rect3d.encode.update.outerBorder":{"desc":"<p>Outer border</p>\n"},"rect3d.encode.update.innerBorder":{"desc":"<p>Inner border</p>\n"},"rect3d.encode.update.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"rect3d.encode.update.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"rect3d.encode.update.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"rect3d.encode.update.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"rect3d.encode.update.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"rect3d.encode.update.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"rect3d.encode.update.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"rect3d.encode.update.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"rect3d.encode.update.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"rect3d.encode.update.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"rect3d.encode.update.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"rect3d.encode.update.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"rect3d.encode.update.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"rect3d.encode.update.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"rect3d.encode.update.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"rect3d.encode.update.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"rect3d.encode.update.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"rect3d.encode.update.texture":{"desc":"<p>The texture of the graphic</p>\n"},"rect3d.encode.update.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"rect3d.encode.update.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"rect3d.encode.update.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"rect3d.encode.update.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"rect3d.encode.update.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"rect3d.encode.exit":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data deletion state.</p>\n"},"rect3d.encode.exit.width":{"desc":"<p>The width of the shape</p>\n"},"rect3d.encode.exit.height":{"desc":"<p>The height of the shape</p>\n"},"rect3d.encode.exit.borderRadius":{"desc":"<p>Set the border radius, default is 0, support two types of setting:</p>\n<ul>\n<li><code class=\"codespan\">number</code>: Set the same border radius for all four corners</li>\n<li><code class=\"codespan\">number[]</code>: Set different border radius for each corner<ul>\n<li>When the array length is <code class=\"codespan\">1</code>, set the same border radius for all four corners</li>\n<li>When the array length is <code class=\"codespan\">2</code> or <code class=\"codespan\">3</code>, set border radius of <strong>top-left</strong> and <strong>bottom-right</strong> corners to <code class=\"codespan\">borderRadius[0]</code>, and border radius of <strong>top-right</strong> and <strong>bottom-left</strong> corners to <code class=\"codespan\">borderRadius[1]</code></li>\n<li>When the array length is <code class=\"codespan\">4</code> or more, set different border radius for each corner</li>\n</ul>\n</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n"},"rect3d.encode.exit.length":{"desc":"<p>Length</p>\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"rect3d.encode.exit.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"rect3d.encode.exit.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"rect3d.encode.exit.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"rect3d.encode.exit.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"rect3d.encode.exit.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"rect3d.encode.exit.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"rect3d.encode.exit.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"rect3d.encode.exit.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"rect3d.encode.exit.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"rect3d.encode.exit.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"rect3d.encode.exit.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"rect3d.encode.exit.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"rect3d.encode.exit.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"rect3d.encode.exit.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"rect3d.encode.exit.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"rect3d.encode.exit.outerBorder":{"desc":"<p>Outer border</p>\n"},"rect3d.encode.exit.innerBorder":{"desc":"<p>Inner border</p>\n"},"rect3d.encode.exit.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"rect3d.encode.exit.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"rect3d.encode.exit.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"rect3d.encode.exit.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"rect3d.encode.exit.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"rect3d.encode.exit.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"rect3d.encode.exit.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"rect3d.encode.exit.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"rect3d.encode.exit.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"rect3d.encode.exit.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"rect3d.encode.exit.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"rect3d.encode.exit.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"rect3d.encode.exit.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"rect3d.encode.exit.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"rect3d.encode.exit.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"rect3d.encode.exit.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"rect3d.encode.exit.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"rect3d.encode.exit.texture":{"desc":"<p>The texture of the graphic</p>\n"},"rect3d.encode.exit.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"rect3d.encode.exit.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"rect3d.encode.exit.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"rect3d.encode.exit.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"rect3d.encode.exit.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"rect3d.encode.hover":{"desc":"<p>Set the visual channel mapping corresponding to the graphics elements when in the <code class=\"codespan\">hover</code> state.</p>\n"},"rect3d.encode.hover.width":{"desc":"<p>The width of the shape</p>\n"},"rect3d.encode.hover.height":{"desc":"<p>The height of the shape</p>\n"},"rect3d.encode.hover.borderRadius":{"desc":"<p>Set the border radius, default is 0, support two types of setting:</p>\n<ul>\n<li><code class=\"codespan\">number</code>: Set the same border radius for all four corners</li>\n<li><code class=\"codespan\">number[]</code>: Set different border radius for each corner<ul>\n<li>When the array length is <code class=\"codespan\">1</code>, set the same border radius for all four corners</li>\n<li>When the array length is <code class=\"codespan\">2</code> or <code class=\"codespan\">3</code>, set border radius of <strong>top-left</strong> and <strong>bottom-right</strong> corners to <code class=\"codespan\">borderRadius[0]</code>, and border radius of <strong>top-right</strong> and <strong>bottom-left</strong> corners to <code class=\"codespan\">borderRadius[1]</code></li>\n<li>When the array length is <code class=\"codespan\">4</code> or more, set different border radius for each corner</li>\n</ul>\n</li>\n</ul>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n"},"rect3d.encode.hover.length":{"desc":"<p>Length</p>\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"rect3d.encode.hover.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"rect3d.encode.hover.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"rect3d.encode.hover.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"rect3d.encode.hover.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"rect3d.encode.hover.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"rect3d.encode.hover.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"rect3d.encode.hover.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"rect3d.encode.hover.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"rect3d.encode.hover.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"rect3d.encode.hover.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"rect3d.encode.hover.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"rect3d.encode.hover.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"rect3d.encode.hover.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"rect3d.encode.hover.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"rect3d.encode.hover.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"rect3d.encode.hover.outerBorder":{"desc":"<p>Outer border</p>\n"},"rect3d.encode.hover.innerBorder":{"desc":"<p>Inner border</p>\n"},"rect3d.encode.hover.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"rect3d.encode.hover.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"rect3d.encode.hover.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"rect3d.encode.hover.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"rect3d.encode.hover.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"rect3d.encode.hover.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"rect3d.encode.hover.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"rect3d.encode.hover.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"rect3d.encode.hover.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"rect3d.encode.hover.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"rect3d.encode.hover.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"rect3d.encode.hover.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"rect3d.encode.hover.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"rect3d.encode.hover.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"rect3d.encode.hover.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"rect3d.encode.hover.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"rect3d.encode.hover.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"rect3d.encode.hover.texture":{"desc":"<p>The texture of the graphic</p>\n"},"rect3d.encode.hover.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"rect3d.encode.hover.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"rect3d.encode.hover.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"rect3d.encode.hover.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"rect3d.encode.hover.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"rect3d.animationState":{"desc":"<p>Type: <code class=\"codespan\">MarkFunctionType</code>\nRequired: No\nanimation attributes</p>\n"},"rect3d.animation":{"desc":"<p>Supports setting various state corresponding animations, data-driven animation states have three types:</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>Interaction-triggered state changes are configured through a unified interaction animation, with the configuration key being <code class=\"codespan\">state</code></p>\n"},"rect3d.animation.type":{"desc":"<p>Animation execution type, specifying a specific built-in animation execution effect</p>\n<p>Universal built-in animation types include:</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: Fade in and out animations</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: Scaling animations</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: Move in and out animations</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: Rotation animations</li>\n<li><code class=\"codespan\">update</code>: Update animations</li>\n</ul>\n"},"rect3d.animation.channel":{"desc":"<p>Visual channels before and after the animation is executed, conflicts with <code class=\"codespan\">type</code> configuration</p>\n"},"rect3d.animation.custom":{"desc":"<p>Custom animation, if custom animation configuration is set, it will replace the default visual channel interpolation logic</p>\n"},"rect3d.animation.customParameters":{"desc":"<p>Custom animation parameters</p>\n"},"rect3d.animation.easing":{"desc":"<p>Animation easing, default is <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"rect3d.animation.delay":{"desc":"<p>Animation execution delay time, default is 0</p>\n"},"rect3d.animation.duration":{"desc":"<p>Animation execution duration, default is 1000ms</p>\n"},"rect3d.animation.oneByOne":{"desc":"<p>Animation execution delay time in sequence. If set to <code class=\"codespan\">true</code>, the next element&#39;s animation will be executed after the previous element&#39;s animation is completed. The default is <code class=\"codespan\">false</code>.</p>\n"},"rect3d.animation.startTime":{"desc":"<p>Initial time of animation execution, which will not be repeatedly applied in loop animation, default is 0</p>\n"},"rect3d.animation.totalTime":{"desc":"<p>Maximum time of animation execution, the animation will be terminated if it reaches the set time</p>\n"},"rect3d.animation.loop":{"desc":"<p>Number of animation loops, if set to <code class=\"codespan\">true</code>, it will loop infinitely</p>\n"},"rect3d.animation.options":{"desc":"<p>Additional parameters set for specific animation types execution</p>\n"},"rect3d.animation.controlOptions":{"desc":"<p>Control parameters for animation execution logic:</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: Whether to immediately terminate its animation when the animation state changes</li>\n<li><code class=\"codespan\">immediatelyApply</code>: Whether to immediately apply the initial visual channel of the animation</li>\n</ul>\n"},"rect3d.zIndex":{"desc":"<p>Set the zIndex of the container shape (group) corresponding to the <code class=\"codespan\">mark</code> graphic primitive</p>\n"},"rect3d.interactive":{"desc":"<p>Type: <code class=\"codespan\">boolean</code>\nRequired: No</p>\n"},"rect3d.context":{"desc":"<p>Set the context parameters of the graphic primitive</p>\n"},"rect3d.setCustomizedShape":{"desc":"<p>Set the callback function of custom shape. The corresponding ts type is as follows:</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>Where <code class=\"codespan\">ICustomPath2D</code> is a utility class provided by VRender for drawing custom paths.</p>\n"},"rect3d.support3d":{"desc":"<p>Whether to support 3d mode when the canvas is set to 3d view.</p>\n"},"rect3d.group":{"desc":"<p>Set the parent graphic primitive. Supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> The id of the corresponding parent graphic primitive</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> The corresponding grammar element of the parent graphic primitive, generally used in API call scenarios.</li>\n</ul>\n<p>If not set, it will be attached to the root node of the canvas by default.</p>\n"},"rect3d.from":{"desc":"<p>ts type definition is:</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>Declare the data on which the graphic primitive depends through the <code class=\"codespan\">data</code> attribute.</p>\n"},"rect3d.key":{"desc":"<p>Set the unique identifier for the graphic primitive data element, which is used to calculate the data state of the graphic element. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the <code class=\"codespan\">key</code></li>\n</ul>\n"},"rect3d.sort":{"desc":"<p>Sort all graphic elements in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"rect3d.groupBy":{"desc":"<p>Set the grouping attribute, the corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the grouping <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the grouping <code class=\"codespan\">key</code></li>\n</ul>\n"},"rect3d.groupSort":{"desc":"<p>Sort the groups in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"rect3d.coordinate":{"desc":"<p>Set the id or graphic element corresponding to the associated coordinate system of this graphic primitive</p>\n"},"rect3d.state":{"desc":"<p>Set the state values ​​of all graphical elements of the current graphic primitive, supporting three formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the state of the graphic, for example, <code class=\"codespan\">{ state: &#39;selected&#39;}</code> sets the state of all graphics to <code class=\"codespan\">&#39;selected&#39;</code>, usually in this case, the <code class=\"codespan\">encode</code> also sets the graphic channel mapping corresponding to the <code class=\"codespan\">&#39;selected&#39;</code> state</li>\n<li><code class=\"codespan\">string[]</code> Set multiple states for the graphic, you can configure <code class=\"codespan\">stateSort</code> to influence the order of executing the graphic channel mapping corresponding to the state</li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the state value, and the return parameter is <code class=\"codespan\">string | string[]</code>, the corresponding ts type definition is:</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"rect3d.stateSort":{"desc":"<p>Set the sorting function of the state values ​​of all graphics elements of the current graphic primitive, which will affect the order of the graphic channel mapping corresponding to the state. The result of the graphic channel mapping executed earlier may be covered by subsequent states. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"rect3d.transform":{"desc":"<p>Set the corresponding transformation of the graphic primitive. All data transformations can be configured on the graphic primitive and are used for the <code class=\"codespan\">join data</code> execution transformation;\nAnother type of transformation is the transformation executed by graphical elements, such as <code class=\"codespan\">dodge</code>;\nThe general type definition is as follows:</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>The parameters supported by each transformation are different</p>\n"},"rect3d.layout":{"desc":"<p>Set the layout parameters of the graphic primitive. There are two roles when the graphic primitive participates in the layout:</p>\n<ul>\n<li>&#39;container&#39; Container graphic primitive, usually <code class=\"codespan\">group</code> graphic primitive</li>\n<li>&#39;item&#39; layout child element, as a child node of the container graphic primitive</li>\n</ul>\n<p>Please note that we only support one layer of layout. If it is a multi-layer nested layout, it is recommended to use a custom layout scheme for implementation;</p>\n<p>Now support two content layouts: <code class=\"codespan\">grid</code> layout and <code class=\"codespan\">relative</code> layout, the related type definition is as follows</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>If you want to set a custom layout scheme, <code class=\"codespan\">layout</code> also supports setting callback functions directly. The definition of the callback function is as follows:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"rect3d.layout.display":{"desc":"<p>The container graphic primitive sets the layout type and supports two configurations:</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> Relative layout</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> Grid layout</li>\n</ul>\n"},"rect3d.layout.callback":{"desc":"<p>Customize the callback function for this graphic primitive, the ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"rect3d.layout.skipBeforeLayouted":{"desc":"<p>Skip the execution stage before the layout is completed</p>\n"},"rect3d.layout.updateViewSignals":{"desc":"<p>Whether to update the default view signals, that is: <code class=\"codespan\">padding</code>, <code class=\"codespan\">viewWidth</code> and <code class=\"codespan\">viewHeight</code></p>\n<p>This property can only be set on a container graphic primitive with <code class=\"codespan\">&#39;relative&#39;</code> layout.</p>\n"},"rect3d.layout.maxChildWidth":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum width of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the width of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"rect3d.layout.maxChildHeight":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum height of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the height of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"rect3d.layout.position":{"desc":"<p>Set the position of the child graphic primitive of the relative layout. The supported settings are:</p>\n<ul>\n<li>&#39;top&#39; Relative to the top of the parent graphic primitive</li>\n<li>&#39;bottom&#39; Relative to the bottom of the parent graphic primitive</li>\n<li>&#39;left&#39; Relative to the left side of the parent graphic primitive</li>\n<li>&#39;right&#39; Relative to the right side of the parent graphic primitive</li>\n<li>&#39;content&#39; Relative to the center of the parent graphic primitive, that is, the content area</li>\n<li>&#39;auto&#39; When the graphic primitive sets the coordinate system, the position relative to the parent graphic primitive is automatically calculated according to the associated <code class=\"codespan\">scale</code></li>\n</ul>\n"},"rect3d.layout.padding":{"desc":"<p>The inner padding of Child graphic primitive, in px unit, with the default padding of 0 for all directions. Accepts numerical values, numerical arrays, and objects for settings.</p>\n<p>Example of usage:</p>\n<pre><code class=\"lang-ts\">// Numerical type, set the padding to 5\npadding: 5;\n// Numerical array, set the top and bottom padding to 5, and the left and right padding to 10, similar to the CSS box model\npadding: [5, 10];\n// Numerical array, set the padding for all four directions separately\npadding: [\n  5, // Top\n  10, // Right\n  5, // Bottom\n  10 // Left\n];\n// Object type\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"rect3d.layout.gridTemplateRows":{"desc":"<p>The parent graphic primitive of the grid layout sets the row height</p>\n"},"rect3d.layout.gridTemplateColumns":{"desc":"<p>The parent graphic primitive of the grid layout sets the column width</p>\n"},"rect3d.layout.gridRowGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the row spacing</p>\n"},"rect3d.layout.gridColumnGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the column spacing</p>\n"},"rect3d.layout.gridRowStart":{"desc":"<p>The child graphic primitive of the grid layout sets the row start position</p>\n"},"rect3d.layout.gridRowEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the row end position</p>\n"},"rect3d.layout.gridColumnStart":{"desc":"<p>The child graphic primitive of the grid layout sets the column start position</p>\n"},"rect3d.layout.gridColumnEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the column end position</p>\n"},"rect3d.large":{"desc":"<p>Whether to enable large data rendering mode</p>\n"},"rect3d.largeThreshold":{"desc":"<p>The threshold for enabling large data rendering optimization, corresponding to the length of data</p>\n"},"rect3d.progressiveStep":{"desc":"<p>The step length for enabling progressive rendering, corresponding to the length of data in each shard</p>\n"},"rect3d.progressiveThreshold":{"desc":"<p>The threshold for enabling progressive rendering, corresponding to the length of single series data</p>\n"},"rect3d.morph":{"desc":"<p>Whether to enable global transition morph animations for the current graphic element</p>\n"},"rect3d.morphKey":{"desc":"<p>Used to match graphic elements for global transition morph animations, graphic elements with the same <code class=\"codespan\">morphKey</code> will undergo morph animations</p>\n"},"rect3d.morphElementKey":{"desc":"<p>For the matched graphic elements before and after, use this configuration to match the graphic element; if not declared, we will read the <code class=\"codespan\">key</code> configuration by default to match the graphic element for morph animations;\nSupports one-to-one, one-to-many, and many-to-one graphic morph animations by default</p>\n<p><code class=\"codespan\">`</code></p>\n"}}