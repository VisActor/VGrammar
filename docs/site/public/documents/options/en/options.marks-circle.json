{"type":{"desc":"<p>Set the graphic element type to <code class=\"codespan\">circle</code></p>\n"},"encode":{"desc":"<p>Set the visual channel encoding of the graphics elements, supporting three data change states by default:</p>\n<ul>\n<li><code class=\"codespan\">enter</code> newly added data items</li>\n<li><code class=\"codespan\">update</code> data items have been updated</li>\n<li><code class=\"codespan\">exit</code> data items are deleted</li>\n</ul>\n<p>Note that the data state here is automatically generated based on the <code class=\"codespan\">mark</code>&#39;s <code class=\"codespan\">key</code>. We will calculate the unique identifier for the data bound to the <code class=\"codespan\">mark</code> based on the <code class=\"codespan\">key</code> configuration. After the data is updated, if the corresponding unique identifier no longer exists, the state is <code class=\"codespan\">exit</code>; if it exists, it is <code class=\"codespan\">update</code>. If the previous data does not exist for the unique identifier, the data item&#39;s state is <code class=\"codespan\">enter</code>.</p>\n<p>Supports one interaction state by default:</p>\n<ul>\n<li><code class=\"codespan\">hover</code> when the mouse hovers over a specific shape, set the corresponding visual channel encoding for the shape</li>\n</ul>\n"},"encode.enter":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data initialization state. Note that it will not be executed again when the data is updated.</p>\n"},"encode.enter.radius":{"desc":"<p>The radius of the circle</p>\n"},"encode.enter.startAngle":{"desc":"<p>The starting angle of the circle;\nSpecified in radians, 0 represents the 12 o&#39;clock direction and the clockwise direction is positive.\nIf <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code>, a complete circle will be drawn, by default it is a full circle</p>\n"},"encode.enter.endAngle":{"desc":"<p>The ending angle of the circle;\nSpecified in radians, 0 represents the 12 o&#39;clock direction and the clockwise direction is positive.\nIf <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code>, a complete circle will be drawn, by default it is a full circle</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"encode.enter.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"encode.enter.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"encode.enter.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"encode.enter.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"encode.enter.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"encode.enter.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"encode.enter.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"encode.enter.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"encode.enter.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"encode.enter.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"encode.enter.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"encode.enter.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"encode.enter.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"encode.enter.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"encode.enter.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"encode.enter.outerBorder":{"desc":"<p>Outer border</p>\n"},"encode.enter.innerBorder":{"desc":"<p>Inner border</p>\n"},"encode.enter.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"encode.enter.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"encode.enter.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"encode.enter.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"encode.enter.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"encode.enter.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"encode.enter.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"encode.enter.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"encode.enter.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"encode.enter.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"encode.enter.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"encode.enter.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"encode.enter.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"encode.enter.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"encode.enter.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"encode.enter.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"encode.enter.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"encode.enter.texture":{"desc":"<p>The texture of the graphic</p>\n"},"encode.enter.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"encode.enter.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"encode.enter.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"encode.enter.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"encode.enter.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"encode.update":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data update state.</p>\n"},"encode.update.radius":{"desc":"<p>The radius of the circle</p>\n"},"encode.update.startAngle":{"desc":"<p>The starting angle of the circle;\nSpecified in radians, 0 represents the 12 o&#39;clock direction and the clockwise direction is positive.\nIf <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code>, a complete circle will be drawn, by default it is a full circle</p>\n"},"encode.update.endAngle":{"desc":"<p>The ending angle of the circle;\nSpecified in radians, 0 represents the 12 o&#39;clock direction and the clockwise direction is positive.\nIf <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code>, a complete circle will be drawn, by default it is a full circle</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"encode.update.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"encode.update.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"encode.update.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"encode.update.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"encode.update.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"encode.update.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"encode.update.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"encode.update.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"encode.update.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"encode.update.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"encode.update.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"encode.update.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"encode.update.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"encode.update.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"encode.update.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"encode.update.outerBorder":{"desc":"<p>Outer border</p>\n"},"encode.update.innerBorder":{"desc":"<p>Inner border</p>\n"},"encode.update.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"encode.update.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"encode.update.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"encode.update.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"encode.update.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"encode.update.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"encode.update.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"encode.update.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"encode.update.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"encode.update.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"encode.update.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"encode.update.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"encode.update.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"encode.update.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"encode.update.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"encode.update.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"encode.update.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"encode.update.texture":{"desc":"<p>The texture of the graphic</p>\n"},"encode.update.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"encode.update.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"encode.update.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"encode.update.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"encode.update.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"encode.exit":{"desc":"<p>Set the visual channel mapping executed by the graphics elements in the data deletion state.</p>\n"},"encode.exit.radius":{"desc":"<p>The radius of the circle</p>\n"},"encode.exit.startAngle":{"desc":"<p>The starting angle of the circle;\nSpecified in radians, 0 represents the 12 o&#39;clock direction and the clockwise direction is positive.\nIf <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code>, a complete circle will be drawn, by default it is a full circle</p>\n"},"encode.exit.endAngle":{"desc":"<p>The ending angle of the circle;\nSpecified in radians, 0 represents the 12 o&#39;clock direction and the clockwise direction is positive.\nIf <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code>, a complete circle will be drawn, by default it is a full circle</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"encode.exit.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"encode.exit.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"encode.exit.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"encode.exit.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"encode.exit.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"encode.exit.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"encode.exit.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"encode.exit.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"encode.exit.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"encode.exit.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"encode.exit.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"encode.exit.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"encode.exit.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"encode.exit.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"encode.exit.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"encode.exit.outerBorder":{"desc":"<p>Outer border</p>\n"},"encode.exit.innerBorder":{"desc":"<p>Inner border</p>\n"},"encode.exit.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"encode.exit.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"encode.exit.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"encode.exit.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"encode.exit.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"encode.exit.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"encode.exit.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"encode.exit.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"encode.exit.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"encode.exit.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"encode.exit.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"encode.exit.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"encode.exit.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"encode.exit.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"encode.exit.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"encode.exit.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"encode.exit.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"encode.exit.texture":{"desc":"<p>The texture of the graphic</p>\n"},"encode.exit.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"encode.exit.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"encode.exit.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"encode.exit.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"encode.exit.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"encode.hover":{"desc":"<p>Set the visual channel mapping corresponding to the graphics elements when in the <code class=\"codespan\">hover</code> state.</p>\n"},"encode.hover.radius":{"desc":"<p>The radius of the circle</p>\n"},"encode.hover.startAngle":{"desc":"<p>The starting angle of the circle;\nSpecified in radians, 0 represents the 12 o&#39;clock direction and the clockwise direction is positive.\nIf <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code>, a complete circle will be drawn, by default it is a full circle</p>\n"},"encode.hover.endAngle":{"desc":"<p>The ending angle of the circle;\nSpecified in radians, 0 represents the 12 o&#39;clock direction and the clockwise direction is positive.\nIf <code class=\"codespan\">|endAngle - startAngle| ≥ τ</code>, a complete circle will be drawn, by default it is a full circle</p>\n<!-- arc3d -->\n<!-- pyramid3d -->\n<!-- rect3d -->\n<!-- component -->\n<!-- glyph -->\n<!-- base channels -->\n"},"encode.hover.x":{"desc":"<p>Graphic element&#39;s x coordinate</p>\n"},"encode.hover.y":{"desc":"<p>Graphic element&#39;s y coordinate</p>\n"},"encode.hover.z":{"desc":"<p>Graphic element&#39;s z coordinate, only applicable to 3D graphics</p>\n"},"encode.hover.opacity":{"desc":"<p>Opacity of the graphic element rendering</p>\n"},"encode.hover.fill":{"desc":"<p>Graphic element&#39;s fill color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"encode.hover.fillOpacity":{"desc":"<p>Graphic element&#39;s fill opacity</p>\n"},"encode.hover.stroke":{"desc":"<p>Graphic element&#39;s stroke color. Supports setting solid color using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, and gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"encode.hover.strokeOpacity":{"desc":"<p>Opacity of the graphic element&#39;s stroke</p>\n"},"encode.hover.lineWidth":{"desc":"<p>Line width of the graphic element&#39;s stroke</p>\n"},"encode.hover.lineDash":{"desc":"<p>Type: number[]\nLine pattern mode of the graphic element&#39;s stroke</p>\n"},"encode.hover.lineDashOffset":{"desc":"<p>Offset of the graphic element&#39;s stroke line pattern mode</p>\n"},"encode.hover.lineCap":{"desc":"<p>Line cap style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;butt&#39;</li>\n<li>&#39;round&#39;</li>\n<li>&#39;square&#39;</li>\n</ul>\n"},"encode.hover.lineJoin":{"desc":"<p>Line join style of the graphic stroke, with the following optional options:</p>\n<ul>\n<li>&#39;bevel&#39;</li>\n<li>&#39;miter&#39;</li>\n<li>&#39;round&#39;</li>\n</ul>\n"},"encode.hover.miterLimit":{"desc":"<p>The limit value for the miter effect when the <code class=\"codespan\">lineJoin</code> type is miter</p>\n"},"encode.hover.strokeBoundsBuffer":{"desc":"<p>The boundsBuffer of the graphic stroke for controlling the buffer of the bounds</p>\n"},"encode.hover.outerBorder":{"desc":"<p>Outer border</p>\n"},"encode.hover.innerBorder":{"desc":"<p>Inner border</p>\n"},"encode.hover.shadowBlur":{"desc":"<p>The blur radius size of the graphic shadow</p>\n"},"encode.hover.shadowColor":{"desc":"<p>The shadow color of the graphic. Supports setting to solid colors using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc., and also supports setting to gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n"},"encode.hover.shadowOffsetX":{"desc":"<p>The x offset of the graphic shadow</p>\n"},"encode.hover.shadowOffsetY":{"desc":"<p>The y offset of the graphic shadow</p>\n"},"encode.hover.dx":{"desc":"<p>The offset of the graphic in the x direction</p>\n"},"encode.hover.dy":{"desc":"<p>The offset of the graphic in the y direction</p>\n"},"encode.hover.dz":{"desc":"<p>The offset of the graphic in the z direction</p>\n"},"encode.hover.scrollX":{"desc":"<p>The scrolling offset of the graphic in the X direction</p>\n"},"encode.hover.scrollY":{"desc":"<p>The scrolling offset of the graphic in the y direction</p>\n"},"encode.hover.scaleX":{"desc":"<p>The scaling factor of the graphic in the x direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"encode.hover.scaleY":{"desc":"<p>The scaling factor of the graphic in the y direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"encode.hover.scaleZ":{"desc":"<p>The scaling factor of the graphic in the z direction, default is no scaling, which is equivalent to a value of 1</p>\n"},"encode.hover.angle":{"desc":"<p>The rotation angle of the graphic in the x-y plane, in 3d mode, corresponds to the rotation angle around the z-axis</p>\n"},"encode.hover.alpha":{"desc":"<p>The rotation angle around the y-axis in 3d mode</p>\n"},"encode.hover.beta":{"desc":"<p>The rotation angle around the x-axis in 3d mode</p>\n"},"encode.hover.background":{"desc":"<p>The background color of the graphic, or the background image;</p>\n<p>When setting the background color, supports using <code class=\"codespan\">rgb(255,255,255)</code>, <code class=\"codespan\">rgba(255,255,255,1)</code>, <code class=\"codespan\">#fff</code>, etc. to set solid colors, and also supports setting gradient color fills.</p>\n<p>Gradient color configuration. Gradient colors can be configured on color-supporting properties such as <code class=\"codespan\">fill</code> and <code class=\"codespan\">stroke</code> in graphic styles. Currently supports three gradient configurations:</p>\n<ul>\n<li>Linear gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Linear gradient, the first four parameters are x0, y0, x1, y1, ranging from 0 to 1, which is equivalent to the percentage within the bounding box of the graphic\n{\n  gradient: &#39;linear&#39;,\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 1,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;red&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;blue&#39; // Color at 100%\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>Radial gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Radial gradient, the first five parameters are x0, y0, r0, x1, y1, r1, where r0 and r1 represent radius, values are the same as linear gradient\n{\n  gradient: &#39;radial&#39;,\n  x0: 0.5,\n  y0: 0,\n  r0: 0,\n  x1: 0.5,\n  y1: 1,\n  r1: 0.7,\n  stops: [\n    {\n      offset: 0,\n      color: &#39;rgba(255,255,255,0.5)&#39; // Color at 0%\n    },\n    {\n      offset: 1,\n      color: &#39;#6690F2&#39; // Color at 100%\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li>Conical gradient</li>\n</ul>\n<pre><code class=\"lang-ts\">// Conical gradient, startAngle represents starting radian, endAngle represents ending radian, x and y are coordinates, and the value range is 0 - 1\n{\n  gradient: &#39;conical&#39;,\n  x: 0.5,\n  y: 0.5,\n  startAngle: 0,\n  endAngle: 6.283185307179586,\n  stops: [\n    { offset: 0, color: &#39;red&#39; },      // Color at 0%\n    { offset: 0.2, color: &#39;blue&#39; },   // Color at 20%\n    { offset: 0.4, color: &#39;orange&#39; }, // Color at 40%\n    { offset: 0.6, color: &#39;pink&#39; },   // Color at 60%\n    { offset: 0.8, color: &#39;green&#39; },  // Color at 80%\n    { offset: 1, color: &#39;purple&#39; }    // Color at 100%\n  ],\n}\n</code></pre>\n<p>When setting images:</p>\n<p>Image, supporting multiple formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code>: Image URL</li>\n<li><code class=\"codespan\">HTMLImageElement</code>: The <code class=\"codespan\">image</code> tag corresponding to the image</li>\n<li><code class=\"codespan\">HTMLCanvasElement</code>: The <code class=\"codespan\">canvas</code> tag corresponding to the image</li>\n</ul>\n"},"encode.hover.backgroundMode":{"desc":"<p>The fill mode of the graphic background, depending on the specific graphic</p>\n"},"encode.hover.texture":{"desc":"<p>The texture of the graphic</p>\n"},"encode.hover.textureColor":{"desc":"<p>The color of the graphic texture</p>\n"},"encode.hover.textureSize":{"desc":"<p>The size of the graphic texture</p>\n"},"encode.hover.texturePadding":{"desc":"<p>The gap between the graphic textures</p>\n"},"encode.hover.blur":{"desc":"<p>The edge blur of the graphic</p>\n"},"encode.hover.cursor":{"desc":"<p>The mouse cursor style of the graphic, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\">DOM styles</a>:</p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;default&#39;</li>\n<li>&#39;none&#39;</li>\n<li>&#39;context-menu&#39;</li>\n<li>&#39;help&#39;</li>\n<li>&#39;pointer&#39;</li>\n<li>&#39;progress&#39;</li>\n<li>&#39;wait&#39;</li>\n<li>&#39;cell&#39;</li>\n<li>&#39;crosshair&#39;</li>\n<li>&#39;text&#39;</li>\n<li>&#39;vertical-text&#39;</li>\n<li>&#39;alias&#39;</li>\n<li>&#39;copy&#39;</li>\n<li>&#39;move&#39;</li>\n<li>&#39;no-drop&#39;</li>\n<li>&#39;not-allowed&#39;</li>\n<li>&#39;grab&#39;</li>\n<li>&#39;grabbing&#39;</li>\n<li>&#39;all-scroll&#39;</li>\n<li>&#39;col-resize&#39;</li>\n<li>&#39;row-resize&#39;</li>\n<li>&#39;n-resize&#39;</li>\n<li>&#39;e-resize&#39;</li>\n<li>&#39;s-resize&#39;</li>\n<li>&#39;w-resize&#39;</li>\n<li>&#39;ne-resize&#39;</li>\n<li>&#39;nw-resize&#39;</li>\n<li>&#39;se-resize&#39;</li>\n<li>&#39;sw-resize&#39;</li>\n<li>&#39;ew-resize&#39;</li>\n<li>&#39;ns-resize&#39;</li>\n<li>&#39;nesw-resize&#39;</li>\n<li>&#39;nwse-resize&#39;</li>\n<li>&#39;zoom-in&#39;</li>\n<li>&#39;zoom-out&#39;</li>\n</ul>\n"},"animationState":{"desc":"<p>Type: <code class=\"codespan\">MarkFunctionType</code>\nRequired: No\nanimation attributes</p>\n"},"animation":{"desc":"<p>Supports setting various state corresponding animations, data-driven animation states have three types:</p>\n<ul>\n<li><code class=\"codespan\">enter</code></li>\n<li><code class=\"codespan\">update</code></li>\n<li><code class=\"codespan\">exit</code></li>\n</ul>\n<p>Interaction-triggered state changes are configured through a unified interaction animation, with the configuration key being <code class=\"codespan\">state</code></p>\n"},"animation.type":{"desc":"<p>Animation execution type, specifying a specific built-in animation execution effect</p>\n<p>Universal built-in animation types include:</p>\n<ul>\n<li><code class=\"codespan\">fadeIn</code>/<code class=\"codespan\">fadeOut</code>: Fade in and out animations</li>\n<li><code class=\"codespan\">scaleIn</code>/<code class=\"codespan\">scaleOut</code>: Scaling animations</li>\n<li><code class=\"codespan\">moveIn</code>/<code class=\"codespan\">moveOut</code>: Move in and out animations</li>\n<li><code class=\"codespan\">rotateIn</code>/<code class=\"codespan\">rotateOut</code>: Rotation animations</li>\n<li><code class=\"codespan\">update</code>: Update animations</li>\n</ul>\n"},"animation.channel":{"desc":"<p>Visual channels before and after the animation is executed, conflicts with <code class=\"codespan\">type</code> configuration</p>\n"},"animation.custom":{"desc":"<p>Custom animation, if custom animation configuration is set, it will replace the default visual channel interpolation logic</p>\n"},"animation.customParameters":{"desc":"<p>Custom animation parameters</p>\n"},"animation.easing":{"desc":"<p>Animation easing, default is <code class=\"codespan\">&#39;quintInOut&#39;</code></p>\n"},"animation.delay":{"desc":"<p>Animation execution delay time, default is 0</p>\n"},"animation.duration":{"desc":"<p>Animation execution duration, default is 1000ms</p>\n"},"animation.oneByOne":{"desc":"<p>Animation execution delay time in sequence. If set to <code class=\"codespan\">true</code>, the next element&#39;s animation will be executed after the previous element&#39;s animation is completed. The default is <code class=\"codespan\">false</code>.</p>\n"},"animation.startTime":{"desc":"<p>Initial time of animation execution, which will not be repeatedly applied in loop animation, default is 0</p>\n"},"animation.totalTime":{"desc":"<p>Maximum time of animation execution, the animation will be terminated if it reaches the set time</p>\n"},"animation.loop":{"desc":"<p>Number of animation loops, if set to <code class=\"codespan\">true</code>, it will loop infinitely</p>\n"},"animation.options":{"desc":"<p>Additional parameters set for specific animation types execution</p>\n"},"animation.controlOptions":{"desc":"<p>Control parameters for animation execution logic:</p>\n<ul>\n<li><code class=\"codespan\">stopWhenStateChange</code>: Whether to immediately terminate its animation when the animation state changes</li>\n<li><code class=\"codespan\">immediatelyApply</code>: Whether to immediately apply the initial visual channel of the animation</li>\n</ul>\n"},"zIndex":{"desc":"<p>Set the zIndex of the container shape (group) corresponding to the <code class=\"codespan\">mark</code> graphic primitive</p>\n"},"interactive":{"desc":"<p>Type: <code class=\"codespan\">boolean</code>\nRequired: No</p>\n"},"context":{"desc":"<p>Set the context parameters of the graphic primitive</p>\n"},"setCustomizedShape":{"desc":"<p>Set the callback function of custom shape. The corresponding ts type is as follows:</p>\n<pre><code class=\"lang-ts\">(datum: any[], attrs: any, path: ICustomPath2D) =&gt; ICustomPath2D;\n</code></pre>\n<p>Where <code class=\"codespan\">ICustomPath2D</code> is a utility class provided by VRender for drawing custom paths.</p>\n"},"support3d":{"desc":"<p>Whether to support 3d mode when the canvas is set to 3d view.</p>\n"},"group":{"desc":"<p>Set the parent graphic primitive. Supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> The id of the corresponding parent graphic primitive</li>\n<li><code class=\"codespan\">&#39;IGroupMark&#39;</code> The corresponding grammar element of the parent graphic primitive, generally used in API call scenarios.</li>\n</ul>\n<p>If not set, it will be attached to the root node of the canvas by default.</p>\n"},"from":{"desc":"<p>ts type definition is:</p>\n<pre><code class=\"lang-ts\">interface MarkFromSpec {\n  data: string | IData;\n}\n</code></pre>\n<p>Declare the data on which the graphic primitive depends through the <code class=\"codespan\">data</code> attribute.</p>\n"},"key":{"desc":"<p>Set the unique identifier for the graphic primitive data element, which is used to calculate the data state of the graphic element. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the <code class=\"codespan\">key</code></li>\n</ul>\n"},"sort":{"desc":"<p>Sort all graphic elements in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"groupBy":{"desc":"<p>Set the grouping attribute, the corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkKeySpec = string | ((datum: any) =&gt; string);\n</code></pre>\n<p>That is to say, it supports two formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the field corresponding to the grouping <code class=\"codespan\">key</code></li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the grouping <code class=\"codespan\">key</code></li>\n</ul>\n"},"groupSort":{"desc":"<p>Sort the groups in the graphic primitive and set the corresponding sorting callback function:</p>\n<pre><code class=\"lang-ts\">(datumA: any, datumB: any) =&gt; number;\n</code></pre>\n"},"coordinate":{"desc":"<p>Set the id or graphic element corresponding to the associated coordinate system of this graphic primitive</p>\n"},"state":{"desc":"<p>Set the state values ​​of all graphical elements of the current graphic primitive, supporting three formats:</p>\n<ul>\n<li><code class=\"codespan\">string</code> Set the state of the graphic, for example, <code class=\"codespan\">{ state: &#39;selected&#39;}</code> sets the state of all graphics to <code class=\"codespan\">&#39;selected&#39;</code>, usually in this case, the <code class=\"codespan\">encode</code> also sets the graphic channel mapping corresponding to the <code class=\"codespan\">&#39;selected&#39;</code> state</li>\n<li><code class=\"codespan\">string[]</code> Set multiple states for the graphic, you can configure <code class=\"codespan\">stateSort</code> to influence the order of executing the graphic channel mapping corresponding to the state</li>\n<li><code class=\"codespan\">function</code> Customize the callback function for parsing the state value, and the return parameter is <code class=\"codespan\">string | string[]</code>, the corresponding ts type definition is:</li>\n</ul>\n<pre><code class=\"lang-ts\">(datum: any, element: IElement, parameters: any) =&gt; string | string[];\n</code></pre>\n"},"stateSort":{"desc":"<p>Set the sorting function of the state values ​​of all graphics elements of the current graphic primitive, which will affect the order of the graphic channel mapping corresponding to the state. The result of the graphic channel mapping executed earlier may be covered by subsequent states. The corresponding ts type definition is:</p>\n<pre><code class=\"lang-ts\">(stateA: string, stateB: string) =&gt; number;\n</code></pre>\n"},"transform":{"desc":"<p>Set the corresponding transformation of the graphic primitive. All data transformations can be configured on the graphic primitive and are used for the <code class=\"codespan\">join data</code> execution transformation;\nAnother type of transformation is the transformation executed by graphical elements, such as <code class=\"codespan\">dodge</code>;\nThe general type definition is as follows:</p>\n<pre><code class=\"lang-ts\">interface BaseTransformSpec {\n  /** the type of transform */\n  type: string;\n  [key: string]: TransformSpecValue | TransformSpecValue[];\n}\n</code></pre>\n<p>The parameters supported by each transformation are different</p>\n"},"layout":{"desc":"<p>Set the layout parameters of the graphic primitive. There are two roles when the graphic primitive participates in the layout:</p>\n<ul>\n<li>&#39;container&#39; Container graphic primitive, usually <code class=\"codespan\">group</code> graphic primitive</li>\n<li>&#39;item&#39; layout child element, as a child node of the container graphic primitive</li>\n</ul>\n<p>Please note that we only support one layer of layout. If it is a multi-layer nested layout, it is recommended to use a custom layout scheme for implementation;</p>\n<p>Now support two content layouts: <code class=\"codespan\">grid</code> layout and <code class=\"codespan\">relative</code> layout, the related type definition is as follows</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n\ninterface MarkBaseLayoutSpec {\n  callback?: MarkLayoutCallback;\n  skipBeforeLayouted?: boolean;\n  updateViewSignals?: boolean;\n}\n\ninterface MarkGridContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;grid&#39;;\n  gridTemplateRows?: (number | string | &#39;auto&#39;)[];\n  gridTemplateColumns?: (number | string | &#39;auto&#39;)[];\n  gridRowGap?: number;\n  gridColumnGap?: number;\n}\n\ninterface MarkGridItemSpec extends MarkBaseLayoutSpec {\n  gridRowStart?: number;\n  gridRowEnd?: number;\n  gridColumnStart?: number;\n  gridColumnEnd?: number;\n}\n\ninterface MarkRelativeContainerSpec extends MarkBaseLayoutSpec {\n  display: &#39;relative&#39;;\n  maxChildWidth?: string | number;\n  maxChildHeight?: string | number;\n}\n\ninterface MarkRelativeItemSpec extends MarkBaseLayoutSpec {\n  position?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39; | &#39;content&#39; | &#39;auto&#39; | string;\n  padding?: CommonPaddingSpec;\n}\n</code></pre>\n<p>If you want to set a custom layout scheme, <code class=\"codespan\">layout</code> also supports setting callback functions directly. The definition of the callback function is as follows:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"layout.display":{"desc":"<p>The container graphic primitive sets the layout type and supports two configurations:</p>\n<ul>\n<li><code class=\"codespan\">&#39;relative&#39;</code> Relative layout</li>\n<li><code class=\"codespan\">&#39;grid&#39;</code> Grid layout</li>\n</ul>\n"},"layout.callback":{"desc":"<p>Customize the callback function for this graphic primitive, the ts type definition is:</p>\n<pre><code class=\"lang-ts\">type MarkLayoutCallback = (\n  group: IGroupMark,\n  children: IMark[],\n  parentLayoutBounds: Bounds,\n  options?: ILayoutOptions\n) =&gt; void;\n</code></pre>\n"},"layout.skipBeforeLayouted":{"desc":"<p>Skip the execution stage before the layout is completed</p>\n"},"layout.updateViewSignals":{"desc":"<p>Whether to update the default view signals, that is: <code class=\"codespan\">padding</code>, <code class=\"codespan\">viewWidth</code> and <code class=\"codespan\">viewHeight</code></p>\n<p>This property can only be set on a container graphic primitive with <code class=\"codespan\">&#39;relative&#39;</code> layout.</p>\n"},"layout.maxChildWidth":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum width of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the width of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"layout.maxChildHeight":{"desc":"<p>The parent graphic primitives of the relative layout set the maximum height of the child graphic primitives, supporting two formats:</p>\n<ul>\n<li><code class=\"codespan\">&#39;string&#39;</code> Percentage string, such as <code class=\"codespan\">&#39;20%&#39;</code>, the denominator corresponds to the height of the bounding box of the container graphic primitive</li>\n<li><code class=\"codespan\">&#39;number&#39;</code> Unit is <code class=\"codespan\">px</code>, set the absolute width</li>\n</ul>\n"},"layout.position":{"desc":"<p>Set the position of the child graphic primitive of the relative layout. The supported settings are:</p>\n<ul>\n<li>&#39;top&#39; Relative to the top of the parent graphic primitive</li>\n<li>&#39;bottom&#39; Relative to the bottom of the parent graphic primitive</li>\n<li>&#39;left&#39; Relative to the left side of the parent graphic primitive</li>\n<li>&#39;right&#39; Relative to the right side of the parent graphic primitive</li>\n<li>&#39;content&#39; Relative to the center of the parent graphic primitive, that is, the content area</li>\n<li>&#39;auto&#39; When the graphic primitive sets the coordinate system, the position relative to the parent graphic primitive is automatically calculated according to the associated <code class=\"codespan\">scale</code></li>\n</ul>\n"},"layout.padding":{"desc":"<p>The inner padding of Child graphic primitive, in px unit, with the default padding of 0 for all directions. Accepts numerical values, numerical arrays, and objects for settings.</p>\n<p>Example of usage:</p>\n<pre><code class=\"lang-ts\">// Numerical type, set the padding to 5\npadding: 5;\n// Numerical array, set the top and bottom padding to 5, and the left and right padding to 10, similar to the CSS box model\npadding: [5, 10];\n// Numerical array, set the padding for all four directions separately\npadding: [\n  5, // Top\n  10, // Right\n  5, // Bottom\n  10 // Left\n];\n// Object type\npadding: {\n  top: 5,\n  right: 10,\n  bottom: 5,\n  left: 10\n}\n</code></pre>\n"},"layout.gridTemplateRows":{"desc":"<p>The parent graphic primitive of the grid layout sets the row height</p>\n"},"layout.gridTemplateColumns":{"desc":"<p>The parent graphic primitive of the grid layout sets the column width</p>\n"},"layout.gridRowGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the row spacing</p>\n"},"layout.gridColumnGap":{"desc":"<p>The parent graphic primitive of the grid layout sets the column spacing</p>\n"},"layout.gridRowStart":{"desc":"<p>The child graphic primitive of the grid layout sets the row start position</p>\n"},"layout.gridRowEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the row end position</p>\n"},"layout.gridColumnStart":{"desc":"<p>The child graphic primitive of the grid layout sets the column start position</p>\n"},"layout.gridColumnEnd":{"desc":"<p>The child graphic primitive of the grid layout sets the column end position</p>\n"},"large":{"desc":"<p>Whether to enable large data rendering mode</p>\n"},"largeThreshold":{"desc":"<p>The threshold for enabling large data rendering optimization, corresponding to the length of data</p>\n"},"progressiveStep":{"desc":"<p>The step length for enabling progressive rendering, corresponding to the length of data in each shard</p>\n"},"progressiveThreshold":{"desc":"<p>The threshold for enabling progressive rendering, corresponding to the length of single series data</p>\n"},"morph":{"desc":"<p>Whether to enable global transition morph animations for the current graphic element</p>\n"},"morphKey":{"desc":"<p>Used to match graphic elements for global transition morph animations, graphic elements with the same <code class=\"codespan\">morphKey</code> will undergo morph animations</p>\n"},"morphElementKey":{"desc":"<p>For the matched graphic elements before and after, use this configuration to match the graphic element; if not declared, we will read the <code class=\"codespan\">key</code> configuration by default to match the graphic element for morph animations;\nSupports one-to-one, one-to-many, and many-to-one graphic morph animations by default</p>\n"}}