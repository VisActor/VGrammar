{"id":{"desc":"<p>The id of the pickion, which can be used for reference in other elements</p>\n"},"name":{"desc":"<p>The name of the pickion, which can be used for querying the pickion</p>\n"},"dependency":{"desc":"<p>Type that can be passed: (IGrammarBase[] | IGrammarBase | string[] | string)</p>\n<p>The other elements that the current pickion depends on, can be the id of the element, or the element itself</p>\n"},"type":{"desc":"<p>Sets the type of projection transformation;\nSupported types are:</p>\n<ul>\n<li><code class=\"codespan\">&#39;albers&#39;</code></li>\n<li><code class=\"codespan\">&#39;albersusa&#39;</code></li>\n<li><code class=\"codespan\">&#39;azimuthalequalarea&#39;</code></li>\n<li><code class=\"codespan\">&#39;azimuthalequidistant&#39;</code></li>\n<li><code class=\"codespan\">&#39;conicconformal&#39;</code></li>\n<li><code class=\"codespan\">&#39;conicequalarea&#39;</code></li>\n<li><code class=\"codespan\">&#39;conicequidistant&#39;</code></li>\n<li><code class=\"codespan\">&#39;equalEarth&#39;</code></li>\n<li><code class=\"codespan\">&#39;equirectangular&#39;</code></li>\n<li><code class=\"codespan\">&#39;gnomonic&#39;</code></li>\n<li><code class=\"codespan\">&#39;identity&#39;</code></li>\n<li><code class=\"codespan\">&#39;mercator&#39;</code></li>\n<li><code class=\"codespan\">&#39;naturalEarth1&#39;</code></li>\n<li><code class=\"codespan\">&#39;orthographic&#39;</code></li>\n<li><code class=\"codespan\">&#39;stereographic&#39;</code></li>\n<li><code class=\"codespan\">&#39;transversemercator&#39;</code></li>\n</ul>\n"},"pointRadius":{"desc":"<p>If <code class=\"codespan\">pointRadius</code> is specified, set the radius between <code class=\"codespan\">Point</code> and <code class=\"codespan\">MultiPoint</code> to the specified value.\nIf <code class=\"codespan\">pointRadius</code> is not specified, the default value returned is 4.5.\nGenerally, <code class=\"codespan\">pointRadius</code> is a numeric constant, but it can also be specified as a custom function.\nFor example, if your GeoJSON data has other attributes, you can access these attributes within the radius function to change the size of the points.</p>\n<p>Supports two types of setting methods</p>\n<ul>\n<li><code class=\"codespan\">number</code> type</li>\n<li><code class=\"codespan\">function</code> type, calculating the result through a custom function, with the ts type definition of the function being:</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; number;\n</code></pre><p>where <code class=\"codespan\">parameters</code> are the other syntax elements that this <code class=\"codespan\">projection</code> syntax element depends on.</p>\n"},"extent":{"desc":"<p>Sets the viewPort of the projection to the specified pixel boundary.\nThe type of <code class=\"codespan\">extent</code> is: <code class=\"codespan\">[[x0, y0], [x1, y1]]</code>, where x0 is the left side of the viewport, y0 is the top, x1 is the right side, and y1 is the bottom, all in <code class=\"codespan\">px</code> units.\nIf the range is null, no viewport clipping is performed.\nIf not specified, the current viewport clipping range is returned, which defaults to null.\nViewport clipping is independent of the small circle clipping performed by <code class=\"codespan\">projection.clipAngle</code>.</p>\n<p>Supports two types of setting methods</p>\n<ul>\n<li><code class=\"codespan\">[[number, number], [number, number]]</code> type</li>\n<li><code class=\"codespan\">function</code> type, calculating the result through a custom function, with the ts type definition of the function being:</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; [[number, number], [number, number]];\n</code></pre><p>where <code class=\"codespan\">parameters</code> are the other syntax elements that this <code class=\"codespan\">projection</code> syntax element depends on.</p>\n"},"fit":{"desc":"<p>Whether to adapt the adjustment strategy automatically, if the value is <code class=\"codespan\">true</code>, adapt the adjustment strategy automatically. Supports two types of adaptive strategies:</p>\n<ul>\n<li><code class=\"codespan\">fitExtent</code></li>\n</ul>\n<p>Read the <code class=\"codespan\">extent</code> configuration and then call the <code class=\"codespan\">fitExtent</code> method provided by <code class=\"codespan\">d3</code>; set the scale and translate of the projection to fit the center of the specified GeoJSON object within the given range.</p>\n<p>For example, to scale and translate the New Jersey State Plane projection to fit the center of a GeoJSON object <code class=\"codespan\">nj</code> within a 960Ã—500 bounding box with 20-pixel padding:</p>\n<pre><code class=\"lang-js\">const projection = d3\n  .geoTransverseMercator()\n  .rotate([74 + 30 / 60, -38 - 50 / 60])\n  .fitExtent(\n    [\n      [20, 20],\n      [940, 480]\n    ],\n    nj\n  );\n</code></pre>\n<p>When determining the new scale and translation, any clipping range is ignored. The precision for calculating the bounding box of the given object is calculated when the valid scale is 150.</p>\n<ul>\n<li><code class=\"codespan\">fitSize</code></li>\n</ul>\n<p>Read the <code class=\"codespan\">size</code> configuration, then call the <code class=\"codespan\">fitSize</code> method provided by <code class=\"codespan\">d3</code>;\nSets the <code class=\"codespan\">fitExtent</code> shorthand, equivalent to <code class=\"codespan\">fitExtent([[0, 0], [width, height]], ...)</code></p>\n<p>Supports two types of setting methods</p>\n<ul>\n<li><code class=\"codespan\">boolean</code> type</li>\n<li><code class=\"codespan\">function</code> type, calculating the result through a custom function, with the ts type definition of the function being:</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; boolean;\n</code></pre><p>where <code class=\"codespan\">parameters</code> are the other syntax elements that this <code class=\"codespan\">projection</code> syntax element depends on.</p>\n"},"size":{"desc":"<p>Used in conjunction with the <code class=\"codespan\">fit</code> attribute to set <code class=\"codespan\">fitSize</code>; the value type is a two-dimensional array, i.e., <code class=\"codespan\">[width, height]</code>, in <code class=\"codespan\">px</code> units;</p>\n<p>Supports two types of setting methods</p>\n<ul>\n<li><code class=\"codespan\">[number, number]</code> type</li>\n<li><code class=\"codespan\">function</code> type, calculating the result through a custom function, with the ts type definition of the function being:</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; [number, number];\n</code></pre><p>where <code class=\"codespan\">parameters</code> are the other syntax elements that this <code class=\"codespan\">projection</code> syntax element depends on.</p>\n"},"clipAngle":{"desc":"<p>Sets the clipping circle radius of the projection to the specified angle (in degrees).\nIf the value is <code class=\"codespan\">null</code>, switch to meridian clipping instead of small circle clipping; small circle clipping is independent of the viewport clipping performed by <code class=\"codespan\">projection.clipExtent</code>.</p>\n<p>Supports two types of setting methods</p>\n<ul>\n<li><code class=\"codespan\">number</code> type</li>\n<li><code class=\"codespan\">function</code> type, calculating the result through a custom function, with the ts type definition of the function being:</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; number;\n</code></pre><p>where <code class=\"codespan\">parameters</code> are the other syntax elements that this <code class=\"codespan\">projection</code> syntax element depends on.</p>\n"},"clipExtent":{"desc":"<p>Sets the <strong>viewport clipping range</strong> of the projection to the specified pixel boundary;\nThe type of <code class=\"codespan\">clipExtent</code> is: <code class=\"codespan\">[[x0, y0], [x1, y1]]</code>, where x0 is the left side of the viewport, y0 is the top, x1 is the right side, and y1 is the bottom, all in <code class=\"codespan\">px</code> units.\nIf the range is null, no viewport clipping is performed.\nIf not specified, the current viewport clipping range is returned, which defaults to null.\nViewport clipping is independent of the small circle clipping performed by <code class=\"codespan\">projection.clipAngle</code>.</p>\n<p>Supports two types of setting methods</p>\n<ul>\n<li><code class=\"codespan\">[[number, number], [number, number]]</code> type</li>\n<li><code class=\"codespan\">function</code> type, calculating the result through a custom function, with the ts type definition of the function being:</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; [[number, number], [number, number]];\n</code></pre><p>where <code class=\"codespan\">parameters</code> are the other syntax elements that this <code class=\"codespan\">projection</code> syntax element depends on.</p>\n"},"scale":{"desc":"<p>Sets the scale of the projection, setting the projection scale factor to the specified value; different projection types have different default scale values.\nScales are linearly related to the distance between projection points; however, the absolute scale factor between different projections is not equivalent.</p>\n<p>Supports two types of setting methods</p>\n<ul>\n<li><code class=\"codespan\">number</code> type</li>\n<li><code class=\"codespan\">function</code> type, calculating the result through a custom function, with the ts type definition of the function being:</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; number;\n</code></pre><p>where <code class=\"codespan\">parameters</code> are the other syntax elements that this <code class=\"codespan\">projection</code> syntax element depends on.</p>\n"},"translate":{"desc":"<p>Set the translation of the projection, unit is <code class=\"codespan\">px</code>, type is <code class=\"codespan\">[number, number]</code>, default value is <code class=\"codespan\">[480, 250]</code>;\nThis configuration determines the center of the projection. The default projection center is calculated based on an area of 960*500, and the longitude and latitude is (0, 0).</p>\n<p>Supports two types of setting methods</p>\n<ul>\n<li><code class=\"codespan\">[number, number]</code> type</li>\n<li><code class=\"codespan\">function</code> type, calculating the result through a custom function, with the ts type definition of the function being:</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; [number, number];\n</code></pre><p>where <code class=\"codespan\">parameters</code> are the other syntax elements that this <code class=\"codespan\">projection</code> syntax element depends on.</p>\n"},"center":{"desc":"<p>Set the center of the projection, unit is <code class=\"codespan\">deg</code>, type is <code class=\"codespan\">[number, number]</code>, which separately set the corresponding values of longitude and latitude. The default value is <code class=\"codespan\">[0, 0]</code>.</p>\n<p>Supports two types of setting methods</p>\n<ul>\n<li><code class=\"codespan\">[number, number]</code> type</li>\n<li><code class=\"codespan\">function</code> type, calculating the result through a custom function, with the ts type definition of the function being:</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; [number, number];\n</code></pre><p>where <code class=\"codespan\">parameters</code> are the other syntax elements that this <code class=\"codespan\">projection</code> syntax element depends on.</p>\n"},"rotate":{"desc":"<p>Set the spherical rotation angle of the projection, unit is <code class=\"codespan\">deg</code>, type is <code class=\"codespan\">[number, number]</code> or <code class=\"codespan\">[number, number, number]</code>.\nIf the value is a two-dimensional array, it means the value of <code class=\"codespan\">rotate[2]</code> is <code class=\"codespan\">0</code>, with the default being [0, 0, 0].</p>\n<p>Supports two types of setting methods</p>\n<ul>\n<li><code class=\"codespan\">[number, number] | [number, number, number]</code> type</li>\n<li><code class=\"codespan\">function</code> type, calculating the result through a custom function, with the ts type definition of the function being:</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; [number, number] | [number, number, number];\n</code></pre><p>where <code class=\"codespan\">parameters</code> are the other syntax elements that this <code class=\"codespan\">projection</code> syntax element depends on.</p>\n"},"parallels":{"desc":"<p>Two standard latitude lines defining the map layout in a conic projection with type <code class=\"codespan\">[number, number]</code>.</p>\n<p>Supports two types of setting methods</p>\n<ul>\n<li><code class=\"codespan\">[number, number]</code> type</li>\n<li><code class=\"codespan\">function</code> type, calculating the result through a custom function, with the ts type definition of the function being:</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; [number, number];\n</code></pre><p>where <code class=\"codespan\">parameters</code> are the other syntax elements that this <code class=\"codespan\">projection</code> syntax element depends on.</p>\n"},"precision":{"desc":"<p>Sets the adaptive resampling threshold of the projection to the specified pixel value; this value corresponds to the <strong>Douglas-Peucker</strong> distance; the default value is <code class=\"codespan\">Math.sqrt(0.5)</code>.</p>\n<p>Supports two types of setting methods</p>\n<ul>\n<li><code class=\"codespan\">number</code> type</li>\n<li><code class=\"codespan\">function</code> type, calculating the result through a custom function, with the ts type definition of the function being:</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; number;\n</code></pre><p>where <code class=\"codespan\">parameters</code> are the other syntax elements that this <code class=\"codespan\">projection</code> syntax element depends on.</p>\n"},"reflectX":{"desc":"<p>Sets whether the x dimension is reflected (inverted) in the output; useful in special scenarios where you need to view the sky from below or in some astronomical data scenarios; when the north direction points upward, the right ascension (east direction) will point to the left.</p>\n<p>Supports two types of setting methods</p>\n<ul>\n<li><code class=\"codespan\">boolean</code> type</li>\n<li><code class=\"codespan\">function</code> type, calculating the result through a custom function, with the ts type definition of the function being:</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; boolean;\n</code></pre><p>where <code class=\"codespan\">parameters</code> are the other syntax elements that this <code class=\"codespan\">projection</code> syntax element depends on.</p>\n"},"reflectY":{"desc":"<p>Sets whether the y dimension is reflected (inverted) in the output;</p>\n<p>Supports two types of setting methods</p>\n<ul>\n<li><code class=\"codespan\">boolean</code> type</li>\n<li><code class=\"codespan\">function</code> type, calculating the result through a custom function, with the ts type definition of the function being:</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; boolean;\n</code></pre><p>where <code class=\"codespan\">parameters</code> are the other syntax elements that this <code class=\"codespan\">projection</code> syntax element depends on.</p>\n"},"coefficient":{"desc":"<p>Applicable only to <code class=\"codespan\">type=&quot;hammer&quot;</code> type of <code class=\"codespan\">projection</code>;</p>\n<p>Supports two types of setting methods</p>\n<ul>\n<li><code class=\"codespan\">number</code> type</li>\n<li><code class=\"codespan\">function</code> type, calculating the result through a custom function, with the ts type definition of the function being:</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; number;\n</code></pre><p>where <code class=\"codespan\">parameters</code> are the other syntax elements that this <code class=\"codespan\">projection</code> syntax element depends on.</p>\n"},"distance":{"desc":"<p>Applicable only to <code class=\"codespan\">type=&quot;satellite&quot;</code> type of <code class=\"codespan\">projection</code>;</p>\n<p>The distance from the viewpoint to the center of the sphere / radius of the sphere, default is 2.0. For a given distance, the recommended maximum clipping angle is <code class=\"codespan\">acos(1 / distance)</code> converted to degrees.\nIf tilt is also applied, more conservative clipping may be needed. For precise clipping, you need to use the geographic projection pipeline under development;</p>\n<p>Supports two types of setting methods</p>\n<ul>\n<li><code class=\"codespan\">number</code> type</li>\n<li><code class=\"codespan\">function</code> type, calculating the result through a custom function, with the ts type definition of the function being:</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; number;\n</code></pre><p>where <code class=\"codespan\">parameters</code> are the other syntax elements that this <code class=\"codespan\">projection</code> syntax element depends on.</p>\n"},"fraction":{"desc":"<p>Applicable only to <code class=\"codespan\">type=&quot;bottomley&quot;</code> type of <code class=\"codespan\">projection</code>;</p>\n<p>Supports two types of setting methods</p>\n<ul>\n<li><code class=\"codespan\">number</code> type</li>\n<li><code class=\"codespan\">function</code> type, calculating the result through a custom function, with the ts type definition of the function being:</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; number;\n</code></pre><p>where <code class=\"codespan\">parameters</code> are the other syntax elements that this <code class=\"codespan\">projection</code> syntax element depends on.</p>\n"},"lobes":{"desc":"<p>Supported configuration only in the following types of projections:</p>\n<ul>\n<li><code class=\"codespan\">&#39;berghaus&#39;</code> sets the number of lobes in the projection result; the default value is 5</li>\n<li><code class=\"codespan\">&#39;gingery&#39;</code> sets the number of lobes in the projection result; the default value is 6</li>\n<li><code class=\"codespan\">&#39;healpix&#39;</code> sets the number of lobes in the projection result; the default value is 4</li>\n<li><code class=\"codespan\">&#39;interrupted&#39;</code> sets a new semi-lobe array</li>\n</ul>\n<p>Supports two types of setting methods</p>\n<ul>\n<li><code class=\"codespan\">number</code> type</li>\n<li><code class=\"codespan\">function</code> type, calculating the result through a custom function, with the ts type definition of the function being:</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; number;\n</code></pre><p>where <code class=\"codespan\">parameters</code> are the other syntax elements that this <code class=\"codespan\">projection</code> syntax element depends on.</p>\n"},"parallel":{"desc":"<p>Sets the latitude value; the projection types and default values that support this configuration are as follows:</p>\n<ul>\n<li><code class=\"codespan\">&#39;armadillo&#39;</code> default value is 20</li>\n<li><code class=\"codespan\">&#39;bonne&#39;</code> default value is 45</li>\n<li><code class=\"codespan\">&#39;craig&#39;</code> default value is 0</li>\n<li><code class=\"codespan\">&#39;cylindricalEqualArea&#39;</code> default value is 38.58</li>\n<li><code class=\"codespan\">&#39;cylindricalStereographic&#39;</code> default value is 0</li>\n<li><code class=\"codespan\">&#39;hammerRetroazimuthal&#39;</code> default value is 45</li>\n<li><code class=\"codespan\">&#39;loximuthal&#39;</code> default value is 40</li>\n<li><code class=\"codespan\">&#39;rectangularPolyconic&#39;</code> default value is 0</li>\n</ul>\n<p>Supports two types of setting methods</p>\n<ul>\n<li><code class=\"codespan\">number</code> type</li>\n<li><code class=\"codespan\">function</code> type, calculating the result through a custom function, with the ts type definition of the function being:</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; number;\n</code></pre><p>where <code class=\"codespan\">parameters</code> are the other syntax elements that this <code class=\"codespan\">projection</code> syntax element depends on.</p>\n"},"radius":{"desc":"<p>Sets the radius; the projection types and default values that support this configuration are as follows:</p>\n<ul>\n<li><code class=\"codespan\">&#39;gingery&#39;</code> default value is 30</li>\n<li><code class=\"codespan\">&#39;airy&#39;</code> default value is 90</li>\n</ul>\n<p>Supports two types of setting methods</p>\n<ul>\n<li><code class=\"codespan\">number</code> type</li>\n<li><code class=\"codespan\">function</code> type, calculating the result through a custom function, with the ts type definition of the function being:</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; number;\n</code></pre><p>where <code class=\"codespan\">parameters</code> are the other syntax elements that this <code class=\"codespan\">projection</code> syntax element depends on.</p>\n"},"ratio":{"desc":"<p>The projection types and default values that support this configuration are as follows:</p>\n<ul>\n<li><code class=\"codespan\">&#39;hill&#39;</code> default value is 1</li>\n<li><code class=\"codespan\">&#39;wagner&#39;</code> default value is 200</li>\n<li><code class=\"codespan\">&#39;hufnagel&#39;</code></li>\n</ul>\n<p>Supports two types of setting methods</p>\n<ul>\n<li><code class=\"codespan\">number</code> type</li>\n<li><code class=\"codespan\">function</code> type, calculating the result through a custom function, with the ts type definition of the function being:</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; number;\n</code></pre><p>where <code class=\"codespan\">parameters</code> are the other syntax elements that this <code class=\"codespan\">projection</code> syntax element depends on.</p>\n"},"spacing":{"desc":"<p>The projection types and default values that support this configuration are as follows:</p>\n<ul>\n<li><code class=\"codespan\">&#39;lagrange&#39;</code> default value is 0.5</li>\n</ul>\n<p>Supports two types of setting methods</p>\n<ul>\n<li><code class=\"codespan\">number</code> type</li>\n<li><code class=\"codespan\">function</code> type, calculating the result through a custom function, with the ts type definition of the function being:</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; number;\n</code></pre><p>where <code class=\"codespan\">parameters</code> are the other syntax elements that this <code class=\"codespan\">projection</code> syntax element depends on.</p>\n"},"tilt":{"desc":"<p>The projection types and default values that support this configuration are as follows:</p>\n<ul>\n<li><code class=\"codespan\">&#39;satellite&#39;</code> default value is 0</li>\n</ul>\n<p>Supports two types of setting methods</p>\n<ul>\n<li><code class=\"codespan\">number</code> type</li>\n<li><code class=\"codespan\">function</code> type, calculating the result through a custom function, with the ts type definition of the function being:</li>\n</ul>\n<pre><code>(projection: any, parameters: any) =&gt; number;\n</code></pre><p>where <code class=\"codespan\">parameters</code> are the other syntax elements that this <code class=\"codespan\">projection</code> syntax element depends on.</p>\n"}}