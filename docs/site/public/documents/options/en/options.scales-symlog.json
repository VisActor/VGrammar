{"type":{"desc":"<p>Set the scale type to <code class=\"codespan\">symlog</code></p>\n"},"constant":{"desc":"<p>When the data is less than 0, the return value of <code class=\"codespan\">scale()</code> is set to this value</p>\n<p>Supports two formats for settings</p>\n<ul>\n<li><code class=\"codespan\">number</code> type</li>\n<li><code class=\"codespan\">function</code> type, calculating the result through custom functions, and the ts type definition of the function is:</li>\n</ul>\n<pre><code>(scale: IBaseScale, parameters: any) =&gt; number;\n</code></pre><p>Where <code class=\"codespan\">parameters</code> are the other syntax elements that the scale syntax element depends on.</p>\n<!-- Syntax Element: data, DataSpec -->\n"},"domain":{"desc":"<p>Set the domain of the <code class=\"codespan\">scale</code>, supporting two formats of settings:</p>\n<ul>\n<li>Object type, with the specific type definition as follows:</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  data: string | IData;\n  field: string | string[];\n  sort?: (datumA: any, datumB: any) =&gt; number\n}\n</code></pre>\n<ul>\n<li>Custom function type, with the specific type definition as follows:</li>\n</ul>\n<pre><code class=\"lang-ts\">(scale: IBaseScale, parameters: any) =&gt; any;\n</code></pre>\n<!-- Syntax elements data, DataSpec -->\n"},"range":{"desc":"<p>Set the <code class=\"codespan\">scale</code> value domain, which can be coordinates, colors, or other content</p>\n<p>There are three supported formats:</p>\n<ul>\n<li>Object type, setting the <code class=\"codespan\">range</code> value by parsing specific data, with the specific type defined as follows:</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  data: string | IData;\n  field: string | string[];\n  sort?: (datumA: any, datumB: any) =&gt; number\n}\n</code></pre>\n<ul>\n<li>Custom function type, with the specific type defined as follows:</li>\n</ul>\n<pre><code class=\"lang-ts\">(scale: IBaseScale, parameters: any) =&gt; any;\n</code></pre>\n<ul>\n<li>Object type, setting the <code class=\"codespan\">range</code> value by binding with an axis of the coordinate system. In this case, the <code class=\"codespan\">range</code> corresponds to the coordinate range of a certain axis of the coordinate system. The specific configuration is as follows:</li>\n</ul>\n<pre><code class=\"lang-ts\">{\n  coordinate: string;\n  dimension: &#39;x&#39; | &#39;y&#39;;\n  isSubshaft?: boolean;\n  reversed?: boolean\n}\n</code></pre>\n<!-- Syntax element data, DataSpec -->\n"},"nice":{"desc":"<p>For scale, calculate the optimized ticks and update the <code class=\"codespan\">domain</code> based on the tick values. It supports multiple types of values:</p>\n<ul>\n<li><code class=\"codespan\">boolean</code>: <code class=\"codespan\">true</code> means automatic calculation, <code class=\"codespan\">false</code> means no optimization</li>\n<li><code class=\"codespan\">number</code>: The number of optimized ticks</li>\n</ul>\n<!-- Syntax elements data, DataSpec -->\n"},"niceMin":{"desc":"<p>Optimize only the minimum value of the <code class=\"codespan\">domain</code>, keep the maximum value unchanged, and support multiple values:</p>\n<ul>\n<li><code class=\"codespan\">boolean</code>: <code class=\"codespan\">true</code> means automatic calculation, <code class=\"codespan\">false</code> means no optimization</li>\n<li><code class=\"codespan\">number</code>: indicates the number of ticks after optimization</li>\n</ul>\n"},"niceMax":{"desc":"<p>Optimize only the maximum value of the <code class=\"codespan\">domain</code>, keep the minimum value unchanged, and support multiple values:</p>\n<ul>\n<li><code class=\"codespan\">boolean</code>: <code class=\"codespan\">true</code> means automatic calculation, <code class=\"codespan\">false</code> means no optimization</li>\n<li><code class=\"codespan\">number</code>: indicates the number of ticks after optimization</li>\n</ul>\n<!-- Syntax elements data, DataSpec -->\n"},"zero":{"desc":"<p>For scale, calculate an original value range based on the data, which is the <code class=\"codespan\">domain</code>, and then update the value of <code class=\"codespan\">domain</code> in the following two cases:</p>\n<ul>\n<li>If the minimum value is greater than <code class=\"codespan\">0</code>, set the minimum value of <code class=\"codespan\">domain</code> to <code class=\"codespan\">0</code></li>\n<li>If the maximum value is less than <code class=\"codespan\">0</code>, set the maximum value of <code class=\"codespan\">domain</code> to <code class=\"codespan\">0</code></li>\n</ul>\n<p>When the user is very concerned about the base value of <code class=\"codespan\">0</code>, it can be set to <code class=\"codespan\">true</code>, with the default value being <code class=\"codespan\">false</code>.</p>\n"},"min":{"desc":"<p>Calculate an original value range based on the data, which is the <code class=\"codespan\">domain</code>. If the minimum value is greater than the user-configured <code class=\"codespan\">min</code>, set the minimum value of <code class=\"codespan\">domain</code> to <code class=\"codespan\">min</code>.</p>\n"},"max":{"desc":"<p>Calculate an original value range based on the data, which is the <code class=\"codespan\">domain</code>. If the maximum value is greater than the user-configured <code class=\"codespan\">max</code>, set the maximum value of <code class=\"codespan\">domain</code> to <code class=\"codespan\">max</code>.</p>\n"},"roundRange":{"desc":"<p>Whether to round the value domain automatically</p>\n"},"config":{"desc":"<p>Configuration options for <code class=\"codespan\">scale</code></p>\n"},"config.clamp":{"desc":"<p>Value domain of clamp</p>\n"},"config.interpolate":{"desc":"<p>Interpolation function</p>\n"}}